issues:
  issue0:
    Title: 0 - Definir projeto
    Body: |

     Descrever aqui seu projeto:

     - Se o projeto será de um controle para jogo ou de uma aplicação
     - O que vai controlar/ qual jogo
     - Breve resumo (o que vocês colocaram no mural)

  issue1:
    Title: 1 - Executar demo
    Body: |

      Seguir os passos do exemplo HC-05:

      https://github.com/Insper/SAME70-examples/tree/master/Demos/HC05-Controle-Exemplo

      Ao concluir vocês devem ter:

      - Conectado o HC-05 a placa
      - Executado o firmware
      - Modificado o nome do bluetooth
      - Conectado o bluetooth no windows
      - Executado o exemplo python


  issue2:
    Title: 2 - Adicionar mais um botão
    Body: |

     Adicione mais um botão ao sistema, note que isso envolve modificar
     o firmware para ler o botão e enviar via comunicação UART (Bluetooth)
     o novo dado e também o probrama python para fazer a leitura deste novo
     botão.

     O protocolo atual utilizado na comunicação entre o uC e o python é o seguinte:

     ```
     Protocolo
                     Fim de pacote
                    ^
                    |
      | Status |   'X'   |
          |
          v
          - '0': Não apertado
          - '1': Apertado
     ```

     O protocolo envia caracteres ASCII onde cada campo é formado por 8 bits:

     - `status`: 8 bits, indica o valor atual do botão
     - `EOP`: 8 bits, é o fim de pacote, atualmente formado pelo caractere **X**.

     **Já pense em modificar o protocolo pensando no uso final, se não você terá
     que refazer essa etapa mais para frente.**

     O envio deste protocolo se encontra no while da `task_bluetooth`:

     ```c
     // envia status botão
     while(!usart_is_tx_ready(USART_COM)) { TaskDelay(10 / portTICK_PERIOD_MS); }
     usart_write(USART_COM, button1);

     // envia fim de pacote
     while(!usart_is_tx_ready(USART_COM)) { vTaskDelay(10 / portTICK_PERIOD_MS); }
     usart_write(USART_COM, eof);
     ```

     Existem várias maneiras de vocês modificarem este protocolo para enviar mais um
     botão, a dupla deve decidir como fazer.

     **Lembrem de adequar o python para ler o novo protocolo**

  issue3:
    Title: 3 - Enviar status somente quando o seu valor muda
    Body: |

     A implementação atual sempre envia o valor do botão, mesmo se ele continua
     o mesmo. E isso não é bom, pois sobrecarrega a comunicação e adiciona um delay
     no envio dos dados que importam.

     Modifique o firmware para apenas enviar pelo protocolo quando o botão muda de valor
     (apertado --> aberto, aberto --> apertado).

     É recomendando que implemente interrupção (e semáforo) para implementar isso.

  issue4:
    Title: 4 - Formatar o código
    Body: |

     Agora vamos organizar e formatar o código. Sugerimos o seguinte:

     - `send_package(char id, char status)`: Função que faz envio de um dado no protocolo.
     - usar semáforo entre IRQ --> `task_bluetooth`
     - usar `#defines` para organizar o código

  issue5:
    Title: 5 - Adicionar leitura analógica
    Body: |

      Adicione leitura analógica no projeto (use como referência o Lab 6). Lembre
      de modificar o protocolo e o programa python para realizar a leitura e executar
      o comando.

  issue6:
    Title: 6 - Recebendo dados
    Body: |

      Agora você deve conseguir não só enviar dados para o pc, mas também
      receber dados do python. Você pode usar o mesmo protocolo que definiu
      anteriormente para isso, porém agora deve fazer a leitura dos dados
      que estão chegando na UART (e fazer envio pelo python também).

      Para saber se tem um dado disponível para leitura na UART, utilize
      a função `usart_serial_getchar`. Para enviar no python basta usar a função
      `self.ser.write()`.

  issue6:
    Title: 6 - Conceito C
    Body: |

     Agora que já tem tudo estruturado basta implementar os demais botões e suas
     funcionalidades.
