
RTOS-WIFI-SDCARD-EXT1.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         000057f8  00400000  00400000  00010000  2**6
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .ARM.exidx    00000008  004057f8  004057f8  000157f8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  2 .relocate     000009b8  20400000  00405800  00020000  2**3
                  CONTENTS, ALLOC, LOAD, DATA
  3 .bss          0000ba7c  204009b8  004061b8  000209b8  2**2
                  ALLOC
  4 .stack        00002004  2040c434  00411c34  000209b8  2**0
                  ALLOC
  5 .heap         00000200  2040e438  00413c38  000209b8  2**0
                  ALLOC
  6 .ARM.attributes 0000002e  00000000  00000000  000209b8  2**0
                  CONTENTS, READONLY
  7 .comment      00000059  00000000  00000000  000209e6  2**0
                  CONTENTS, READONLY
  8 .debug_info   0001c700  00000000  00000000  00020a3f  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_abbrev 00003e7e  00000000  00000000  0003d13f  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    00008990  00000000  00000000  00040fbd  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_aranges 00000e70  00000000  00000000  0004994d  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00001010  00000000  00000000  0004a7bd  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_macro  00009043  00000000  00000000  0004b7cd  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_line   000108a5  00000000  00000000  00054810  2**0
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_str    0009fd74  00000000  00000000  000650b5  2**0
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_frame  00002e1c  00000000  00000000  00104e2c  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00400000 <exception_table>:
  400000:	38 e4 40 20 c9 20 40 00 c7 20 40 00 c7 20 40 00     8.@ . @.. @.. @.
  400010:	c7 20 40 00 c7 20 40 00 c7 20 40 00 00 00 00 00     . @.. @.. @.....
	...
  40002c:	ad 02 40 00 c7 20 40 00 00 00 00 00 09 03 40 00     ..@.. @.......@.
  40003c:	71 03 40 00 c7 20 40 00 c7 20 40 00 c7 20 40 00     q.@.. @.. @.. @.
  40004c:	c7 20 40 00 c7 20 40 00 c7 20 40 00 c7 20 40 00     . @.. @.. @.. @.
  40005c:	c7 20 40 00 c7 20 40 00 00 00 00 00 ad 1d 40 00     . @.. @.......@.
  40006c:	c1 1d 40 00 d5 1d 40 00 c7 20 40 00 95 25 40 00     ..@...@.. @..%@.
  40007c:	c7 20 40 00 e9 1d 40 00 fd 1d 40 00 c7 20 40 00     . @...@...@.. @.
  40008c:	c7 20 40 00 c7 20 40 00 c7 20 40 00 c7 20 40 00     . @.. @.. @.. @.
  40009c:	c7 20 40 00 c7 20 40 00 c7 20 40 00 c7 20 40 00     . @.. @.. @.. @.
  4000ac:	c7 20 40 00 c7 20 40 00 c7 20 40 00 c7 20 40 00     . @.. @.. @.. @.
  4000bc:	c7 20 40 00 c7 20 40 00 c7 20 40 00 c7 20 40 00     . @.. @.. @.. @.
  4000cc:	c7 20 40 00 00 00 00 00 c7 20 40 00 00 00 00 00     . @...... @.....
  4000dc:	c7 20 40 00 c7 20 40 00 c7 20 40 00 c7 20 40 00     . @.. @.. @.. @.
  4000ec:	c7 20 40 00 c7 20 40 00 c7 20 40 00 c7 20 40 00     . @.. @.. @.. @.
  4000fc:	c7 20 40 00 c7 20 40 00 c7 20 40 00 c7 20 40 00     . @.. @.. @.. @.
  40010c:	c7 20 40 00 c7 20 40 00 00 00 00 00 00 00 00 00     . @.. @.........
  40011c:	00 00 00 00 c7 20 40 00 c7 20 40 00 c7 20 40 00     ..... @.. @.. @.
  40012c:	c7 20 40 00 c7 20 40 00 00 00 00 00 c7 20 40 00     . @.. @...... @.
  40013c:	c7 20 40 00                                         . @.

00400140 <__do_global_dtors_aux>:
  400140:	b510      	push	{r4, lr}
  400142:	4c05      	ldr	r4, [pc, #20]	; (400158 <__do_global_dtors_aux+0x18>)
  400144:	7823      	ldrb	r3, [r4, #0]
  400146:	b933      	cbnz	r3, 400156 <__do_global_dtors_aux+0x16>
  400148:	4b04      	ldr	r3, [pc, #16]	; (40015c <__do_global_dtors_aux+0x1c>)
  40014a:	b113      	cbz	r3, 400152 <__do_global_dtors_aux+0x12>
  40014c:	4804      	ldr	r0, [pc, #16]	; (400160 <__do_global_dtors_aux+0x20>)
  40014e:	f3af 8000 	nop.w
  400152:	2301      	movs	r3, #1
  400154:	7023      	strb	r3, [r4, #0]
  400156:	bd10      	pop	{r4, pc}
  400158:	204009b8 	.word	0x204009b8
  40015c:	00000000 	.word	0x00000000
  400160:	00405800 	.word	0x00405800

00400164 <frame_dummy>:
  400164:	4b0c      	ldr	r3, [pc, #48]	; (400198 <frame_dummy+0x34>)
  400166:	b143      	cbz	r3, 40017a <frame_dummy+0x16>
  400168:	480c      	ldr	r0, [pc, #48]	; (40019c <frame_dummy+0x38>)
  40016a:	490d      	ldr	r1, [pc, #52]	; (4001a0 <frame_dummy+0x3c>)
  40016c:	b510      	push	{r4, lr}
  40016e:	f3af 8000 	nop.w
  400172:	480c      	ldr	r0, [pc, #48]	; (4001a4 <frame_dummy+0x40>)
  400174:	6803      	ldr	r3, [r0, #0]
  400176:	b923      	cbnz	r3, 400182 <frame_dummy+0x1e>
  400178:	bd10      	pop	{r4, pc}
  40017a:	480a      	ldr	r0, [pc, #40]	; (4001a4 <frame_dummy+0x40>)
  40017c:	6803      	ldr	r3, [r0, #0]
  40017e:	b933      	cbnz	r3, 40018e <frame_dummy+0x2a>
  400180:	4770      	bx	lr
  400182:	4b09      	ldr	r3, [pc, #36]	; (4001a8 <frame_dummy+0x44>)
  400184:	2b00      	cmp	r3, #0
  400186:	d0f7      	beq.n	400178 <frame_dummy+0x14>
  400188:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  40018c:	4718      	bx	r3
  40018e:	4b06      	ldr	r3, [pc, #24]	; (4001a8 <frame_dummy+0x44>)
  400190:	2b00      	cmp	r3, #0
  400192:	d0f5      	beq.n	400180 <frame_dummy+0x1c>
  400194:	4718      	bx	r3
  400196:	bf00      	nop
  400198:	00000000 	.word	0x00000000
  40019c:	00405800 	.word	0x00405800
  4001a0:	204009bc 	.word	0x204009bc
  4001a4:	00405800 	.word	0x00405800
  4001a8:	00000000 	.word	0x00000000

004001ac <vListInitialise>:
void vListInitialise( List_t * const pxList )
{
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
  4001ac:	f100 0308 	add.w	r3, r0, #8
  4001b0:	6043      	str	r3, [r0, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
  4001b2:	f04f 32ff 	mov.w	r2, #4294967295
  4001b6:	6082      	str	r2, [r0, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
  4001b8:	60c3      	str	r3, [r0, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
  4001ba:	6103      	str	r3, [r0, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
  4001bc:	2300      	movs	r3, #0
  4001be:	6003      	str	r3, [r0, #0]
  4001c0:	4770      	bx	lr

004001c2 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pvContainer = NULL;
  4001c2:	2300      	movs	r3, #0
  4001c4:	6103      	str	r3, [r0, #16]
  4001c6:	4770      	bx	lr

004001c8 <vListInsertEnd>:
}
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
ListItem_t * const pxIndex = pxList->pxIndex;
  4001c8:	6843      	ldr	r3, [r0, #4]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
  4001ca:	604b      	str	r3, [r1, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
  4001cc:	689a      	ldr	r2, [r3, #8]
  4001ce:	608a      	str	r2, [r1, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
  4001d0:	689a      	ldr	r2, [r3, #8]
  4001d2:	6051      	str	r1, [r2, #4]
	pxIndex->pxPrevious = pxNewListItem;
  4001d4:	6099      	str	r1, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pvContainer = ( void * ) pxList;
  4001d6:	6108      	str	r0, [r1, #16]

	( pxList->uxNumberOfItems )++;
  4001d8:	6803      	ldr	r3, [r0, #0]
  4001da:	3301      	adds	r3, #1
  4001dc:	6003      	str	r3, [r0, #0]
  4001de:	4770      	bx	lr

004001e0 <vListInsert>:
}
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
  4001e0:	b430      	push	{r4, r5}
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
  4001e2:	680d      	ldr	r5, [r1, #0]
	new list item should be placed after it.  This ensures that TCB's which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
  4001e4:	f1b5 3fff 	cmp.w	r5, #4294967295
  4001e8:	d002      	beq.n	4001f0 <vListInsert+0x10>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
  4001ea:	f100 0208 	add.w	r2, r0, #8
  4001ee:	e002      	b.n	4001f6 <vListInsert+0x16>
		pxIterator = pxList->xListEnd.pxPrevious;
  4001f0:	6902      	ldr	r2, [r0, #16]
  4001f2:	e004      	b.n	4001fe <vListInsert+0x1e>
		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
  4001f4:	461a      	mov	r2, r3
  4001f6:	6853      	ldr	r3, [r2, #4]
  4001f8:	681c      	ldr	r4, [r3, #0]
  4001fa:	42a5      	cmp	r5, r4
  4001fc:	d2fa      	bcs.n	4001f4 <vListInsert+0x14>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
  4001fe:	6853      	ldr	r3, [r2, #4]
  400200:	604b      	str	r3, [r1, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
  400202:	6099      	str	r1, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
  400204:	608a      	str	r2, [r1, #8]
	pxIterator->pxNext = pxNewListItem;
  400206:	6051      	str	r1, [r2, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pvContainer = ( void * ) pxList;
  400208:	6108      	str	r0, [r1, #16]

	( pxList->uxNumberOfItems )++;
  40020a:	6803      	ldr	r3, [r0, #0]
  40020c:	3301      	adds	r3, #1
  40020e:	6003      	str	r3, [r0, #0]
}
  400210:	bc30      	pop	{r4, r5}
  400212:	4770      	bx	lr

00400214 <uxListRemove>:

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = ( List_t * ) pxItemToRemove->pvContainer;
  400214:	6903      	ldr	r3, [r0, #16]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
  400216:	6842      	ldr	r2, [r0, #4]
  400218:	6881      	ldr	r1, [r0, #8]
  40021a:	6091      	str	r1, [r2, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
  40021c:	6882      	ldr	r2, [r0, #8]
  40021e:	6841      	ldr	r1, [r0, #4]
  400220:	6051      	str	r1, [r2, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
  400222:	685a      	ldr	r2, [r3, #4]
  400224:	4290      	cmp	r0, r2
  400226:	d005      	beq.n	400234 <uxListRemove+0x20>
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pvContainer = NULL;
  400228:	2200      	movs	r2, #0
  40022a:	6102      	str	r2, [r0, #16]
	( pxList->uxNumberOfItems )--;
  40022c:	6818      	ldr	r0, [r3, #0]
  40022e:	3801      	subs	r0, #1
  400230:	6018      	str	r0, [r3, #0]

	return pxList->uxNumberOfItems;
}
  400232:	4770      	bx	lr
		pxList->pxIndex = pxItemToRemove->pxPrevious;
  400234:	6882      	ldr	r2, [r0, #8]
  400236:	605a      	str	r2, [r3, #4]
  400238:	e7f6      	b.n	400228 <uxListRemove+0x14>

0040023a <prvTaskExitError>:

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
  40023a:	f04f 0380 	mov.w	r3, #128	; 0x80
  40023e:	b672      	cpsid	i
  400240:	f383 8811 	msr	BASEPRI, r3
  400244:	f3bf 8f6f 	isb	sy
  400248:	f3bf 8f4f 	dsb	sy
  40024c:	b662      	cpsie	i
  40024e:	e7fe      	b.n	40024e <prvTaskExitError+0x14>

00400250 <prvPortStartFirstTask>:
}
/*-----------------------------------------------------------*/

static void prvPortStartFirstTask( void )
{
	__asm volatile(
  400250:	4806      	ldr	r0, [pc, #24]	; (40026c <prvPortStartFirstTask+0x1c>)
  400252:	6800      	ldr	r0, [r0, #0]
  400254:	6800      	ldr	r0, [r0, #0]
  400256:	f380 8808 	msr	MSP, r0
  40025a:	b662      	cpsie	i
  40025c:	b661      	cpsie	f
  40025e:	f3bf 8f4f 	dsb	sy
  400262:	f3bf 8f6f 	isb	sy
  400266:	df00      	svc	0
  400268:	bf00      	nop
  40026a:	0000      	.short	0x0000
  40026c:	e000ed08 	.word	0xe000ed08

00400270 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
  400270:	f8df 000c 	ldr.w	r0, [pc, #12]	; 400280 <vPortEnableVFP+0x10>
  400274:	6801      	ldr	r1, [r0, #0]
  400276:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
  40027a:	6001      	str	r1, [r0, #0]
  40027c:	4770      	bx	lr
  40027e:	0000      	.short	0x0000
  400280:	e000ed88 	.word	0xe000ed88

00400284 <pxPortInitialiseStack>:
	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
  400284:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
  400288:	f840 3c04 	str.w	r3, [r0, #-4]
	*pxTopOfStack = ( StackType_t ) pxCode;	/* PC */
  40028c:	f840 1c08 	str.w	r1, [r0, #-8]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
  400290:	4b05      	ldr	r3, [pc, #20]	; (4002a8 <pxPortInitialiseStack+0x24>)
  400292:	f840 3c0c 	str.w	r3, [r0, #-12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
  400296:	f840 2c20 	str.w	r2, [r0, #-32]
	*pxTopOfStack = portINITIAL_EXEC_RETURN;
  40029a:	f06f 0302 	mvn.w	r3, #2
  40029e:	f840 3c24 	str.w	r3, [r0, #-36]
}
  4002a2:	3844      	subs	r0, #68	; 0x44
  4002a4:	4770      	bx	lr
  4002a6:	bf00      	nop
  4002a8:	0040023b 	.word	0x0040023b

004002ac <SVC_Handler>:
	__asm volatile (
  4002ac:	4b06      	ldr	r3, [pc, #24]	; (4002c8 <pxCurrentTCBConst2>)
  4002ae:	6819      	ldr	r1, [r3, #0]
  4002b0:	6808      	ldr	r0, [r1, #0]
  4002b2:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  4002b6:	f380 8809 	msr	PSP, r0
  4002ba:	f3bf 8f6f 	isb	sy
  4002be:	f04f 0000 	mov.w	r0, #0
  4002c2:	f380 8811 	msr	BASEPRI, r0
  4002c6:	4770      	bx	lr

004002c8 <pxCurrentTCBConst2>:
  4002c8:	2040c1dc 	.word	0x2040c1dc
  4002cc:	4770      	bx	lr
  4002ce:	bf00      	nop

004002d0 <vPortEnterCritical>:
  4002d0:	f04f 0380 	mov.w	r3, #128	; 0x80
  4002d4:	b672      	cpsid	i
  4002d6:	f383 8811 	msr	BASEPRI, r3
  4002da:	f3bf 8f6f 	isb	sy
  4002de:	f3bf 8f4f 	dsb	sy
  4002e2:	b662      	cpsie	i
	uxCriticalNesting++;
  4002e4:	4a02      	ldr	r2, [pc, #8]	; (4002f0 <vPortEnterCritical+0x20>)
  4002e6:	6813      	ldr	r3, [r2, #0]
  4002e8:	3301      	adds	r3, #1
  4002ea:	6013      	str	r3, [r2, #0]
  4002ec:	4770      	bx	lr
  4002ee:	bf00      	nop
  4002f0:	20400000 	.word	0x20400000

004002f4 <vPortExitCritical>:
	uxCriticalNesting--;
  4002f4:	4a03      	ldr	r2, [pc, #12]	; (400304 <vPortExitCritical+0x10>)
  4002f6:	6813      	ldr	r3, [r2, #0]
  4002f8:	3b01      	subs	r3, #1
  4002fa:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
  4002fc:	b90b      	cbnz	r3, 400302 <vPortExitCritical+0xe>
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
  4002fe:	f383 8811 	msr	BASEPRI, r3
  400302:	4770      	bx	lr
  400304:	20400000 	.word	0x20400000

00400308 <PendSV_Handler>:
	__asm volatile
  400308:	f3ef 8009 	mrs	r0, PSP
  40030c:	f3bf 8f6f 	isb	sy
  400310:	4b15      	ldr	r3, [pc, #84]	; (400368 <pxCurrentTCBConst>)
  400312:	681a      	ldr	r2, [r3, #0]
  400314:	f01e 0f10 	tst.w	lr, #16
  400318:	bf08      	it	eq
  40031a:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
  40031e:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  400322:	6010      	str	r0, [r2, #0]
  400324:	f84d 3d04 	str.w	r3, [sp, #-4]!
  400328:	f04f 0080 	mov.w	r0, #128	; 0x80
  40032c:	b672      	cpsid	i
  40032e:	f380 8811 	msr	BASEPRI, r0
  400332:	f3bf 8f4f 	dsb	sy
  400336:	f3bf 8f6f 	isb	sy
  40033a:	b662      	cpsie	i
  40033c:	f000 fecc 	bl	4010d8 <vTaskSwitchContext>
  400340:	f04f 0000 	mov.w	r0, #0
  400344:	f380 8811 	msr	BASEPRI, r0
  400348:	bc08      	pop	{r3}
  40034a:	6819      	ldr	r1, [r3, #0]
  40034c:	6808      	ldr	r0, [r1, #0]
  40034e:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  400352:	f01e 0f10 	tst.w	lr, #16
  400356:	bf08      	it	eq
  400358:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
  40035c:	f380 8809 	msr	PSP, r0
  400360:	f3bf 8f6f 	isb	sy
  400364:	4770      	bx	lr
  400366:	bf00      	nop

00400368 <pxCurrentTCBConst>:
  400368:	2040c1dc 	.word	0x2040c1dc
  40036c:	4770      	bx	lr
  40036e:	bf00      	nop

00400370 <SysTick_Handler>:
{
  400370:	b508      	push	{r3, lr}
	__asm volatile
  400372:	f3ef 8311 	mrs	r3, BASEPRI
  400376:	f04f 0280 	mov.w	r2, #128	; 0x80
  40037a:	b672      	cpsid	i
  40037c:	f382 8811 	msr	BASEPRI, r2
  400380:	f3bf 8f6f 	isb	sy
  400384:	f3bf 8f4f 	dsb	sy
  400388:	b662      	cpsie	i
		if( xTaskIncrementTick() != pdFALSE )
  40038a:	4b05      	ldr	r3, [pc, #20]	; (4003a0 <SysTick_Handler+0x30>)
  40038c:	4798      	blx	r3
  40038e:	b118      	cbz	r0, 400398 <SysTick_Handler+0x28>
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
  400390:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
  400394:	4b03      	ldr	r3, [pc, #12]	; (4003a4 <SysTick_Handler+0x34>)
  400396:	601a      	str	r2, [r3, #0]
	__asm volatile
  400398:	2300      	movs	r3, #0
  40039a:	f383 8811 	msr	BASEPRI, r3
  40039e:	bd08      	pop	{r3, pc}
  4003a0:	00400e0d 	.word	0x00400e0d
  4003a4:	e000ed04 	.word	0xe000ed04

004003a8 <vPortSetupTimerInterrupt>:
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
  4003a8:	4a03      	ldr	r2, [pc, #12]	; (4003b8 <vPortSetupTimerInterrupt+0x10>)
  4003aa:	4b04      	ldr	r3, [pc, #16]	; (4003bc <vPortSetupTimerInterrupt+0x14>)
  4003ac:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
  4003ae:	2207      	movs	r2, #7
  4003b0:	3b04      	subs	r3, #4
  4003b2:	601a      	str	r2, [r3, #0]
  4003b4:	4770      	bx	lr
  4003b6:	bf00      	nop
  4003b8:	000927bf 	.word	0x000927bf
  4003bc:	e000e014 	.word	0xe000e014

004003c0 <xPortStartScheduler>:
{
  4003c0:	b508      	push	{r3, lr}
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
  4003c2:	4b0c      	ldr	r3, [pc, #48]	; (4003f4 <xPortStartScheduler+0x34>)
  4003c4:	681a      	ldr	r2, [r3, #0]
  4003c6:	f442 0260 	orr.w	r2, r2, #14680064	; 0xe00000
  4003ca:	601a      	str	r2, [r3, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
  4003cc:	681a      	ldr	r2, [r3, #0]
  4003ce:	f042 4260 	orr.w	r2, r2, #3758096384	; 0xe0000000
  4003d2:	601a      	str	r2, [r3, #0]
	vPortSetupTimerInterrupt();
  4003d4:	4b08      	ldr	r3, [pc, #32]	; (4003f8 <xPortStartScheduler+0x38>)
  4003d6:	4798      	blx	r3
	uxCriticalNesting = 0;
  4003d8:	2200      	movs	r2, #0
  4003da:	4b08      	ldr	r3, [pc, #32]	; (4003fc <xPortStartScheduler+0x3c>)
  4003dc:	601a      	str	r2, [r3, #0]
	vPortEnableVFP();
  4003de:	4b08      	ldr	r3, [pc, #32]	; (400400 <xPortStartScheduler+0x40>)
  4003e0:	4798      	blx	r3
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
  4003e2:	4a08      	ldr	r2, [pc, #32]	; (400404 <xPortStartScheduler+0x44>)
  4003e4:	6813      	ldr	r3, [r2, #0]
  4003e6:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
  4003ea:	6013      	str	r3, [r2, #0]
	prvPortStartFirstTask();
  4003ec:	4b06      	ldr	r3, [pc, #24]	; (400408 <xPortStartScheduler+0x48>)
  4003ee:	4798      	blx	r3
	prvTaskExitError();
  4003f0:	4b06      	ldr	r3, [pc, #24]	; (40040c <xPortStartScheduler+0x4c>)
  4003f2:	4798      	blx	r3
  4003f4:	e000ed20 	.word	0xe000ed20
  4003f8:	004003a9 	.word	0x004003a9
  4003fc:	20400000 	.word	0x20400000
  400400:	00400271 	.word	0x00400271
  400404:	e000ef34 	.word	0xe000ef34
  400408:	00400251 	.word	0x00400251
  40040c:	0040023b 	.word	0x0040023b

00400410 <pvPortMalloc>:
static size_t xNextFreeByte = ( size_t ) 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
  400410:	b538      	push	{r3, r4, r5, lr}
  400412:	4604      	mov	r4, r0
void *pvReturn = NULL;
static uint8_t *pucAlignedHeap = NULL;

	/* Ensure that blocks are always aligned to the required number of bytes. */
	#if portBYTE_ALIGNMENT != 1
		if( xWantedSize & portBYTE_ALIGNMENT_MASK )
  400414:	f010 0f07 	tst.w	r0, #7
  400418:	d002      	beq.n	400420 <pvPortMalloc+0x10>
		{
			/* Byte alignment required. */
			xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
  40041a:	f020 0407 	bic.w	r4, r0, #7
  40041e:	3408      	adds	r4, #8
		}
	#endif

	vTaskSuspendAll();
  400420:	4b11      	ldr	r3, [pc, #68]	; (400468 <pvPortMalloc+0x58>)
  400422:	4798      	blx	r3
	{
		if( pucAlignedHeap == NULL )
  400424:	4b11      	ldr	r3, [pc, #68]	; (40046c <pvPortMalloc+0x5c>)
  400426:	681b      	ldr	r3, [r3, #0]
  400428:	b193      	cbz	r3, 400450 <pvPortMalloc+0x40>
			/* Ensure the heap starts on a correctly aligned boundary. */
			pucAlignedHeap = ( uint8_t * ) ( ( ( portPOINTER_SIZE_TYPE ) &ucHeap[ portBYTE_ALIGNMENT ] ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) );
		}

		/* Check there is enough room left for the allocation. */
		if( ( ( xNextFreeByte + xWantedSize ) < configADJUSTED_HEAP_SIZE ) &&
  40042a:	4b11      	ldr	r3, [pc, #68]	; (400470 <pvPortMalloc+0x60>)
  40042c:	681b      	ldr	r3, [r3, #0]
  40042e:	441c      	add	r4, r3
  400430:	42a3      	cmp	r3, r4
  400432:	d213      	bcs.n	40045c <pvPortMalloc+0x4c>
  400434:	f24b 72f7 	movw	r2, #47095	; 0xb7f7
  400438:	4294      	cmp	r4, r2
  40043a:	d80f      	bhi.n	40045c <pvPortMalloc+0x4c>
			( ( xNextFreeByte + xWantedSize ) > xNextFreeByte )	)/* Check for overflow. */
		{
			/* Return the next free byte then increment the index past this
			block. */
			pvReturn = pucAlignedHeap + xNextFreeByte;
  40043c:	4a0b      	ldr	r2, [pc, #44]	; (40046c <pvPortMalloc+0x5c>)
  40043e:	6815      	ldr	r5, [r2, #0]
  400440:	441d      	add	r5, r3
			xNextFreeByte += xWantedSize;
  400442:	4b0b      	ldr	r3, [pc, #44]	; (400470 <pvPortMalloc+0x60>)
  400444:	601c      	str	r4, [r3, #0]
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
  400446:	4b0b      	ldr	r3, [pc, #44]	; (400474 <pvPortMalloc+0x64>)
  400448:	4798      	blx	r3

	#if( configUSE_MALLOC_FAILED_HOOK == 1 )
	{
		if( pvReturn == NULL )
  40044a:	b14d      	cbz	r5, 400460 <pvPortMalloc+0x50>
		}
	}
	#endif

	return pvReturn;
}
  40044c:	4628      	mov	r0, r5
  40044e:	bd38      	pop	{r3, r4, r5, pc}
			pucAlignedHeap = ( uint8_t * ) ( ( ( portPOINTER_SIZE_TYPE ) &ucHeap[ portBYTE_ALIGNMENT ] ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) );
  400450:	4b09      	ldr	r3, [pc, #36]	; (400478 <pvPortMalloc+0x68>)
  400452:	f023 0307 	bic.w	r3, r3, #7
  400456:	4a05      	ldr	r2, [pc, #20]	; (40046c <pvPortMalloc+0x5c>)
  400458:	6013      	str	r3, [r2, #0]
  40045a:	e7e6      	b.n	40042a <pvPortMalloc+0x1a>
	( void ) xTaskResumeAll();
  40045c:	4b05      	ldr	r3, [pc, #20]	; (400474 <pvPortMalloc+0x64>)
  40045e:	4798      	blx	r3
			vApplicationMallocFailedHook();
  400460:	4b06      	ldr	r3, [pc, #24]	; (40047c <pvPortMalloc+0x6c>)
  400462:	4798      	blx	r3
  400464:	2500      	movs	r5, #0
	return pvReturn;
  400466:	e7f1      	b.n	40044c <pvPortMalloc+0x3c>
  400468:	00400df1 	.word	0x00400df1
  40046c:	204009d4 	.word	0x204009d4
  400470:	2040c1d8 	.word	0x2040c1d8
  400474:	00400f45 	.word	0x00400f45
  400478:	204009e0 	.word	0x204009e0
  40047c:	00402593 	.word	0x00402593

00400480 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
  400480:	4770      	bx	lr
	...

00400484 <prvCopyDataToQueue>:

#endif /* configUSE_TRACE_FACILITY */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
  400484:	b538      	push	{r3, r4, r5, lr}
  400486:	4604      	mov	r4, r0
  400488:	4615      	mov	r5, r2
BaseType_t xReturn = pdFALSE;

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
  40048a:	6c02      	ldr	r2, [r0, #64]	; 0x40
  40048c:	b962      	cbnz	r2, 4004a8 <prvCopyDataToQueue+0x24>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
  40048e:	6803      	ldr	r3, [r0, #0]
  400490:	b123      	cbz	r3, 40049c <prvCopyDataToQueue+0x18>
BaseType_t xReturn = pdFALSE;
  400492:	2000      	movs	r0, #0
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	++( pxQueue->uxMessagesWaiting );
  400494:	6ba3      	ldr	r3, [r4, #56]	; 0x38
  400496:	3301      	adds	r3, #1
  400498:	63a3      	str	r3, [r4, #56]	; 0x38

	return xReturn;
}
  40049a:	bd38      	pop	{r3, r4, r5, pc}
				xReturn = xTaskPriorityDisinherit( ( void * ) pxQueue->pxMutexHolder );
  40049c:	6840      	ldr	r0, [r0, #4]
  40049e:	4b18      	ldr	r3, [pc, #96]	; (400500 <prvCopyDataToQueue+0x7c>)
  4004a0:	4798      	blx	r3
				pxQueue->pxMutexHolder = NULL;
  4004a2:	2300      	movs	r3, #0
  4004a4:	6063      	str	r3, [r4, #4]
  4004a6:	e7f5      	b.n	400494 <prvCopyDataToQueue+0x10>
	else if( xPosition == queueSEND_TO_BACK )
  4004a8:	b96d      	cbnz	r5, 4004c6 <prvCopyDataToQueue+0x42>
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0. */
  4004aa:	6880      	ldr	r0, [r0, #8]
  4004ac:	4b15      	ldr	r3, [pc, #84]	; (400504 <prvCopyDataToQueue+0x80>)
  4004ae:	4798      	blx	r3
		pxQueue->pcWriteTo += pxQueue->uxItemSize;
  4004b0:	68a3      	ldr	r3, [r4, #8]
  4004b2:	6c22      	ldr	r2, [r4, #64]	; 0x40
  4004b4:	4413      	add	r3, r2
  4004b6:	60a3      	str	r3, [r4, #8]
		if( pxQueue->pcWriteTo >= pxQueue->pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
  4004b8:	6862      	ldr	r2, [r4, #4]
  4004ba:	4293      	cmp	r3, r2
  4004bc:	d31c      	bcc.n	4004f8 <prvCopyDataToQueue+0x74>
			pxQueue->pcWriteTo = pxQueue->pcHead;
  4004be:	6823      	ldr	r3, [r4, #0]
  4004c0:	60a3      	str	r3, [r4, #8]
BaseType_t xReturn = pdFALSE;
  4004c2:	2000      	movs	r0, #0
  4004c4:	e7e6      	b.n	400494 <prvCopyDataToQueue+0x10>
		( void ) memcpy( ( void * ) pxQueue->u.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
  4004c6:	68c0      	ldr	r0, [r0, #12]
  4004c8:	4b0e      	ldr	r3, [pc, #56]	; (400504 <prvCopyDataToQueue+0x80>)
  4004ca:	4798      	blx	r3
		pxQueue->u.pcReadFrom -= pxQueue->uxItemSize;
  4004cc:	6c22      	ldr	r2, [r4, #64]	; 0x40
  4004ce:	4252      	negs	r2, r2
  4004d0:	68e3      	ldr	r3, [r4, #12]
  4004d2:	4413      	add	r3, r2
  4004d4:	60e3      	str	r3, [r4, #12]
		if( pxQueue->u.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
  4004d6:	6821      	ldr	r1, [r4, #0]
  4004d8:	428b      	cmp	r3, r1
  4004da:	d202      	bcs.n	4004e2 <prvCopyDataToQueue+0x5e>
			pxQueue->u.pcReadFrom = ( pxQueue->pcTail - pxQueue->uxItemSize );
  4004dc:	6863      	ldr	r3, [r4, #4]
  4004de:	441a      	add	r2, r3
  4004e0:	60e2      	str	r2, [r4, #12]
		if( xPosition == queueOVERWRITE )
  4004e2:	2d02      	cmp	r5, #2
  4004e4:	d001      	beq.n	4004ea <prvCopyDataToQueue+0x66>
BaseType_t xReturn = pdFALSE;
  4004e6:	2000      	movs	r0, #0
  4004e8:	e7d4      	b.n	400494 <prvCopyDataToQueue+0x10>
			if( pxQueue->uxMessagesWaiting > ( UBaseType_t ) 0 )
  4004ea:	6ba3      	ldr	r3, [r4, #56]	; 0x38
  4004ec:	b133      	cbz	r3, 4004fc <prvCopyDataToQueue+0x78>
				--( pxQueue->uxMessagesWaiting );
  4004ee:	6ba3      	ldr	r3, [r4, #56]	; 0x38
  4004f0:	3b01      	subs	r3, #1
  4004f2:	63a3      	str	r3, [r4, #56]	; 0x38
BaseType_t xReturn = pdFALSE;
  4004f4:	2000      	movs	r0, #0
  4004f6:	e7cd      	b.n	400494 <prvCopyDataToQueue+0x10>
  4004f8:	2000      	movs	r0, #0
  4004fa:	e7cb      	b.n	400494 <prvCopyDataToQueue+0x10>
  4004fc:	2000      	movs	r0, #0
  4004fe:	e7c9      	b.n	400494 <prvCopyDataToQueue+0x10>
  400500:	00401429 	.word	0x00401429
  400504:	00402705 	.word	0x00402705

00400508 <prvNotifyQueueSetContainer>:
/*-----------------------------------------------------------*/

#if ( configUSE_QUEUE_SETS == 1 )

	static BaseType_t prvNotifyQueueSetContainer( const Queue_t * const pxQueue, const BaseType_t xCopyPosition )
	{
  400508:	b530      	push	{r4, r5, lr}
  40050a:	b083      	sub	sp, #12
  40050c:	9001      	str	r0, [sp, #4]
	Queue_t *pxQueueSetContainer = pxQueue->pxQueueSetContainer;
  40050e:	6d44      	ldr	r4, [r0, #84]	; 0x54
		/* This function must be called form a critical section. */

		configASSERT( pxQueueSetContainer );
		configASSERT( pxQueueSetContainer->uxMessagesWaiting < pxQueueSetContainer->uxLength );

		if( pxQueueSetContainer->uxMessagesWaiting < pxQueueSetContainer->uxLength )
  400510:	6ba2      	ldr	r2, [r4, #56]	; 0x38
  400512:	6be3      	ldr	r3, [r4, #60]	; 0x3c
  400514:	429a      	cmp	r2, r3
  400516:	d303      	bcc.n	400520 <prvNotifyQueueSetContainer+0x18>
	BaseType_t xReturn = pdFALSE;
  400518:	2500      	movs	r5, #0
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
	}
  40051a:	4628      	mov	r0, r5
  40051c:	b003      	add	sp, #12
  40051e:	bd30      	pop	{r4, r5, pc}
  400520:	460a      	mov	r2, r1
			xReturn = prvCopyDataToQueue( pxQueueSetContainer, &pxQueue, xCopyPosition );
  400522:	a901      	add	r1, sp, #4
  400524:	4620      	mov	r0, r4
  400526:	4b0b      	ldr	r3, [pc, #44]	; (400554 <prvNotifyQueueSetContainer+0x4c>)
  400528:	4798      	blx	r3
  40052a:	4605      	mov	r5, r0
			if( pxQueueSetContainer->xTxLock == queueUNLOCKED )
  40052c:	6ca3      	ldr	r3, [r4, #72]	; 0x48
  40052e:	f1b3 3fff 	cmp.w	r3, #4294967295
  400532:	d003      	beq.n	40053c <prvNotifyQueueSetContainer+0x34>
				( pxQueueSetContainer->xTxLock )++;
  400534:	6ca3      	ldr	r3, [r4, #72]	; 0x48
  400536:	3301      	adds	r3, #1
  400538:	64a3      	str	r3, [r4, #72]	; 0x48
  40053a:	e7ee      	b.n	40051a <prvNotifyQueueSetContainer+0x12>
				if( listLIST_IS_EMPTY( &( pxQueueSetContainer->xTasksWaitingToReceive ) ) == pdFALSE )
  40053c:	6a63      	ldr	r3, [r4, #36]	; 0x24
  40053e:	2b00      	cmp	r3, #0
  400540:	d0eb      	beq.n	40051a <prvNotifyQueueSetContainer+0x12>
					if( xTaskRemoveFromEventList( &( pxQueueSetContainer->xTasksWaitingToReceive ) ) != pdFALSE )
  400542:	f104 0024 	add.w	r0, r4, #36	; 0x24
  400546:	4b04      	ldr	r3, [pc, #16]	; (400558 <prvNotifyQueueSetContainer+0x50>)
  400548:	4798      	blx	r3
  40054a:	2800      	cmp	r0, #0
						xReturn = pdTRUE;
  40054c:	bf18      	it	ne
  40054e:	2501      	movne	r5, #1
  400550:	e7e3      	b.n	40051a <prvNotifyQueueSetContainer+0x12>
  400552:	bf00      	nop
  400554:	00400485 	.word	0x00400485
  400558:	0040125d 	.word	0x0040125d

0040055c <prvCopyDataFromQueue>:
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
  40055c:	6c02      	ldr	r2, [r0, #64]	; 0x40
  40055e:	b172      	cbz	r2, 40057e <prvCopyDataFromQueue+0x22>
{
  400560:	b510      	push	{r4, lr}
		pxQueue->u.pcReadFrom += pxQueue->uxItemSize;
  400562:	68c3      	ldr	r3, [r0, #12]
  400564:	4413      	add	r3, r2
  400566:	60c3      	str	r3, [r0, #12]
		if( pxQueue->u.pcReadFrom >= pxQueue->pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
  400568:	6844      	ldr	r4, [r0, #4]
  40056a:	42a3      	cmp	r3, r4
  40056c:	d301      	bcc.n	400572 <prvCopyDataFromQueue+0x16>
			pxQueue->u.pcReadFrom = pxQueue->pcHead;
  40056e:	6803      	ldr	r3, [r0, #0]
  400570:	60c3      	str	r3, [r0, #12]
  400572:	460c      	mov	r4, r1
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0. */
  400574:	68c1      	ldr	r1, [r0, #12]
  400576:	4620      	mov	r0, r4
  400578:	4b01      	ldr	r3, [pc, #4]	; (400580 <prvCopyDataFromQueue+0x24>)
  40057a:	4798      	blx	r3
  40057c:	bd10      	pop	{r4, pc}
  40057e:	4770      	bx	lr
  400580:	00402705 	.word	0x00402705

00400584 <prvUnlockQueue>:
{
  400584:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  400586:	4604      	mov	r4, r0
	taskENTER_CRITICAL();
  400588:	4b22      	ldr	r3, [pc, #136]	; (400614 <prvUnlockQueue+0x90>)
  40058a:	4798      	blx	r3
		while( pxQueue->xTxLock > queueLOCKED_UNMODIFIED )
  40058c:	6ca3      	ldr	r3, [r4, #72]	; 0x48
  40058e:	2b00      	cmp	r3, #0
  400590:	dd1b      	ble.n	4005ca <prvUnlockQueue+0x46>
					if( prvNotifyQueueSetContainer( pxQueue, queueSEND_TO_BACK ) == pdTRUE )
  400592:	4d21      	ldr	r5, [pc, #132]	; (400618 <prvUnlockQueue+0x94>)
						vTaskMissedYield();
  400594:	4f21      	ldr	r7, [pc, #132]	; (40061c <prvUnlockQueue+0x98>)
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
  400596:	4e22      	ldr	r6, [pc, #136]	; (400620 <prvUnlockQueue+0x9c>)
  400598:	e00b      	b.n	4005b2 <prvUnlockQueue+0x2e>
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
  40059a:	6a63      	ldr	r3, [r4, #36]	; 0x24
  40059c:	b1ab      	cbz	r3, 4005ca <prvUnlockQueue+0x46>
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
  40059e:	f104 0024 	add.w	r0, r4, #36	; 0x24
  4005a2:	47b0      	blx	r6
  4005a4:	b978      	cbnz	r0, 4005c6 <prvUnlockQueue+0x42>
			--( pxQueue->xTxLock );
  4005a6:	6ca3      	ldr	r3, [r4, #72]	; 0x48
  4005a8:	3b01      	subs	r3, #1
  4005aa:	64a3      	str	r3, [r4, #72]	; 0x48
		while( pxQueue->xTxLock > queueLOCKED_UNMODIFIED )
  4005ac:	6ca3      	ldr	r3, [r4, #72]	; 0x48
  4005ae:	2b00      	cmp	r3, #0
  4005b0:	dd0b      	ble.n	4005ca <prvUnlockQueue+0x46>
				if( pxQueue->pxQueueSetContainer != NULL )
  4005b2:	6d63      	ldr	r3, [r4, #84]	; 0x54
  4005b4:	2b00      	cmp	r3, #0
  4005b6:	d0f0      	beq.n	40059a <prvUnlockQueue+0x16>
					if( prvNotifyQueueSetContainer( pxQueue, queueSEND_TO_BACK ) == pdTRUE )
  4005b8:	2100      	movs	r1, #0
  4005ba:	4620      	mov	r0, r4
  4005bc:	47a8      	blx	r5
  4005be:	2801      	cmp	r0, #1
  4005c0:	d1f1      	bne.n	4005a6 <prvUnlockQueue+0x22>
						vTaskMissedYield();
  4005c2:	47b8      	blx	r7
  4005c4:	e7ef      	b.n	4005a6 <prvUnlockQueue+0x22>
							vTaskMissedYield();
  4005c6:	47b8      	blx	r7
  4005c8:	e7ed      	b.n	4005a6 <prvUnlockQueue+0x22>
		pxQueue->xTxLock = queueUNLOCKED;
  4005ca:	f04f 33ff 	mov.w	r3, #4294967295
  4005ce:	64a3      	str	r3, [r4, #72]	; 0x48
	taskEXIT_CRITICAL();
  4005d0:	4b14      	ldr	r3, [pc, #80]	; (400624 <prvUnlockQueue+0xa0>)
  4005d2:	4798      	blx	r3
	taskENTER_CRITICAL();
  4005d4:	4b0f      	ldr	r3, [pc, #60]	; (400614 <prvUnlockQueue+0x90>)
  4005d6:	4798      	blx	r3
		while( pxQueue->xRxLock > queueLOCKED_UNMODIFIED )
  4005d8:	6c63      	ldr	r3, [r4, #68]	; 0x44
  4005da:	2b00      	cmp	r3, #0
  4005dc:	dd14      	ble.n	400608 <prvUnlockQueue+0x84>
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
  4005de:	6923      	ldr	r3, [r4, #16]
  4005e0:	b193      	cbz	r3, 400608 <prvUnlockQueue+0x84>
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
  4005e2:	f104 0610 	add.w	r6, r4, #16
  4005e6:	4d0e      	ldr	r5, [pc, #56]	; (400620 <prvUnlockQueue+0x9c>)
					vTaskMissedYield();
  4005e8:	4f0c      	ldr	r7, [pc, #48]	; (40061c <prvUnlockQueue+0x98>)
  4005ea:	e007      	b.n	4005fc <prvUnlockQueue+0x78>
				--( pxQueue->xRxLock );
  4005ec:	6c63      	ldr	r3, [r4, #68]	; 0x44
  4005ee:	3b01      	subs	r3, #1
  4005f0:	6463      	str	r3, [r4, #68]	; 0x44
		while( pxQueue->xRxLock > queueLOCKED_UNMODIFIED )
  4005f2:	6c63      	ldr	r3, [r4, #68]	; 0x44
  4005f4:	2b00      	cmp	r3, #0
  4005f6:	dd07      	ble.n	400608 <prvUnlockQueue+0x84>
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
  4005f8:	6923      	ldr	r3, [r4, #16]
  4005fa:	b12b      	cbz	r3, 400608 <prvUnlockQueue+0x84>
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
  4005fc:	4630      	mov	r0, r6
  4005fe:	47a8      	blx	r5
  400600:	2800      	cmp	r0, #0
  400602:	d0f3      	beq.n	4005ec <prvUnlockQueue+0x68>
					vTaskMissedYield();
  400604:	47b8      	blx	r7
  400606:	e7f1      	b.n	4005ec <prvUnlockQueue+0x68>
		pxQueue->xRxLock = queueUNLOCKED;
  400608:	f04f 33ff 	mov.w	r3, #4294967295
  40060c:	6463      	str	r3, [r4, #68]	; 0x44
	taskEXIT_CRITICAL();
  40060e:	4b05      	ldr	r3, [pc, #20]	; (400624 <prvUnlockQueue+0xa0>)
  400610:	4798      	blx	r3
  400612:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  400614:	004002d1 	.word	0x004002d1
  400618:	00400509 	.word	0x00400509
  40061c:	00401359 	.word	0x00401359
  400620:	0040125d 	.word	0x0040125d
  400624:	004002f5 	.word	0x004002f5

00400628 <xQueueGenericReset>:
{
  400628:	b538      	push	{r3, r4, r5, lr}
  40062a:	4604      	mov	r4, r0
  40062c:	460d      	mov	r5, r1
	taskENTER_CRITICAL();
  40062e:	4b18      	ldr	r3, [pc, #96]	; (400690 <xQueueGenericReset+0x68>)
  400630:	4798      	blx	r3
		pxQueue->pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize );
  400632:	6822      	ldr	r2, [r4, #0]
  400634:	6c21      	ldr	r1, [r4, #64]	; 0x40
  400636:	6be3      	ldr	r3, [r4, #60]	; 0x3c
  400638:	fb03 f301 	mul.w	r3, r3, r1
  40063c:	18d0      	adds	r0, r2, r3
  40063e:	6060      	str	r0, [r4, #4]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
  400640:	2000      	movs	r0, #0
  400642:	63a0      	str	r0, [r4, #56]	; 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
  400644:	60a2      	str	r2, [r4, #8]
		pxQueue->u.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - ( UBaseType_t ) 1U ) * pxQueue->uxItemSize );
  400646:	1a5b      	subs	r3, r3, r1
  400648:	4413      	add	r3, r2
  40064a:	60e3      	str	r3, [r4, #12]
		pxQueue->xRxLock = queueUNLOCKED;
  40064c:	f04f 33ff 	mov.w	r3, #4294967295
  400650:	6463      	str	r3, [r4, #68]	; 0x44
		pxQueue->xTxLock = queueUNLOCKED;
  400652:	64a3      	str	r3, [r4, #72]	; 0x48
		if( xNewQueue == pdFALSE )
  400654:	b9a5      	cbnz	r5, 400680 <xQueueGenericReset+0x58>
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
  400656:	6923      	ldr	r3, [r4, #16]
  400658:	b91b      	cbnz	r3, 400662 <xQueueGenericReset+0x3a>
	taskEXIT_CRITICAL();
  40065a:	4b0e      	ldr	r3, [pc, #56]	; (400694 <xQueueGenericReset+0x6c>)
  40065c:	4798      	blx	r3
}
  40065e:	2001      	movs	r0, #1
  400660:	bd38      	pop	{r3, r4, r5, pc}
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) == pdTRUE )
  400662:	f104 0010 	add.w	r0, r4, #16
  400666:	4b0c      	ldr	r3, [pc, #48]	; (400698 <xQueueGenericReset+0x70>)
  400668:	4798      	blx	r3
  40066a:	2801      	cmp	r0, #1
  40066c:	d1f5      	bne.n	40065a <xQueueGenericReset+0x32>
					queueYIELD_IF_USING_PREEMPTION();
  40066e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
  400672:	4b0a      	ldr	r3, [pc, #40]	; (40069c <xQueueGenericReset+0x74>)
  400674:	601a      	str	r2, [r3, #0]
  400676:	f3bf 8f4f 	dsb	sy
  40067a:	f3bf 8f6f 	isb	sy
  40067e:	e7ec      	b.n	40065a <xQueueGenericReset+0x32>
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
  400680:	f104 0010 	add.w	r0, r4, #16
  400684:	4d06      	ldr	r5, [pc, #24]	; (4006a0 <xQueueGenericReset+0x78>)
  400686:	47a8      	blx	r5
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
  400688:	f104 0024 	add.w	r0, r4, #36	; 0x24
  40068c:	47a8      	blx	r5
  40068e:	e7e4      	b.n	40065a <xQueueGenericReset+0x32>
  400690:	004002d1 	.word	0x004002d1
  400694:	004002f5 	.word	0x004002f5
  400698:	0040125d 	.word	0x0040125d
  40069c:	e000ed04 	.word	0xe000ed04
  4006a0:	004001ad 	.word	0x004001ad

004006a4 <xQueueGenericCreate>:
{
  4006a4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  4006a6:	4605      	mov	r5, r0
  4006a8:	4617      	mov	r7, r2
	if( uxItemSize == ( UBaseType_t ) 0 )
  4006aa:	460e      	mov	r6, r1
  4006ac:	b159      	cbz	r1, 4006c6 <xQueueGenericCreate+0x22>
		xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ) + ( size_t ) 1; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
  4006ae:	fb00 f001 	mul.w	r0, r0, r1
	pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes );
  4006b2:	3059      	adds	r0, #89	; 0x59
  4006b4:	4b0d      	ldr	r3, [pc, #52]	; (4006ec <xQueueGenericCreate+0x48>)
  4006b6:	4798      	blx	r3
	if( pxNewQueue != NULL )
  4006b8:	4604      	mov	r4, r0
  4006ba:	b118      	cbz	r0, 4006c4 <xQueueGenericCreate+0x20>
			pxNewQueue->pcHead = ( ( int8_t * ) pxNewQueue ) + sizeof( Queue_t );
  4006bc:	f100 0358 	add.w	r3, r0, #88	; 0x58
  4006c0:	6003      	str	r3, [r0, #0]
  4006c2:	e006      	b.n	4006d2 <xQueueGenericCreate+0x2e>
  4006c4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes );
  4006c6:	2058      	movs	r0, #88	; 0x58
  4006c8:	4b08      	ldr	r3, [pc, #32]	; (4006ec <xQueueGenericCreate+0x48>)
  4006ca:	4798      	blx	r3
	if( pxNewQueue != NULL )
  4006cc:	4604      	mov	r4, r0
  4006ce:	b160      	cbz	r0, 4006ea <xQueueGenericCreate+0x46>
			pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
  4006d0:	6024      	str	r4, [r4, #0]
		pxNewQueue->uxLength = uxQueueLength;
  4006d2:	63e5      	str	r5, [r4, #60]	; 0x3c
		pxNewQueue->uxItemSize = uxItemSize;
  4006d4:	6426      	str	r6, [r4, #64]	; 0x40
		( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
  4006d6:	2101      	movs	r1, #1
  4006d8:	4620      	mov	r0, r4
  4006da:	4b05      	ldr	r3, [pc, #20]	; (4006f0 <xQueueGenericCreate+0x4c>)
  4006dc:	4798      	blx	r3
			pxNewQueue->ucQueueType = ucQueueType;
  4006de:	f884 7050 	strb.w	r7, [r4, #80]	; 0x50
			pxNewQueue->pxQueueSetContainer = NULL;
  4006e2:	2300      	movs	r3, #0
  4006e4:	6563      	str	r3, [r4, #84]	; 0x54
  4006e6:	4620      	mov	r0, r4
	return xReturn;
  4006e8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
}
  4006ea:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  4006ec:	00400411 	.word	0x00400411
  4006f0:	00400629 	.word	0x00400629

004006f4 <xQueueGenericSend>:
{
  4006f4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  4006f8:	b085      	sub	sp, #20
  4006fa:	4604      	mov	r4, r0
  4006fc:	468a      	mov	sl, r1
  4006fe:	9201      	str	r2, [sp, #4]
  400700:	461f      	mov	r7, r3
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
  400702:	2600      	movs	r6, #0
		taskENTER_CRITICAL();
  400704:	4d4a      	ldr	r5, [pc, #296]	; (400830 <xQueueGenericSend+0x13c>)
					vTaskSetTimeOutState( &xTimeOut );
  400706:	f8df 8154 	ldr.w	r8, [pc, #340]	; 40085c <xQueueGenericSend+0x168>
					portYIELD_WITHIN_API();
  40070a:	f8df 9134 	ldr.w	r9, [pc, #308]	; 400840 <xQueueGenericSend+0x14c>
  40070e:	e04a      	b.n	4007a6 <xQueueGenericSend+0xb2>
				xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
  400710:	463a      	mov	r2, r7
  400712:	4651      	mov	r1, sl
  400714:	4620      	mov	r0, r4
  400716:	4b47      	ldr	r3, [pc, #284]	; (400834 <xQueueGenericSend+0x140>)
  400718:	4798      	blx	r3
					if( pxQueue->pxQueueSetContainer != NULL )
  40071a:	6d63      	ldr	r3, [r4, #84]	; 0x54
  40071c:	b1a3      	cbz	r3, 400748 <xQueueGenericSend+0x54>
						if( prvNotifyQueueSetContainer( pxQueue, xCopyPosition ) == pdTRUE )
  40071e:	4639      	mov	r1, r7
  400720:	4620      	mov	r0, r4
  400722:	4b45      	ldr	r3, [pc, #276]	; (400838 <xQueueGenericSend+0x144>)
  400724:	4798      	blx	r3
  400726:	2801      	cmp	r0, #1
  400728:	d005      	beq.n	400736 <xQueueGenericSend+0x42>
				taskEXIT_CRITICAL();
  40072a:	4b44      	ldr	r3, [pc, #272]	; (40083c <xQueueGenericSend+0x148>)
  40072c:	4798      	blx	r3
				return pdPASS;
  40072e:	2001      	movs	r0, #1
}
  400730:	b005      	add	sp, #20
  400732:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
							queueYIELD_IF_USING_PREEMPTION();
  400736:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
  40073a:	4b41      	ldr	r3, [pc, #260]	; (400840 <xQueueGenericSend+0x14c>)
  40073c:	601a      	str	r2, [r3, #0]
  40073e:	f3bf 8f4f 	dsb	sy
  400742:	f3bf 8f6f 	isb	sy
  400746:	e7f0      	b.n	40072a <xQueueGenericSend+0x36>
						if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
  400748:	6a63      	ldr	r3, [r4, #36]	; 0x24
  40074a:	b953      	cbnz	r3, 400762 <xQueueGenericSend+0x6e>
						else if( xYieldRequired != pdFALSE )
  40074c:	2800      	cmp	r0, #0
  40074e:	d0ec      	beq.n	40072a <xQueueGenericSend+0x36>
							queueYIELD_IF_USING_PREEMPTION();
  400750:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
  400754:	4b3a      	ldr	r3, [pc, #232]	; (400840 <xQueueGenericSend+0x14c>)
  400756:	601a      	str	r2, [r3, #0]
  400758:	f3bf 8f4f 	dsb	sy
  40075c:	f3bf 8f6f 	isb	sy
  400760:	e7e3      	b.n	40072a <xQueueGenericSend+0x36>
							if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) == pdTRUE )
  400762:	f104 0024 	add.w	r0, r4, #36	; 0x24
  400766:	4b37      	ldr	r3, [pc, #220]	; (400844 <xQueueGenericSend+0x150>)
  400768:	4798      	blx	r3
  40076a:	2801      	cmp	r0, #1
  40076c:	d1dd      	bne.n	40072a <xQueueGenericSend+0x36>
								queueYIELD_IF_USING_PREEMPTION();
  40076e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
  400772:	4b33      	ldr	r3, [pc, #204]	; (400840 <xQueueGenericSend+0x14c>)
  400774:	601a      	str	r2, [r3, #0]
  400776:	f3bf 8f4f 	dsb	sy
  40077a:	f3bf 8f6f 	isb	sy
  40077e:	e7d4      	b.n	40072a <xQueueGenericSend+0x36>
					taskEXIT_CRITICAL();
  400780:	4b2e      	ldr	r3, [pc, #184]	; (40083c <xQueueGenericSend+0x148>)
  400782:	4798      	blx	r3
					return errQUEUE_FULL;
  400784:	2000      	movs	r0, #0
  400786:	e7d3      	b.n	400730 <xQueueGenericSend+0x3c>
					vTaskSetTimeOutState( &xTimeOut );
  400788:	a802      	add	r0, sp, #8
  40078a:	47c0      	blx	r8
  40078c:	e017      	b.n	4007be <xQueueGenericSend+0xca>
		prvLockQueue( pxQueue );
  40078e:	2300      	movs	r3, #0
  400790:	6463      	str	r3, [r4, #68]	; 0x44
  400792:	e01d      	b.n	4007d0 <xQueueGenericSend+0xdc>
  400794:	2300      	movs	r3, #0
  400796:	64a3      	str	r3, [r4, #72]	; 0x48
  400798:	e01e      	b.n	4007d8 <xQueueGenericSend+0xe4>
				prvUnlockQueue( pxQueue );
  40079a:	4620      	mov	r0, r4
  40079c:	4b2a      	ldr	r3, [pc, #168]	; (400848 <xQueueGenericSend+0x154>)
  40079e:	4798      	blx	r3
				( void ) xTaskResumeAll();
  4007a0:	4b2a      	ldr	r3, [pc, #168]	; (40084c <xQueueGenericSend+0x158>)
  4007a2:	4798      	blx	r3
  4007a4:	2601      	movs	r6, #1
		taskENTER_CRITICAL();
  4007a6:	47a8      	blx	r5
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
  4007a8:	6ba2      	ldr	r2, [r4, #56]	; 0x38
  4007aa:	6be3      	ldr	r3, [r4, #60]	; 0x3c
  4007ac:	429a      	cmp	r2, r3
  4007ae:	d3af      	bcc.n	400710 <xQueueGenericSend+0x1c>
  4007b0:	2f02      	cmp	r7, #2
  4007b2:	d0ad      	beq.n	400710 <xQueueGenericSend+0x1c>
				if( xTicksToWait == ( TickType_t ) 0 )
  4007b4:	9b01      	ldr	r3, [sp, #4]
  4007b6:	2b00      	cmp	r3, #0
  4007b8:	d0e2      	beq.n	400780 <xQueueGenericSend+0x8c>
				else if( xEntryTimeSet == pdFALSE )
  4007ba:	2e00      	cmp	r6, #0
  4007bc:	d0e4      	beq.n	400788 <xQueueGenericSend+0x94>
		taskEXIT_CRITICAL();
  4007be:	4b1f      	ldr	r3, [pc, #124]	; (40083c <xQueueGenericSend+0x148>)
  4007c0:	4798      	blx	r3
		vTaskSuspendAll();
  4007c2:	4b23      	ldr	r3, [pc, #140]	; (400850 <xQueueGenericSend+0x15c>)
  4007c4:	4798      	blx	r3
		prvLockQueue( pxQueue );
  4007c6:	47a8      	blx	r5
  4007c8:	6c63      	ldr	r3, [r4, #68]	; 0x44
  4007ca:	f1b3 3fff 	cmp.w	r3, #4294967295
  4007ce:	d0de      	beq.n	40078e <xQueueGenericSend+0x9a>
  4007d0:	6ca3      	ldr	r3, [r4, #72]	; 0x48
  4007d2:	f1b3 3fff 	cmp.w	r3, #4294967295
  4007d6:	d0dd      	beq.n	400794 <xQueueGenericSend+0xa0>
  4007d8:	4b18      	ldr	r3, [pc, #96]	; (40083c <xQueueGenericSend+0x148>)
  4007da:	4798      	blx	r3
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
  4007dc:	a901      	add	r1, sp, #4
  4007de:	a802      	add	r0, sp, #8
  4007e0:	4b1c      	ldr	r3, [pc, #112]	; (400854 <xQueueGenericSend+0x160>)
  4007e2:	4798      	blx	r3
  4007e4:	b9e0      	cbnz	r0, 400820 <xQueueGenericSend+0x12c>
	taskENTER_CRITICAL();
  4007e6:	47a8      	blx	r5
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
  4007e8:	f8d4 b038 	ldr.w	fp, [r4, #56]	; 0x38
  4007ec:	6be6      	ldr	r6, [r4, #60]	; 0x3c
	taskEXIT_CRITICAL();
  4007ee:	4b13      	ldr	r3, [pc, #76]	; (40083c <xQueueGenericSend+0x148>)
  4007f0:	4798      	blx	r3
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
  4007f2:	45b3      	cmp	fp, r6
  4007f4:	d1d1      	bne.n	40079a <xQueueGenericSend+0xa6>
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
  4007f6:	9901      	ldr	r1, [sp, #4]
  4007f8:	f104 0010 	add.w	r0, r4, #16
  4007fc:	4b16      	ldr	r3, [pc, #88]	; (400858 <xQueueGenericSend+0x164>)
  4007fe:	4798      	blx	r3
				prvUnlockQueue( pxQueue );
  400800:	4620      	mov	r0, r4
  400802:	4b11      	ldr	r3, [pc, #68]	; (400848 <xQueueGenericSend+0x154>)
  400804:	4798      	blx	r3
				if( xTaskResumeAll() == pdFALSE )
  400806:	4b11      	ldr	r3, [pc, #68]	; (40084c <xQueueGenericSend+0x158>)
  400808:	4798      	blx	r3
  40080a:	2800      	cmp	r0, #0
  40080c:	d1ca      	bne.n	4007a4 <xQueueGenericSend+0xb0>
					portYIELD_WITHIN_API();
  40080e:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
  400812:	f8c9 3000 	str.w	r3, [r9]
  400816:	f3bf 8f4f 	dsb	sy
  40081a:	f3bf 8f6f 	isb	sy
  40081e:	e7c1      	b.n	4007a4 <xQueueGenericSend+0xb0>
			prvUnlockQueue( pxQueue );
  400820:	4620      	mov	r0, r4
  400822:	4b09      	ldr	r3, [pc, #36]	; (400848 <xQueueGenericSend+0x154>)
  400824:	4798      	blx	r3
			( void ) xTaskResumeAll();
  400826:	4b09      	ldr	r3, [pc, #36]	; (40084c <xQueueGenericSend+0x158>)
  400828:	4798      	blx	r3
			return errQUEUE_FULL;
  40082a:	2000      	movs	r0, #0
  40082c:	e780      	b.n	400730 <xQueueGenericSend+0x3c>
  40082e:	bf00      	nop
  400830:	004002d1 	.word	0x004002d1
  400834:	00400485 	.word	0x00400485
  400838:	00400509 	.word	0x00400509
  40083c:	004002f5 	.word	0x004002f5
  400840:	e000ed04 	.word	0xe000ed04
  400844:	0040125d 	.word	0x0040125d
  400848:	00400585 	.word	0x00400585
  40084c:	00400f45 	.word	0x00400f45
  400850:	00400df1 	.word	0x00400df1
  400854:	004012f5 	.word	0x004012f5
  400858:	00401189 	.word	0x00401189
  40085c:	004012dd 	.word	0x004012dd

00400860 <xQueueGenericSendFromISR>:
{
  400860:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	__asm volatile
  400862:	f3ef 8711 	mrs	r7, BASEPRI
  400866:	f04f 0480 	mov.w	r4, #128	; 0x80
  40086a:	b672      	cpsid	i
  40086c:	f384 8811 	msr	BASEPRI, r4
  400870:	f3bf 8f6f 	isb	sy
  400874:	f3bf 8f4f 	dsb	sy
  400878:	b662      	cpsie	i
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
  40087a:	6b85      	ldr	r5, [r0, #56]	; 0x38
  40087c:	6bc4      	ldr	r4, [r0, #60]	; 0x3c
  40087e:	42a5      	cmp	r5, r4
  400880:	d305      	bcc.n	40088e <xQueueGenericSendFromISR+0x2e>
  400882:	2b02      	cmp	r3, #2
  400884:	d003      	beq.n	40088e <xQueueGenericSendFromISR+0x2e>
			xReturn = errQUEUE_FULL;
  400886:	2000      	movs	r0, #0
	__asm volatile
  400888:	f387 8811 	msr	BASEPRI, r7
}
  40088c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  40088e:	461d      	mov	r5, r3
  400890:	4616      	mov	r6, r2
  400892:	4604      	mov	r4, r0
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
  400894:	461a      	mov	r2, r3
  400896:	4b13      	ldr	r3, [pc, #76]	; (4008e4 <xQueueGenericSendFromISR+0x84>)
  400898:	4798      	blx	r3
			if( pxQueue->xTxLock == queueUNLOCKED )
  40089a:	6ca3      	ldr	r3, [r4, #72]	; 0x48
  40089c:	f1b3 3fff 	cmp.w	r3, #4294967295
  4008a0:	d004      	beq.n	4008ac <xQueueGenericSendFromISR+0x4c>
				++( pxQueue->xTxLock );
  4008a2:	6ca3      	ldr	r3, [r4, #72]	; 0x48
  4008a4:	3301      	adds	r3, #1
  4008a6:	64a3      	str	r3, [r4, #72]	; 0x48
			xReturn = pdPASS;
  4008a8:	2001      	movs	r0, #1
  4008aa:	e7ed      	b.n	400888 <xQueueGenericSendFromISR+0x28>
					if( pxQueue->pxQueueSetContainer != NULL )
  4008ac:	6d63      	ldr	r3, [r4, #84]	; 0x54
  4008ae:	b143      	cbz	r3, 4008c2 <xQueueGenericSendFromISR+0x62>
						if( prvNotifyQueueSetContainer( pxQueue, xCopyPosition ) == pdTRUE )
  4008b0:	4629      	mov	r1, r5
  4008b2:	4620      	mov	r0, r4
  4008b4:	4b0c      	ldr	r3, [pc, #48]	; (4008e8 <xQueueGenericSendFromISR+0x88>)
  4008b6:	4798      	blx	r3
							if( pxHigherPriorityTaskWoken != NULL )
  4008b8:	b186      	cbz	r6, 4008dc <xQueueGenericSendFromISR+0x7c>
  4008ba:	2801      	cmp	r0, #1
  4008bc:	d10e      	bne.n	4008dc <xQueueGenericSendFromISR+0x7c>
								*pxHigherPriorityTaskWoken = pdTRUE;
  4008be:	6030      	str	r0, [r6, #0]
  4008c0:	e7e2      	b.n	400888 <xQueueGenericSendFromISR+0x28>
						if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
  4008c2:	6a63      	ldr	r3, [r4, #36]	; 0x24
  4008c4:	b90b      	cbnz	r3, 4008ca <xQueueGenericSendFromISR+0x6a>
			xReturn = pdPASS;
  4008c6:	2001      	movs	r0, #1
  4008c8:	e7de      	b.n	400888 <xQueueGenericSendFromISR+0x28>
							if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
  4008ca:	f104 0024 	add.w	r0, r4, #36	; 0x24
  4008ce:	4b07      	ldr	r3, [pc, #28]	; (4008ec <xQueueGenericSendFromISR+0x8c>)
  4008d0:	4798      	blx	r3
								if( pxHigherPriorityTaskWoken != NULL )
  4008d2:	b12e      	cbz	r6, 4008e0 <xQueueGenericSendFromISR+0x80>
  4008d4:	b120      	cbz	r0, 4008e0 <xQueueGenericSendFromISR+0x80>
									*pxHigherPriorityTaskWoken = pdTRUE;
  4008d6:	2001      	movs	r0, #1
  4008d8:	6030      	str	r0, [r6, #0]
  4008da:	e7d5      	b.n	400888 <xQueueGenericSendFromISR+0x28>
			xReturn = pdPASS;
  4008dc:	2001      	movs	r0, #1
  4008de:	e7d3      	b.n	400888 <xQueueGenericSendFromISR+0x28>
  4008e0:	2001      	movs	r0, #1
  4008e2:	e7d1      	b.n	400888 <xQueueGenericSendFromISR+0x28>
  4008e4:	00400485 	.word	0x00400485
  4008e8:	00400509 	.word	0x00400509
  4008ec:	0040125d 	.word	0x0040125d

004008f0 <xQueueGenericReceive>:
{
  4008f0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
  4008f4:	b084      	sub	sp, #16
  4008f6:	4604      	mov	r4, r0
  4008f8:	468a      	mov	sl, r1
  4008fa:	9201      	str	r2, [sp, #4]
  4008fc:	4699      	mov	r9, r3
BaseType_t xEntryTimeSet = pdFALSE;
  4008fe:	2600      	movs	r6, #0
		taskENTER_CRITICAL();
  400900:	4d4d      	ldr	r5, [pc, #308]	; (400a38 <xQueueGenericReceive+0x148>)
					vTaskSetTimeOutState( &xTimeOut );
  400902:	f8df 8164 	ldr.w	r8, [pc, #356]	; 400a68 <xQueueGenericReceive+0x178>
					portYIELD_WITHIN_API();
  400906:	4f4d      	ldr	r7, [pc, #308]	; (400a3c <xQueueGenericReceive+0x14c>)
  400908:	e054      	b.n	4009b4 <xQueueGenericReceive+0xc4>
				pcOriginalReadPosition = pxQueue->u.pcReadFrom;
  40090a:	68e5      	ldr	r5, [r4, #12]
				prvCopyDataFromQueue( pxQueue, pvBuffer );
  40090c:	4651      	mov	r1, sl
  40090e:	4620      	mov	r0, r4
  400910:	4b4b      	ldr	r3, [pc, #300]	; (400a40 <xQueueGenericReceive+0x150>)
  400912:	4798      	blx	r3
				if( xJustPeeking == pdFALSE )
  400914:	f1b9 0f00 	cmp.w	r9, #0
  400918:	d11f      	bne.n	40095a <xQueueGenericReceive+0x6a>
					--( pxQueue->uxMessagesWaiting );
  40091a:	6ba3      	ldr	r3, [r4, #56]	; 0x38
  40091c:	3b01      	subs	r3, #1
  40091e:	63a3      	str	r3, [r4, #56]	; 0x38
						if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
  400920:	6823      	ldr	r3, [r4, #0]
  400922:	b13b      	cbz	r3, 400934 <xQueueGenericReceive+0x44>
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
  400924:	6923      	ldr	r3, [r4, #16]
  400926:	b94b      	cbnz	r3, 40093c <xQueueGenericReceive+0x4c>
				taskEXIT_CRITICAL();
  400928:	4b46      	ldr	r3, [pc, #280]	; (400a44 <xQueueGenericReceive+0x154>)
  40092a:	4798      	blx	r3
				return pdPASS;
  40092c:	2001      	movs	r0, #1
}
  40092e:	b004      	add	sp, #16
  400930:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
							pxQueue->pxMutexHolder = ( int8_t * ) pvTaskIncrementMutexHeldCount(); /*lint !e961 Cast is not redundant as TaskHandle_t is a typedef. */
  400934:	4b44      	ldr	r3, [pc, #272]	; (400a48 <xQueueGenericReceive+0x158>)
  400936:	4798      	blx	r3
  400938:	6060      	str	r0, [r4, #4]
  40093a:	e7f3      	b.n	400924 <xQueueGenericReceive+0x34>
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) == pdTRUE )
  40093c:	f104 0010 	add.w	r0, r4, #16
  400940:	4b42      	ldr	r3, [pc, #264]	; (400a4c <xQueueGenericReceive+0x15c>)
  400942:	4798      	blx	r3
  400944:	2801      	cmp	r0, #1
  400946:	d1ef      	bne.n	400928 <xQueueGenericReceive+0x38>
							queueYIELD_IF_USING_PREEMPTION();
  400948:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
  40094c:	4b3b      	ldr	r3, [pc, #236]	; (400a3c <xQueueGenericReceive+0x14c>)
  40094e:	601a      	str	r2, [r3, #0]
  400950:	f3bf 8f4f 	dsb	sy
  400954:	f3bf 8f6f 	isb	sy
  400958:	e7e6      	b.n	400928 <xQueueGenericReceive+0x38>
					pxQueue->u.pcReadFrom = pcOriginalReadPosition;
  40095a:	60e5      	str	r5, [r4, #12]
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
  40095c:	6a63      	ldr	r3, [r4, #36]	; 0x24
  40095e:	2b00      	cmp	r3, #0
  400960:	d0e2      	beq.n	400928 <xQueueGenericReceive+0x38>
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
  400962:	f104 0024 	add.w	r0, r4, #36	; 0x24
  400966:	4b39      	ldr	r3, [pc, #228]	; (400a4c <xQueueGenericReceive+0x15c>)
  400968:	4798      	blx	r3
  40096a:	2800      	cmp	r0, #0
  40096c:	d0dc      	beq.n	400928 <xQueueGenericReceive+0x38>
							queueYIELD_IF_USING_PREEMPTION();
  40096e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
  400972:	4b32      	ldr	r3, [pc, #200]	; (400a3c <xQueueGenericReceive+0x14c>)
  400974:	601a      	str	r2, [r3, #0]
  400976:	f3bf 8f4f 	dsb	sy
  40097a:	f3bf 8f6f 	isb	sy
  40097e:	e7d3      	b.n	400928 <xQueueGenericReceive+0x38>
					taskEXIT_CRITICAL();
  400980:	4b30      	ldr	r3, [pc, #192]	; (400a44 <xQueueGenericReceive+0x154>)
  400982:	4798      	blx	r3
					return errQUEUE_EMPTY;
  400984:	2000      	movs	r0, #0
  400986:	e7d2      	b.n	40092e <xQueueGenericReceive+0x3e>
					vTaskSetTimeOutState( &xTimeOut );
  400988:	a802      	add	r0, sp, #8
  40098a:	47c0      	blx	r8
  40098c:	e01b      	b.n	4009c6 <xQueueGenericReceive+0xd6>
		prvLockQueue( pxQueue );
  40098e:	2300      	movs	r3, #0
  400990:	6463      	str	r3, [r4, #68]	; 0x44
  400992:	e021      	b.n	4009d8 <xQueueGenericReceive+0xe8>
  400994:	2300      	movs	r3, #0
  400996:	64a3      	str	r3, [r4, #72]	; 0x48
  400998:	e022      	b.n	4009e0 <xQueueGenericReceive+0xf0>
						taskENTER_CRITICAL();
  40099a:	47a8      	blx	r5
							vTaskPriorityInherit( ( void * ) pxQueue->pxMutexHolder );
  40099c:	6860      	ldr	r0, [r4, #4]
  40099e:	4b2c      	ldr	r3, [pc, #176]	; (400a50 <xQueueGenericReceive+0x160>)
  4009a0:	4798      	blx	r3
						taskEXIT_CRITICAL();
  4009a2:	4b28      	ldr	r3, [pc, #160]	; (400a44 <xQueueGenericReceive+0x154>)
  4009a4:	4798      	blx	r3
  4009a6:	e02b      	b.n	400a00 <xQueueGenericReceive+0x110>
				prvUnlockQueue( pxQueue );
  4009a8:	4620      	mov	r0, r4
  4009aa:	4b2a      	ldr	r3, [pc, #168]	; (400a54 <xQueueGenericReceive+0x164>)
  4009ac:	4798      	blx	r3
				( void ) xTaskResumeAll();
  4009ae:	4b2a      	ldr	r3, [pc, #168]	; (400a58 <xQueueGenericReceive+0x168>)
  4009b0:	4798      	blx	r3
  4009b2:	2601      	movs	r6, #1
		taskENTER_CRITICAL();
  4009b4:	47a8      	blx	r5
			if( pxQueue->uxMessagesWaiting > ( UBaseType_t ) 0 )
  4009b6:	6ba3      	ldr	r3, [r4, #56]	; 0x38
  4009b8:	2b00      	cmp	r3, #0
  4009ba:	d1a6      	bne.n	40090a <xQueueGenericReceive+0x1a>
				if( xTicksToWait == ( TickType_t ) 0 )
  4009bc:	9b01      	ldr	r3, [sp, #4]
  4009be:	2b00      	cmp	r3, #0
  4009c0:	d0de      	beq.n	400980 <xQueueGenericReceive+0x90>
				else if( xEntryTimeSet == pdFALSE )
  4009c2:	2e00      	cmp	r6, #0
  4009c4:	d0e0      	beq.n	400988 <xQueueGenericReceive+0x98>
		taskEXIT_CRITICAL();
  4009c6:	4b1f      	ldr	r3, [pc, #124]	; (400a44 <xQueueGenericReceive+0x154>)
  4009c8:	4798      	blx	r3
		vTaskSuspendAll();
  4009ca:	4b24      	ldr	r3, [pc, #144]	; (400a5c <xQueueGenericReceive+0x16c>)
  4009cc:	4798      	blx	r3
		prvLockQueue( pxQueue );
  4009ce:	47a8      	blx	r5
  4009d0:	6c63      	ldr	r3, [r4, #68]	; 0x44
  4009d2:	f1b3 3fff 	cmp.w	r3, #4294967295
  4009d6:	d0da      	beq.n	40098e <xQueueGenericReceive+0x9e>
  4009d8:	6ca3      	ldr	r3, [r4, #72]	; 0x48
  4009da:	f1b3 3fff 	cmp.w	r3, #4294967295
  4009de:	d0d9      	beq.n	400994 <xQueueGenericReceive+0xa4>
  4009e0:	4b18      	ldr	r3, [pc, #96]	; (400a44 <xQueueGenericReceive+0x154>)
  4009e2:	4798      	blx	r3
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
  4009e4:	a901      	add	r1, sp, #4
  4009e6:	a802      	add	r0, sp, #8
  4009e8:	4b1d      	ldr	r3, [pc, #116]	; (400a60 <xQueueGenericReceive+0x170>)
  4009ea:	4798      	blx	r3
  4009ec:	b9e0      	cbnz	r0, 400a28 <xQueueGenericReceive+0x138>
	taskENTER_CRITICAL();
  4009ee:	47a8      	blx	r5
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
  4009f0:	6ba6      	ldr	r6, [r4, #56]	; 0x38
	taskEXIT_CRITICAL();
  4009f2:	4b14      	ldr	r3, [pc, #80]	; (400a44 <xQueueGenericReceive+0x154>)
  4009f4:	4798      	blx	r3
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
  4009f6:	2e00      	cmp	r6, #0
  4009f8:	d1d6      	bne.n	4009a8 <xQueueGenericReceive+0xb8>
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
  4009fa:	6823      	ldr	r3, [r4, #0]
  4009fc:	2b00      	cmp	r3, #0
  4009fe:	d0cc      	beq.n	40099a <xQueueGenericReceive+0xaa>
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
  400a00:	9901      	ldr	r1, [sp, #4]
  400a02:	f104 0024 	add.w	r0, r4, #36	; 0x24
  400a06:	4b17      	ldr	r3, [pc, #92]	; (400a64 <xQueueGenericReceive+0x174>)
  400a08:	4798      	blx	r3
				prvUnlockQueue( pxQueue );
  400a0a:	4620      	mov	r0, r4
  400a0c:	4b11      	ldr	r3, [pc, #68]	; (400a54 <xQueueGenericReceive+0x164>)
  400a0e:	4798      	blx	r3
				if( xTaskResumeAll() == pdFALSE )
  400a10:	4b11      	ldr	r3, [pc, #68]	; (400a58 <xQueueGenericReceive+0x168>)
  400a12:	4798      	blx	r3
  400a14:	2800      	cmp	r0, #0
  400a16:	d1cc      	bne.n	4009b2 <xQueueGenericReceive+0xc2>
					portYIELD_WITHIN_API();
  400a18:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
  400a1c:	603b      	str	r3, [r7, #0]
  400a1e:	f3bf 8f4f 	dsb	sy
  400a22:	f3bf 8f6f 	isb	sy
  400a26:	e7c4      	b.n	4009b2 <xQueueGenericReceive+0xc2>
			prvUnlockQueue( pxQueue );
  400a28:	4620      	mov	r0, r4
  400a2a:	4b0a      	ldr	r3, [pc, #40]	; (400a54 <xQueueGenericReceive+0x164>)
  400a2c:	4798      	blx	r3
			( void ) xTaskResumeAll();
  400a2e:	4b0a      	ldr	r3, [pc, #40]	; (400a58 <xQueueGenericReceive+0x168>)
  400a30:	4798      	blx	r3
			return errQUEUE_EMPTY;
  400a32:	2000      	movs	r0, #0
  400a34:	e77b      	b.n	40092e <xQueueGenericReceive+0x3e>
  400a36:	bf00      	nop
  400a38:	004002d1 	.word	0x004002d1
  400a3c:	e000ed04 	.word	0xe000ed04
  400a40:	0040055d 	.word	0x0040055d
  400a44:	004002f5 	.word	0x004002f5
  400a48:	004014ad 	.word	0x004014ad
  400a4c:	0040125d 	.word	0x0040125d
  400a50:	00401385 	.word	0x00401385
  400a54:	00400585 	.word	0x00400585
  400a58:	00400f45 	.word	0x00400f45
  400a5c:	00400df1 	.word	0x00400df1
  400a60:	004012f5 	.word	0x004012f5
  400a64:	00401189 	.word	0x00401189
  400a68:	004012dd 	.word	0x004012dd

00400a6c <vQueueAddToRegistry>:
	{
  400a6c:	b410      	push	{r4}
			if( xQueueRegistry[ ux ].pcQueueName == NULL )
  400a6e:	4b0b      	ldr	r3, [pc, #44]	; (400a9c <vQueueAddToRegistry+0x30>)
  400a70:	681b      	ldr	r3, [r3, #0]
  400a72:	b153      	cbz	r3, 400a8a <vQueueAddToRegistry+0x1e>
  400a74:	2301      	movs	r3, #1
  400a76:	4c09      	ldr	r4, [pc, #36]	; (400a9c <vQueueAddToRegistry+0x30>)
  400a78:	f854 2033 	ldr.w	r2, [r4, r3, lsl #3]
  400a7c:	b132      	cbz	r2, 400a8c <vQueueAddToRegistry+0x20>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
  400a7e:	3301      	adds	r3, #1
  400a80:	2b08      	cmp	r3, #8
  400a82:	d1f9      	bne.n	400a78 <vQueueAddToRegistry+0xc>
	}
  400a84:	f85d 4b04 	ldr.w	r4, [sp], #4
  400a88:	4770      	bx	lr
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
  400a8a:	2300      	movs	r3, #0
				xQueueRegistry[ ux ].pcQueueName = pcQueueName;
  400a8c:	4a03      	ldr	r2, [pc, #12]	; (400a9c <vQueueAddToRegistry+0x30>)
  400a8e:	f842 1033 	str.w	r1, [r2, r3, lsl #3]
				xQueueRegistry[ ux ].xHandle = xQueue;
  400a92:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
  400a96:	6058      	str	r0, [r3, #4]
				break;
  400a98:	e7f4      	b.n	400a84 <vQueueAddToRegistry+0x18>
  400a9a:	bf00      	nop
  400a9c:	2040c3c0 	.word	0x2040c3c0

00400aa0 <vQueueWaitForMessageRestricted>:
	{
  400aa0:	b570      	push	{r4, r5, r6, lr}
  400aa2:	4604      	mov	r4, r0
  400aa4:	460d      	mov	r5, r1
  400aa6:	4616      	mov	r6, r2
		prvLockQueue( pxQueue );
  400aa8:	4b0f      	ldr	r3, [pc, #60]	; (400ae8 <vQueueWaitForMessageRestricted+0x48>)
  400aaa:	4798      	blx	r3
  400aac:	6c63      	ldr	r3, [r4, #68]	; 0x44
  400aae:	f1b3 3fff 	cmp.w	r3, #4294967295
  400ab2:	d00b      	beq.n	400acc <vQueueWaitForMessageRestricted+0x2c>
  400ab4:	6ca3      	ldr	r3, [r4, #72]	; 0x48
  400ab6:	f1b3 3fff 	cmp.w	r3, #4294967295
  400aba:	d00a      	beq.n	400ad2 <vQueueWaitForMessageRestricted+0x32>
  400abc:	4b0b      	ldr	r3, [pc, #44]	; (400aec <vQueueWaitForMessageRestricted+0x4c>)
  400abe:	4798      	blx	r3
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
  400ac0:	6ba3      	ldr	r3, [r4, #56]	; 0x38
  400ac2:	b14b      	cbz	r3, 400ad8 <vQueueWaitForMessageRestricted+0x38>
		prvUnlockQueue( pxQueue );
  400ac4:	4620      	mov	r0, r4
  400ac6:	4b0a      	ldr	r3, [pc, #40]	; (400af0 <vQueueWaitForMessageRestricted+0x50>)
  400ac8:	4798      	blx	r3
  400aca:	bd70      	pop	{r4, r5, r6, pc}
		prvLockQueue( pxQueue );
  400acc:	2300      	movs	r3, #0
  400ace:	6463      	str	r3, [r4, #68]	; 0x44
  400ad0:	e7f0      	b.n	400ab4 <vQueueWaitForMessageRestricted+0x14>
  400ad2:	2300      	movs	r3, #0
  400ad4:	64a3      	str	r3, [r4, #72]	; 0x48
  400ad6:	e7f1      	b.n	400abc <vQueueWaitForMessageRestricted+0x1c>
			vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
  400ad8:	4632      	mov	r2, r6
  400ada:	4629      	mov	r1, r5
  400adc:	f104 0024 	add.w	r0, r4, #36	; 0x24
  400ae0:	4b04      	ldr	r3, [pc, #16]	; (400af4 <vQueueWaitForMessageRestricted+0x54>)
  400ae2:	4798      	blx	r3
  400ae4:	e7ee      	b.n	400ac4 <vQueueWaitForMessageRestricted+0x24>
  400ae6:	bf00      	nop
  400ae8:	004002d1 	.word	0x004002d1
  400aec:	004002f5 	.word	0x004002f5
  400af0:	00400585 	.word	0x00400585
  400af4:	004011f5 	.word	0x004011f5

00400af8 <prvResetNextTaskUnblockTime>:

static void prvResetNextTaskUnblockTime( void )
{
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
  400af8:	4b08      	ldr	r3, [pc, #32]	; (400b1c <prvResetNextTaskUnblockTime+0x24>)
  400afa:	681b      	ldr	r3, [r3, #0]
  400afc:	681b      	ldr	r3, [r3, #0]
  400afe:	b13b      	cbz	r3, 400b10 <prvResetNextTaskUnblockTime+0x18>
	{
		/* The new current delayed list is not empty, get the value of
		the item at the head of the delayed list.  This is the time at
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
  400b00:	4b06      	ldr	r3, [pc, #24]	; (400b1c <prvResetNextTaskUnblockTime+0x24>)
  400b02:	681b      	ldr	r3, [r3, #0]
  400b04:	68db      	ldr	r3, [r3, #12]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xGenericListItem ) );
  400b06:	68db      	ldr	r3, [r3, #12]
  400b08:	685a      	ldr	r2, [r3, #4]
  400b0a:	4b05      	ldr	r3, [pc, #20]	; (400b20 <prvResetNextTaskUnblockTime+0x28>)
  400b0c:	601a      	str	r2, [r3, #0]
  400b0e:	4770      	bx	lr
		xNextTaskUnblockTime = portMAX_DELAY;
  400b10:	f04f 32ff 	mov.w	r2, #4294967295
  400b14:	4b02      	ldr	r3, [pc, #8]	; (400b20 <prvResetNextTaskUnblockTime+0x28>)
  400b16:	601a      	str	r2, [r3, #0]
  400b18:	4770      	bx	lr
  400b1a:	bf00      	nop
  400b1c:	2040c1e0 	.word	0x2040c1e0
  400b20:	2040c28c 	.word	0x2040c28c

00400b24 <prvAddCurrentTaskToDelayedList>:
{
  400b24:	b510      	push	{r4, lr}
	listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xGenericListItem ), xTimeToWake );
  400b26:	4b0f      	ldr	r3, [pc, #60]	; (400b64 <prvAddCurrentTaskToDelayedList+0x40>)
  400b28:	681b      	ldr	r3, [r3, #0]
  400b2a:	6058      	str	r0, [r3, #4]
	if( xTimeToWake < xTickCount )
  400b2c:	4b0e      	ldr	r3, [pc, #56]	; (400b68 <prvAddCurrentTaskToDelayedList+0x44>)
  400b2e:	681b      	ldr	r3, [r3, #0]
  400b30:	4298      	cmp	r0, r3
  400b32:	d30e      	bcc.n	400b52 <prvAddCurrentTaskToDelayedList+0x2e>
  400b34:	4604      	mov	r4, r0
		vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xGenericListItem ) );
  400b36:	4b0d      	ldr	r3, [pc, #52]	; (400b6c <prvAddCurrentTaskToDelayedList+0x48>)
  400b38:	6818      	ldr	r0, [r3, #0]
  400b3a:	4b0a      	ldr	r3, [pc, #40]	; (400b64 <prvAddCurrentTaskToDelayedList+0x40>)
  400b3c:	6819      	ldr	r1, [r3, #0]
  400b3e:	3104      	adds	r1, #4
  400b40:	4b0b      	ldr	r3, [pc, #44]	; (400b70 <prvAddCurrentTaskToDelayedList+0x4c>)
  400b42:	4798      	blx	r3
		if( xTimeToWake < xNextTaskUnblockTime )
  400b44:	4b0b      	ldr	r3, [pc, #44]	; (400b74 <prvAddCurrentTaskToDelayedList+0x50>)
  400b46:	681b      	ldr	r3, [r3, #0]
  400b48:	429c      	cmp	r4, r3
  400b4a:	d201      	bcs.n	400b50 <prvAddCurrentTaskToDelayedList+0x2c>
			xNextTaskUnblockTime = xTimeToWake;
  400b4c:	4b09      	ldr	r3, [pc, #36]	; (400b74 <prvAddCurrentTaskToDelayedList+0x50>)
  400b4e:	601c      	str	r4, [r3, #0]
  400b50:	bd10      	pop	{r4, pc}
		vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xGenericListItem ) );
  400b52:	4b09      	ldr	r3, [pc, #36]	; (400b78 <prvAddCurrentTaskToDelayedList+0x54>)
  400b54:	6818      	ldr	r0, [r3, #0]
  400b56:	4b03      	ldr	r3, [pc, #12]	; (400b64 <prvAddCurrentTaskToDelayedList+0x40>)
  400b58:	6819      	ldr	r1, [r3, #0]
  400b5a:	3104      	adds	r1, #4
  400b5c:	4b04      	ldr	r3, [pc, #16]	; (400b70 <prvAddCurrentTaskToDelayedList+0x4c>)
  400b5e:	4798      	blx	r3
  400b60:	bd10      	pop	{r4, pc}
  400b62:	bf00      	nop
  400b64:	2040c1dc 	.word	0x2040c1dc
  400b68:	2040c2d4 	.word	0x2040c2d4
  400b6c:	2040c1e0 	.word	0x2040c1e0
  400b70:	004001e1 	.word	0x004001e1
  400b74:	2040c28c 	.word	0x2040c28c
  400b78:	2040c1e4 	.word	0x2040c1e4

00400b7c <xTaskGenericCreate>:
{
  400b7c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  400b80:	b083      	sub	sp, #12
  400b82:	9000      	str	r0, [sp, #0]
  400b84:	460e      	mov	r6, r1
  400b86:	4617      	mov	r7, r2
  400b88:	9301      	str	r3, [sp, #4]
  400b8a:	f8dd b030 	ldr.w	fp, [sp, #48]	; 0x30
  400b8e:	f8dd a034 	ldr.w	sl, [sp, #52]	; 0x34
  400b92:	9d0e      	ldr	r5, [sp, #56]	; 0x38
		pxStack = ( StackType_t * ) pvPortMallocAligned( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ), puxStackBuffer ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
  400b94:	2d00      	cmp	r5, #0
  400b96:	f000 8089 	beq.w	400cac <xTaskGenericCreate+0x130>
			pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) );
  400b9a:	2058      	movs	r0, #88	; 0x58
  400b9c:	4b5f      	ldr	r3, [pc, #380]	; (400d1c <xTaskGenericCreate+0x1a0>)
  400b9e:	4798      	blx	r3
			if( pxNewTCB != NULL )
  400ba0:	4604      	mov	r4, r0
  400ba2:	2800      	cmp	r0, #0
  400ba4:	f000 8088 	beq.w	400cb8 <xTaskGenericCreate+0x13c>
				pxNewTCB->pxStack = pxStack;
  400ba8:	6305      	str	r5, [r0, #48]	; 0x30
			( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) usStackDepth * sizeof( StackType_t ) );
  400baa:	00ba      	lsls	r2, r7, #2
  400bac:	21a5      	movs	r1, #165	; 0xa5
  400bae:	4628      	mov	r0, r5
  400bb0:	4b5b      	ldr	r3, [pc, #364]	; (400d20 <xTaskGenericCreate+0x1a4>)
  400bb2:	4798      	blx	r3
			pxTopOfStack = pxNewTCB->pxStack + ( usStackDepth - ( uint16_t ) 1 );
  400bb4:	f06f 4340 	mvn.w	r3, #3221225472	; 0xc0000000
  400bb8:	443b      	add	r3, r7
  400bba:	6b25      	ldr	r5, [r4, #48]	; 0x30
  400bbc:	eb05 0583 	add.w	r5, r5, r3, lsl #2
			pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type. */
  400bc0:	f025 0507 	bic.w	r5, r5, #7
		pxTCB->pcTaskName[ x ] = pcName[ x ];
  400bc4:	7833      	ldrb	r3, [r6, #0]
  400bc6:	f884 3034 	strb.w	r3, [r4, #52]	; 0x34
		if( pcName[ x ] == 0x00 )
  400bca:	7833      	ldrb	r3, [r6, #0]
  400bcc:	b15b      	cbz	r3, 400be6 <xTaskGenericCreate+0x6a>
  400bce:	4633      	mov	r3, r6
  400bd0:	f104 0234 	add.w	r2, r4, #52	; 0x34
  400bd4:	3609      	adds	r6, #9
		pxTCB->pcTaskName[ x ] = pcName[ x ];
  400bd6:	7859      	ldrb	r1, [r3, #1]
  400bd8:	f802 1f01 	strb.w	r1, [r2, #1]!
		if( pcName[ x ] == 0x00 )
  400bdc:	f813 1f01 	ldrb.w	r1, [r3, #1]!
  400be0:	b109      	cbz	r1, 400be6 <xTaskGenericCreate+0x6a>
	for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
  400be2:	42b3      	cmp	r3, r6
  400be4:	d1f7      	bne.n	400bd6 <xTaskGenericCreate+0x5a>
	pxTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
  400be6:	2700      	movs	r7, #0
  400be8:	f884 703d 	strb.w	r7, [r4, #61]	; 0x3d
  400bec:	465e      	mov	r6, fp
  400bee:	2e04      	cmp	r6, #4
  400bf0:	bf28      	it	cs
  400bf2:	2604      	movcs	r6, #4
	pxTCB->uxPriority = uxPriority;
  400bf4:	62e6      	str	r6, [r4, #44]	; 0x2c
		pxTCB->uxBasePriority = uxPriority;
  400bf6:	64a6      	str	r6, [r4, #72]	; 0x48
		pxTCB->uxMutexesHeld = 0;
  400bf8:	64e7      	str	r7, [r4, #76]	; 0x4c
	vListInitialiseItem( &( pxTCB->xGenericListItem ) );
  400bfa:	f104 0804 	add.w	r8, r4, #4
  400bfe:	4640      	mov	r0, r8
  400c00:	f8df 9170 	ldr.w	r9, [pc, #368]	; 400d74 <xTaskGenericCreate+0x1f8>
  400c04:	47c8      	blx	r9
	vListInitialiseItem( &( pxTCB->xEventListItem ) );
  400c06:	f104 0018 	add.w	r0, r4, #24
  400c0a:	47c8      	blx	r9
	listSET_LIST_ITEM_OWNER( &( pxTCB->xGenericListItem ), pxTCB );
  400c0c:	6124      	str	r4, [r4, #16]
	listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
  400c0e:	f1c6 0605 	rsb	r6, r6, #5
  400c12:	61a6      	str	r6, [r4, #24]
	listSET_LIST_ITEM_OWNER( &( pxTCB->xEventListItem ), pxTCB );
  400c14:	6264      	str	r4, [r4, #36]	; 0x24
		pxTCB->ulNotifiedValue = 0;
  400c16:	6527      	str	r7, [r4, #80]	; 0x50
		pxTCB->eNotifyState = eNotWaitingNotification;
  400c18:	f884 7054 	strb.w	r7, [r4, #84]	; 0x54
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
  400c1c:	9a01      	ldr	r2, [sp, #4]
  400c1e:	9900      	ldr	r1, [sp, #0]
  400c20:	4628      	mov	r0, r5
  400c22:	4b40      	ldr	r3, [pc, #256]	; (400d24 <xTaskGenericCreate+0x1a8>)
  400c24:	4798      	blx	r3
  400c26:	6020      	str	r0, [r4, #0]
		if( ( void * ) pxCreatedTask != NULL )
  400c28:	f1ba 0f00 	cmp.w	sl, #0
  400c2c:	d001      	beq.n	400c32 <xTaskGenericCreate+0xb6>
			*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
  400c2e:	f8ca 4000 	str.w	r4, [sl]
		taskENTER_CRITICAL();
  400c32:	4b3d      	ldr	r3, [pc, #244]	; (400d28 <xTaskGenericCreate+0x1ac>)
  400c34:	4798      	blx	r3
			uxCurrentNumberOfTasks++;
  400c36:	4a3d      	ldr	r2, [pc, #244]	; (400d2c <xTaskGenericCreate+0x1b0>)
  400c38:	6813      	ldr	r3, [r2, #0]
  400c3a:	3301      	adds	r3, #1
  400c3c:	6013      	str	r3, [r2, #0]
			if( pxCurrentTCB == NULL )
  400c3e:	4b3c      	ldr	r3, [pc, #240]	; (400d30 <xTaskGenericCreate+0x1b4>)
  400c40:	681b      	ldr	r3, [r3, #0]
  400c42:	2b00      	cmp	r3, #0
  400c44:	d03e      	beq.n	400cc4 <xTaskGenericCreate+0x148>
				if( xSchedulerRunning == pdFALSE )
  400c46:	4b3b      	ldr	r3, [pc, #236]	; (400d34 <xTaskGenericCreate+0x1b8>)
  400c48:	681b      	ldr	r3, [r3, #0]
  400c4a:	b933      	cbnz	r3, 400c5a <xTaskGenericCreate+0xde>
					if( pxCurrentTCB->uxPriority <= uxPriority )
  400c4c:	4b38      	ldr	r3, [pc, #224]	; (400d30 <xTaskGenericCreate+0x1b4>)
  400c4e:	681b      	ldr	r3, [r3, #0]
  400c50:	6adb      	ldr	r3, [r3, #44]	; 0x2c
  400c52:	459b      	cmp	fp, r3
  400c54:	d301      	bcc.n	400c5a <xTaskGenericCreate+0xde>
						pxCurrentTCB = pxNewTCB;
  400c56:	4b36      	ldr	r3, [pc, #216]	; (400d30 <xTaskGenericCreate+0x1b4>)
  400c58:	601c      	str	r4, [r3, #0]
			uxTaskNumber++;
  400c5a:	4a37      	ldr	r2, [pc, #220]	; (400d38 <xTaskGenericCreate+0x1bc>)
  400c5c:	6813      	ldr	r3, [r2, #0]
  400c5e:	3301      	adds	r3, #1
  400c60:	6013      	str	r3, [r2, #0]
				pxNewTCB->uxTCBNumber = uxTaskNumber;
  400c62:	6423      	str	r3, [r4, #64]	; 0x40
			prvAddTaskToReadyList( pxNewTCB );
  400c64:	6ae0      	ldr	r0, [r4, #44]	; 0x2c
  400c66:	4a35      	ldr	r2, [pc, #212]	; (400d3c <xTaskGenericCreate+0x1c0>)
  400c68:	6811      	ldr	r1, [r2, #0]
  400c6a:	2301      	movs	r3, #1
  400c6c:	4083      	lsls	r3, r0
  400c6e:	430b      	orrs	r3, r1
  400c70:	6013      	str	r3, [r2, #0]
  400c72:	eb00 0080 	add.w	r0, r0, r0, lsl #2
  400c76:	4641      	mov	r1, r8
  400c78:	4b31      	ldr	r3, [pc, #196]	; (400d40 <xTaskGenericCreate+0x1c4>)
  400c7a:	eb03 0080 	add.w	r0, r3, r0, lsl #2
  400c7e:	4b31      	ldr	r3, [pc, #196]	; (400d44 <xTaskGenericCreate+0x1c8>)
  400c80:	4798      	blx	r3
		taskEXIT_CRITICAL();
  400c82:	4b31      	ldr	r3, [pc, #196]	; (400d48 <xTaskGenericCreate+0x1cc>)
  400c84:	4798      	blx	r3
		if( xSchedulerRunning != pdFALSE )
  400c86:	4b2b      	ldr	r3, [pc, #172]	; (400d34 <xTaskGenericCreate+0x1b8>)
  400c88:	681b      	ldr	r3, [r3, #0]
  400c8a:	2b00      	cmp	r3, #0
  400c8c:	d040      	beq.n	400d10 <xTaskGenericCreate+0x194>
			if( pxCurrentTCB->uxPriority < uxPriority )
  400c8e:	4b28      	ldr	r3, [pc, #160]	; (400d30 <xTaskGenericCreate+0x1b4>)
  400c90:	681b      	ldr	r3, [r3, #0]
  400c92:	6adb      	ldr	r3, [r3, #44]	; 0x2c
  400c94:	459b      	cmp	fp, r3
  400c96:	d93f      	bls.n	400d18 <xTaskGenericCreate+0x19c>
				taskYIELD_IF_USING_PREEMPTION();
  400c98:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
  400c9c:	4b2b      	ldr	r3, [pc, #172]	; (400d4c <xTaskGenericCreate+0x1d0>)
  400c9e:	601a      	str	r2, [r3, #0]
  400ca0:	f3bf 8f4f 	dsb	sy
  400ca4:	f3bf 8f6f 	isb	sy
			xReturn = pdPASS;
  400ca8:	2001      	movs	r0, #1
  400caa:	e032      	b.n	400d12 <xTaskGenericCreate+0x196>
		pxStack = ( StackType_t * ) pvPortMallocAligned( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ), puxStackBuffer ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
  400cac:	0090      	lsls	r0, r2, #2
  400cae:	4b1b      	ldr	r3, [pc, #108]	; (400d1c <xTaskGenericCreate+0x1a0>)
  400cb0:	4798      	blx	r3
		if( pxStack != NULL )
  400cb2:	4605      	mov	r5, r0
  400cb4:	b118      	cbz	r0, 400cbe <xTaskGenericCreate+0x142>
  400cb6:	e770      	b.n	400b9a <xTaskGenericCreate+0x1e>
				vPortFree( pxStack );
  400cb8:	4628      	mov	r0, r5
  400cba:	4b25      	ldr	r3, [pc, #148]	; (400d50 <xTaskGenericCreate+0x1d4>)
  400cbc:	4798      	blx	r3
		xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
  400cbe:	f04f 30ff 	mov.w	r0, #4294967295
  400cc2:	e026      	b.n	400d12 <xTaskGenericCreate+0x196>
				pxCurrentTCB =  pxNewTCB;
  400cc4:	4b1a      	ldr	r3, [pc, #104]	; (400d30 <xTaskGenericCreate+0x1b4>)
  400cc6:	601c      	str	r4, [r3, #0]
				if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
  400cc8:	6813      	ldr	r3, [r2, #0]
  400cca:	2b01      	cmp	r3, #1
  400ccc:	d1c5      	bne.n	400c5a <xTaskGenericCreate+0xde>
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
  400cce:	4e1c      	ldr	r6, [pc, #112]	; (400d40 <xTaskGenericCreate+0x1c4>)
  400cd0:	4630      	mov	r0, r6
  400cd2:	4d20      	ldr	r5, [pc, #128]	; (400d54 <xTaskGenericCreate+0x1d8>)
  400cd4:	47a8      	blx	r5
  400cd6:	f106 0014 	add.w	r0, r6, #20
  400cda:	47a8      	blx	r5
  400cdc:	f106 0028 	add.w	r0, r6, #40	; 0x28
  400ce0:	47a8      	blx	r5
  400ce2:	f106 003c 	add.w	r0, r6, #60	; 0x3c
  400ce6:	47a8      	blx	r5
  400ce8:	f106 0050 	add.w	r0, r6, #80	; 0x50
  400cec:	47a8      	blx	r5
	vListInitialise( &xDelayedTaskList1 );
  400cee:	4f1a      	ldr	r7, [pc, #104]	; (400d58 <xTaskGenericCreate+0x1dc>)
  400cf0:	4638      	mov	r0, r7
  400cf2:	47a8      	blx	r5
	vListInitialise( &xDelayedTaskList2 );
  400cf4:	4e19      	ldr	r6, [pc, #100]	; (400d5c <xTaskGenericCreate+0x1e0>)
  400cf6:	4630      	mov	r0, r6
  400cf8:	47a8      	blx	r5
	vListInitialise( &xPendingReadyList );
  400cfa:	4819      	ldr	r0, [pc, #100]	; (400d60 <xTaskGenericCreate+0x1e4>)
  400cfc:	47a8      	blx	r5
		vListInitialise( &xTasksWaitingTermination );
  400cfe:	4819      	ldr	r0, [pc, #100]	; (400d64 <xTaskGenericCreate+0x1e8>)
  400d00:	47a8      	blx	r5
		vListInitialise( &xSuspendedTaskList );
  400d02:	4819      	ldr	r0, [pc, #100]	; (400d68 <xTaskGenericCreate+0x1ec>)
  400d04:	47a8      	blx	r5
	pxDelayedTaskList = &xDelayedTaskList1;
  400d06:	4b19      	ldr	r3, [pc, #100]	; (400d6c <xTaskGenericCreate+0x1f0>)
  400d08:	601f      	str	r7, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
  400d0a:	4b19      	ldr	r3, [pc, #100]	; (400d70 <xTaskGenericCreate+0x1f4>)
  400d0c:	601e      	str	r6, [r3, #0]
  400d0e:	e7a4      	b.n	400c5a <xTaskGenericCreate+0xde>
			xReturn = pdPASS;
  400d10:	2001      	movs	r0, #1
}
  400d12:	b003      	add	sp, #12
  400d14:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
			xReturn = pdPASS;
  400d18:	2001      	movs	r0, #1
	return xReturn;
  400d1a:	e7fa      	b.n	400d12 <xTaskGenericCreate+0x196>
  400d1c:	00400411 	.word	0x00400411
  400d20:	00402839 	.word	0x00402839
  400d24:	00400285 	.word	0x00400285
  400d28:	004002d1 	.word	0x004002d1
  400d2c:	2040c24c 	.word	0x2040c24c
  400d30:	2040c1dc 	.word	0x2040c1dc
  400d34:	2040c2a8 	.word	0x2040c2a8
  400d38:	2040c258 	.word	0x2040c258
  400d3c:	2040c260 	.word	0x2040c260
  400d40:	2040c1e8 	.word	0x2040c1e8
  400d44:	004001c9 	.word	0x004001c9
  400d48:	004002f5 	.word	0x004002f5
  400d4c:	e000ed04 	.word	0xe000ed04
  400d50:	00400481 	.word	0x00400481
  400d54:	004001ad 	.word	0x004001ad
  400d58:	2040c264 	.word	0x2040c264
  400d5c:	2040c278 	.word	0x2040c278
  400d60:	2040c294 	.word	0x2040c294
  400d64:	2040c2c0 	.word	0x2040c2c0
  400d68:	2040c2ac 	.word	0x2040c2ac
  400d6c:	2040c1e0 	.word	0x2040c1e0
  400d70:	2040c1e4 	.word	0x2040c1e4
  400d74:	004001c3 	.word	0x004001c3

00400d78 <vTaskStartScheduler>:
{
  400d78:	b510      	push	{r4, lr}
  400d7a:	b084      	sub	sp, #16
		xReturn = xTaskCreate( prvIdleTask, "IDLE", tskIDLE_STACK_SIZE, ( void * ) NULL, ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), NULL );  /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */
  400d7c:	2300      	movs	r3, #0
  400d7e:	9303      	str	r3, [sp, #12]
  400d80:	9302      	str	r3, [sp, #8]
  400d82:	9301      	str	r3, [sp, #4]
  400d84:	9300      	str	r3, [sp, #0]
  400d86:	2282      	movs	r2, #130	; 0x82
  400d88:	4911      	ldr	r1, [pc, #68]	; (400dd0 <vTaskStartScheduler+0x58>)
  400d8a:	4812      	ldr	r0, [pc, #72]	; (400dd4 <vTaskStartScheduler+0x5c>)
  400d8c:	4c12      	ldr	r4, [pc, #72]	; (400dd8 <vTaskStartScheduler+0x60>)
  400d8e:	47a0      	blx	r4
		if( xReturn == pdPASS )
  400d90:	2801      	cmp	r0, #1
  400d92:	d001      	beq.n	400d98 <vTaskStartScheduler+0x20>
}
  400d94:	b004      	add	sp, #16
  400d96:	bd10      	pop	{r4, pc}
			xReturn = xTimerCreateTimerTask();
  400d98:	4b10      	ldr	r3, [pc, #64]	; (400ddc <vTaskStartScheduler+0x64>)
  400d9a:	4798      	blx	r3
	if( xReturn == pdPASS )
  400d9c:	2801      	cmp	r0, #1
  400d9e:	d1f9      	bne.n	400d94 <vTaskStartScheduler+0x1c>
	__asm volatile
  400da0:	f04f 0380 	mov.w	r3, #128	; 0x80
  400da4:	b672      	cpsid	i
  400da6:	f383 8811 	msr	BASEPRI, r3
  400daa:	f3bf 8f6f 	isb	sy
  400dae:	f3bf 8f4f 	dsb	sy
  400db2:	b662      	cpsie	i
		xNextTaskUnblockTime = portMAX_DELAY;
  400db4:	f04f 32ff 	mov.w	r2, #4294967295
  400db8:	4b09      	ldr	r3, [pc, #36]	; (400de0 <vTaskStartScheduler+0x68>)
  400dba:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
  400dbc:	2201      	movs	r2, #1
  400dbe:	4b09      	ldr	r3, [pc, #36]	; (400de4 <vTaskStartScheduler+0x6c>)
  400dc0:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) 0U;
  400dc2:	2200      	movs	r2, #0
  400dc4:	4b08      	ldr	r3, [pc, #32]	; (400de8 <vTaskStartScheduler+0x70>)
  400dc6:	601a      	str	r2, [r3, #0]
		if( xPortStartScheduler() != pdFALSE )
  400dc8:	4b08      	ldr	r3, [pc, #32]	; (400dec <vTaskStartScheduler+0x74>)
  400dca:	4798      	blx	r3
}
  400dcc:	e7e2      	b.n	400d94 <vTaskStartScheduler+0x1c>
  400dce:	bf00      	nop
  400dd0:	00405604 	.word	0x00405604
  400dd4:	00401041 	.word	0x00401041
  400dd8:	00400b7d 	.word	0x00400b7d
  400ddc:	00401585 	.word	0x00401585
  400de0:	2040c28c 	.word	0x2040c28c
  400de4:	2040c2a8 	.word	0x2040c2a8
  400de8:	2040c2d4 	.word	0x2040c2d4
  400dec:	004003c1 	.word	0x004003c1

00400df0 <vTaskSuspendAll>:
	++uxSchedulerSuspended;
  400df0:	4a02      	ldr	r2, [pc, #8]	; (400dfc <vTaskSuspendAll+0xc>)
  400df2:	6813      	ldr	r3, [r2, #0]
  400df4:	3301      	adds	r3, #1
  400df6:	6013      	str	r3, [r2, #0]
  400df8:	4770      	bx	lr
  400dfa:	bf00      	nop
  400dfc:	2040c254 	.word	0x2040c254

00400e00 <xTaskGetTickCount>:
		xTicks = xTickCount;
  400e00:	4b01      	ldr	r3, [pc, #4]	; (400e08 <xTaskGetTickCount+0x8>)
  400e02:	6818      	ldr	r0, [r3, #0]
}
  400e04:	4770      	bx	lr
  400e06:	bf00      	nop
  400e08:	2040c2d4 	.word	0x2040c2d4

00400e0c <xTaskIncrementTick>:
{
  400e0c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
  400e10:	4b3d      	ldr	r3, [pc, #244]	; (400f08 <xTaskIncrementTick+0xfc>)
  400e12:	681b      	ldr	r3, [r3, #0]
  400e14:	2b00      	cmp	r3, #0
  400e16:	d16e      	bne.n	400ef6 <xTaskIncrementTick+0xea>
		++xTickCount;
  400e18:	4b3c      	ldr	r3, [pc, #240]	; (400f0c <xTaskIncrementTick+0x100>)
  400e1a:	681a      	ldr	r2, [r3, #0]
  400e1c:	3201      	adds	r2, #1
  400e1e:	601a      	str	r2, [r3, #0]
			const TickType_t xConstTickCount = xTickCount;
  400e20:	f8d3 a000 	ldr.w	sl, [r3]
			if( xConstTickCount == ( TickType_t ) 0U )
  400e24:	f1ba 0f00 	cmp.w	sl, #0
  400e28:	d01b      	beq.n	400e62 <xTaskIncrementTick+0x56>
			if( xConstTickCount >= xNextTaskUnblockTime )
  400e2a:	4b39      	ldr	r3, [pc, #228]	; (400f10 <xTaskIncrementTick+0x104>)
  400e2c:	681b      	ldr	r3, [r3, #0]
  400e2e:	459a      	cmp	sl, r3
  400e30:	d224      	bcs.n	400e7c <xTaskIncrementTick+0x70>
BaseType_t xSwitchRequired = pdFALSE;
  400e32:	2600      	movs	r6, #0
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
  400e34:	4b37      	ldr	r3, [pc, #220]	; (400f14 <xTaskIncrementTick+0x108>)
  400e36:	681b      	ldr	r3, [r3, #0]
  400e38:	6adb      	ldr	r3, [r3, #44]	; 0x2c
  400e3a:	eb03 0383 	add.w	r3, r3, r3, lsl #2
  400e3e:	4a36      	ldr	r2, [pc, #216]	; (400f18 <xTaskIncrementTick+0x10c>)
  400e40:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
				xSwitchRequired = pdTRUE;
  400e44:	2b02      	cmp	r3, #2
  400e46:	bf28      	it	cs
  400e48:	2601      	movcs	r6, #1
			if( uxPendedTicks == ( UBaseType_t ) 0U )
  400e4a:	4b34      	ldr	r3, [pc, #208]	; (400f1c <xTaskIncrementTick+0x110>)
  400e4c:	681b      	ldr	r3, [r3, #0]
  400e4e:	2b00      	cmp	r3, #0
  400e50:	d04e      	beq.n	400ef0 <xTaskIncrementTick+0xe4>
		if( xYieldPending != pdFALSE )
  400e52:	4b33      	ldr	r3, [pc, #204]	; (400f20 <xTaskIncrementTick+0x114>)
  400e54:	681b      	ldr	r3, [r3, #0]
			xSwitchRequired = pdTRUE;
  400e56:	2b00      	cmp	r3, #0
}
  400e58:	bf0c      	ite	eq
  400e5a:	4630      	moveq	r0, r6
  400e5c:	2001      	movne	r0, #1
  400e5e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
				taskSWITCH_DELAYED_LISTS();
  400e62:	4a30      	ldr	r2, [pc, #192]	; (400f24 <xTaskIncrementTick+0x118>)
  400e64:	6811      	ldr	r1, [r2, #0]
  400e66:	4b30      	ldr	r3, [pc, #192]	; (400f28 <xTaskIncrementTick+0x11c>)
  400e68:	6818      	ldr	r0, [r3, #0]
  400e6a:	6010      	str	r0, [r2, #0]
  400e6c:	6019      	str	r1, [r3, #0]
  400e6e:	4a2f      	ldr	r2, [pc, #188]	; (400f2c <xTaskIncrementTick+0x120>)
  400e70:	6813      	ldr	r3, [r2, #0]
  400e72:	3301      	adds	r3, #1
  400e74:	6013      	str	r3, [r2, #0]
  400e76:	4b2e      	ldr	r3, [pc, #184]	; (400f30 <xTaskIncrementTick+0x124>)
  400e78:	4798      	blx	r3
  400e7a:	e7d6      	b.n	400e2a <xTaskIncrementTick+0x1e>
  400e7c:	2600      	movs	r6, #0
					if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
  400e7e:	4f29      	ldr	r7, [pc, #164]	; (400f24 <xTaskIncrementTick+0x118>)
						( void ) uxListRemove( &( pxTCB->xGenericListItem ) );
  400e80:	f8df 90b8 	ldr.w	r9, [pc, #184]	; 400f3c <xTaskIncrementTick+0x130>
						prvAddTaskToReadyList( pxTCB );
  400e84:	f8df 80b8 	ldr.w	r8, [pc, #184]	; 400f40 <xTaskIncrementTick+0x134>
  400e88:	e021      	b.n	400ece <xTaskIncrementTick+0xc2>
						xNextTaskUnblockTime = portMAX_DELAY;
  400e8a:	f04f 32ff 	mov.w	r2, #4294967295
  400e8e:	4b20      	ldr	r3, [pc, #128]	; (400f10 <xTaskIncrementTick+0x104>)
  400e90:	601a      	str	r2, [r3, #0]
						break;
  400e92:	e7cf      	b.n	400e34 <xTaskIncrementTick+0x28>
							xNextTaskUnblockTime = xItemValue;
  400e94:	4a1e      	ldr	r2, [pc, #120]	; (400f10 <xTaskIncrementTick+0x104>)
  400e96:	6013      	str	r3, [r2, #0]
							break;
  400e98:	e7cc      	b.n	400e34 <xTaskIncrementTick+0x28>
							( void ) uxListRemove( &( pxTCB->xEventListItem ) );
  400e9a:	f104 0018 	add.w	r0, r4, #24
  400e9e:	47c8      	blx	r9
						prvAddTaskToReadyList( pxTCB );
  400ea0:	6ae0      	ldr	r0, [r4, #44]	; 0x2c
  400ea2:	f8d8 2000 	ldr.w	r2, [r8]
  400ea6:	2301      	movs	r3, #1
  400ea8:	4083      	lsls	r3, r0
  400eaa:	4313      	orrs	r3, r2
  400eac:	f8c8 3000 	str.w	r3, [r8]
  400eb0:	eb00 0080 	add.w	r0, r0, r0, lsl #2
  400eb4:	4629      	mov	r1, r5
  400eb6:	4b18      	ldr	r3, [pc, #96]	; (400f18 <xTaskIncrementTick+0x10c>)
  400eb8:	eb03 0080 	add.w	r0, r3, r0, lsl #2
  400ebc:	4b1d      	ldr	r3, [pc, #116]	; (400f34 <xTaskIncrementTick+0x128>)
  400ebe:	4798      	blx	r3
							if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
  400ec0:	4b14      	ldr	r3, [pc, #80]	; (400f14 <xTaskIncrementTick+0x108>)
  400ec2:	681b      	ldr	r3, [r3, #0]
  400ec4:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
  400ec6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
								xSwitchRequired = pdTRUE;
  400ec8:	429a      	cmp	r2, r3
  400eca:	bf28      	it	cs
  400ecc:	2601      	movcs	r6, #1
					if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
  400ece:	683b      	ldr	r3, [r7, #0]
  400ed0:	681b      	ldr	r3, [r3, #0]
  400ed2:	2b00      	cmp	r3, #0
  400ed4:	d0d9      	beq.n	400e8a <xTaskIncrementTick+0x7e>
						pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
  400ed6:	683b      	ldr	r3, [r7, #0]
  400ed8:	68db      	ldr	r3, [r3, #12]
  400eda:	68dc      	ldr	r4, [r3, #12]
						xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xGenericListItem ) );
  400edc:	6863      	ldr	r3, [r4, #4]
						if( xConstTickCount < xItemValue )
  400ede:	459a      	cmp	sl, r3
  400ee0:	d3d8      	bcc.n	400e94 <xTaskIncrementTick+0x88>
						( void ) uxListRemove( &( pxTCB->xGenericListItem ) );
  400ee2:	1d25      	adds	r5, r4, #4
  400ee4:	4628      	mov	r0, r5
  400ee6:	47c8      	blx	r9
						if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
  400ee8:	6aa3      	ldr	r3, [r4, #40]	; 0x28
  400eea:	2b00      	cmp	r3, #0
  400eec:	d1d5      	bne.n	400e9a <xTaskIncrementTick+0x8e>
  400eee:	e7d7      	b.n	400ea0 <xTaskIncrementTick+0x94>
				vApplicationTickHook();
  400ef0:	4b11      	ldr	r3, [pc, #68]	; (400f38 <xTaskIncrementTick+0x12c>)
  400ef2:	4798      	blx	r3
  400ef4:	e7ad      	b.n	400e52 <xTaskIncrementTick+0x46>
		++uxPendedTicks;
  400ef6:	4a09      	ldr	r2, [pc, #36]	; (400f1c <xTaskIncrementTick+0x110>)
  400ef8:	6813      	ldr	r3, [r2, #0]
  400efa:	3301      	adds	r3, #1
  400efc:	6013      	str	r3, [r2, #0]
			vApplicationTickHook();
  400efe:	4b0e      	ldr	r3, [pc, #56]	; (400f38 <xTaskIncrementTick+0x12c>)
  400f00:	4798      	blx	r3
BaseType_t xSwitchRequired = pdFALSE;
  400f02:	2600      	movs	r6, #0
  400f04:	e7a5      	b.n	400e52 <xTaskIncrementTick+0x46>
  400f06:	bf00      	nop
  400f08:	2040c254 	.word	0x2040c254
  400f0c:	2040c2d4 	.word	0x2040c2d4
  400f10:	2040c28c 	.word	0x2040c28c
  400f14:	2040c1dc 	.word	0x2040c1dc
  400f18:	2040c1e8 	.word	0x2040c1e8
  400f1c:	2040c250 	.word	0x2040c250
  400f20:	2040c2d8 	.word	0x2040c2d8
  400f24:	2040c1e0 	.word	0x2040c1e0
  400f28:	2040c1e4 	.word	0x2040c1e4
  400f2c:	2040c290 	.word	0x2040c290
  400f30:	00400af9 	.word	0x00400af9
  400f34:	004001c9 	.word	0x004001c9
  400f38:	00402591 	.word	0x00402591
  400f3c:	00400215 	.word	0x00400215
  400f40:	2040c260 	.word	0x2040c260

00400f44 <xTaskResumeAll>:
{
  400f44:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
	taskENTER_CRITICAL();
  400f48:	4b2f      	ldr	r3, [pc, #188]	; (401008 <xTaskResumeAll+0xc4>)
  400f4a:	4798      	blx	r3
		--uxSchedulerSuspended;
  400f4c:	4b2f      	ldr	r3, [pc, #188]	; (40100c <xTaskResumeAll+0xc8>)
  400f4e:	681a      	ldr	r2, [r3, #0]
  400f50:	3a01      	subs	r2, #1
  400f52:	601a      	str	r2, [r3, #0]
		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
  400f54:	681b      	ldr	r3, [r3, #0]
  400f56:	2b00      	cmp	r3, #0
  400f58:	d150      	bne.n	400ffc <xTaskResumeAll+0xb8>
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
  400f5a:	4b2d      	ldr	r3, [pc, #180]	; (401010 <xTaskResumeAll+0xcc>)
  400f5c:	681b      	ldr	r3, [r3, #0]
  400f5e:	b333      	cbz	r3, 400fae <xTaskResumeAll+0x6a>
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
  400f60:	4e2c      	ldr	r6, [pc, #176]	; (401014 <xTaskResumeAll+0xd0>)
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
  400f62:	f8df 80d4 	ldr.w	r8, [pc, #212]	; 401038 <xTaskResumeAll+0xf4>
					prvAddTaskToReadyList( pxTCB );
  400f66:	4f2c      	ldr	r7, [pc, #176]	; (401018 <xTaskResumeAll+0xd4>)
  400f68:	f8df 90d0 	ldr.w	r9, [pc, #208]	; 40103c <xTaskResumeAll+0xf8>
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
  400f6c:	6833      	ldr	r3, [r6, #0]
  400f6e:	b303      	cbz	r3, 400fb2 <xTaskResumeAll+0x6e>
					pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) );
  400f70:	68f3      	ldr	r3, [r6, #12]
  400f72:	68dc      	ldr	r4, [r3, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
  400f74:	f104 0018 	add.w	r0, r4, #24
  400f78:	47c0      	blx	r8
					( void ) uxListRemove( &( pxTCB->xGenericListItem ) );
  400f7a:	1d25      	adds	r5, r4, #4
  400f7c:	4628      	mov	r0, r5
  400f7e:	47c0      	blx	r8
					prvAddTaskToReadyList( pxTCB );
  400f80:	6ae0      	ldr	r0, [r4, #44]	; 0x2c
  400f82:	683a      	ldr	r2, [r7, #0]
  400f84:	2301      	movs	r3, #1
  400f86:	4083      	lsls	r3, r0
  400f88:	4313      	orrs	r3, r2
  400f8a:	603b      	str	r3, [r7, #0]
  400f8c:	eb00 0080 	add.w	r0, r0, r0, lsl #2
  400f90:	4629      	mov	r1, r5
  400f92:	eb09 0080 	add.w	r0, r9, r0, lsl #2
  400f96:	4b21      	ldr	r3, [pc, #132]	; (40101c <xTaskResumeAll+0xd8>)
  400f98:	4798      	blx	r3
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
  400f9a:	4b21      	ldr	r3, [pc, #132]	; (401020 <xTaskResumeAll+0xdc>)
  400f9c:	681b      	ldr	r3, [r3, #0]
  400f9e:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
  400fa0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
  400fa2:	429a      	cmp	r2, r3
  400fa4:	d3e2      	bcc.n	400f6c <xTaskResumeAll+0x28>
						xYieldPending = pdTRUE;
  400fa6:	2201      	movs	r2, #1
  400fa8:	4b1e      	ldr	r3, [pc, #120]	; (401024 <xTaskResumeAll+0xe0>)
  400faa:	601a      	str	r2, [r3, #0]
  400fac:	e7de      	b.n	400f6c <xTaskResumeAll+0x28>
BaseType_t xAlreadyYielded = pdFALSE;
  400fae:	2400      	movs	r4, #0
  400fb0:	e025      	b.n	400ffe <xTaskResumeAll+0xba>
				if( uxPendedTicks > ( UBaseType_t ) 0U )
  400fb2:	4b1d      	ldr	r3, [pc, #116]	; (401028 <xTaskResumeAll+0xe4>)
  400fb4:	681b      	ldr	r3, [r3, #0]
  400fb6:	b18b      	cbz	r3, 400fdc <xTaskResumeAll+0x98>
					while( uxPendedTicks > ( UBaseType_t ) 0U )
  400fb8:	4b1b      	ldr	r3, [pc, #108]	; (401028 <xTaskResumeAll+0xe4>)
  400fba:	681b      	ldr	r3, [r3, #0]
  400fbc:	b173      	cbz	r3, 400fdc <xTaskResumeAll+0x98>
						if( xTaskIncrementTick() != pdFALSE )
  400fbe:	4d1b      	ldr	r5, [pc, #108]	; (40102c <xTaskResumeAll+0xe8>)
							xYieldPending = pdTRUE;
  400fc0:	4e18      	ldr	r6, [pc, #96]	; (401024 <xTaskResumeAll+0xe0>)
						--uxPendedTicks;
  400fc2:	4c19      	ldr	r4, [pc, #100]	; (401028 <xTaskResumeAll+0xe4>)
  400fc4:	e004      	b.n	400fd0 <xTaskResumeAll+0x8c>
  400fc6:	6823      	ldr	r3, [r4, #0]
  400fc8:	3b01      	subs	r3, #1
  400fca:	6023      	str	r3, [r4, #0]
					while( uxPendedTicks > ( UBaseType_t ) 0U )
  400fcc:	6823      	ldr	r3, [r4, #0]
  400fce:	b12b      	cbz	r3, 400fdc <xTaskResumeAll+0x98>
						if( xTaskIncrementTick() != pdFALSE )
  400fd0:	47a8      	blx	r5
  400fd2:	2800      	cmp	r0, #0
  400fd4:	d0f7      	beq.n	400fc6 <xTaskResumeAll+0x82>
							xYieldPending = pdTRUE;
  400fd6:	2301      	movs	r3, #1
  400fd8:	6033      	str	r3, [r6, #0]
  400fda:	e7f4      	b.n	400fc6 <xTaskResumeAll+0x82>
				if( xYieldPending == pdTRUE )
  400fdc:	4b11      	ldr	r3, [pc, #68]	; (401024 <xTaskResumeAll+0xe0>)
  400fde:	681b      	ldr	r3, [r3, #0]
  400fe0:	2b01      	cmp	r3, #1
  400fe2:	d001      	beq.n	400fe8 <xTaskResumeAll+0xa4>
BaseType_t xAlreadyYielded = pdFALSE;
  400fe4:	2400      	movs	r4, #0
  400fe6:	e00a      	b.n	400ffe <xTaskResumeAll+0xba>
					taskYIELD_IF_USING_PREEMPTION();
  400fe8:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
  400fec:	4b10      	ldr	r3, [pc, #64]	; (401030 <xTaskResumeAll+0xec>)
  400fee:	601a      	str	r2, [r3, #0]
  400ff0:	f3bf 8f4f 	dsb	sy
  400ff4:	f3bf 8f6f 	isb	sy
						xAlreadyYielded = pdTRUE;
  400ff8:	2401      	movs	r4, #1
  400ffa:	e000      	b.n	400ffe <xTaskResumeAll+0xba>
BaseType_t xAlreadyYielded = pdFALSE;
  400ffc:	2400      	movs	r4, #0
	taskEXIT_CRITICAL();
  400ffe:	4b0d      	ldr	r3, [pc, #52]	; (401034 <xTaskResumeAll+0xf0>)
  401000:	4798      	blx	r3
}
  401002:	4620      	mov	r0, r4
  401004:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
  401008:	004002d1 	.word	0x004002d1
  40100c:	2040c254 	.word	0x2040c254
  401010:	2040c24c 	.word	0x2040c24c
  401014:	2040c294 	.word	0x2040c294
  401018:	2040c260 	.word	0x2040c260
  40101c:	004001c9 	.word	0x004001c9
  401020:	2040c1dc 	.word	0x2040c1dc
  401024:	2040c2d8 	.word	0x2040c2d8
  401028:	2040c250 	.word	0x2040c250
  40102c:	00400e0d 	.word	0x00400e0d
  401030:	e000ed04 	.word	0xe000ed04
  401034:	004002f5 	.word	0x004002f5
  401038:	00400215 	.word	0x00400215
  40103c:	2040c1e8 	.word	0x2040c1e8

00401040 <prvIdleTask>:
{
  401040:	b580      	push	{r7, lr}
			vTaskSuspendAll();
  401042:	f8df 8088 	ldr.w	r8, [pc, #136]	; 4010cc <prvIdleTask+0x8c>
				xListIsEmpty = listLIST_IS_EMPTY( &xTasksWaitingTermination );
  401046:	4e19      	ldr	r6, [pc, #100]	; (4010ac <prvIdleTask+0x6c>)
				taskYIELD();
  401048:	f8df 9084 	ldr.w	r9, [pc, #132]	; 4010d0 <prvIdleTask+0x90>
  40104c:	e02a      	b.n	4010a4 <prvIdleTask+0x64>
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
  40104e:	4b18      	ldr	r3, [pc, #96]	; (4010b0 <prvIdleTask+0x70>)
  401050:	681b      	ldr	r3, [r3, #0]
  401052:	2b01      	cmp	r3, #1
  401054:	d81e      	bhi.n	401094 <prvIdleTask+0x54>
		while( uxTasksDeleted > ( UBaseType_t ) 0U )
  401056:	682b      	ldr	r3, [r5, #0]
  401058:	2b00      	cmp	r3, #0
  40105a:	d0f8      	beq.n	40104e <prvIdleTask+0xe>
			vTaskSuspendAll();
  40105c:	47c0      	blx	r8
				xListIsEmpty = listLIST_IS_EMPTY( &xTasksWaitingTermination );
  40105e:	6834      	ldr	r4, [r6, #0]
			( void ) xTaskResumeAll();
  401060:	47b8      	blx	r7
			if( xListIsEmpty == pdFALSE )
  401062:	2c00      	cmp	r4, #0
  401064:	d0f7      	beq.n	401056 <prvIdleTask+0x16>
				taskENTER_CRITICAL();
  401066:	4b13      	ldr	r3, [pc, #76]	; (4010b4 <prvIdleTask+0x74>)
  401068:	4798      	blx	r3
					pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) );
  40106a:	68f3      	ldr	r3, [r6, #12]
  40106c:	68dc      	ldr	r4, [r3, #12]
					( void ) uxListRemove( &( pxTCB->xGenericListItem ) );
  40106e:	1d20      	adds	r0, r4, #4
  401070:	4b11      	ldr	r3, [pc, #68]	; (4010b8 <prvIdleTask+0x78>)
  401072:	4798      	blx	r3
					--uxCurrentNumberOfTasks;
  401074:	4a11      	ldr	r2, [pc, #68]	; (4010bc <prvIdleTask+0x7c>)
  401076:	6813      	ldr	r3, [r2, #0]
  401078:	3b01      	subs	r3, #1
  40107a:	6013      	str	r3, [r2, #0]
					--uxTasksDeleted;
  40107c:	682b      	ldr	r3, [r5, #0]
  40107e:	3b01      	subs	r3, #1
  401080:	602b      	str	r3, [r5, #0]
				taskEXIT_CRITICAL();
  401082:	4b0f      	ldr	r3, [pc, #60]	; (4010c0 <prvIdleTask+0x80>)
  401084:	4798      	blx	r3
			vPortFreeAligned( pxTCB->pxStack );
  401086:	6b20      	ldr	r0, [r4, #48]	; 0x30
  401088:	f8df a048 	ldr.w	sl, [pc, #72]	; 4010d4 <prvIdleTask+0x94>
  40108c:	47d0      	blx	sl
		vPortFree( pxTCB );
  40108e:	4620      	mov	r0, r4
  401090:	47d0      	blx	sl
  401092:	e7e0      	b.n	401056 <prvIdleTask+0x16>
				taskYIELD();
  401094:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
  401098:	f8c9 3000 	str.w	r3, [r9]
  40109c:	f3bf 8f4f 	dsb	sy
  4010a0:	f3bf 8f6f 	isb	sy
		while( uxTasksDeleted > ( UBaseType_t ) 0U )
  4010a4:	4d07      	ldr	r5, [pc, #28]	; (4010c4 <prvIdleTask+0x84>)
			( void ) xTaskResumeAll();
  4010a6:	4f08      	ldr	r7, [pc, #32]	; (4010c8 <prvIdleTask+0x88>)
  4010a8:	e7d5      	b.n	401056 <prvIdleTask+0x16>
  4010aa:	bf00      	nop
  4010ac:	2040c2c0 	.word	0x2040c2c0
  4010b0:	2040c1e8 	.word	0x2040c1e8
  4010b4:	004002d1 	.word	0x004002d1
  4010b8:	00400215 	.word	0x00400215
  4010bc:	2040c24c 	.word	0x2040c24c
  4010c0:	004002f5 	.word	0x004002f5
  4010c4:	2040c25c 	.word	0x2040c25c
  4010c8:	00400f45 	.word	0x00400f45
  4010cc:	00400df1 	.word	0x00400df1
  4010d0:	e000ed04 	.word	0xe000ed04
  4010d4:	00400481 	.word	0x00400481

004010d8 <vTaskSwitchContext>:
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
  4010d8:	4b25      	ldr	r3, [pc, #148]	; (401170 <vTaskSwitchContext+0x98>)
  4010da:	681b      	ldr	r3, [r3, #0]
  4010dc:	2b00      	cmp	r3, #0
  4010de:	d12e      	bne.n	40113e <vTaskSwitchContext+0x66>
{
  4010e0:	b510      	push	{r4, lr}
		xYieldPending = pdFALSE;
  4010e2:	2200      	movs	r2, #0
  4010e4:	4b23      	ldr	r3, [pc, #140]	; (401174 <vTaskSwitchContext+0x9c>)
  4010e6:	601a      	str	r2, [r3, #0]
		taskCHECK_FOR_STACK_OVERFLOW();
  4010e8:	4b23      	ldr	r3, [pc, #140]	; (401178 <vTaskSwitchContext+0xa0>)
  4010ea:	681b      	ldr	r3, [r3, #0]
  4010ec:	6b1b      	ldr	r3, [r3, #48]	; 0x30
  4010ee:	681a      	ldr	r2, [r3, #0]
  4010f0:	f1b2 3fa5 	cmp.w	r2, #2779096485	; 0xa5a5a5a5
  4010f4:	d027      	beq.n	401146 <vTaskSwitchContext+0x6e>
  4010f6:	4b20      	ldr	r3, [pc, #128]	; (401178 <vTaskSwitchContext+0xa0>)
  4010f8:	6818      	ldr	r0, [r3, #0]
  4010fa:	6819      	ldr	r1, [r3, #0]
  4010fc:	3134      	adds	r1, #52	; 0x34
  4010fe:	4b1f      	ldr	r3, [pc, #124]	; (40117c <vTaskSwitchContext+0xa4>)
  401100:	4798      	blx	r3
		taskSELECT_HIGHEST_PRIORITY_TASK();
  401102:	4b1f      	ldr	r3, [pc, #124]	; (401180 <vTaskSwitchContext+0xa8>)
  401104:	681b      	ldr	r3, [r3, #0]
		__asm volatile ( "clz %0, %1" : "=r" ( ucReturn ) : "r" ( ulBitmap ) );
  401106:	fab3 f383 	clz	r3, r3
  40110a:	b2db      	uxtb	r3, r3
  40110c:	f1c3 031f 	rsb	r3, r3, #31
  401110:	4a1c      	ldr	r2, [pc, #112]	; (401184 <vTaskSwitchContext+0xac>)
  401112:	0099      	lsls	r1, r3, #2
  401114:	18c8      	adds	r0, r1, r3
  401116:	eb02 0080 	add.w	r0, r2, r0, lsl #2
  40111a:	6844      	ldr	r4, [r0, #4]
  40111c:	6864      	ldr	r4, [r4, #4]
  40111e:	6044      	str	r4, [r0, #4]
  401120:	4419      	add	r1, r3
  401122:	4602      	mov	r2, r0
  401124:	3208      	adds	r2, #8
  401126:	4294      	cmp	r4, r2
  401128:	d01a      	beq.n	401160 <vTaskSwitchContext+0x88>
  40112a:	eb03 0383 	add.w	r3, r3, r3, lsl #2
  40112e:	4a15      	ldr	r2, [pc, #84]	; (401184 <vTaskSwitchContext+0xac>)
  401130:	eb02 0383 	add.w	r3, r2, r3, lsl #2
  401134:	685b      	ldr	r3, [r3, #4]
  401136:	68da      	ldr	r2, [r3, #12]
  401138:	4b0f      	ldr	r3, [pc, #60]	; (401178 <vTaskSwitchContext+0xa0>)
  40113a:	601a      	str	r2, [r3, #0]
  40113c:	bd10      	pop	{r4, pc}
		xYieldPending = pdTRUE;
  40113e:	2201      	movs	r2, #1
  401140:	4b0c      	ldr	r3, [pc, #48]	; (401174 <vTaskSwitchContext+0x9c>)
  401142:	601a      	str	r2, [r3, #0]
  401144:	4770      	bx	lr
		taskCHECK_FOR_STACK_OVERFLOW();
  401146:	685a      	ldr	r2, [r3, #4]
  401148:	f1b2 3fa5 	cmp.w	r2, #2779096485	; 0xa5a5a5a5
  40114c:	d1d3      	bne.n	4010f6 <vTaskSwitchContext+0x1e>
  40114e:	689a      	ldr	r2, [r3, #8]
  401150:	f1b2 3fa5 	cmp.w	r2, #2779096485	; 0xa5a5a5a5
  401154:	d1cf      	bne.n	4010f6 <vTaskSwitchContext+0x1e>
  401156:	68db      	ldr	r3, [r3, #12]
  401158:	f1b3 3fa5 	cmp.w	r3, #2779096485	; 0xa5a5a5a5
  40115c:	d1cb      	bne.n	4010f6 <vTaskSwitchContext+0x1e>
  40115e:	e7d0      	b.n	401102 <vTaskSwitchContext+0x2a>
		taskSELECT_HIGHEST_PRIORITY_TASK();
  401160:	6860      	ldr	r0, [r4, #4]
  401162:	460a      	mov	r2, r1
  401164:	4907      	ldr	r1, [pc, #28]	; (401184 <vTaskSwitchContext+0xac>)
  401166:	eb01 0282 	add.w	r2, r1, r2, lsl #2
  40116a:	6050      	str	r0, [r2, #4]
  40116c:	e7dd      	b.n	40112a <vTaskSwitchContext+0x52>
  40116e:	bf00      	nop
  401170:	2040c254 	.word	0x2040c254
  401174:	2040c2d8 	.word	0x2040c2d8
  401178:	2040c1dc 	.word	0x2040c1dc
  40117c:	00402579 	.word	0x00402579
  401180:	2040c260 	.word	0x2040c260
  401184:	2040c1e8 	.word	0x2040c1e8

00401188 <vTaskPlaceOnEventList>:
{
  401188:	b538      	push	{r3, r4, r5, lr}
  40118a:	460d      	mov	r5, r1
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
  40118c:	4c11      	ldr	r4, [pc, #68]	; (4011d4 <vTaskPlaceOnEventList+0x4c>)
  40118e:	6821      	ldr	r1, [r4, #0]
  401190:	3118      	adds	r1, #24
  401192:	4b11      	ldr	r3, [pc, #68]	; (4011d8 <vTaskPlaceOnEventList+0x50>)
  401194:	4798      	blx	r3
	if( uxListRemove( &( pxCurrentTCB->xGenericListItem ) ) == ( UBaseType_t ) 0 )
  401196:	6820      	ldr	r0, [r4, #0]
  401198:	3004      	adds	r0, #4
  40119a:	4b10      	ldr	r3, [pc, #64]	; (4011dc <vTaskPlaceOnEventList+0x54>)
  40119c:	4798      	blx	r3
  40119e:	b940      	cbnz	r0, 4011b2 <vTaskPlaceOnEventList+0x2a>
		portRESET_READY_PRIORITY( pxCurrentTCB->uxPriority, uxTopReadyPriority );
  4011a0:	6822      	ldr	r2, [r4, #0]
  4011a2:	490f      	ldr	r1, [pc, #60]	; (4011e0 <vTaskPlaceOnEventList+0x58>)
  4011a4:	680b      	ldr	r3, [r1, #0]
  4011a6:	6ad0      	ldr	r0, [r2, #44]	; 0x2c
  4011a8:	2201      	movs	r2, #1
  4011aa:	4082      	lsls	r2, r0
  4011ac:	ea23 0302 	bic.w	r3, r3, r2
  4011b0:	600b      	str	r3, [r1, #0]
		if( xTicksToWait == portMAX_DELAY )
  4011b2:	f1b5 3fff 	cmp.w	r5, #4294967295
  4011b6:	d005      	beq.n	4011c4 <vTaskPlaceOnEventList+0x3c>
			xTimeToWake = xTickCount + xTicksToWait;
  4011b8:	4b0a      	ldr	r3, [pc, #40]	; (4011e4 <vTaskPlaceOnEventList+0x5c>)
  4011ba:	6818      	ldr	r0, [r3, #0]
			prvAddCurrentTaskToDelayedList( xTimeToWake );
  4011bc:	4428      	add	r0, r5
  4011be:	4b0a      	ldr	r3, [pc, #40]	; (4011e8 <vTaskPlaceOnEventList+0x60>)
  4011c0:	4798      	blx	r3
  4011c2:	bd38      	pop	{r3, r4, r5, pc}
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xGenericListItem ) );
  4011c4:	4b03      	ldr	r3, [pc, #12]	; (4011d4 <vTaskPlaceOnEventList+0x4c>)
  4011c6:	6819      	ldr	r1, [r3, #0]
  4011c8:	3104      	adds	r1, #4
  4011ca:	4808      	ldr	r0, [pc, #32]	; (4011ec <vTaskPlaceOnEventList+0x64>)
  4011cc:	4b08      	ldr	r3, [pc, #32]	; (4011f0 <vTaskPlaceOnEventList+0x68>)
  4011ce:	4798      	blx	r3
  4011d0:	bd38      	pop	{r3, r4, r5, pc}
  4011d2:	bf00      	nop
  4011d4:	2040c1dc 	.word	0x2040c1dc
  4011d8:	004001e1 	.word	0x004001e1
  4011dc:	00400215 	.word	0x00400215
  4011e0:	2040c260 	.word	0x2040c260
  4011e4:	2040c2d4 	.word	0x2040c2d4
  4011e8:	00400b25 	.word	0x00400b25
  4011ec:	2040c2ac 	.word	0x2040c2ac
  4011f0:	004001c9 	.word	0x004001c9

004011f4 <vTaskPlaceOnEventListRestricted>:
	{
  4011f4:	b570      	push	{r4, r5, r6, lr}
  4011f6:	460e      	mov	r6, r1
  4011f8:	4615      	mov	r5, r2
		vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
  4011fa:	4c11      	ldr	r4, [pc, #68]	; (401240 <vTaskPlaceOnEventListRestricted+0x4c>)
  4011fc:	6821      	ldr	r1, [r4, #0]
  4011fe:	3118      	adds	r1, #24
  401200:	4b10      	ldr	r3, [pc, #64]	; (401244 <vTaskPlaceOnEventListRestricted+0x50>)
  401202:	4798      	blx	r3
		if( uxListRemove( &( pxCurrentTCB->xGenericListItem ) ) == ( UBaseType_t ) 0 )
  401204:	6820      	ldr	r0, [r4, #0]
  401206:	3004      	adds	r0, #4
  401208:	4b0f      	ldr	r3, [pc, #60]	; (401248 <vTaskPlaceOnEventListRestricted+0x54>)
  40120a:	4798      	blx	r3
  40120c:	b940      	cbnz	r0, 401220 <vTaskPlaceOnEventListRestricted+0x2c>
			portRESET_READY_PRIORITY( pxCurrentTCB->uxPriority, uxTopReadyPriority );
  40120e:	6822      	ldr	r2, [r4, #0]
  401210:	490e      	ldr	r1, [pc, #56]	; (40124c <vTaskPlaceOnEventListRestricted+0x58>)
  401212:	680b      	ldr	r3, [r1, #0]
  401214:	6ad0      	ldr	r0, [r2, #44]	; 0x2c
  401216:	2201      	movs	r2, #1
  401218:	4082      	lsls	r2, r0
  40121a:	ea23 0302 	bic.w	r3, r3, r2
  40121e:	600b      	str	r3, [r1, #0]
			if( xWaitIndefinitely == pdTRUE )
  401220:	2d01      	cmp	r5, #1
  401222:	d005      	beq.n	401230 <vTaskPlaceOnEventListRestricted+0x3c>
				xTimeToWake = xTickCount + xTicksToWait;
  401224:	4b0a      	ldr	r3, [pc, #40]	; (401250 <vTaskPlaceOnEventListRestricted+0x5c>)
  401226:	6818      	ldr	r0, [r3, #0]
				prvAddCurrentTaskToDelayedList( xTimeToWake );
  401228:	4430      	add	r0, r6
  40122a:	4b0a      	ldr	r3, [pc, #40]	; (401254 <vTaskPlaceOnEventListRestricted+0x60>)
  40122c:	4798      	blx	r3
  40122e:	bd70      	pop	{r4, r5, r6, pc}
				vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xGenericListItem ) );
  401230:	4b03      	ldr	r3, [pc, #12]	; (401240 <vTaskPlaceOnEventListRestricted+0x4c>)
  401232:	6819      	ldr	r1, [r3, #0]
  401234:	3104      	adds	r1, #4
  401236:	4808      	ldr	r0, [pc, #32]	; (401258 <vTaskPlaceOnEventListRestricted+0x64>)
  401238:	4b02      	ldr	r3, [pc, #8]	; (401244 <vTaskPlaceOnEventListRestricted+0x50>)
  40123a:	4798      	blx	r3
  40123c:	bd70      	pop	{r4, r5, r6, pc}
  40123e:	bf00      	nop
  401240:	2040c1dc 	.word	0x2040c1dc
  401244:	004001c9 	.word	0x004001c9
  401248:	00400215 	.word	0x00400215
  40124c:	2040c260 	.word	0x2040c260
  401250:	2040c2d4 	.word	0x2040c2d4
  401254:	00400b25 	.word	0x00400b25
  401258:	2040c2ac 	.word	0x2040c2ac

0040125c <xTaskRemoveFromEventList>:
{
  40125c:	b538      	push	{r3, r4, r5, lr}
	pxUnblockedTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxEventList );
  40125e:	68c3      	ldr	r3, [r0, #12]
  401260:	68dc      	ldr	r4, [r3, #12]
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
  401262:	f104 0518 	add.w	r5, r4, #24
  401266:	4628      	mov	r0, r5
  401268:	4b14      	ldr	r3, [pc, #80]	; (4012bc <xTaskRemoveFromEventList+0x60>)
  40126a:	4798      	blx	r3
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
  40126c:	4b14      	ldr	r3, [pc, #80]	; (4012c0 <xTaskRemoveFromEventList+0x64>)
  40126e:	681b      	ldr	r3, [r3, #0]
  401270:	b9e3      	cbnz	r3, 4012ac <xTaskRemoveFromEventList+0x50>
		( void ) uxListRemove( &( pxUnblockedTCB->xGenericListItem ) );
  401272:	1d25      	adds	r5, r4, #4
  401274:	4628      	mov	r0, r5
  401276:	4b11      	ldr	r3, [pc, #68]	; (4012bc <xTaskRemoveFromEventList+0x60>)
  401278:	4798      	blx	r3
		prvAddTaskToReadyList( pxUnblockedTCB );
  40127a:	6ae0      	ldr	r0, [r4, #44]	; 0x2c
  40127c:	4a11      	ldr	r2, [pc, #68]	; (4012c4 <xTaskRemoveFromEventList+0x68>)
  40127e:	6811      	ldr	r1, [r2, #0]
  401280:	2301      	movs	r3, #1
  401282:	4083      	lsls	r3, r0
  401284:	430b      	orrs	r3, r1
  401286:	6013      	str	r3, [r2, #0]
  401288:	eb00 0080 	add.w	r0, r0, r0, lsl #2
  40128c:	4629      	mov	r1, r5
  40128e:	4b0e      	ldr	r3, [pc, #56]	; (4012c8 <xTaskRemoveFromEventList+0x6c>)
  401290:	eb03 0080 	add.w	r0, r3, r0, lsl #2
  401294:	4b0d      	ldr	r3, [pc, #52]	; (4012cc <xTaskRemoveFromEventList+0x70>)
  401296:	4798      	blx	r3
	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
  401298:	4b0d      	ldr	r3, [pc, #52]	; (4012d0 <xTaskRemoveFromEventList+0x74>)
  40129a:	681b      	ldr	r3, [r3, #0]
  40129c:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
  40129e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
  4012a0:	429a      	cmp	r2, r3
  4012a2:	d908      	bls.n	4012b6 <xTaskRemoveFromEventList+0x5a>
		xYieldPending = pdTRUE;
  4012a4:	2001      	movs	r0, #1
  4012a6:	4b0b      	ldr	r3, [pc, #44]	; (4012d4 <xTaskRemoveFromEventList+0x78>)
  4012a8:	6018      	str	r0, [r3, #0]
  4012aa:	bd38      	pop	{r3, r4, r5, pc}
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
  4012ac:	4629      	mov	r1, r5
  4012ae:	480a      	ldr	r0, [pc, #40]	; (4012d8 <xTaskRemoveFromEventList+0x7c>)
  4012b0:	4b06      	ldr	r3, [pc, #24]	; (4012cc <xTaskRemoveFromEventList+0x70>)
  4012b2:	4798      	blx	r3
  4012b4:	e7f0      	b.n	401298 <xTaskRemoveFromEventList+0x3c>
		xReturn = pdFALSE;
  4012b6:	2000      	movs	r0, #0
}
  4012b8:	bd38      	pop	{r3, r4, r5, pc}
  4012ba:	bf00      	nop
  4012bc:	00400215 	.word	0x00400215
  4012c0:	2040c254 	.word	0x2040c254
  4012c4:	2040c260 	.word	0x2040c260
  4012c8:	2040c1e8 	.word	0x2040c1e8
  4012cc:	004001c9 	.word	0x004001c9
  4012d0:	2040c1dc 	.word	0x2040c1dc
  4012d4:	2040c2d8 	.word	0x2040c2d8
  4012d8:	2040c294 	.word	0x2040c294

004012dc <vTaskSetTimeOutState>:
	pxTimeOut->xOverflowCount = xNumOfOverflows;
  4012dc:	4b03      	ldr	r3, [pc, #12]	; (4012ec <vTaskSetTimeOutState+0x10>)
  4012de:	681b      	ldr	r3, [r3, #0]
  4012e0:	6003      	str	r3, [r0, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
  4012e2:	4b03      	ldr	r3, [pc, #12]	; (4012f0 <vTaskSetTimeOutState+0x14>)
  4012e4:	681b      	ldr	r3, [r3, #0]
  4012e6:	6043      	str	r3, [r0, #4]
  4012e8:	4770      	bx	lr
  4012ea:	bf00      	nop
  4012ec:	2040c290 	.word	0x2040c290
  4012f0:	2040c2d4 	.word	0x2040c2d4

004012f4 <xTaskCheckForTimeOut>:
{
  4012f4:	b538      	push	{r3, r4, r5, lr}
  4012f6:	4604      	mov	r4, r0
  4012f8:	460d      	mov	r5, r1
	taskENTER_CRITICAL();
  4012fa:	4b12      	ldr	r3, [pc, #72]	; (401344 <xTaskCheckForTimeOut+0x50>)
  4012fc:	4798      	blx	r3
		const TickType_t xConstTickCount = xTickCount;
  4012fe:	4b12      	ldr	r3, [pc, #72]	; (401348 <xTaskCheckForTimeOut+0x54>)
  401300:	681a      	ldr	r2, [r3, #0]
			if( *pxTicksToWait == portMAX_DELAY )
  401302:	682b      	ldr	r3, [r5, #0]
  401304:	f1b3 3fff 	cmp.w	r3, #4294967295
  401308:	d018      	beq.n	40133c <xTaskCheckForTimeOut+0x48>
		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
  40130a:	4910      	ldr	r1, [pc, #64]	; (40134c <xTaskCheckForTimeOut+0x58>)
  40130c:	6809      	ldr	r1, [r1, #0]
  40130e:	6820      	ldr	r0, [r4, #0]
  401310:	4288      	cmp	r0, r1
  401312:	d002      	beq.n	40131a <xTaskCheckForTimeOut+0x26>
  401314:	6861      	ldr	r1, [r4, #4]
  401316:	428a      	cmp	r2, r1
  401318:	d212      	bcs.n	401340 <xTaskCheckForTimeOut+0x4c>
		else if( ( xConstTickCount - pxTimeOut->xTimeOnEntering ) < *pxTicksToWait )
  40131a:	6861      	ldr	r1, [r4, #4]
  40131c:	1a50      	subs	r0, r2, r1
  40131e:	4283      	cmp	r3, r0
  401320:	d804      	bhi.n	40132c <xTaskCheckForTimeOut+0x38>
			xReturn = pdTRUE;
  401322:	2401      	movs	r4, #1
	taskEXIT_CRITICAL();
  401324:	4b0a      	ldr	r3, [pc, #40]	; (401350 <xTaskCheckForTimeOut+0x5c>)
  401326:	4798      	blx	r3
}
  401328:	4620      	mov	r0, r4
  40132a:	bd38      	pop	{r3, r4, r5, pc}
			*pxTicksToWait -= ( xConstTickCount -  pxTimeOut->xTimeOnEntering );
  40132c:	1a8a      	subs	r2, r1, r2
  40132e:	4413      	add	r3, r2
  401330:	602b      	str	r3, [r5, #0]
			vTaskSetTimeOutState( pxTimeOut );
  401332:	4620      	mov	r0, r4
  401334:	4b07      	ldr	r3, [pc, #28]	; (401354 <xTaskCheckForTimeOut+0x60>)
  401336:	4798      	blx	r3
			xReturn = pdFALSE;
  401338:	2400      	movs	r4, #0
  40133a:	e7f3      	b.n	401324 <xTaskCheckForTimeOut+0x30>
				xReturn = pdFALSE;
  40133c:	2400      	movs	r4, #0
  40133e:	e7f1      	b.n	401324 <xTaskCheckForTimeOut+0x30>
			xReturn = pdTRUE;
  401340:	2401      	movs	r4, #1
  401342:	e7ef      	b.n	401324 <xTaskCheckForTimeOut+0x30>
  401344:	004002d1 	.word	0x004002d1
  401348:	2040c2d4 	.word	0x2040c2d4
  40134c:	2040c290 	.word	0x2040c290
  401350:	004002f5 	.word	0x004002f5
  401354:	004012dd 	.word	0x004012dd

00401358 <vTaskMissedYield>:
	xYieldPending = pdTRUE;
  401358:	2201      	movs	r2, #1
  40135a:	4b01      	ldr	r3, [pc, #4]	; (401360 <vTaskMissedYield+0x8>)
  40135c:	601a      	str	r2, [r3, #0]
  40135e:	4770      	bx	lr
  401360:	2040c2d8 	.word	0x2040c2d8

00401364 <xTaskGetSchedulerState>:

	BaseType_t xTaskGetSchedulerState( void )
	{
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
  401364:	4b05      	ldr	r3, [pc, #20]	; (40137c <xTaskGetSchedulerState+0x18>)
  401366:	681b      	ldr	r3, [r3, #0]
  401368:	b133      	cbz	r3, 401378 <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
  40136a:	4b05      	ldr	r3, [pc, #20]	; (401380 <xTaskGetSchedulerState+0x1c>)
  40136c:	681b      	ldr	r3, [r3, #0]
			{
				xReturn = taskSCHEDULER_RUNNING;
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
  40136e:	2b00      	cmp	r3, #0
  401370:	bf0c      	ite	eq
  401372:	2002      	moveq	r0, #2
  401374:	2000      	movne	r0, #0
  401376:	4770      	bx	lr
			xReturn = taskSCHEDULER_NOT_STARTED;
  401378:	2001      	movs	r0, #1
			}
		}

		return xReturn;
	}
  40137a:	4770      	bx	lr
  40137c:	2040c2a8 	.word	0x2040c2a8
  401380:	2040c254 	.word	0x2040c254

00401384 <vTaskPriorityInherit>:
	{
	TCB_t * const pxTCB = ( TCB_t * ) pxMutexHolder;

		/* If the mutex was given back by an interrupt while the queue was
		locked then the mutex holder might now be NULL. */
		if( pxMutexHolder != NULL )
  401384:	2800      	cmp	r0, #0
  401386:	d044      	beq.n	401412 <vTaskPriorityInherit+0x8e>
	{
  401388:	b538      	push	{r3, r4, r5, lr}
  40138a:	4604      	mov	r4, r0
		{
			/* If the holder of the mutex has a priority below the priority of
			the task attempting to obtain the mutex then it will temporarily
			inherit the priority of the task attempting to obtain the mutex. */
			if( pxTCB->uxPriority < pxCurrentTCB->uxPriority )
  40138c:	6ac2      	ldr	r2, [r0, #44]	; 0x2c
  40138e:	4921      	ldr	r1, [pc, #132]	; (401414 <vTaskPriorityInherit+0x90>)
  401390:	6809      	ldr	r1, [r1, #0]
  401392:	6ac9      	ldr	r1, [r1, #44]	; 0x2c
  401394:	428a      	cmp	r2, r1
  401396:	d214      	bcs.n	4013c2 <vTaskPriorityInherit+0x3e>
			{
				/* Adjust the mutex holder state to account for its new
				priority.  Only reset the event list item value if the value is
				not	being used for anything else. */
				if( ( listGET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
  401398:	6981      	ldr	r1, [r0, #24]
  40139a:	2900      	cmp	r1, #0
  40139c:	db05      	blt.n	4013aa <vTaskPriorityInherit+0x26>
				{
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxCurrentTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
  40139e:	491d      	ldr	r1, [pc, #116]	; (401414 <vTaskPriorityInherit+0x90>)
  4013a0:	6809      	ldr	r1, [r1, #0]
  4013a2:	6ac9      	ldr	r1, [r1, #44]	; 0x2c
  4013a4:	f1c1 0105 	rsb	r1, r1, #5
  4013a8:	6181      	str	r1, [r0, #24]
					mtCOVERAGE_TEST_MARKER();
				}

				/* If the task being modified is in the ready state it will need
				to be moved into a new list. */
				if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ pxTCB->uxPriority ] ), &( pxTCB->xGenericListItem ) ) != pdFALSE )
  4013aa:	eb02 0282 	add.w	r2, r2, r2, lsl #2
  4013ae:	491a      	ldr	r1, [pc, #104]	; (401418 <vTaskPriorityInherit+0x94>)
  4013b0:	eb01 0282 	add.w	r2, r1, r2, lsl #2
  4013b4:	6961      	ldr	r1, [r4, #20]
  4013b6:	4291      	cmp	r1, r2
  4013b8:	d004      	beq.n	4013c4 <vTaskPriorityInherit+0x40>
					prvAddTaskToReadyList( pxTCB );
				}
				else
				{
					/* Just inherit the priority. */
					pxTCB->uxPriority = pxCurrentTCB->uxPriority;
  4013ba:	4a16      	ldr	r2, [pc, #88]	; (401414 <vTaskPriorityInherit+0x90>)
  4013bc:	6812      	ldr	r2, [r2, #0]
  4013be:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
  4013c0:	62e2      	str	r2, [r4, #44]	; 0x2c
  4013c2:	bd38      	pop	{r3, r4, r5, pc}
					if( uxListRemove( &( pxTCB->xGenericListItem ) ) == ( UBaseType_t ) 0 )
  4013c4:	1d25      	adds	r5, r4, #4
  4013c6:	4628      	mov	r0, r5
  4013c8:	4b14      	ldr	r3, [pc, #80]	; (40141c <vTaskPriorityInherit+0x98>)
  4013ca:	4798      	blx	r3
  4013cc:	b970      	cbnz	r0, 4013ec <vTaskPriorityInherit+0x68>
						taskRESET_READY_PRIORITY( pxTCB->uxPriority );
  4013ce:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
  4013d0:	eb03 0183 	add.w	r1, r3, r3, lsl #2
  4013d4:	4a10      	ldr	r2, [pc, #64]	; (401418 <vTaskPriorityInherit+0x94>)
  4013d6:	f852 2021 	ldr.w	r2, [r2, r1, lsl #2]
  4013da:	b93a      	cbnz	r2, 4013ec <vTaskPriorityInherit+0x68>
  4013dc:	4810      	ldr	r0, [pc, #64]	; (401420 <vTaskPriorityInherit+0x9c>)
  4013de:	6802      	ldr	r2, [r0, #0]
  4013e0:	2101      	movs	r1, #1
  4013e2:	fa01 f303 	lsl.w	r3, r1, r3
  4013e6:	ea22 0303 	bic.w	r3, r2, r3
  4013ea:	6003      	str	r3, [r0, #0]
					pxTCB->uxPriority = pxCurrentTCB->uxPriority;
  4013ec:	4b09      	ldr	r3, [pc, #36]	; (401414 <vTaskPriorityInherit+0x90>)
  4013ee:	681b      	ldr	r3, [r3, #0]
  4013f0:	6ad8      	ldr	r0, [r3, #44]	; 0x2c
  4013f2:	62e0      	str	r0, [r4, #44]	; 0x2c
					prvAddTaskToReadyList( pxTCB );
  4013f4:	4a0a      	ldr	r2, [pc, #40]	; (401420 <vTaskPriorityInherit+0x9c>)
  4013f6:	6811      	ldr	r1, [r2, #0]
  4013f8:	2301      	movs	r3, #1
  4013fa:	4083      	lsls	r3, r0
  4013fc:	430b      	orrs	r3, r1
  4013fe:	6013      	str	r3, [r2, #0]
  401400:	eb00 0080 	add.w	r0, r0, r0, lsl #2
  401404:	4629      	mov	r1, r5
  401406:	4b04      	ldr	r3, [pc, #16]	; (401418 <vTaskPriorityInherit+0x94>)
  401408:	eb03 0080 	add.w	r0, r3, r0, lsl #2
  40140c:	4b05      	ldr	r3, [pc, #20]	; (401424 <vTaskPriorityInherit+0xa0>)
  40140e:	4798      	blx	r3
  401410:	bd38      	pop	{r3, r4, r5, pc}
  401412:	4770      	bx	lr
  401414:	2040c1dc 	.word	0x2040c1dc
  401418:	2040c1e8 	.word	0x2040c1e8
  40141c:	00400215 	.word	0x00400215
  401420:	2040c260 	.word	0x2040c260
  401424:	004001c9 	.word	0x004001c9

00401428 <xTaskPriorityDisinherit>:
	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
	TCB_t * const pxTCB = ( TCB_t * ) pxMutexHolder;
	BaseType_t xReturn = pdFALSE;

		if( pxMutexHolder != NULL )
  401428:	2800      	cmp	r0, #0
  40142a:	d033      	beq.n	401494 <xTaskPriorityDisinherit+0x6c>
	{
  40142c:	b538      	push	{r3, r4, r5, lr}
  40142e:	4604      	mov	r4, r0
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );

			configASSERT( pxTCB->uxMutexesHeld );
			( pxTCB->uxMutexesHeld )--;
  401430:	6cc2      	ldr	r2, [r0, #76]	; 0x4c
  401432:	3a01      	subs	r2, #1
  401434:	64c2      	str	r2, [r0, #76]	; 0x4c

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
  401436:	6ac0      	ldr	r0, [r0, #44]	; 0x2c
  401438:	6ca1      	ldr	r1, [r4, #72]	; 0x48
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
  40143a:	4288      	cmp	r0, r1
  40143c:	d02c      	beq.n	401498 <xTaskPriorityDisinherit+0x70>
  40143e:	bb5a      	cbnz	r2, 401498 <xTaskPriorityDisinherit+0x70>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding	task then it must be the running state task.  Remove
					the	holding task from the ready	list. */
					if( uxListRemove( &( pxTCB->xGenericListItem ) ) == ( UBaseType_t ) 0 )
  401440:	1d25      	adds	r5, r4, #4
  401442:	4628      	mov	r0, r5
  401444:	4b15      	ldr	r3, [pc, #84]	; (40149c <xTaskPriorityDisinherit+0x74>)
  401446:	4798      	blx	r3
  401448:	b970      	cbnz	r0, 401468 <xTaskPriorityDisinherit+0x40>
					{
						taskRESET_READY_PRIORITY( pxTCB->uxPriority );
  40144a:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
  40144c:	eb03 0183 	add.w	r1, r3, r3, lsl #2
  401450:	4a13      	ldr	r2, [pc, #76]	; (4014a0 <xTaskPriorityDisinherit+0x78>)
  401452:	f852 2021 	ldr.w	r2, [r2, r1, lsl #2]
  401456:	b93a      	cbnz	r2, 401468 <xTaskPriorityDisinherit+0x40>
  401458:	4812      	ldr	r0, [pc, #72]	; (4014a4 <xTaskPriorityDisinherit+0x7c>)
  40145a:	6802      	ldr	r2, [r0, #0]
  40145c:	2101      	movs	r1, #1
  40145e:	fa01 f303 	lsl.w	r3, r1, r3
  401462:	ea22 0303 	bic.w	r3, r2, r3
  401466:	6003      	str	r3, [r0, #0]
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
  401468:	6ca0      	ldr	r0, [r4, #72]	; 0x48
  40146a:	62e0      	str	r0, [r4, #44]	; 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
  40146c:	f1c0 0305 	rsb	r3, r0, #5
  401470:	61a3      	str	r3, [r4, #24]
					prvAddTaskToReadyList( pxTCB );
  401472:	4a0c      	ldr	r2, [pc, #48]	; (4014a4 <xTaskPriorityDisinherit+0x7c>)
  401474:	6811      	ldr	r1, [r2, #0]
  401476:	2401      	movs	r4, #1
  401478:	fa04 f300 	lsl.w	r3, r4, r0
  40147c:	430b      	orrs	r3, r1
  40147e:	6013      	str	r3, [r2, #0]
  401480:	eb00 0080 	add.w	r0, r0, r0, lsl #2
  401484:	4629      	mov	r1, r5
  401486:	4b06      	ldr	r3, [pc, #24]	; (4014a0 <xTaskPriorityDisinherit+0x78>)
  401488:	eb03 0080 	add.w	r0, r3, r0, lsl #2
  40148c:	4b06      	ldr	r3, [pc, #24]	; (4014a8 <xTaskPriorityDisinherit+0x80>)
  40148e:	4798      	blx	r3
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
  401490:	4620      	mov	r0, r4
  401492:	bd38      	pop	{r3, r4, r5, pc}
	BaseType_t xReturn = pdFALSE;
  401494:	2000      	movs	r0, #0
  401496:	4770      	bx	lr
  401498:	2000      	movs	r0, #0
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
	}
  40149a:	bd38      	pop	{r3, r4, r5, pc}
  40149c:	00400215 	.word	0x00400215
  4014a0:	2040c1e8 	.word	0x2040c1e8
  4014a4:	2040c260 	.word	0x2040c260
  4014a8:	004001c9 	.word	0x004001c9

004014ac <pvTaskIncrementMutexHeldCount>:

	void *pvTaskIncrementMutexHeldCount( void )
	{
		/* If xSemaphoreCreateMutex() is called before any tasks have been created
		then pxCurrentTCB will be NULL. */
		if( pxCurrentTCB != NULL )
  4014ac:	4b05      	ldr	r3, [pc, #20]	; (4014c4 <pvTaskIncrementMutexHeldCount+0x18>)
  4014ae:	681b      	ldr	r3, [r3, #0]
  4014b0:	b123      	cbz	r3, 4014bc <pvTaskIncrementMutexHeldCount+0x10>
		{
			( pxCurrentTCB->uxMutexesHeld )++;
  4014b2:	4b04      	ldr	r3, [pc, #16]	; (4014c4 <pvTaskIncrementMutexHeldCount+0x18>)
  4014b4:	681a      	ldr	r2, [r3, #0]
  4014b6:	6cd3      	ldr	r3, [r2, #76]	; 0x4c
  4014b8:	3301      	adds	r3, #1
  4014ba:	64d3      	str	r3, [r2, #76]	; 0x4c
		}

		return pxCurrentTCB;
  4014bc:	4b01      	ldr	r3, [pc, #4]	; (4014c4 <pvTaskIncrementMutexHeldCount+0x18>)
  4014be:	6818      	ldr	r0, [r3, #0]
	}
  4014c0:	4770      	bx	lr
  4014c2:	bf00      	nop
  4014c4:	2040c1dc 	.word	0x2040c1dc

004014c8 <prvInsertTimerInActiveList>:
	return xTimeNow;
}
/*-----------------------------------------------------------*/

static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer, const TickType_t xNextExpiryTime, const TickType_t xTimeNow, const TickType_t xCommandTime )
{
  4014c8:	b508      	push	{r3, lr}
BaseType_t xProcessTimerNow = pdFALSE;

	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
  4014ca:	6041      	str	r1, [r0, #4]
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
  4014cc:	6100      	str	r0, [r0, #16]

	if( xNextExpiryTime <= xTimeNow )
  4014ce:	4291      	cmp	r1, r2
  4014d0:	d80c      	bhi.n	4014ec <prvInsertTimerInActiveList+0x24>
	{
		/* Has the expiry time elapsed between the command to start/reset a
		timer was issued, and the time the command was processed? */
		if( ( xTimeNow - xCommandTime ) >= pxTimer->xTimerPeriodInTicks )
  4014d2:	1ad2      	subs	r2, r2, r3
  4014d4:	6983      	ldr	r3, [r0, #24]
  4014d6:	429a      	cmp	r2, r3
  4014d8:	d301      	bcc.n	4014de <prvInsertTimerInActiveList+0x16>
		{
			/* The time between a command being issued and the command being
			processed actually exceeds the timers period.  */
			xProcessTimerNow = pdTRUE;
  4014da:	2001      	movs	r0, #1
  4014dc:	bd08      	pop	{r3, pc}
		}
		else
		{
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
  4014de:	1d01      	adds	r1, r0, #4
  4014e0:	4b09      	ldr	r3, [pc, #36]	; (401508 <prvInsertTimerInActiveList+0x40>)
  4014e2:	6818      	ldr	r0, [r3, #0]
  4014e4:	4b09      	ldr	r3, [pc, #36]	; (40150c <prvInsertTimerInActiveList+0x44>)
  4014e6:	4798      	blx	r3
BaseType_t xProcessTimerNow = pdFALSE;
  4014e8:	2000      	movs	r0, #0
  4014ea:	bd08      	pop	{r3, pc}
		}
	}
	else
	{
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
  4014ec:	429a      	cmp	r2, r3
  4014ee:	d203      	bcs.n	4014f8 <prvInsertTimerInActiveList+0x30>
  4014f0:	4299      	cmp	r1, r3
  4014f2:	d301      	bcc.n	4014f8 <prvInsertTimerInActiveList+0x30>
		{
			/* If, since the command was issued, the tick count has overflowed
			but the expiry time has not, then the timer must have already passed
			its expiry time and should be processed immediately. */
			xProcessTimerNow = pdTRUE;
  4014f4:	2001      	movs	r0, #1
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
		}
	}

	return xProcessTimerNow;
}
  4014f6:	bd08      	pop	{r3, pc}
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
  4014f8:	1d01      	adds	r1, r0, #4
  4014fa:	4b05      	ldr	r3, [pc, #20]	; (401510 <prvInsertTimerInActiveList+0x48>)
  4014fc:	6818      	ldr	r0, [r3, #0]
  4014fe:	4b03      	ldr	r3, [pc, #12]	; (40150c <prvInsertTimerInActiveList+0x44>)
  401500:	4798      	blx	r3
BaseType_t xProcessTimerNow = pdFALSE;
  401502:	2000      	movs	r0, #0
  401504:	bd08      	pop	{r3, pc}
  401506:	bf00      	nop
  401508:	2040c2e0 	.word	0x2040c2e0
  40150c:	004001e1 	.word	0x004001e1
  401510:	2040c2dc 	.word	0x2040c2dc

00401514 <prvCheckForValidListAndQueue>:
	pxOverflowTimerList = pxTemp;
}
/*-----------------------------------------------------------*/

static void prvCheckForValidListAndQueue( void )
{
  401514:	b570      	push	{r4, r5, r6, lr}
	/* Check that the list from which active timers are referenced, and the
	queue used to communicate with the timer service, have been
	initialised. */
	taskENTER_CRITICAL();
  401516:	4b10      	ldr	r3, [pc, #64]	; (401558 <prvCheckForValidListAndQueue+0x44>)
  401518:	4798      	blx	r3
	{
		if( xTimerQueue == NULL )
  40151a:	4b10      	ldr	r3, [pc, #64]	; (40155c <prvCheckForValidListAndQueue+0x48>)
  40151c:	681b      	ldr	r3, [r3, #0]
  40151e:	b113      	cbz	r3, 401526 <prvCheckForValidListAndQueue+0x12>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
  401520:	4b0f      	ldr	r3, [pc, #60]	; (401560 <prvCheckForValidListAndQueue+0x4c>)
  401522:	4798      	blx	r3
  401524:	bd70      	pop	{r4, r5, r6, pc}
			vListInitialise( &xActiveTimerList1 );
  401526:	4d0f      	ldr	r5, [pc, #60]	; (401564 <prvCheckForValidListAndQueue+0x50>)
  401528:	4628      	mov	r0, r5
  40152a:	4e0f      	ldr	r6, [pc, #60]	; (401568 <prvCheckForValidListAndQueue+0x54>)
  40152c:	47b0      	blx	r6
			vListInitialise( &xActiveTimerList2 );
  40152e:	4c0f      	ldr	r4, [pc, #60]	; (40156c <prvCheckForValidListAndQueue+0x58>)
  401530:	4620      	mov	r0, r4
  401532:	47b0      	blx	r6
			pxCurrentTimerList = &xActiveTimerList1;
  401534:	4b0e      	ldr	r3, [pc, #56]	; (401570 <prvCheckForValidListAndQueue+0x5c>)
  401536:	601d      	str	r5, [r3, #0]
			pxOverflowTimerList = &xActiveTimerList2;
  401538:	4b0e      	ldr	r3, [pc, #56]	; (401574 <prvCheckForValidListAndQueue+0x60>)
  40153a:	601c      	str	r4, [r3, #0]
			xTimerQueue = xQueueCreate( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, sizeof( DaemonTaskMessage_t ) );
  40153c:	2200      	movs	r2, #0
  40153e:	2110      	movs	r1, #16
  401540:	2005      	movs	r0, #5
  401542:	4b0d      	ldr	r3, [pc, #52]	; (401578 <prvCheckForValidListAndQueue+0x64>)
  401544:	4798      	blx	r3
  401546:	4b05      	ldr	r3, [pc, #20]	; (40155c <prvCheckForValidListAndQueue+0x48>)
  401548:	6018      	str	r0, [r3, #0]
				if( xTimerQueue != NULL )
  40154a:	2800      	cmp	r0, #0
  40154c:	d0e8      	beq.n	401520 <prvCheckForValidListAndQueue+0xc>
					vQueueAddToRegistry( xTimerQueue, "TmrQ" );
  40154e:	490b      	ldr	r1, [pc, #44]	; (40157c <prvCheckForValidListAndQueue+0x68>)
  401550:	4b0b      	ldr	r3, [pc, #44]	; (401580 <prvCheckForValidListAndQueue+0x6c>)
  401552:	4798      	blx	r3
  401554:	e7e4      	b.n	401520 <prvCheckForValidListAndQueue+0xc>
  401556:	bf00      	nop
  401558:	004002d1 	.word	0x004002d1
  40155c:	2040c310 	.word	0x2040c310
  401560:	004002f5 	.word	0x004002f5
  401564:	2040c2e4 	.word	0x2040c2e4
  401568:	004001ad 	.word	0x004001ad
  40156c:	2040c2f8 	.word	0x2040c2f8
  401570:	2040c2dc 	.word	0x2040c2dc
  401574:	2040c2e0 	.word	0x2040c2e0
  401578:	004006a5 	.word	0x004006a5
  40157c:	0040560c 	.word	0x0040560c
  401580:	00400a6d 	.word	0x00400a6d

00401584 <xTimerCreateTimerTask>:
{
  401584:	b510      	push	{r4, lr}
  401586:	b084      	sub	sp, #16
	prvCheckForValidListAndQueue();
  401588:	4b0a      	ldr	r3, [pc, #40]	; (4015b4 <xTimerCreateTimerTask+0x30>)
  40158a:	4798      	blx	r3
	if( xTimerQueue != NULL )
  40158c:	4b0a      	ldr	r3, [pc, #40]	; (4015b8 <xTimerCreateTimerTask+0x34>)
  40158e:	681b      	ldr	r3, [r3, #0]
  401590:	b16b      	cbz	r3, 4015ae <xTimerCreateTimerTask+0x2a>
			xReturn = xTaskCreate( prvTimerTask, "Tmr Svc", ( uint16_t ) configTIMER_TASK_STACK_DEPTH, NULL, ( ( UBaseType_t ) configTIMER_TASK_PRIORITY ) | portPRIVILEGE_BIT, NULL);
  401592:	2300      	movs	r3, #0
  401594:	9303      	str	r3, [sp, #12]
  401596:	9302      	str	r3, [sp, #8]
  401598:	9301      	str	r3, [sp, #4]
  40159a:	2204      	movs	r2, #4
  40159c:	9200      	str	r2, [sp, #0]
  40159e:	f44f 7282 	mov.w	r2, #260	; 0x104
  4015a2:	4906      	ldr	r1, [pc, #24]	; (4015bc <xTimerCreateTimerTask+0x38>)
  4015a4:	4806      	ldr	r0, [pc, #24]	; (4015c0 <xTimerCreateTimerTask+0x3c>)
  4015a6:	4c07      	ldr	r4, [pc, #28]	; (4015c4 <xTimerCreateTimerTask+0x40>)
  4015a8:	47a0      	blx	r4
}
  4015aa:	b004      	add	sp, #16
  4015ac:	bd10      	pop	{r4, pc}
BaseType_t xReturn = pdFAIL;
  4015ae:	2000      	movs	r0, #0
	return xReturn;
  4015b0:	e7fb      	b.n	4015aa <xTimerCreateTimerTask+0x26>
  4015b2:	bf00      	nop
  4015b4:	00401515 	.word	0x00401515
  4015b8:	2040c310 	.word	0x2040c310
  4015bc:	00405614 	.word	0x00405614
  4015c0:	004016c5 	.word	0x004016c5
  4015c4:	00400b7d 	.word	0x00400b7d

004015c8 <xTimerGenericCommand>:
{
  4015c8:	b530      	push	{r4, r5, lr}
  4015ca:	b085      	sub	sp, #20
	if( xTimerQueue != NULL )
  4015cc:	4c10      	ldr	r4, [pc, #64]	; (401610 <xTimerGenericCommand+0x48>)
  4015ce:	6825      	ldr	r5, [r4, #0]
  4015d0:	b1dd      	cbz	r5, 40160a <xTimerGenericCommand+0x42>
  4015d2:	461c      	mov	r4, r3
		xMessage.xMessageID = xCommandID;
  4015d4:	9100      	str	r1, [sp, #0]
		xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
  4015d6:	9201      	str	r2, [sp, #4]
		xMessage.u.xTimerParameters.pxTimer = ( Timer_t * ) xTimer;
  4015d8:	9002      	str	r0, [sp, #8]
		if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
  4015da:	2905      	cmp	r1, #5
  4015dc:	dc0e      	bgt.n	4015fc <xTimerGenericCommand+0x34>
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
  4015de:	4b0d      	ldr	r3, [pc, #52]	; (401614 <xTimerGenericCommand+0x4c>)
  4015e0:	4798      	blx	r3
  4015e2:	2802      	cmp	r0, #2
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
  4015e4:	f04f 0300 	mov.w	r3, #0
  4015e8:	bf0c      	ite	eq
  4015ea:	9a08      	ldreq	r2, [sp, #32]
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
  4015ec:	461a      	movne	r2, r3
  4015ee:	4669      	mov	r1, sp
  4015f0:	4807      	ldr	r0, [pc, #28]	; (401610 <xTimerGenericCommand+0x48>)
  4015f2:	6800      	ldr	r0, [r0, #0]
  4015f4:	4c08      	ldr	r4, [pc, #32]	; (401618 <xTimerGenericCommand+0x50>)
  4015f6:	47a0      	blx	r4
}
  4015f8:	b005      	add	sp, #20
  4015fa:	bd30      	pop	{r4, r5, pc}
			xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
  4015fc:	2300      	movs	r3, #0
  4015fe:	4622      	mov	r2, r4
  401600:	4669      	mov	r1, sp
  401602:	4628      	mov	r0, r5
  401604:	4c05      	ldr	r4, [pc, #20]	; (40161c <xTimerGenericCommand+0x54>)
  401606:	47a0      	blx	r4
  401608:	e7f6      	b.n	4015f8 <xTimerGenericCommand+0x30>
BaseType_t xReturn = pdFAIL;
  40160a:	2000      	movs	r0, #0
	return xReturn;
  40160c:	e7f4      	b.n	4015f8 <xTimerGenericCommand+0x30>
  40160e:	bf00      	nop
  401610:	2040c310 	.word	0x2040c310
  401614:	00401365 	.word	0x00401365
  401618:	004006f5 	.word	0x004006f5
  40161c:	00400861 	.word	0x00400861

00401620 <prvSampleTimeNow>:
{
  401620:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
  401624:	b082      	sub	sp, #8
  401626:	4680      	mov	r8, r0
	xTimeNow = xTaskGetTickCount();
  401628:	4b1f      	ldr	r3, [pc, #124]	; (4016a8 <prvSampleTimeNow+0x88>)
  40162a:	4798      	blx	r3
  40162c:	4607      	mov	r7, r0
	if( xTimeNow < xLastTime )
  40162e:	4b1f      	ldr	r3, [pc, #124]	; (4016ac <prvSampleTimeNow+0x8c>)
  401630:	681b      	ldr	r3, [r3, #0]
  401632:	4298      	cmp	r0, r3
  401634:	d310      	bcc.n	401658 <prvSampleTimeNow+0x38>
		*pxTimerListsWereSwitched = pdFALSE;
  401636:	2300      	movs	r3, #0
  401638:	f8c8 3000 	str.w	r3, [r8]
	xLastTime = xTimeNow;
  40163c:	4b1b      	ldr	r3, [pc, #108]	; (4016ac <prvSampleTimeNow+0x8c>)
  40163e:	601f      	str	r7, [r3, #0]
}
  401640:	4638      	mov	r0, r7
  401642:	b002      	add	sp, #8
  401644:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
  401648:	2100      	movs	r1, #0
  40164a:	9100      	str	r1, [sp, #0]
  40164c:	460b      	mov	r3, r1
  40164e:	4652      	mov	r2, sl
  401650:	4620      	mov	r0, r4
  401652:	4c17      	ldr	r4, [pc, #92]	; (4016b0 <prvSampleTimeNow+0x90>)
  401654:	47a0      	blx	r4
  401656:	e001      	b.n	40165c <prvSampleTimeNow+0x3c>
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
  401658:	4d16      	ldr	r5, [pc, #88]	; (4016b4 <prvSampleTimeNow+0x94>)
		( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
  40165a:	4e17      	ldr	r6, [pc, #92]	; (4016b8 <prvSampleTimeNow+0x98>)
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
  40165c:	682b      	ldr	r3, [r5, #0]
  40165e:	681a      	ldr	r2, [r3, #0]
  401660:	b1c2      	cbz	r2, 401694 <prvSampleTimeNow+0x74>
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
  401662:	68db      	ldr	r3, [r3, #12]
  401664:	f8d3 a000 	ldr.w	sl, [r3]
		pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList );
  401668:	68dc      	ldr	r4, [r3, #12]
		( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
  40166a:	f104 0904 	add.w	r9, r4, #4
  40166e:	4648      	mov	r0, r9
  401670:	47b0      	blx	r6
		pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
  401672:	6a63      	ldr	r3, [r4, #36]	; 0x24
  401674:	4620      	mov	r0, r4
  401676:	4798      	blx	r3
		if( pxTimer->uxAutoReload == ( UBaseType_t ) pdTRUE )
  401678:	69e3      	ldr	r3, [r4, #28]
  40167a:	2b01      	cmp	r3, #1
  40167c:	d1ee      	bne.n	40165c <prvSampleTimeNow+0x3c>
			xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
  40167e:	69a3      	ldr	r3, [r4, #24]
  401680:	4453      	add	r3, sl
			if( xReloadTime > xNextExpireTime )
  401682:	459a      	cmp	sl, r3
  401684:	d2e0      	bcs.n	401648 <prvSampleTimeNow+0x28>
				listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
  401686:	6063      	str	r3, [r4, #4]
				listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
  401688:	6124      	str	r4, [r4, #16]
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
  40168a:	4649      	mov	r1, r9
  40168c:	6828      	ldr	r0, [r5, #0]
  40168e:	4b0b      	ldr	r3, [pc, #44]	; (4016bc <prvSampleTimeNow+0x9c>)
  401690:	4798      	blx	r3
  401692:	e7e3      	b.n	40165c <prvSampleTimeNow+0x3c>
	pxCurrentTimerList = pxOverflowTimerList;
  401694:	4a0a      	ldr	r2, [pc, #40]	; (4016c0 <prvSampleTimeNow+0xa0>)
  401696:	6810      	ldr	r0, [r2, #0]
  401698:	4906      	ldr	r1, [pc, #24]	; (4016b4 <prvSampleTimeNow+0x94>)
  40169a:	6008      	str	r0, [r1, #0]
	pxOverflowTimerList = pxTemp;
  40169c:	6013      	str	r3, [r2, #0]
		*pxTimerListsWereSwitched = pdTRUE;
  40169e:	2301      	movs	r3, #1
  4016a0:	f8c8 3000 	str.w	r3, [r8]
  4016a4:	e7ca      	b.n	40163c <prvSampleTimeNow+0x1c>
  4016a6:	bf00      	nop
  4016a8:	00400e01 	.word	0x00400e01
  4016ac:	2040c30c 	.word	0x2040c30c
  4016b0:	004015c9 	.word	0x004015c9
  4016b4:	2040c2dc 	.word	0x2040c2dc
  4016b8:	00400215 	.word	0x00400215
  4016bc:	004001e1 	.word	0x004001e1
  4016c0:	2040c2e0 	.word	0x2040c2e0

004016c4 <prvTimerTask>:
{
  4016c4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  4016c8:	b089      	sub	sp, #36	; 0x24
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
  4016ca:	4e63      	ldr	r6, [pc, #396]	; (401858 <prvTimerTask+0x194>)
	vTaskSuspendAll();
  4016cc:	4f63      	ldr	r7, [pc, #396]	; (40185c <prvTimerTask+0x198>)
				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
  4016ce:	4d64      	ldr	r5, [pc, #400]	; (401860 <prvTimerTask+0x19c>)
					portYIELD_WITHIN_API();
  4016d0:	f8df 91b0 	ldr.w	r9, [pc, #432]	; 401884 <prvTimerTask+0x1c0>
	( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
  4016d4:	f8df 81b0 	ldr.w	r8, [pc, #432]	; 401888 <prvTimerTask+0x1c4>
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
  4016d8:	6833      	ldr	r3, [r6, #0]
	if( *pxListWasEmpty == pdFALSE )
  4016da:	681a      	ldr	r2, [r3, #0]
  4016dc:	2a00      	cmp	r2, #0
  4016de:	f000 80a9 	beq.w	401834 <prvTimerTask+0x170>
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
  4016e2:	68db      	ldr	r3, [r3, #12]
  4016e4:	f8d3 a000 	ldr.w	sl, [r3]
	vTaskSuspendAll();
  4016e8:	47b8      	blx	r7
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
  4016ea:	a804      	add	r0, sp, #16
  4016ec:	4b5d      	ldr	r3, [pc, #372]	; (401864 <prvTimerTask+0x1a0>)
  4016ee:	4798      	blx	r3
  4016f0:	4604      	mov	r4, r0
		if( xTimerListsWereSwitched == pdFALSE )
  4016f2:	9b04      	ldr	r3, [sp, #16]
  4016f4:	2b00      	cmp	r3, #0
  4016f6:	d137      	bne.n	401768 <prvTimerTask+0xa4>
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
  4016f8:	4550      	cmp	r0, sl
  4016fa:	d211      	bcs.n	401720 <prvTimerTask+0x5c>
  4016fc:	2200      	movs	r2, #0
				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
  4016fe:	ebaa 0104 	sub.w	r1, sl, r4
  401702:	6828      	ldr	r0, [r5, #0]
  401704:	4b58      	ldr	r3, [pc, #352]	; (401868 <prvTimerTask+0x1a4>)
  401706:	4798      	blx	r3
				if( xTaskResumeAll() == pdFALSE )
  401708:	4b58      	ldr	r3, [pc, #352]	; (40186c <prvTimerTask+0x1a8>)
  40170a:	4798      	blx	r3
  40170c:	bb70      	cbnz	r0, 40176c <prvTimerTask+0xa8>
					portYIELD_WITHIN_API();
  40170e:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
  401712:	f8c9 3000 	str.w	r3, [r9]
  401716:	f3bf 8f4f 	dsb	sy
  40171a:	f3bf 8f6f 	isb	sy
  40171e:	e025      	b.n	40176c <prvTimerTask+0xa8>
				( void ) xTaskResumeAll();
  401720:	4b52      	ldr	r3, [pc, #328]	; (40186c <prvTimerTask+0x1a8>)
  401722:	4798      	blx	r3
Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList );
  401724:	6833      	ldr	r3, [r6, #0]
  401726:	68db      	ldr	r3, [r3, #12]
  401728:	f8d3 b00c 	ldr.w	fp, [r3, #12]
	( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
  40172c:	f10b 0004 	add.w	r0, fp, #4
  401730:	47c0      	blx	r8
	if( pxTimer->uxAutoReload == ( UBaseType_t ) pdTRUE )
  401732:	f8db 301c 	ldr.w	r3, [fp, #28]
  401736:	2b01      	cmp	r3, #1
  401738:	d004      	beq.n	401744 <prvTimerTask+0x80>
	pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
  40173a:	f8db 3024 	ldr.w	r3, [fp, #36]	; 0x24
  40173e:	4658      	mov	r0, fp
  401740:	4798      	blx	r3
  401742:	e013      	b.n	40176c <prvTimerTask+0xa8>
		if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) == pdTRUE )
  401744:	f8db 1018 	ldr.w	r1, [fp, #24]
  401748:	4653      	mov	r3, sl
  40174a:	4622      	mov	r2, r4
  40174c:	4451      	add	r1, sl
  40174e:	4658      	mov	r0, fp
  401750:	4c47      	ldr	r4, [pc, #284]	; (401870 <prvTimerTask+0x1ac>)
  401752:	47a0      	blx	r4
  401754:	2801      	cmp	r0, #1
  401756:	d1f0      	bne.n	40173a <prvTimerTask+0x76>
			xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
  401758:	2100      	movs	r1, #0
  40175a:	9100      	str	r1, [sp, #0]
  40175c:	460b      	mov	r3, r1
  40175e:	4652      	mov	r2, sl
  401760:	4658      	mov	r0, fp
  401762:	4c44      	ldr	r4, [pc, #272]	; (401874 <prvTimerTask+0x1b0>)
  401764:	47a0      	blx	r4
  401766:	e7e8      	b.n	40173a <prvTimerTask+0x76>
			( void ) xTaskResumeAll();
  401768:	4b40      	ldr	r3, [pc, #256]	; (40186c <prvTimerTask+0x1a8>)
  40176a:	4798      	blx	r3
	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
  40176c:	4c42      	ldr	r4, [pc, #264]	; (401878 <prvTimerTask+0x1b4>)
  40176e:	e006      	b.n	40177e <prvTimerTask+0xba>
				pxCallback->pxCallbackFunction( pxCallback->pvParameter1, pxCallback->ulParameter2 );
  401770:	9907      	ldr	r1, [sp, #28]
  401772:	9806      	ldr	r0, [sp, #24]
  401774:	9b05      	ldr	r3, [sp, #20]
  401776:	4798      	blx	r3
		if( xMessage.xMessageID >= ( BaseType_t ) 0 )
  401778:	9b04      	ldr	r3, [sp, #16]
  40177a:	2b00      	cmp	r3, #0
  40177c:	da09      	bge.n	401792 <prvTimerTask+0xce>
	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
  40177e:	2300      	movs	r3, #0
  401780:	461a      	mov	r2, r3
  401782:	a904      	add	r1, sp, #16
  401784:	6828      	ldr	r0, [r5, #0]
  401786:	47a0      	blx	r4
  401788:	2800      	cmp	r0, #0
  40178a:	d0a5      	beq.n	4016d8 <prvTimerTask+0x14>
			if( xMessage.xMessageID < ( BaseType_t ) 0 )
  40178c:	9b04      	ldr	r3, [sp, #16]
  40178e:	2b00      	cmp	r3, #0
  401790:	dbee      	blt.n	401770 <prvTimerTask+0xac>
			pxTimer = xMessage.u.xTimerParameters.pxTimer;
  401792:	f8dd a018 	ldr.w	sl, [sp, #24]
			if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE )
  401796:	f8da 3014 	ldr.w	r3, [sl, #20]
  40179a:	b113      	cbz	r3, 4017a2 <prvTimerTask+0xde>
				( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
  40179c:	f10a 0004 	add.w	r0, sl, #4
  4017a0:	47c0      	blx	r8
			xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
  4017a2:	a803      	add	r0, sp, #12
  4017a4:	4b2f      	ldr	r3, [pc, #188]	; (401864 <prvTimerTask+0x1a0>)
  4017a6:	4798      	blx	r3
			switch( xMessage.xMessageID )
  4017a8:	9b04      	ldr	r3, [sp, #16]
  4017aa:	2b09      	cmp	r3, #9
  4017ac:	d8e7      	bhi.n	40177e <prvTimerTask+0xba>
  4017ae:	a201      	add	r2, pc, #4	; (adr r2, 4017b4 <prvTimerTask+0xf0>)
  4017b0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
  4017b4:	004017dd 	.word	0x004017dd
  4017b8:	004017dd 	.word	0x004017dd
  4017bc:	004017dd 	.word	0x004017dd
  4017c0:	0040177f 	.word	0x0040177f
  4017c4:	00401819 	.word	0x00401819
  4017c8:	0040182d 	.word	0x0040182d
  4017cc:	004017dd 	.word	0x004017dd
  4017d0:	004017dd 	.word	0x004017dd
  4017d4:	0040177f 	.word	0x0040177f
  4017d8:	00401819 	.word	0x00401819
					if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) == pdTRUE )
  4017dc:	9c05      	ldr	r4, [sp, #20]
  4017de:	f8da 1018 	ldr.w	r1, [sl, #24]
  4017e2:	4623      	mov	r3, r4
  4017e4:	4602      	mov	r2, r0
  4017e6:	4421      	add	r1, r4
  4017e8:	4650      	mov	r0, sl
  4017ea:	4c21      	ldr	r4, [pc, #132]	; (401870 <prvTimerTask+0x1ac>)
  4017ec:	47a0      	blx	r4
  4017ee:	2801      	cmp	r0, #1
  4017f0:	d1bc      	bne.n	40176c <prvTimerTask+0xa8>
						pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
  4017f2:	f8da 3024 	ldr.w	r3, [sl, #36]	; 0x24
  4017f6:	4650      	mov	r0, sl
  4017f8:	4798      	blx	r3
						if( pxTimer->uxAutoReload == ( UBaseType_t ) pdTRUE )
  4017fa:	f8da 301c 	ldr.w	r3, [sl, #28]
  4017fe:	2b01      	cmp	r3, #1
  401800:	d1b4      	bne.n	40176c <prvTimerTask+0xa8>
							xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
  401802:	f8da 2018 	ldr.w	r2, [sl, #24]
  401806:	2100      	movs	r1, #0
  401808:	9100      	str	r1, [sp, #0]
  40180a:	460b      	mov	r3, r1
  40180c:	9805      	ldr	r0, [sp, #20]
  40180e:	4402      	add	r2, r0
  401810:	4650      	mov	r0, sl
  401812:	4c18      	ldr	r4, [pc, #96]	; (401874 <prvTimerTask+0x1b0>)
  401814:	47a0      	blx	r4
  401816:	e7a9      	b.n	40176c <prvTimerTask+0xa8>
					pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
  401818:	9905      	ldr	r1, [sp, #20]
  40181a:	f8ca 1018 	str.w	r1, [sl, #24]
					( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
  40181e:	4603      	mov	r3, r0
  401820:	4602      	mov	r2, r0
  401822:	4401      	add	r1, r0
  401824:	4650      	mov	r0, sl
  401826:	4c12      	ldr	r4, [pc, #72]	; (401870 <prvTimerTask+0x1ac>)
  401828:	47a0      	blx	r4
  40182a:	e79f      	b.n	40176c <prvTimerTask+0xa8>
					vPortFree( pxTimer );
  40182c:	4650      	mov	r0, sl
  40182e:	4b13      	ldr	r3, [pc, #76]	; (40187c <prvTimerTask+0x1b8>)
  401830:	4798      	blx	r3
  401832:	e79b      	b.n	40176c <prvTimerTask+0xa8>
	vTaskSuspendAll();
  401834:	47b8      	blx	r7
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
  401836:	a804      	add	r0, sp, #16
  401838:	4b0a      	ldr	r3, [pc, #40]	; (401864 <prvTimerTask+0x1a0>)
  40183a:	4798      	blx	r3
  40183c:	4604      	mov	r4, r0
		if( xTimerListsWereSwitched == pdFALSE )
  40183e:	9b04      	ldr	r3, [sp, #16]
  401840:	2b00      	cmp	r3, #0
  401842:	d191      	bne.n	401768 <prvTimerTask+0xa4>
					xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
  401844:	4b0e      	ldr	r3, [pc, #56]	; (401880 <prvTimerTask+0x1bc>)
  401846:	681b      	ldr	r3, [r3, #0]
  401848:	681a      	ldr	r2, [r3, #0]
  40184a:	fab2 f282 	clz	r2, r2
  40184e:	0952      	lsrs	r2, r2, #5
  401850:	f04f 0a00 	mov.w	sl, #0
  401854:	e753      	b.n	4016fe <prvTimerTask+0x3a>
  401856:	bf00      	nop
  401858:	2040c2dc 	.word	0x2040c2dc
  40185c:	00400df1 	.word	0x00400df1
  401860:	2040c310 	.word	0x2040c310
  401864:	00401621 	.word	0x00401621
  401868:	00400aa1 	.word	0x00400aa1
  40186c:	00400f45 	.word	0x00400f45
  401870:	004014c9 	.word	0x004014c9
  401874:	004015c9 	.word	0x004015c9
  401878:	004008f1 	.word	0x004008f1
  40187c:	00400481 	.word	0x00400481
  401880:	2040c2e0 	.word	0x2040c2e0
  401884:	e000ed04 	.word	0xe000ed04
  401888:	00400215 	.word	0x00400215

0040188c <sysclk_init>:
	pmc_disable_udpck();
}
#endif // CONFIG_USBCLK_SOURCE

void sysclk_init(void)
{
  40188c:	b510      	push	{r4, lr}
	struct pll_config pllcfg;

	/* Set flash wait state to max in case the below clock switching. */
	system_init_flash(CHIP_FREQ_CPU_MAX);
  40188e:	4810      	ldr	r0, [pc, #64]	; (4018d0 <sysclk_init+0x44>)
  401890:	4b10      	ldr	r3, [pc, #64]	; (4018d4 <sysclk_init+0x48>)
  401892:	4798      	blx	r3
		pmc_switch_mainck_to_fastrc(CKGR_MOR_MOSCRCF_12_MHz);
		break;


	case OSC_MAINCK_XTAL:
		pmc_switch_mainck_to_xtal(PMC_OSC_XTAL,
  401894:	213e      	movs	r1, #62	; 0x3e
  401896:	2000      	movs	r0, #0
  401898:	4b0f      	ldr	r3, [pc, #60]	; (4018d8 <sysclk_init+0x4c>)
  40189a:	4798      	blx	r3
	case OSC_MAINCK_4M_RC:
	case OSC_MAINCK_8M_RC:
	case OSC_MAINCK_12M_RC:
	case OSC_MAINCK_XTAL:
	case OSC_MAINCK_BYPASS:
		return pmc_osc_is_ready_mainck();
  40189c:	4c0f      	ldr	r4, [pc, #60]	; (4018dc <sysclk_init+0x50>)
  40189e:	47a0      	blx	r4
 *
 * \param id A number identifying the oscillator to wait for.
 */
static inline void osc_wait_ready(uint8_t id)
{
	while (!osc_is_ready(id)) {
  4018a0:	2800      	cmp	r0, #0
  4018a2:	d0fc      	beq.n	40189e <sysclk_init+0x12>
static inline void pll_enable(const struct pll_config *p_cfg, uint32_t ul_pll_id)
{
	Assert(ul_pll_id < NR_PLLS);

	if (ul_pll_id == PLLA_ID) {
		pmc_disable_pllack(); // Always stop PLL first!
  4018a4:	4b0e      	ldr	r3, [pc, #56]	; (4018e0 <sysclk_init+0x54>)
  4018a6:	4798      	blx	r3
		PMC->CKGR_PLLAR = CKGR_PLLAR_ONE | p_cfg->ctrl;
  4018a8:	4a0e      	ldr	r2, [pc, #56]	; (4018e4 <sysclk_init+0x58>)
  4018aa:	4b0f      	ldr	r3, [pc, #60]	; (4018e8 <sysclk_init+0x5c>)
  4018ac:	629a      	str	r2, [r3, #40]	; 0x28
static inline uint32_t pll_is_locked(uint32_t ul_pll_id)
{
	Assert(ul_pll_id < NR_PLLS);

	if (ul_pll_id == PLLA_ID) {
	return pmc_is_locked_pllack();
  4018ae:	4c0f      	ldr	r4, [pc, #60]	; (4018ec <sysclk_init+0x60>)
  4018b0:	47a0      	blx	r4
 */
static inline int pll_wait_for_lock(unsigned int pll_id)
{
	Assert(pll_id < NR_PLLS);

	while (!pll_is_locked(pll_id)) {
  4018b2:	2800      	cmp	r0, #0
  4018b4:	d0fc      	beq.n	4018b0 <sysclk_init+0x24>
	else if (CONFIG_SYSCLK_SOURCE == SYSCLK_SRC_PLLACK) {
		pll_enable_source(CONFIG_PLL0_SOURCE);
		pll_config_defaults(&pllcfg, 0);
		pll_enable(&pllcfg, 0);
		pll_wait_for_lock(0);
		pmc_mck_set_division(CONFIG_SYSCLK_DIV);
  4018b6:	2002      	movs	r0, #2
  4018b8:	4b0d      	ldr	r3, [pc, #52]	; (4018f0 <sysclk_init+0x64>)
  4018ba:	4798      	blx	r3
		pmc_switch_mck_to_pllack(CONFIG_SYSCLK_PRES);
  4018bc:	2000      	movs	r0, #0
  4018be:	4b0d      	ldr	r3, [pc, #52]	; (4018f4 <sysclk_init+0x68>)
  4018c0:	4798      	blx	r3
		pll_wait_for_lock(1);
		pmc_mck_set_division(CONFIG_SYSCLK_DIV);
		pmc_switch_mck_to_upllck(CONFIG_SYSCLK_PRES);
	}
	/* Update the SystemFrequency variable */
	SystemCoreClockUpdate();
  4018c2:	4b0d      	ldr	r3, [pc, #52]	; (4018f8 <sysclk_init+0x6c>)
  4018c4:	4798      	blx	r3

	/* Set a flash wait state depending on the new cpu frequency */
	system_init_flash(sysclk_get_cpu_hz());
  4018c6:	4802      	ldr	r0, [pc, #8]	; (4018d0 <sysclk_init+0x44>)
  4018c8:	4b02      	ldr	r3, [pc, #8]	; (4018d4 <sysclk_init+0x48>)
  4018ca:	4798      	blx	r3
  4018cc:	bd10      	pop	{r4, pc}
  4018ce:	bf00      	nop
  4018d0:	11e1a300 	.word	0x11e1a300
  4018d4:	0040229d 	.word	0x0040229d
  4018d8:	00401ead 	.word	0x00401ead
  4018dc:	00401f01 	.word	0x00401f01
  4018e0:	00401f11 	.word	0x00401f11
  4018e4:	20183f01 	.word	0x20183f01
  4018e8:	400e0600 	.word	0x400e0600
  4018ec:	00401f21 	.word	0x00401f21
  4018f0:	00401e11 	.word	0x00401e11
  4018f4:	00401e49 	.word	0x00401e49
  4018f8:	00402191 	.word	0x00402191

004018fc <_read>:
int __attribute__((weak))
_read (int file, char * ptr, int len); // Remove GCC compiler warning

int __attribute__((weak))
_read (int file, char * ptr, int len)
{
  4018fc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	int nChars = 0;

	if (file != 0) {
  401900:	b980      	cbnz	r0, 401924 <_read+0x28>
  401902:	460c      	mov	r4, r1
  401904:	4690      	mov	r8, r2
		return -1;
	}

	for (; len > 0; --len) {
  401906:	2a00      	cmp	r2, #0
  401908:	dd0f      	ble.n	40192a <_read+0x2e>
  40190a:	188f      	adds	r7, r1, r2
		ptr_get(stdio_base, ptr);
  40190c:	4e08      	ldr	r6, [pc, #32]	; (401930 <_read+0x34>)
  40190e:	4d09      	ldr	r5, [pc, #36]	; (401934 <_read+0x38>)
  401910:	6830      	ldr	r0, [r6, #0]
  401912:	4621      	mov	r1, r4
  401914:	682b      	ldr	r3, [r5, #0]
  401916:	4798      	blx	r3
		ptr++;
  401918:	3401      	adds	r4, #1
	for (; len > 0; --len) {
  40191a:	42bc      	cmp	r4, r7
  40191c:	d1f8      	bne.n	401910 <_read+0x14>
		nChars++;
	}
	return nChars;
}
  40191e:	4640      	mov	r0, r8
  401920:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		return -1;
  401924:	f04f 38ff 	mov.w	r8, #4294967295
  401928:	e7f9      	b.n	40191e <_read+0x22>
	for (; len > 0; --len) {
  40192a:	4680      	mov	r8, r0
  40192c:	e7f7      	b.n	40191e <_read+0x22>
  40192e:	bf00      	nop
  401930:	2040c408 	.word	0x2040c408
  401934:	2040c400 	.word	0x2040c400

00401938 <_write>:
int __attribute__((weak))
_write (int file, const char *ptr, int len)
{
	int nChars = 0;

	if ((file != 1) && (file != 2) && (file!=3)) {
  401938:	3801      	subs	r0, #1
  40193a:	2802      	cmp	r0, #2
  40193c:	d815      	bhi.n	40196a <_write+0x32>
{
  40193e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  401942:	460e      	mov	r6, r1
  401944:	4614      	mov	r4, r2
		return -1;
	}

	for (; len != 0; --len) {
  401946:	b19a      	cbz	r2, 401970 <_write+0x38>
  401948:	460d      	mov	r5, r1
		if (ptr_put(stdio_base, *ptr++) < 0) {
  40194a:	f8df 8038 	ldr.w	r8, [pc, #56]	; 401984 <_write+0x4c>
  40194e:	4f0c      	ldr	r7, [pc, #48]	; (401980 <_write+0x48>)
  401950:	f8d8 0000 	ldr.w	r0, [r8]
  401954:	f815 1b01 	ldrb.w	r1, [r5], #1
  401958:	683b      	ldr	r3, [r7, #0]
  40195a:	4798      	blx	r3
  40195c:	2800      	cmp	r0, #0
  40195e:	db0a      	blt.n	401976 <_write+0x3e>
  401960:	1ba8      	subs	r0, r5, r6
	for (; len != 0; --len) {
  401962:	3c01      	subs	r4, #1
  401964:	d1f4      	bne.n	401950 <_write+0x18>
  401966:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		return -1;
  40196a:	f04f 30ff 	mov.w	r0, #4294967295
  40196e:	4770      	bx	lr
	for (; len != 0; --len) {
  401970:	4610      	mov	r0, r2
  401972:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
			return -1;
  401976:	f04f 30ff 	mov.w	r0, #4294967295
		}
		++nChars;
	}
	return nChars;
}
  40197a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  40197e:	bf00      	nop
  401980:	2040c404 	.word	0x2040c404
  401984:	2040c408 	.word	0x2040c408

00401988 <board_init>:
	__ISB();
}
#endif

void board_init(void)
{
  401988:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
#ifndef CONF_BOARD_KEEP_WATCHDOG_AT_INIT
	/* Disable the watchdog */
	WDT->WDT_MR = WDT_MR_WDDIS;
  40198a:	f44f 4200 	mov.w	r2, #32768	; 0x8000
  40198e:	4bb8      	ldr	r3, [pc, #736]	; (401c70 <board_init+0x2e8>)
  401990:	605a      	str	r2, [r3, #4]
    This function ensures the apparent order of the explicit memory operations before
    and after the instruction, without ensuring their completion.
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __DMB(void)
{
  __ASM volatile ("dmb");
  401992:	f3bf 8f5f 	dmb	sy
		mpu_cal_mpu_region_size(ITCM_END_ADDRESS - ITCM_START_ADDRESS) |
  401996:	4fb7      	ldr	r7, [pc, #732]	; (401c74 <board_init+0x2ec>)
  401998:	4638      	mov	r0, r7
  40199a:	4db7      	ldr	r5, [pc, #732]	; (401c78 <board_init+0x2f0>)
  40199c:	47a8      	blx	r5
	dw_region_attr =
  40199e:	4eb7      	ldr	r6, [pc, #732]	; (401c7c <board_init+0x2f4>)
	mpu_set_region( dw_region_base_addr, dw_region_attr);
  4019a0:	ea40 0106 	orr.w	r1, r0, r6
  4019a4:	2011      	movs	r0, #17
  4019a6:	4cb6      	ldr	r4, [pc, #728]	; (401c80 <board_init+0x2f8>)
  4019a8:	47a0      	blx	r4
		mpu_cal_mpu_region_size(IFLASH_END_ADDRESS - IFLASH_START_ADDRESS) |
  4019aa:	48b6      	ldr	r0, [pc, #728]	; (401c84 <board_init+0x2fc>)
  4019ac:	47a8      	blx	r5
	mpu_set_region( dw_region_base_addr, dw_region_attr);
  4019ae:	49b6      	ldr	r1, [pc, #728]	; (401c88 <board_init+0x300>)
  4019b0:	4301      	orrs	r1, r0
  4019b2:	48b6      	ldr	r0, [pc, #728]	; (401c8c <board_init+0x304>)
  4019b4:	47a0      	blx	r4
		mpu_cal_mpu_region_size(DTCM_END_ADDRESS - DTCM_START_ADDRESS) |
  4019b6:	4638      	mov	r0, r7
  4019b8:	47a8      	blx	r5
	mpu_set_region( dw_region_base_addr, dw_region_attr);
  4019ba:	ea40 0106 	orr.w	r1, r0, r6
  4019be:	48b4      	ldr	r0, [pc, #720]	; (401c90 <board_init+0x308>)
  4019c0:	47a0      	blx	r4
		mpu_cal_mpu_region_size(SRAM_FIRST_END_ADDRESS - SRAM_FIRST_START_ADDRESS)
  4019c2:	48b4      	ldr	r0, [pc, #720]	; (401c94 <board_init+0x30c>)
  4019c4:	47a8      	blx	r5
	dw_region_attr =
  4019c6:	f106 7608 	add.w	r6, r6, #35651584	; 0x2200000
  4019ca:	f506 3640 	add.w	r6, r6, #196608	; 0x30000
	mpu_set_region( dw_region_base_addr, dw_region_attr);
  4019ce:	ea40 0106 	orr.w	r1, r0, r6
  4019d2:	48b1      	ldr	r0, [pc, #708]	; (401c98 <board_init+0x310>)
  4019d4:	47a0      	blx	r4
		mpu_cal_mpu_region_size(SRAM_SECOND_END_ADDRESS - SRAM_SECOND_START_ADDRESS) |
  4019d6:	48b1      	ldr	r0, [pc, #708]	; (401c9c <board_init+0x314>)
  4019d8:	47a8      	blx	r5
	mpu_set_region( dw_region_base_addr, dw_region_attr);
  4019da:	ea40 0106 	orr.w	r1, r0, r6
  4019de:	48b0      	ldr	r0, [pc, #704]	; (401ca0 <board_init+0x318>)
  4019e0:	47a0      	blx	r4
		mpu_cal_mpu_region_size(PERIPHERALS_END_ADDRESS - PERIPHERALS_START_ADDRESS)
  4019e2:	f06f 4060 	mvn.w	r0, #3758096384	; 0xe0000000
  4019e6:	47a8      	blx	r5
	dw_region_attr = MPU_AP_FULL_ACCESS |
  4019e8:	4eae      	ldr	r6, [pc, #696]	; (401ca4 <board_init+0x31c>)
	mpu_set_region( dw_region_base_addr, dw_region_attr);
  4019ea:	ea40 0106 	orr.w	r1, r0, r6
  4019ee:	48ae      	ldr	r0, [pc, #696]	; (401ca8 <board_init+0x320>)
  4019f0:	47a0      	blx	r4
		mpu_cal_mpu_region_size(EXT_EBI_END_ADDRESS - EXT_EBI_START_ADDRESS) |
  4019f2:	f06f 4070 	mvn.w	r0, #4026531840	; 0xf0000000
  4019f6:	47a8      	blx	r5
	dw_region_attr =
  4019f8:	4fac      	ldr	r7, [pc, #688]	; (401cac <board_init+0x324>)
	mpu_set_region( dw_region_base_addr, dw_region_attr);
  4019fa:	ea40 0107 	orr.w	r1, r0, r7
  4019fe:	48ac      	ldr	r0, [pc, #688]	; (401cb0 <board_init+0x328>)
  401a00:	47a0      	blx	r4
		mpu_cal_mpu_region_size(SDRAM_END_ADDRESS - SDRAM_START_ADDRESS) |
  401a02:	f06f 4070 	mvn.w	r0, #4026531840	; 0xf0000000
  401a06:	47a8      	blx	r5
	mpu_set_region( dw_region_base_addr, dw_region_attr);
  401a08:	49aa      	ldr	r1, [pc, #680]	; (401cb4 <board_init+0x32c>)
  401a0a:	4301      	orrs	r1, r0
  401a0c:	48aa      	ldr	r0, [pc, #680]	; (401cb8 <board_init+0x330>)
  401a0e:	47a0      	blx	r4
		mpu_cal_mpu_region_size(QSPI_END_ADDRESS - QSPI_START_ADDRESS) |
  401a10:	f06f 4060 	mvn.w	r0, #3758096384	; 0xe0000000
  401a14:	47a8      	blx	r5
	mpu_set_region( dw_region_base_addr, dw_region_attr);
  401a16:	ea40 0107 	orr.w	r1, r0, r7
  401a1a:	48a8      	ldr	r0, [pc, #672]	; (401cbc <board_init+0x334>)
  401a1c:	47a0      	blx	r4
		mpu_cal_mpu_region_size(USBHSRAM_END_ADDRESS - USBHSRAM_START_ADDRESS) |
  401a1e:	48a8      	ldr	r0, [pc, #672]	; (401cc0 <board_init+0x338>)
  401a20:	47a8      	blx	r5
	mpu_set_region( dw_region_base_addr, dw_region_attr);
  401a22:	ea40 0106 	orr.w	r1, r0, r6
  401a26:	48a7      	ldr	r0, [pc, #668]	; (401cc4 <board_init+0x33c>)
  401a28:	47a0      	blx	r4
	SCB->SHCSR |= (SCB_SHCSR_MEMFAULTENA_Msk | SCB_SHCSR_BUSFAULTENA_Msk
  401a2a:	4ca7      	ldr	r4, [pc, #668]	; (401cc8 <board_init+0x340>)
  401a2c:	6a63      	ldr	r3, [r4, #36]	; 0x24
  401a2e:	f443 23e0 	orr.w	r3, r3, #458752	; 0x70000
  401a32:	6263      	str	r3, [r4, #36]	; 0x24
	mpu_enable( MPU_ENABLE | MPU_PRIVDEFENA);
  401a34:	2005      	movs	r0, #5
  401a36:	4ba5      	ldr	r3, [pc, #660]	; (401ccc <board_init+0x344>)
  401a38:	4798      	blx	r3
  __ASM volatile ("dsb");
  401a3a:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb");
  401a3e:	f3bf 8f6f 	isb	sy
  __ASM volatile ("dsb");
  401a42:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb");
  401a46:	f3bf 8f6f 	isb	sy
__STATIC_INLINE void SCB_EnableICache(void)
{
  #if (__ICACHE_PRESENT == 1)
    __DSB();
    __ISB();
    SCB->ICIALLU = 0;                       // invalidate I-Cache
  401a4a:	2300      	movs	r3, #0
  401a4c:	f8c4 3250 	str.w	r3, [r4, #592]	; 0x250
    SCB->CCR |=  SCB_CCR_IC_Msk;            // enable I-Cache
  401a50:	6963      	ldr	r3, [r4, #20]
  401a52:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
  401a56:	6163      	str	r3, [r4, #20]
  __ASM volatile ("dsb");
  401a58:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb");
  401a5c:	f3bf 8f6f 	isb	sy
{
  #if (__DCACHE_PRESENT == 1)
    uint32_t ccsidr, sshift, wshift, sw;
    uint32_t sets, ways;

    ccsidr  = SCB->CCSIDR;
  401a60:	f8d4 7080 	ldr.w	r7, [r4, #128]	; 0x80
    sets    = CCSIDR_SETS(ccsidr);
  401a64:	f3c7 364e 	ubfx	r6, r7, #13, #15
    sshift  = CCSIDR_LSSHIFT(ccsidr) + 4;
  401a68:	f007 0007 	and.w	r0, r7, #7
  401a6c:	3004      	adds	r0, #4
    ways    = CCSIDR_WAYS(ccsidr);
  401a6e:	f3c7 07c9 	ubfx	r7, r7, #3, #10
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE uint8_t __CLZ(uint32_t value)
{
  uint32_t result;

  __ASM volatile ("clz %0, %1" : "=r" (result) : "r" (value) );
  401a72:	fab7 fe87 	clz	lr, r7
    wshift  = __CLZ(ways) & 0x1f;
  401a76:	f00e 0e1f 	and.w	lr, lr, #31
  __ASM volatile ("dsb");
  401a7a:	f3bf 8f4f 	dsb	sy
  401a7e:	f04f 34ff 	mov.w	r4, #4294967295
  401a82:	fa04 fc00 	lsl.w	ip, r4, r0
  401a86:	fa06 f000 	lsl.w	r0, r6, r0
  401a8a:	fa04 f40e 	lsl.w	r4, r4, lr
  401a8e:	fa07 fe0e 	lsl.w	lr, r7, lr

    do {                                    // invalidate D-Cache
         int32_t tmpways = ways;
         do {
              sw = ((tmpways << wshift) | (sets << sshift));
              SCB->DCISW = sw;
  401a92:	4d8d      	ldr	r5, [pc, #564]	; (401cc8 <board_init+0x340>)
         int32_t tmpways = ways;
  401a94:	463a      	mov	r2, r7
  401a96:	4673      	mov	r3, lr
              sw = ((tmpways << wshift) | (sets << sshift));
  401a98:	ea40 0103 	orr.w	r1, r0, r3
              SCB->DCISW = sw;
  401a9c:	f8c5 1260 	str.w	r1, [r5, #608]	; 0x260
            } while(tmpways--);
  401aa0:	3a01      	subs	r2, #1
  401aa2:	4423      	add	r3, r4
  401aa4:	f1b2 3fff 	cmp.w	r2, #4294967295
  401aa8:	d1f6      	bne.n	401a98 <board_init+0x110>
        } while(sets--);
  401aaa:	3e01      	subs	r6, #1
  401aac:	4460      	add	r0, ip
  401aae:	f1b6 3fff 	cmp.w	r6, #4294967295
  401ab2:	d1ef      	bne.n	401a94 <board_init+0x10c>
  401ab4:	f3bf 8f4f 	dsb	sy
    __DSB();

    SCB->CCR |=  SCB_CCR_DC_Msk;            // enable D-Cache
  401ab8:	4b83      	ldr	r3, [pc, #524]	; (401cc8 <board_init+0x340>)
  401aba:	695a      	ldr	r2, [r3, #20]
  401abc:	f442 3280 	orr.w	r2, r2, #65536	; 0x10000
  401ac0:	615a      	str	r2, [r3, #20]
  401ac2:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb");
  401ac6:	f3bf 8f6f 	isb	sy
		*dst++ = *src++;
	}
#endif
#else
	/* TCM Configuration */
	EFC->EEFC_FCR = (EEFC_FCR_FKEY_PASSWD | EEFC_FCR_FCMD_CGPB 
  401aca:	4a81      	ldr	r2, [pc, #516]	; (401cd0 <board_init+0x348>)
  401acc:	4981      	ldr	r1, [pc, #516]	; (401cd4 <board_init+0x34c>)
  401ace:	6051      	str	r1, [r2, #4]
					| EEFC_FCR_FARG(8));
	EFC->EEFC_FCR = (EEFC_FCR_FKEY_PASSWD | EEFC_FCR_FCMD_CGPB 
  401ad0:	f5a1 7180 	sub.w	r1, r1, #256	; 0x100
  401ad4:	6051      	str	r1, [r2, #4]
  __ASM volatile ("dsb");
  401ad6:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb");
  401ada:	f3bf 8f6f 	isb	sy
	SCB->ITCMCR &= ~(uint32_t)(1UL);
  401ade:	f8d3 2290 	ldr.w	r2, [r3, #656]	; 0x290
  401ae2:	f022 0201 	bic.w	r2, r2, #1
  401ae6:	f8c3 2290 	str.w	r2, [r3, #656]	; 0x290
	SCB->DTCMCR &= ~(uint32_t)SCB_DTCMCR_EN_Msk;
  401aea:	f8d3 2294 	ldr.w	r2, [r3, #660]	; 0x294
  401aee:	f022 0201 	bic.w	r2, r2, #1
  401af2:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  __ASM volatile ("dsb");
  401af6:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb");
  401afa:	f3bf 8f6f 	isb	sy
 *
 * \param ul_id Id (number) of the peripheral clock.
 */
static inline void sysclk_enable_peripheral_clock(uint32_t ul_id)
{
	pmc_enable_periph_clk(ul_id);
  401afe:	200a      	movs	r0, #10
  401b00:	4c75      	ldr	r4, [pc, #468]	; (401cd8 <board_init+0x350>)
  401b02:	47a0      	blx	r4
  401b04:	200b      	movs	r0, #11
  401b06:	47a0      	blx	r4
  401b08:	200c      	movs	r0, #12
  401b0a:	47a0      	blx	r4
  401b0c:	2010      	movs	r0, #16
  401b0e:	47a0      	blx	r4
  401b10:	2011      	movs	r0, #17
  401b12:	47a0      	blx	r4
		enum ioport_direction dir)
{
	Pio *base = arch_ioport_pin_to_base(pin);

	if (dir == IOPORT_DIR_OUTPUT) {
		base->PIO_OER = arch_ioport_pin_to_mask(pin);
  401b14:	4a71      	ldr	r2, [pc, #452]	; (401cdc <board_init+0x354>)
  401b16:	f44f 7380 	mov.w	r3, #256	; 0x100
  401b1a:	6113      	str	r3, [r2, #16]
	} else if (dir == IOPORT_DIR_INPUT) {
		base->PIO_ODR = arch_ioport_pin_to_mask(pin);
	}

	base->PIO_OWER = arch_ioport_pin_to_mask(pin);
  401b1c:	f8c2 30a0 	str.w	r3, [r2, #160]	; 0xa0
		bool level)
{
	Pio *base = arch_ioport_pin_to_base(pin);

	if (level) {
		base->PIO_SODR = arch_ioport_pin_to_mask(pin);
  401b20:	6313      	str	r3, [r2, #48]	; 0x30
		base->PIO_ODR = arch_ioport_pin_to_mask(pin);
  401b22:	4b6f      	ldr	r3, [pc, #444]	; (401ce0 <board_init+0x358>)
  401b24:	f44f 6100 	mov.w	r1, #2048	; 0x800
  401b28:	6159      	str	r1, [r3, #20]
	base->PIO_OWER = arch_ioport_pin_to_mask(pin);
  401b2a:	f8c3 10a0 	str.w	r1, [r3, #160]	; 0xa0
		base->PIO_PUER = mask;
  401b2e:	6659      	str	r1, [r3, #100]	; 0x64
		base->PIO_PPDDR = mask;
  401b30:	f8c3 1090 	str.w	r1, [r3, #144]	; 0x90
		base->PIO_MDDR = mask;
  401b34:	6559      	str	r1, [r3, #84]	; 0x54
		base->PIO_IFER = mask;
  401b36:	6219      	str	r1, [r3, #32]
		base->PIO_IFSCER = mask;
  401b38:	f8c3 1084 	str.w	r1, [r3, #132]	; 0x84
		base->PIO_ABCDSR[0] &= ~mask;
  401b3c:	6f18      	ldr	r0, [r3, #112]	; 0x70
  401b3e:	f420 6000 	bic.w	r0, r0, #2048	; 0x800
  401b42:	6718      	str	r0, [r3, #112]	; 0x70
		base->PIO_ABCDSR[1] &= ~mask;
  401b44:	6f58      	ldr	r0, [r3, #116]	; 0x74
  401b46:	f420 6000 	bic.w	r0, r0, #2048	; 0x800
  401b4a:	6758      	str	r0, [r3, #116]	; 0x74
	case IOPORT_SENSE_FALLING:
		base->PIO_ESR = mask;
		base->PIO_FELLSR = mask;
		break;
	case IOPORT_SENSE_RISING:
		base->PIO_ESR = mask;
  401b4c:	f8c3 10c0 	str.w	r1, [r3, #192]	; 0xc0
		base->PIO_REHLSR = mask;
  401b50:	f8c3 10d4 	str.w	r1, [r3, #212]	; 0xd4
		break;
	default:
		base->PIO_AIMDR = mask;
		return;
	}
	base->PIO_AIMER = mask;
  401b54:	f8c3 10b0 	str.w	r1, [r3, #176]	; 0xb0
		base->PIO_PUDR = mask;
  401b58:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
  401b5c:	6619      	str	r1, [r3, #96]	; 0x60
		base->PIO_PPDDR = mask;
  401b5e:	f8c3 1090 	str.w	r1, [r3, #144]	; 0x90
		base->PIO_MDDR = mask;
  401b62:	6559      	str	r1, [r3, #84]	; 0x54
		base->PIO_IFDR = mask;
  401b64:	6259      	str	r1, [r3, #36]	; 0x24
		base->PIO_IFSCDR = mask;
  401b66:	f8c3 1080 	str.w	r1, [r3, #128]	; 0x80
		base->PIO_ABCDSR[0] &= ~mask;
  401b6a:	6f18      	ldr	r0, [r3, #112]	; 0x70
  401b6c:	f420 1000 	bic.w	r0, r0, #2097152	; 0x200000
  401b70:	6718      	str	r0, [r3, #112]	; 0x70
		base->PIO_ABCDSR[1] &= ~mask;
  401b72:	6f58      	ldr	r0, [r3, #116]	; 0x74
  401b74:	f420 1000 	bic.w	r0, r0, #2097152	; 0x200000
  401b78:	6758      	str	r0, [r3, #116]	; 0x74
	arch_ioport_port_to_base(port)->PIO_PDR = mask;
  401b7a:	6059      	str	r1, [r3, #4]
			GPIO_PUSH_BUTTON_1_SENSE);

#ifdef CONF_BOARD_UART_CONSOLE
	/* Configure UART pins */
	ioport_set_pin_peripheral_mode(USART1_RXD_GPIO, USART1_RXD_FLAGS);
	MATRIX->CCFG_SYSIO |= CCFG_SYSIO_SYSIO4;
  401b7c:	4859      	ldr	r0, [pc, #356]	; (401ce4 <board_init+0x35c>)
  401b7e:	f8d0 1114 	ldr.w	r1, [r0, #276]	; 0x114
  401b82:	f041 0110 	orr.w	r1, r1, #16
  401b86:	f8c0 1114 	str.w	r1, [r0, #276]	; 0x114
		base->PIO_PUDR = mask;
  401b8a:	4957      	ldr	r1, [pc, #348]	; (401ce8 <board_init+0x360>)
  401b8c:	2010      	movs	r0, #16
  401b8e:	6608      	str	r0, [r1, #96]	; 0x60
		base->PIO_PPDDR = mask;
  401b90:	f8c1 0090 	str.w	r0, [r1, #144]	; 0x90
		base->PIO_MDDR = mask;
  401b94:	6548      	str	r0, [r1, #84]	; 0x54
		base->PIO_IFDR = mask;
  401b96:	6248      	str	r0, [r1, #36]	; 0x24
		base->PIO_IFSCDR = mask;
  401b98:	f8c1 0080 	str.w	r0, [r1, #128]	; 0x80
		base->PIO_ABCDSR[0] |= mask;
  401b9c:	6f0c      	ldr	r4, [r1, #112]	; 0x70
  401b9e:	4304      	orrs	r4, r0
  401ba0:	670c      	str	r4, [r1, #112]	; 0x70
		base->PIO_ABCDSR[1] |= mask;
  401ba2:	6f4c      	ldr	r4, [r1, #116]	; 0x74
  401ba4:	4304      	orrs	r4, r0
  401ba6:	674c      	str	r4, [r1, #116]	; 0x74
	arch_ioport_port_to_base(port)->PIO_PDR = mask;
  401ba8:	6048      	str	r0, [r1, #4]
		base->PIO_PUDR = mask;
  401baa:	f04f 5180 	mov.w	r1, #268435456	; 0x10000000
  401bae:	6619      	str	r1, [r3, #96]	; 0x60
		base->PIO_PPDDR = mask;
  401bb0:	f8c3 1090 	str.w	r1, [r3, #144]	; 0x90
		base->PIO_MDDR = mask;
  401bb4:	6559      	str	r1, [r3, #84]	; 0x54
		base->PIO_IFDR = mask;
  401bb6:	6259      	str	r1, [r3, #36]	; 0x24
		base->PIO_IFSCDR = mask;
  401bb8:	f8c3 1080 	str.w	r1, [r3, #128]	; 0x80
		base->PIO_ABCDSR[0] &= ~mask;
  401bbc:	6f18      	ldr	r0, [r3, #112]	; 0x70
  401bbe:	f020 5080 	bic.w	r0, r0, #268435456	; 0x10000000
  401bc2:	6718      	str	r0, [r3, #112]	; 0x70
		base->PIO_ABCDSR[1] |= mask;
  401bc4:	6f58      	ldr	r0, [r3, #116]	; 0x74
  401bc6:	4308      	orrs	r0, r1
  401bc8:	6758      	str	r0, [r3, #116]	; 0x74
	arch_ioport_port_to_base(port)->PIO_PDR = mask;
  401bca:	6059      	str	r1, [r3, #4]
		base->PIO_PUDR = mask;
  401bcc:	f04f 7100 	mov.w	r1, #33554432	; 0x2000000
  401bd0:	6619      	str	r1, [r3, #96]	; 0x60
		base->PIO_PPDDR = mask;
  401bd2:	f8c3 1090 	str.w	r1, [r3, #144]	; 0x90
		base->PIO_MDDR = mask;
  401bd6:	6559      	str	r1, [r3, #84]	; 0x54
		base->PIO_IFDR = mask;
  401bd8:	6259      	str	r1, [r3, #36]	; 0x24
		base->PIO_IFSCDR = mask;
  401bda:	f8c3 1080 	str.w	r1, [r3, #128]	; 0x80
		base->PIO_ABCDSR[0] |= mask;
  401bde:	6f18      	ldr	r0, [r3, #112]	; 0x70
  401be0:	4308      	orrs	r0, r1
  401be2:	6718      	str	r0, [r3, #112]	; 0x70
		base->PIO_ABCDSR[1] |= mask;
  401be4:	6f58      	ldr	r0, [r3, #116]	; 0x74
  401be6:	4308      	orrs	r0, r1
  401be8:	6758      	str	r0, [r3, #116]	; 0x74
	arch_ioport_port_to_base(port)->PIO_PDR = mask;
  401bea:	6059      	str	r1, [r3, #4]
		base->PIO_PUDR = mask;
  401bec:	f04f 4180 	mov.w	r1, #1073741824	; 0x40000000
  401bf0:	6619      	str	r1, [r3, #96]	; 0x60
		base->PIO_PPDDR = mask;
  401bf2:	f8c3 1090 	str.w	r1, [r3, #144]	; 0x90
		base->PIO_MDDR = mask;
  401bf6:	6559      	str	r1, [r3, #84]	; 0x54
		base->PIO_IFDR = mask;
  401bf8:	6259      	str	r1, [r3, #36]	; 0x24
		base->PIO_IFSCDR = mask;
  401bfa:	f8c3 1080 	str.w	r1, [r3, #128]	; 0x80
		base->PIO_ABCDSR[0] &= ~mask;
  401bfe:	6f18      	ldr	r0, [r3, #112]	; 0x70
  401c00:	f020 4080 	bic.w	r0, r0, #1073741824	; 0x40000000
  401c04:	6718      	str	r0, [r3, #112]	; 0x70
		base->PIO_ABCDSR[1] |= mask;
  401c06:	6f58      	ldr	r0, [r3, #116]	; 0x74
  401c08:	4308      	orrs	r0, r1
  401c0a:	6758      	str	r0, [r3, #116]	; 0x74
	arch_ioport_port_to_base(port)->PIO_PDR = mask;
  401c0c:	6059      	str	r1, [r3, #4]
		base->PIO_PUDR = mask;
  401c0e:	f04f 4100 	mov.w	r1, #2147483648	; 0x80000000
  401c12:	6619      	str	r1, [r3, #96]	; 0x60
		base->PIO_PPDDR = mask;
  401c14:	f8c3 1090 	str.w	r1, [r3, #144]	; 0x90
		base->PIO_MDDR = mask;
  401c18:	6559      	str	r1, [r3, #84]	; 0x54
		base->PIO_IFDR = mask;
  401c1a:	6259      	str	r1, [r3, #36]	; 0x24
		base->PIO_IFSCDR = mask;
  401c1c:	f8c3 1080 	str.w	r1, [r3, #128]	; 0x80
		base->PIO_ABCDSR[0] &= ~mask;
  401c20:	6f18      	ldr	r0, [r3, #112]	; 0x70
  401c22:	f020 4000 	bic.w	r0, r0, #2147483648	; 0x80000000
  401c26:	6718      	str	r0, [r3, #112]	; 0x70
		base->PIO_ABCDSR[1] |= mask;
  401c28:	6f58      	ldr	r0, [r3, #116]	; 0x74
  401c2a:	4308      	orrs	r0, r1
  401c2c:	6758      	str	r0, [r3, #116]	; 0x74
	arch_ioport_port_to_base(port)->PIO_PDR = mask;
  401c2e:	6059      	str	r1, [r3, #4]
		base->PIO_PUDR = mask;
  401c30:	f04f 6180 	mov.w	r1, #67108864	; 0x4000000
  401c34:	6619      	str	r1, [r3, #96]	; 0x60
		base->PIO_PPDDR = mask;
  401c36:	f8c3 1090 	str.w	r1, [r3, #144]	; 0x90
		base->PIO_MDDR = mask;
  401c3a:	6559      	str	r1, [r3, #84]	; 0x54
		base->PIO_IFDR = mask;
  401c3c:	6259      	str	r1, [r3, #36]	; 0x24
		base->PIO_IFSCDR = mask;
  401c3e:	f8c3 1080 	str.w	r1, [r3, #128]	; 0x80
		base->PIO_ABCDSR[0] &= ~mask;
  401c42:	6f18      	ldr	r0, [r3, #112]	; 0x70
  401c44:	f020 6080 	bic.w	r0, r0, #67108864	; 0x4000000
  401c48:	6718      	str	r0, [r3, #112]	; 0x70
		base->PIO_ABCDSR[1] |= mask;
  401c4a:	6f58      	ldr	r0, [r3, #116]	; 0x74
  401c4c:	4308      	orrs	r0, r1
  401c4e:	6758      	str	r0, [r3, #116]	; 0x74
	arch_ioport_port_to_base(port)->PIO_PDR = mask;
  401c50:	6059      	str	r1, [r3, #4]
		base->PIO_PUDR = mask;
  401c52:	f04f 6100 	mov.w	r1, #134217728	; 0x8000000
  401c56:	6619      	str	r1, [r3, #96]	; 0x60
		base->PIO_PPDDR = mask;
  401c58:	f8c3 1090 	str.w	r1, [r3, #144]	; 0x90
		base->PIO_MDDR = mask;
  401c5c:	6559      	str	r1, [r3, #84]	; 0x54
		base->PIO_IFDR = mask;
  401c5e:	6259      	str	r1, [r3, #36]	; 0x24
		base->PIO_IFSCDR = mask;
  401c60:	f8c3 1080 	str.w	r1, [r3, #128]	; 0x80
		base->PIO_ABCDSR[0] &= ~mask;
  401c64:	6f18      	ldr	r0, [r3, #112]	; 0x70
  401c66:	f020 6000 	bic.w	r0, r0, #134217728	; 0x8000000
  401c6a:	6718      	str	r0, [r3, #112]	; 0x70
  401c6c:	e03e      	b.n	401cec <board_init+0x364>
  401c6e:	bf00      	nop
  401c70:	400e1850 	.word	0x400e1850
  401c74:	003fffff 	.word	0x003fffff
  401c78:	00401d39 	.word	0x00401d39
  401c7c:	01000001 	.word	0x01000001
  401c80:	00401d2d 	.word	0x00401d2d
  401c84:	001fffff 	.word	0x001fffff
  401c88:	06230001 	.word	0x06230001
  401c8c:	00400012 	.word	0x00400012
  401c90:	20000013 	.word	0x20000013
  401c94:	0003ffff 	.word	0x0003ffff
  401c98:	20400014 	.word	0x20400014
  401c9c:	0001ffff 	.word	0x0001ffff
  401ca0:	20440015 	.word	0x20440015
  401ca4:	13010001 	.word	0x13010001
  401ca8:	40000016 	.word	0x40000016
  401cac:	03000001 	.word	0x03000001
  401cb0:	60000017 	.word	0x60000017
  401cb4:	03250001 	.word	0x03250001
  401cb8:	70000018 	.word	0x70000018
  401cbc:	80000019 	.word	0x80000019
  401cc0:	000fffff 	.word	0x000fffff
  401cc4:	a010001a 	.word	0xa010001a
  401cc8:	e000ed00 	.word	0xe000ed00
  401ccc:	00401d21 	.word	0x00401d21
  401cd0:	400e0c00 	.word	0x400e0c00
  401cd4:	5a00080c 	.word	0x5a00080c
  401cd8:	00401f31 	.word	0x00401f31
  401cdc:	400e1200 	.word	0x400e1200
  401ce0:	400e0e00 	.word	0x400e0e00
  401ce4:	40088000 	.word	0x40088000
  401ce8:	400e1000 	.word	0x400e1000
		base->PIO_ABCDSR[1] |= mask;
  401cec:	6f58      	ldr	r0, [r3, #116]	; 0x74
  401cee:	4308      	orrs	r0, r1
  401cf0:	6758      	str	r0, [r3, #116]	; 0x74
	arch_ioport_port_to_base(port)->PIO_PDR = mask;
  401cf2:	6059      	str	r1, [r3, #4]
		base->PIO_ODR = arch_ioport_pin_to_mask(pin);
  401cf4:	f44f 3380 	mov.w	r3, #65536	; 0x10000
  401cf8:	6153      	str	r3, [r2, #20]
	base->PIO_OWER = arch_ioport_pin_to_mask(pin);
  401cfa:	f8c2 30a0 	str.w	r3, [r2, #160]	; 0xa0
		base->PIO_PUER = mask;
  401cfe:	6653      	str	r3, [r2, #100]	; 0x64
		base->PIO_PPDDR = mask;
  401d00:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
		base->PIO_MDDR = mask;
  401d04:	6553      	str	r3, [r2, #84]	; 0x54
		base->PIO_IFDR = mask;
  401d06:	6253      	str	r3, [r2, #36]	; 0x24
		base->PIO_IFSCDR = mask;
  401d08:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80
		base->PIO_ABCDSR[0] &= ~mask;
  401d0c:	6f13      	ldr	r3, [r2, #112]	; 0x70
  401d0e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
  401d12:	6713      	str	r3, [r2, #112]	; 0x70
		base->PIO_ABCDSR[1] &= ~mask;
  401d14:	6f53      	ldr	r3, [r2, #116]	; 0x74
  401d16:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
  401d1a:	6753      	str	r3, [r2, #116]	; 0x74
  401d1c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  401d1e:	bf00      	nop

00401d20 <mpu_enable>:
 *
 * \param dwMPUEnable  Enable/Disable the memory region.
 */
void mpu_enable(uint32_t dw_mpu_enable)
{
	MPU->CTRL = dw_mpu_enable ;
  401d20:	4b01      	ldr	r3, [pc, #4]	; (401d28 <mpu_enable+0x8>)
  401d22:	6058      	str	r0, [r3, #4]
  401d24:	4770      	bx	lr
  401d26:	bf00      	nop
  401d28:	e000ed90 	.word	0xe000ed90

00401d2c <mpu_set_region>:
 * \param dwRegionBaseAddr  Memory region base address.
 * \param dwRegionAttr  Memory region attributes.
 */
void mpu_set_region(uint32_t dw_region_base_addr, uint32_t dw_region_attr)
{
	MPU->RBAR = dw_region_base_addr;
  401d2c:	4b01      	ldr	r3, [pc, #4]	; (401d34 <mpu_set_region+0x8>)
  401d2e:	60d8      	str	r0, [r3, #12]
	MPU->RASR = dw_region_attr;
  401d30:	6119      	str	r1, [r3, #16]
  401d32:	4770      	bx	lr
  401d34:	e000ed90 	.word	0xe000ed90

00401d38 <mpu_cal_mpu_region_size>:
{
	uint32_t dwRegionSize = 32;
	uint32_t dwReturnValue = 4;

	while( dwReturnValue < 31 ) {
		if( dw_actual_size_in_bytes <= dwRegionSize ) {
  401d38:	2820      	cmp	r0, #32
  401d3a:	d909      	bls.n	401d50 <mpu_cal_mpu_region_size+0x18>
  401d3c:	2304      	movs	r3, #4
  401d3e:	2220      	movs	r2, #32
			break;
		} else {
			dwReturnValue++;
  401d40:	3301      	adds	r3, #1
		}
		dwRegionSize <<= 1;
  401d42:	0052      	lsls	r2, r2, #1
		if( dw_actual_size_in_bytes <= dwRegionSize ) {
  401d44:	4290      	cmp	r0, r2
  401d46:	d901      	bls.n	401d4c <mpu_cal_mpu_region_size+0x14>
  401d48:	2b1e      	cmp	r3, #30
  401d4a:	d9f9      	bls.n	401d40 <mpu_cal_mpu_region_size+0x8>
	}

	return ( dwReturnValue << 1 );
}
  401d4c:	0058      	lsls	r0, r3, #1
  401d4e:	4770      	bx	lr
	uint32_t dwReturnValue = 4;
  401d50:	2304      	movs	r3, #4
  401d52:	e7fb      	b.n	401d4c <mpu_cal_mpu_region_size+0x14>

00401d54 <pio_get_interrupt_status>:
 *
 * \return The interrupt status value.
 */
uint32_t pio_get_interrupt_status(const Pio *p_pio)
{
	return p_pio->PIO_ISR;
  401d54:	6cc0      	ldr	r0, [r0, #76]	; 0x4c
}
  401d56:	4770      	bx	lr

00401d58 <pio_get_interrupt_mask>:
 *
 * \return The interrupt mask value.
 */
uint32_t pio_get_interrupt_mask(const Pio *p_pio)
{
	return p_pio->PIO_IMR;
  401d58:	6c80      	ldr	r0, [r0, #72]	; 0x48
}
  401d5a:	4770      	bx	lr

00401d5c <pio_handler_process>:
 *
 * \param p_pio PIO controller base address.
 * \param ul_id PIO controller ID.
 */
void pio_handler_process(Pio *p_pio, uint32_t ul_id)
{
  401d5c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  401d60:	4604      	mov	r4, r0
  401d62:	4688      	mov	r8, r1
	uint32_t status;
	uint32_t i;

	/* Read PIO controller status */
	status = pio_get_interrupt_status(p_pio);
  401d64:	4b0e      	ldr	r3, [pc, #56]	; (401da0 <pio_handler_process+0x44>)
  401d66:	4798      	blx	r3
  401d68:	4605      	mov	r5, r0
	status &= pio_get_interrupt_mask(p_pio);
  401d6a:	4620      	mov	r0, r4
  401d6c:	4b0d      	ldr	r3, [pc, #52]	; (401da4 <pio_handler_process+0x48>)
  401d6e:	4798      	blx	r3

	/* Check pending events */
	if (status != 0) {
  401d70:	4005      	ands	r5, r0
  401d72:	d013      	beq.n	401d9c <pio_handler_process+0x40>
  401d74:	4c0c      	ldr	r4, [pc, #48]	; (401da8 <pio_handler_process+0x4c>)
  401d76:	f104 0660 	add.w	r6, r4, #96	; 0x60
  401d7a:	e003      	b.n	401d84 <pio_handler_process+0x28>
							gs_interrupt_sources[i].mask);
					status &= ~(gs_interrupt_sources[i].mask);
				}
			}
			i++;
			if (i >= MAX_INTERRUPT_SOURCES) {
  401d7c:	42b4      	cmp	r4, r6
  401d7e:	d00d      	beq.n	401d9c <pio_handler_process+0x40>
  401d80:	3410      	adds	r4, #16
		while (status != 0) {
  401d82:	b15d      	cbz	r5, 401d9c <pio_handler_process+0x40>
			if (gs_interrupt_sources[i].id == ul_id) {
  401d84:	6820      	ldr	r0, [r4, #0]
  401d86:	4540      	cmp	r0, r8
  401d88:	d1f8      	bne.n	401d7c <pio_handler_process+0x20>
				if ((status & gs_interrupt_sources[i].mask) != 0) {
  401d8a:	6861      	ldr	r1, [r4, #4]
  401d8c:	4229      	tst	r1, r5
  401d8e:	d0f5      	beq.n	401d7c <pio_handler_process+0x20>
					gs_interrupt_sources[i].handler(gs_interrupt_sources[i].id,
  401d90:	68e3      	ldr	r3, [r4, #12]
  401d92:	4798      	blx	r3
					status &= ~(gs_interrupt_sources[i].mask);
  401d94:	6863      	ldr	r3, [r4, #4]
  401d96:	ea25 0503 	bic.w	r5, r5, r3
  401d9a:	e7ef      	b.n	401d7c <pio_handler_process+0x20>
  401d9c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  401da0:	00401d55 	.word	0x00401d55
  401da4:	00401d59 	.word	0x00401d59
  401da8:	2040c314 	.word	0x2040c314

00401dac <PIOA_Handler>:
/**
 * \brief Parallel IO Controller A interrupt handler.
 * Redefined PIOA interrupt handler for NVIC interrupt table.
 */
void PIOA_Handler(void)
{
  401dac:	b508      	push	{r3, lr}
	pio_handler_process(PIOA, ID_PIOA);
  401dae:	210a      	movs	r1, #10
  401db0:	4801      	ldr	r0, [pc, #4]	; (401db8 <PIOA_Handler+0xc>)
  401db2:	4b02      	ldr	r3, [pc, #8]	; (401dbc <PIOA_Handler+0x10>)
  401db4:	4798      	blx	r3
  401db6:	bd08      	pop	{r3, pc}
  401db8:	400e0e00 	.word	0x400e0e00
  401dbc:	00401d5d 	.word	0x00401d5d

00401dc0 <PIOB_Handler>:
/**
 * \brief Parallel IO Controller B interrupt handler
 * Redefined PIOB interrupt handler for NVIC interrupt table.
 */
void PIOB_Handler(void)
{
  401dc0:	b508      	push	{r3, lr}
    pio_handler_process(PIOB, ID_PIOB);
  401dc2:	210b      	movs	r1, #11
  401dc4:	4801      	ldr	r0, [pc, #4]	; (401dcc <PIOB_Handler+0xc>)
  401dc6:	4b02      	ldr	r3, [pc, #8]	; (401dd0 <PIOB_Handler+0x10>)
  401dc8:	4798      	blx	r3
  401dca:	bd08      	pop	{r3, pc}
  401dcc:	400e1000 	.word	0x400e1000
  401dd0:	00401d5d 	.word	0x00401d5d

00401dd4 <PIOC_Handler>:
/**
 * \brief Parallel IO Controller C interrupt handler.
 * Redefined PIOC interrupt handler for NVIC interrupt table.
 */
void PIOC_Handler(void)
{
  401dd4:	b508      	push	{r3, lr}
	pio_handler_process(PIOC, ID_PIOC);
  401dd6:	210c      	movs	r1, #12
  401dd8:	4801      	ldr	r0, [pc, #4]	; (401de0 <PIOC_Handler+0xc>)
  401dda:	4b02      	ldr	r3, [pc, #8]	; (401de4 <PIOC_Handler+0x10>)
  401ddc:	4798      	blx	r3
  401dde:	bd08      	pop	{r3, pc}
  401de0:	400e1200 	.word	0x400e1200
  401de4:	00401d5d 	.word	0x00401d5d

00401de8 <PIOD_Handler>:
/**
 * \brief Parallel IO Controller D interrupt handler.
 * Redefined PIOD interrupt handler for NVIC interrupt table.
 */
void PIOD_Handler(void)
{
  401de8:	b508      	push	{r3, lr}
	pio_handler_process(PIOD, ID_PIOD);
  401dea:	2110      	movs	r1, #16
  401dec:	4801      	ldr	r0, [pc, #4]	; (401df4 <PIOD_Handler+0xc>)
  401dee:	4b02      	ldr	r3, [pc, #8]	; (401df8 <PIOD_Handler+0x10>)
  401df0:	4798      	blx	r3
  401df2:	bd08      	pop	{r3, pc}
  401df4:	400e1400 	.word	0x400e1400
  401df8:	00401d5d 	.word	0x00401d5d

00401dfc <PIOE_Handler>:
/**
 * \brief Parallel IO Controller E interrupt handler.
 * Redefined PIOE interrupt handler for NVIC interrupt table.
 */
void PIOE_Handler(void)
{
  401dfc:	b508      	push	{r3, lr}
	pio_handler_process(PIOE, ID_PIOE);
  401dfe:	2111      	movs	r1, #17
  401e00:	4801      	ldr	r0, [pc, #4]	; (401e08 <PIOE_Handler+0xc>)
  401e02:	4b02      	ldr	r3, [pc, #8]	; (401e0c <PIOE_Handler+0x10>)
  401e04:	4798      	blx	r3
  401e06:	bd08      	pop	{r3, pc}
  401e08:	400e1600 	.word	0x400e1600
  401e0c:	00401d5d 	.word	0x00401d5d

00401e10 <pmc_mck_set_division>:
 *
 * \param ul_div Division value.
 */
void pmc_mck_set_division(uint32_t ul_div)
{
	switch (ul_div) {
  401e10:	2803      	cmp	r0, #3
  401e12:	d011      	beq.n	401e38 <pmc_mck_set_division+0x28>
  401e14:	2804      	cmp	r0, #4
  401e16:	d012      	beq.n	401e3e <pmc_mck_set_division+0x2e>
		case 1:
			ul_div = PMC_MCKR_MDIV_EQ_PCK;
  401e18:	2802      	cmp	r0, #2
  401e1a:	bf0c      	ite	eq
  401e1c:	f44f 7180 	moveq.w	r1, #256	; 0x100
  401e20:	2100      	movne	r1, #0
		default:
			ul_div = PMC_MCKR_MDIV_EQ_PCK;
			break;
	}
	PMC->PMC_MCKR =
			(PMC->PMC_MCKR & (~PMC_MCKR_MDIV_Msk)) | ul_div;
  401e22:	4a08      	ldr	r2, [pc, #32]	; (401e44 <pmc_mck_set_division+0x34>)
  401e24:	6b13      	ldr	r3, [r2, #48]	; 0x30
  401e26:	f423 7340 	bic.w	r3, r3, #768	; 0x300
  401e2a:	430b      	orrs	r3, r1
	PMC->PMC_MCKR =
  401e2c:	6313      	str	r3, [r2, #48]	; 0x30
	while (!(PMC->PMC_SR & PMC_SR_MCKRDY));
  401e2e:	6e93      	ldr	r3, [r2, #104]	; 0x68
  401e30:	f013 0f08 	tst.w	r3, #8
  401e34:	d0fb      	beq.n	401e2e <pmc_mck_set_division+0x1e>
}
  401e36:	4770      	bx	lr
			ul_div = PMC_MCKR_MDIV_PCK_DIV3;
  401e38:	f44f 7140 	mov.w	r1, #768	; 0x300
			break;
  401e3c:	e7f1      	b.n	401e22 <pmc_mck_set_division+0x12>
			ul_div = PMC_MCKR_MDIV_PCK_DIV4;
  401e3e:	f44f 7100 	mov.w	r1, #512	; 0x200
			break;
  401e42:	e7ee      	b.n	401e22 <pmc_mck_set_division+0x12>
  401e44:	400e0600 	.word	0x400e0600

00401e48 <pmc_switch_mck_to_pllack>:
 */
uint32_t pmc_switch_mck_to_pllack(uint32_t ul_pres)
{
	uint32_t ul_timeout;

	PMC->PMC_MCKR = (PMC->PMC_MCKR & (~PMC_MCKR_PRES_Msk)) | ul_pres;
  401e48:	4a17      	ldr	r2, [pc, #92]	; (401ea8 <pmc_switch_mck_to_pllack+0x60>)
  401e4a:	6b13      	ldr	r3, [r2, #48]	; 0x30
  401e4c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
  401e50:	4318      	orrs	r0, r3
  401e52:	6310      	str	r0, [r2, #48]	; 0x30
	for (ul_timeout = PMC_TIMEOUT; !(PMC->PMC_SR & PMC_SR_MCKRDY);
  401e54:	6e93      	ldr	r3, [r2, #104]	; 0x68
  401e56:	f013 0f08 	tst.w	r3, #8
  401e5a:	d10a      	bne.n	401e72 <pmc_switch_mck_to_pllack+0x2a>
  401e5c:	f44f 5380 	mov.w	r3, #4096	; 0x1000
  401e60:	4911      	ldr	r1, [pc, #68]	; (401ea8 <pmc_switch_mck_to_pllack+0x60>)
  401e62:	6e8a      	ldr	r2, [r1, #104]	; 0x68
  401e64:	f012 0f08 	tst.w	r2, #8
  401e68:	d103      	bne.n	401e72 <pmc_switch_mck_to_pllack+0x2a>
			--ul_timeout) {
		if (ul_timeout == 0) {
  401e6a:	3b01      	subs	r3, #1
  401e6c:	d1f9      	bne.n	401e62 <pmc_switch_mck_to_pllack+0x1a>
			return 1;
  401e6e:	2001      	movs	r0, #1
  401e70:	4770      	bx	lr
		}
	}

	PMC->PMC_MCKR = (PMC->PMC_MCKR & (~PMC_MCKR_CSS_Msk)) |
  401e72:	4a0d      	ldr	r2, [pc, #52]	; (401ea8 <pmc_switch_mck_to_pllack+0x60>)
  401e74:	6b13      	ldr	r3, [r2, #48]	; 0x30
  401e76:	f023 0303 	bic.w	r3, r3, #3
  401e7a:	f043 0302 	orr.w	r3, r3, #2
  401e7e:	6313      	str	r3, [r2, #48]	; 0x30
			PMC_MCKR_CSS_PLLA_CLK;

	for (ul_timeout = PMC_TIMEOUT; !(PMC->PMC_SR & PMC_SR_MCKRDY);
  401e80:	6e93      	ldr	r3, [r2, #104]	; 0x68
  401e82:	f013 0f08 	tst.w	r3, #8
  401e86:	d10a      	bne.n	401e9e <pmc_switch_mck_to_pllack+0x56>
  401e88:	f44f 5380 	mov.w	r3, #4096	; 0x1000
  401e8c:	4906      	ldr	r1, [pc, #24]	; (401ea8 <pmc_switch_mck_to_pllack+0x60>)
  401e8e:	6e8a      	ldr	r2, [r1, #104]	; 0x68
  401e90:	f012 0f08 	tst.w	r2, #8
  401e94:	d105      	bne.n	401ea2 <pmc_switch_mck_to_pllack+0x5a>
			--ul_timeout) {
		if (ul_timeout == 0) {
  401e96:	3b01      	subs	r3, #1
  401e98:	d1f9      	bne.n	401e8e <pmc_switch_mck_to_pllack+0x46>
			return 1;
  401e9a:	2001      	movs	r0, #1
		}
	}

	return 0;
}
  401e9c:	4770      	bx	lr
	return 0;
  401e9e:	2000      	movs	r0, #0
  401ea0:	4770      	bx	lr
  401ea2:	2000      	movs	r0, #0
  401ea4:	4770      	bx	lr
  401ea6:	bf00      	nop
  401ea8:	400e0600 	.word	0x400e0600

00401eac <pmc_switch_mainck_to_xtal>:
 */
void pmc_switch_mainck_to_xtal(uint32_t ul_bypass,
		uint32_t ul_xtal_startup_time)
{
	/* Enable Main Xtal oscillator */
	if (ul_bypass) {
  401eac:	b9a0      	cbnz	r0, 401ed8 <pmc_switch_mainck_to_xtal+0x2c>
		PMC->CKGR_MOR = (PMC->CKGR_MOR & ~CKGR_MOR_MOSCXTEN) |
				CKGR_MOR_KEY_PASSWD | CKGR_MOR_MOSCXTBY |
				CKGR_MOR_MOSCSEL;
	} else {
		PMC->CKGR_MOR = (PMC->CKGR_MOR & ~CKGR_MOR_MOSCXTBY) |
  401eae:	480e      	ldr	r0, [pc, #56]	; (401ee8 <pmc_switch_mainck_to_xtal+0x3c>)
  401eb0:	6a03      	ldr	r3, [r0, #32]
				CKGR_MOR_KEY_PASSWD | CKGR_MOR_MOSCXTEN |
				CKGR_MOR_MOSCXTST(ul_xtal_startup_time);
  401eb2:	0209      	lsls	r1, r1, #8
  401eb4:	b289      	uxth	r1, r1
				CKGR_MOR_KEY_PASSWD | CKGR_MOR_MOSCXTEN |
  401eb6:	4a0d      	ldr	r2, [pc, #52]	; (401eec <pmc_switch_mainck_to_xtal+0x40>)
  401eb8:	401a      	ands	r2, r3
  401eba:	4b0d      	ldr	r3, [pc, #52]	; (401ef0 <pmc_switch_mainck_to_xtal+0x44>)
  401ebc:	4313      	orrs	r3, r2
  401ebe:	4319      	orrs	r1, r3
		PMC->CKGR_MOR = (PMC->CKGR_MOR & ~CKGR_MOR_MOSCXTBY) |
  401ec0:	6201      	str	r1, [r0, #32]
		/* Wait the Xtal to stabilize */
		while (!(PMC->PMC_SR & PMC_SR_MOSCXTS));
  401ec2:	4602      	mov	r2, r0
  401ec4:	6e93      	ldr	r3, [r2, #104]	; 0x68
  401ec6:	f013 0f01 	tst.w	r3, #1
  401eca:	d0fb      	beq.n	401ec4 <pmc_switch_mainck_to_xtal+0x18>

		PMC->CKGR_MOR |= CKGR_MOR_KEY_PASSWD | CKGR_MOR_MOSCSEL;
  401ecc:	4a06      	ldr	r2, [pc, #24]	; (401ee8 <pmc_switch_mainck_to_xtal+0x3c>)
  401ece:	6a11      	ldr	r1, [r2, #32]
  401ed0:	4b08      	ldr	r3, [pc, #32]	; (401ef4 <pmc_switch_mainck_to_xtal+0x48>)
  401ed2:	430b      	orrs	r3, r1
  401ed4:	6213      	str	r3, [r2, #32]
  401ed6:	4770      	bx	lr
		PMC->CKGR_MOR = (PMC->CKGR_MOR & ~CKGR_MOR_MOSCXTEN) |
  401ed8:	4903      	ldr	r1, [pc, #12]	; (401ee8 <pmc_switch_mainck_to_xtal+0x3c>)
  401eda:	6a0b      	ldr	r3, [r1, #32]
				CKGR_MOR_KEY_PASSWD | CKGR_MOR_MOSCXTBY |
  401edc:	4a06      	ldr	r2, [pc, #24]	; (401ef8 <pmc_switch_mainck_to_xtal+0x4c>)
  401ede:	401a      	ands	r2, r3
  401ee0:	4b06      	ldr	r3, [pc, #24]	; (401efc <pmc_switch_mainck_to_xtal+0x50>)
  401ee2:	4313      	orrs	r3, r2
		PMC->CKGR_MOR = (PMC->CKGR_MOR & ~CKGR_MOR_MOSCXTEN) |
  401ee4:	620b      	str	r3, [r1, #32]
  401ee6:	4770      	bx	lr
  401ee8:	400e0600 	.word	0x400e0600
  401eec:	ffc8fffc 	.word	0xffc8fffc
  401ef0:	00370001 	.word	0x00370001
  401ef4:	01370000 	.word	0x01370000
  401ef8:	fec8fffc 	.word	0xfec8fffc
  401efc:	01370002 	.word	0x01370002

00401f00 <pmc_osc_is_ready_mainck>:
 * \retval 1 Xtal is ready.
 * \retval 0 Xtal is not ready.
 */
uint32_t pmc_osc_is_ready_mainck(void)
{
	return PMC->PMC_SR & PMC_SR_MOSCSELS;
  401f00:	4b02      	ldr	r3, [pc, #8]	; (401f0c <pmc_osc_is_ready_mainck+0xc>)
  401f02:	6e98      	ldr	r0, [r3, #104]	; 0x68
}
  401f04:	f400 3080 	and.w	r0, r0, #65536	; 0x10000
  401f08:	4770      	bx	lr
  401f0a:	bf00      	nop
  401f0c:	400e0600 	.word	0x400e0600

00401f10 <pmc_disable_pllack>:
void pmc_disable_pllack(void)
{
#if (SAM4C || SAM4CM || SAM4CP || SAMG)
	PMC->CKGR_PLLAR = CKGR_PLLAR_MULA(0);
#else
	PMC->CKGR_PLLAR = CKGR_PLLAR_ONE | CKGR_PLLAR_MULA(0);
  401f10:	f04f 5200 	mov.w	r2, #536870912	; 0x20000000
  401f14:	4b01      	ldr	r3, [pc, #4]	; (401f1c <pmc_disable_pllack+0xc>)
  401f16:	629a      	str	r2, [r3, #40]	; 0x28
  401f18:	4770      	bx	lr
  401f1a:	bf00      	nop
  401f1c:	400e0600 	.word	0x400e0600

00401f20 <pmc_is_locked_pllack>:
 * \retval 0 Not locked.
 * \retval 1 Locked.
 */
uint32_t pmc_is_locked_pllack(void)
{
	return (PMC->PMC_SR & PMC_SR_LOCKA);
  401f20:	4b02      	ldr	r3, [pc, #8]	; (401f2c <pmc_is_locked_pllack+0xc>)
  401f22:	6e98      	ldr	r0, [r3, #104]	; 0x68
}
  401f24:	f000 0002 	and.w	r0, r0, #2
  401f28:	4770      	bx	lr
  401f2a:	bf00      	nop
  401f2c:	400e0600 	.word	0x400e0600

00401f30 <pmc_enable_periph_clk>:
 * \retval 0 Success.
 * \retval 1 Invalid parameter.
 */
uint32_t pmc_enable_periph_clk(uint32_t ul_id)
{
	if (ul_id > MAX_PERIPH_ID) {
  401f30:	283f      	cmp	r0, #63	; 0x3f
  401f32:	d81e      	bhi.n	401f72 <pmc_enable_periph_clk+0x42>
		return 1;
	}

	if (ul_id < 32) {
  401f34:	281f      	cmp	r0, #31
  401f36:	d80c      	bhi.n	401f52 <pmc_enable_periph_clk+0x22>
		if ((PMC->PMC_PCSR0 & (1u << ul_id)) != (1u << ul_id)) {
  401f38:	4b11      	ldr	r3, [pc, #68]	; (401f80 <pmc_enable_periph_clk+0x50>)
  401f3a:	699a      	ldr	r2, [r3, #24]
  401f3c:	2301      	movs	r3, #1
  401f3e:	4083      	lsls	r3, r0
  401f40:	4393      	bics	r3, r2
  401f42:	d018      	beq.n	401f76 <pmc_enable_periph_clk+0x46>
			PMC->PMC_PCER0 = 1 << ul_id;
  401f44:	2301      	movs	r3, #1
  401f46:	fa03 f000 	lsl.w	r0, r3, r0
  401f4a:	4b0d      	ldr	r3, [pc, #52]	; (401f80 <pmc_enable_periph_clk+0x50>)
  401f4c:	6118      	str	r0, [r3, #16]
			PMC->PMC_PCER1 = 1 << ul_id;
		}
#endif
	}

	return 0;
  401f4e:	2000      	movs	r0, #0
  401f50:	4770      	bx	lr
		ul_id -= 32;
  401f52:	3820      	subs	r0, #32
		if ((PMC->PMC_PCSR1 & (1u << ul_id)) != (1u << ul_id)) {
  401f54:	4b0a      	ldr	r3, [pc, #40]	; (401f80 <pmc_enable_periph_clk+0x50>)
  401f56:	f8d3 2108 	ldr.w	r2, [r3, #264]	; 0x108
  401f5a:	2301      	movs	r3, #1
  401f5c:	4083      	lsls	r3, r0
  401f5e:	4393      	bics	r3, r2
  401f60:	d00b      	beq.n	401f7a <pmc_enable_periph_clk+0x4a>
			PMC->PMC_PCER1 = 1 << ul_id;
  401f62:	2301      	movs	r3, #1
  401f64:	fa03 f000 	lsl.w	r0, r3, r0
  401f68:	4b05      	ldr	r3, [pc, #20]	; (401f80 <pmc_enable_periph_clk+0x50>)
  401f6a:	f8c3 0100 	str.w	r0, [r3, #256]	; 0x100
	return 0;
  401f6e:	2000      	movs	r0, #0
  401f70:	4770      	bx	lr
		return 1;
  401f72:	2001      	movs	r0, #1
  401f74:	4770      	bx	lr
	return 0;
  401f76:	2000      	movs	r0, #0
  401f78:	4770      	bx	lr
  401f7a:	2000      	movs	r0, #0
}
  401f7c:	4770      	bx	lr
  401f7e:	bf00      	nop
  401f80:	400e0600 	.word	0x400e0600

00401f84 <uart_write>:
 * \retval 1 I/O Failure, UART is not ready.
 */
uint32_t uart_write(Uart *p_uart, const uint8_t uc_data)
{
	/* Check if the transmitter is ready */
	if (!(p_uart->UART_SR & UART_SR_TXRDY))
  401f84:	6943      	ldr	r3, [r0, #20]
  401f86:	f013 0f02 	tst.w	r3, #2
  401f8a:	d002      	beq.n	401f92 <uart_write+0xe>
		return 1;

	/* Send character */
	p_uart->UART_THR = uc_data;
  401f8c:	61c1      	str	r1, [r0, #28]
	return 0;
  401f8e:	2000      	movs	r0, #0
  401f90:	4770      	bx	lr
		return 1;
  401f92:	2001      	movs	r0, #1
}
  401f94:	4770      	bx	lr

00401f96 <uart_read>:
 * \retval 1 I/O Failure, UART is not ready.
 */
uint32_t uart_read(Uart *p_uart, uint8_t *puc_data)
{
	/* Check if the receiver is ready */
	if ((p_uart->UART_SR & UART_SR_RXRDY) == 0)
  401f96:	6943      	ldr	r3, [r0, #20]
  401f98:	f013 0f01 	tst.w	r3, #1
  401f9c:	d003      	beq.n	401fa6 <uart_read+0x10>
		return 1;

	/* Read character */
	*puc_data = (uint8_t) p_uart->UART_RHR;
  401f9e:	6983      	ldr	r3, [r0, #24]
  401fa0:	700b      	strb	r3, [r1, #0]
	return 0;
  401fa2:	2000      	movs	r0, #0
  401fa4:	4770      	bx	lr
		return 1;
  401fa6:	2001      	movs	r0, #1
}
  401fa8:	4770      	bx	lr

00401faa <usart_set_async_baudrate>:
 * \retval 1 Baud rate set point is out of range for the given input clock
 * frequency.
 */
uint32_t usart_set_async_baudrate(Usart *p_usart,
		uint32_t baudrate, uint32_t ul_mck)
{
  401faa:	b410      	push	{r4}
	uint32_t cd_fp;
	uint32_t cd;
	uint32_t fp;

	/* Calculate the receiver sampling divide of baudrate clock. */
	if (ul_mck >= HIGH_FRQ_SAMPLE_DIV * baudrate) {
  401fac:	010b      	lsls	r3, r1, #4
  401fae:	4293      	cmp	r3, r2
  401fb0:	d914      	bls.n	401fdc <usart_set_async_baudrate+0x32>
	} else {
		over = LOW_FRQ_SAMPLE_DIV;
	}

	/* Calculate clock divider according to the fraction calculated formula. */
	cd_fp = (8 * ul_mck + (over * baudrate) / 2) / (over * baudrate);
  401fb2:	00c9      	lsls	r1, r1, #3
  401fb4:	084b      	lsrs	r3, r1, #1
  401fb6:	eb03 02c2 	add.w	r2, r3, r2, lsl #3
  401fba:	fbb2 f2f1 	udiv	r2, r2, r1
	cd = cd_fp >> 3;
  401fbe:	08d3      	lsrs	r3, r2, #3
	fp = cd_fp & 0x07;
	if (cd < MIN_CD_VALUE || cd > MAX_CD_VALUE) {
  401fc0:	1e5c      	subs	r4, r3, #1
  401fc2:	f64f 71fe 	movw	r1, #65534	; 0xfffe
  401fc6:	428c      	cmp	r4, r1
  401fc8:	d901      	bls.n	401fce <usart_set_async_baudrate+0x24>
		return 1;
  401fca:	2001      	movs	r0, #1
  401fcc:	e017      	b.n	401ffe <usart_set_async_baudrate+0x54>
	}

	/* Configure the OVER bit in MR register. */
	if (over == 8) {
		p_usart->US_MR |= US_MR_OVER;
  401fce:	6841      	ldr	r1, [r0, #4]
  401fd0:	f441 2100 	orr.w	r1, r1, #524288	; 0x80000
  401fd4:	6041      	str	r1, [r0, #4]
  401fd6:	e00c      	b.n	401ff2 <usart_set_async_baudrate+0x48>
		return 1;
  401fd8:	2001      	movs	r0, #1
  401fda:	e010      	b.n	401ffe <usart_set_async_baudrate+0x54>
	cd_fp = (8 * ul_mck + (over * baudrate) / 2) / (over * baudrate);
  401fdc:	0859      	lsrs	r1, r3, #1
  401fde:	eb01 02c2 	add.w	r2, r1, r2, lsl #3
  401fe2:	fbb2 f2f3 	udiv	r2, r2, r3
	cd = cd_fp >> 3;
  401fe6:	08d3      	lsrs	r3, r2, #3
	if (cd < MIN_CD_VALUE || cd > MAX_CD_VALUE) {
  401fe8:	1e5c      	subs	r4, r3, #1
  401fea:	f64f 71fe 	movw	r1, #65534	; 0xfffe
  401fee:	428c      	cmp	r4, r1
  401ff0:	d8f2      	bhi.n	401fd8 <usart_set_async_baudrate+0x2e>
	}

	/* Configure the baudrate generate register. */
	p_usart->US_BRGR = (cd << US_BRGR_CD_Pos) | (fp << US_BRGR_FP_Pos);
  401ff2:	0412      	lsls	r2, r2, #16
  401ff4:	f402 22e0 	and.w	r2, r2, #458752	; 0x70000
  401ff8:	431a      	orrs	r2, r3
  401ffa:	6202      	str	r2, [r0, #32]

	return 0;
  401ffc:	2000      	movs	r0, #0
}
  401ffe:	f85d 4b04 	ldr.w	r4, [sp], #4
  402002:	4770      	bx	lr

00402004 <usart_reset>:
 *
 * \param p_usart Pointer to a USART instance.
 */
void usart_disable_writeprotect(Usart *p_usart)
{
	p_usart->US_WPMR = US_WPMR_WPKEY_PASSWD;
  402004:	4b08      	ldr	r3, [pc, #32]	; (402028 <usart_reset+0x24>)
  402006:	f8c0 30e4 	str.w	r3, [r0, #228]	; 0xe4
	p_usart->US_MR = 0;
  40200a:	2300      	movs	r3, #0
  40200c:	6043      	str	r3, [r0, #4]
	p_usart->US_RTOR = 0;
  40200e:	6243      	str	r3, [r0, #36]	; 0x24
	p_usart->US_TTGR = 0;
  402010:	6283      	str	r3, [r0, #40]	; 0x28
	p_usart->US_CR = US_CR_RSTTX | US_CR_TXDIS;
  402012:	2388      	movs	r3, #136	; 0x88
  402014:	6003      	str	r3, [r0, #0]
	p_usart->US_CR = US_CR_RSTRX | US_CR_RXDIS;
  402016:	2324      	movs	r3, #36	; 0x24
  402018:	6003      	str	r3, [r0, #0]
	p_usart->US_CR = US_CR_RSTSTA;
  40201a:	f44f 7380 	mov.w	r3, #256	; 0x100
  40201e:	6003      	str	r3, [r0, #0]
	p_usart->US_CR = US_CR_RTSDIS;
  402020:	f44f 2300 	mov.w	r3, #524288	; 0x80000
  402024:	6003      	str	r3, [r0, #0]
  402026:	4770      	bx	lr
  402028:	55534100 	.word	0x55534100

0040202c <usart_init_rs232>:
{
  40202c:	b570      	push	{r4, r5, r6, lr}
  40202e:	4605      	mov	r5, r0
  402030:	460c      	mov	r4, r1
  402032:	4616      	mov	r6, r2
	usart_reset(p_usart);
  402034:	4b0f      	ldr	r3, [pc, #60]	; (402074 <usart_init_rs232+0x48>)
  402036:	4798      	blx	r3
	ul_reg_val = 0;
  402038:	2200      	movs	r2, #0
  40203a:	4b0f      	ldr	r3, [pc, #60]	; (402078 <usart_init_rs232+0x4c>)
  40203c:	601a      	str	r2, [r3, #0]
	if (!p_usart_opt || usart_set_async_baudrate(p_usart,
  40203e:	b1a4      	cbz	r4, 40206a <usart_init_rs232+0x3e>
  402040:	4632      	mov	r2, r6
  402042:	6821      	ldr	r1, [r4, #0]
  402044:	4628      	mov	r0, r5
  402046:	4b0d      	ldr	r3, [pc, #52]	; (40207c <usart_init_rs232+0x50>)
  402048:	4798      	blx	r3
  40204a:	4602      	mov	r2, r0
  40204c:	b978      	cbnz	r0, 40206e <usart_init_rs232+0x42>
	ul_reg_val |= p_usart_opt->char_length | p_usart_opt->parity_type |
  40204e:	6863      	ldr	r3, [r4, #4]
  402050:	68a1      	ldr	r1, [r4, #8]
  402052:	430b      	orrs	r3, r1
  402054:	6921      	ldr	r1, [r4, #16]
  402056:	430b      	orrs	r3, r1
			p_usart_opt->channel_mode | p_usart_opt->stop_bits;
  402058:	68e1      	ldr	r1, [r4, #12]
  40205a:	430b      	orrs	r3, r1
	ul_reg_val |= p_usart_opt->char_length | p_usart_opt->parity_type |
  40205c:	4906      	ldr	r1, [pc, #24]	; (402078 <usart_init_rs232+0x4c>)
  40205e:	600b      	str	r3, [r1, #0]
	p_usart->US_MR |= ul_reg_val;
  402060:	6869      	ldr	r1, [r5, #4]
  402062:	430b      	orrs	r3, r1
  402064:	606b      	str	r3, [r5, #4]
}
  402066:	4610      	mov	r0, r2
  402068:	bd70      	pop	{r4, r5, r6, pc}
		return 1;
  40206a:	2201      	movs	r2, #1
  40206c:	e7fb      	b.n	402066 <usart_init_rs232+0x3a>
  40206e:	2201      	movs	r2, #1
  402070:	e7f9      	b.n	402066 <usart_init_rs232+0x3a>
  402072:	bf00      	nop
  402074:	00402005 	.word	0x00402005
  402078:	2040c384 	.word	0x2040c384
  40207c:	00401fab 	.word	0x00401fab

00402080 <usart_enable_tx>:
	p_usart->US_CR = US_CR_TXEN;
  402080:	2340      	movs	r3, #64	; 0x40
  402082:	6003      	str	r3, [r0, #0]
  402084:	4770      	bx	lr

00402086 <usart_enable_rx>:
	p_usart->US_CR = US_CR_RXEN;
  402086:	2310      	movs	r3, #16
  402088:	6003      	str	r3, [r0, #0]
  40208a:	4770      	bx	lr

0040208c <usart_get_status>:
	return p_usart->US_CSR;
  40208c:	6940      	ldr	r0, [r0, #20]
}
  40208e:	4770      	bx	lr

00402090 <usart_is_rx_ready>:
	return (p_usart->US_CSR & US_CSR_RXRDY) > 0;
  402090:	6940      	ldr	r0, [r0, #20]
}
  402092:	f000 0001 	and.w	r0, r0, #1
  402096:	4770      	bx	lr

00402098 <usart_write>:
	if (!(p_usart->US_CSR & US_CSR_TXRDY)) {
  402098:	6943      	ldr	r3, [r0, #20]
  40209a:	f013 0f02 	tst.w	r3, #2
  40209e:	d004      	beq.n	4020aa <usart_write+0x12>
	p_usart->US_THR = US_THR_TXCHR(c);
  4020a0:	f3c1 0108 	ubfx	r1, r1, #0, #9
  4020a4:	61c1      	str	r1, [r0, #28]
	return 0;
  4020a6:	2000      	movs	r0, #0
  4020a8:	4770      	bx	lr
		return 1;
  4020aa:	2001      	movs	r0, #1
}
  4020ac:	4770      	bx	lr

004020ae <usart_read>:
	if (!(p_usart->US_CSR & US_CSR_RXRDY)) {
  4020ae:	6943      	ldr	r3, [r0, #20]
  4020b0:	f013 0f01 	tst.w	r3, #1
  4020b4:	d005      	beq.n	4020c2 <usart_read+0x14>
	*c = p_usart->US_RHR & US_RHR_RXCHR_Msk;
  4020b6:	6983      	ldr	r3, [r0, #24]
  4020b8:	f3c3 0308 	ubfx	r3, r3, #0, #9
  4020bc:	600b      	str	r3, [r1, #0]
	return 0;
  4020be:	2000      	movs	r0, #0
  4020c0:	4770      	bx	lr
		return 1;
  4020c2:	2001      	movs	r0, #1
}
  4020c4:	4770      	bx	lr

004020c6 <Dummy_Handler>:

/**
 * \brief Default interrupt handler for unused IRQs.
 */
void Dummy_Handler(void)
{
  4020c6:	e7fe      	b.n	4020c6 <Dummy_Handler>

004020c8 <Reset_Handler>:
{
  4020c8:	b500      	push	{lr}
  4020ca:	b083      	sub	sp, #12
        if (pSrc != pDest) {
  4020cc:	4b25      	ldr	r3, [pc, #148]	; (402164 <Reset_Handler+0x9c>)
  4020ce:	4a26      	ldr	r2, [pc, #152]	; (402168 <Reset_Handler+0xa0>)
  4020d0:	429a      	cmp	r2, r3
  4020d2:	d010      	beq.n	4020f6 <Reset_Handler+0x2e>
                for (; pDest < &_erelocate;) {
  4020d4:	4b25      	ldr	r3, [pc, #148]	; (40216c <Reset_Handler+0xa4>)
  4020d6:	4a23      	ldr	r2, [pc, #140]	; (402164 <Reset_Handler+0x9c>)
  4020d8:	429a      	cmp	r2, r3
  4020da:	d20c      	bcs.n	4020f6 <Reset_Handler+0x2e>
  4020dc:	3b01      	subs	r3, #1
  4020de:	1a9b      	subs	r3, r3, r2
  4020e0:	f023 0303 	bic.w	r3, r3, #3
  4020e4:	3304      	adds	r3, #4
  4020e6:	4413      	add	r3, r2
  4020e8:	491f      	ldr	r1, [pc, #124]	; (402168 <Reset_Handler+0xa0>)
                        *pDest++ = *pSrc++;
  4020ea:	f851 0b04 	ldr.w	r0, [r1], #4
  4020ee:	f842 0b04 	str.w	r0, [r2], #4
                for (; pDest < &_erelocate;) {
  4020f2:	429a      	cmp	r2, r3
  4020f4:	d1f9      	bne.n	4020ea <Reset_Handler+0x22>
        for (pDest = &_szero; pDest < &_ezero;) {
  4020f6:	4b1e      	ldr	r3, [pc, #120]	; (402170 <Reset_Handler+0xa8>)
  4020f8:	4a1e      	ldr	r2, [pc, #120]	; (402174 <Reset_Handler+0xac>)
  4020fa:	429a      	cmp	r2, r3
  4020fc:	d20a      	bcs.n	402114 <Reset_Handler+0x4c>
  4020fe:	3b01      	subs	r3, #1
  402100:	1a9b      	subs	r3, r3, r2
  402102:	f023 0303 	bic.w	r3, r3, #3
  402106:	3304      	adds	r3, #4
  402108:	4413      	add	r3, r2
                *pDest++ = 0;
  40210a:	2100      	movs	r1, #0
  40210c:	f842 1b04 	str.w	r1, [r2], #4
        for (pDest = &_szero; pDest < &_ezero;) {
  402110:	4293      	cmp	r3, r2
  402112:	d1fb      	bne.n	40210c <Reset_Handler+0x44>
        SCB->VTOR = ((uint32_t) pSrc & SCB_VTOR_TBLOFF_Msk);
  402114:	4a18      	ldr	r2, [pc, #96]	; (402178 <Reset_Handler+0xb0>)
  402116:	4b19      	ldr	r3, [pc, #100]	; (40217c <Reset_Handler+0xb4>)
  402118:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
  40211c:	6093      	str	r3, [r2, #8]
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE uint32_t __get_PRIMASK(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, primask" : "=r" (result) );
  40211e:	f3ef 8310 	mrs	r3, PRIMASK
static volatile uint32_t cpu_irq_critical_section_counter;
static volatile bool     cpu_irq_prev_interrupt_state;

static inline irqflags_t cpu_irq_save(void)
{
	volatile irqflags_t flags = cpu_irq_is_enabled();
  402122:	fab3 f383 	clz	r3, r3
  402126:	095b      	lsrs	r3, r3, #5
  402128:	9301      	str	r3, [sp, #4]
  __ASM volatile ("cpsid i" : : : "memory");
  40212a:	b672      	cpsid	i
  __ASM volatile ("dmb");
  40212c:	f3bf 8f5f 	dmb	sy
	cpu_irq_disable();
  402130:	2200      	movs	r2, #0
  402132:	4b13      	ldr	r3, [pc, #76]	; (402180 <Reset_Handler+0xb8>)
  402134:	701a      	strb	r2, [r3, #0]
	return flags;
  402136:	9901      	ldr	r1, [sp, #4]
 */
__always_inline static void fpu_enable(void)
{
	irqflags_t flags;
	flags = cpu_irq_save();
	REG_CPACR |=  (0xFu << 20);
  402138:	4a12      	ldr	r2, [pc, #72]	; (402184 <Reset_Handler+0xbc>)
  40213a:	6813      	ldr	r3, [r2, #0]
  40213c:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
  402140:	6013      	str	r3, [r2, #0]
  __ASM volatile ("dsb");
  402142:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb");
  402146:	f3bf 8f6f 	isb	sy
	return (flags);
}

static inline void cpu_irq_restore(irqflags_t flags)
{
	if (cpu_irq_is_enabled_flags(flags))
  40214a:	b129      	cbz	r1, 402158 <Reset_Handler+0x90>
		cpu_irq_enable();
  40214c:	2201      	movs	r2, #1
  40214e:	4b0c      	ldr	r3, [pc, #48]	; (402180 <Reset_Handler+0xb8>)
  402150:	701a      	strb	r2, [r3, #0]
  __ASM volatile ("dmb");
  402152:	f3bf 8f5f 	dmb	sy
  __ASM volatile ("cpsie i" : : : "memory");
  402156:	b662      	cpsie	i
        __libc_init_array();
  402158:	4b0b      	ldr	r3, [pc, #44]	; (402188 <Reset_Handler+0xc0>)
  40215a:	4798      	blx	r3
        main();
  40215c:	4b0b      	ldr	r3, [pc, #44]	; (40218c <Reset_Handler+0xc4>)
  40215e:	4798      	blx	r3
  402160:	e7fe      	b.n	402160 <Reset_Handler+0x98>
  402162:	bf00      	nop
  402164:	20400000 	.word	0x20400000
  402168:	00405800 	.word	0x00405800
  40216c:	204009b8 	.word	0x204009b8
  402170:	2040c434 	.word	0x2040c434
  402174:	204009b8 	.word	0x204009b8
  402178:	e000ed00 	.word	0xe000ed00
  40217c:	00400000 	.word	0x00400000
  402180:	20400004 	.word	0x20400004
  402184:	e000ed88 	.word	0xe000ed88
  402188:	0040268d 	.word	0x0040268d
  40218c:	004025a9 	.word	0x004025a9

00402190 <SystemCoreClockUpdate>:
}

void SystemCoreClockUpdate( void )
{
  /* Determine clock frequency according to clock register values */
  switch (PMC->PMC_MCKR & (uint32_t) PMC_MCKR_CSS_Msk)
  402190:	4b3b      	ldr	r3, [pc, #236]	; (402280 <SystemCoreClockUpdate+0xf0>)
  402192:	6b1b      	ldr	r3, [r3, #48]	; 0x30
  402194:	f003 0303 	and.w	r3, r3, #3
  402198:	2b01      	cmp	r3, #1
  40219a:	d01d      	beq.n	4021d8 <SystemCoreClockUpdate+0x48>
  40219c:	b183      	cbz	r3, 4021c0 <SystemCoreClockUpdate+0x30>
  40219e:	2b02      	cmp	r3, #2
  4021a0:	d036      	beq.n	402210 <SystemCoreClockUpdate+0x80>

    default:
    break;
  }

  if ( (PMC->PMC_MCKR & PMC_MCKR_PRES_Msk) == PMC_MCKR_PRES_CLK_3 )
  4021a2:	4b37      	ldr	r3, [pc, #220]	; (402280 <SystemCoreClockUpdate+0xf0>)
  4021a4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
  4021a6:	f003 0370 	and.w	r3, r3, #112	; 0x70
  4021aa:	2b70      	cmp	r3, #112	; 0x70
  4021ac:	d05f      	beq.n	40226e <SystemCoreClockUpdate+0xde>
  {
    SystemCoreClock /= 3U;
  }
  else
  {
    SystemCoreClock >>= ((PMC->PMC_MCKR & PMC_MCKR_PRES_Msk) >> PMC_MCKR_PRES_Pos);
  4021ae:	4b34      	ldr	r3, [pc, #208]	; (402280 <SystemCoreClockUpdate+0xf0>)
  4021b0:	6b1a      	ldr	r2, [r3, #48]	; 0x30
  4021b2:	4934      	ldr	r1, [pc, #208]	; (402284 <SystemCoreClockUpdate+0xf4>)
  4021b4:	f3c2 1202 	ubfx	r2, r2, #4, #3
  4021b8:	680b      	ldr	r3, [r1, #0]
  4021ba:	40d3      	lsrs	r3, r2
  4021bc:	600b      	str	r3, [r1, #0]
  4021be:	4770      	bx	lr
      if ( SUPC->SUPC_SR & SUPC_SR_OSCSEL )
  4021c0:	4b31      	ldr	r3, [pc, #196]	; (402288 <SystemCoreClockUpdate+0xf8>)
  4021c2:	695b      	ldr	r3, [r3, #20]
  4021c4:	f013 0f80 	tst.w	r3, #128	; 0x80
        SystemCoreClock = CHIP_FREQ_XTAL_32K;
  4021c8:	bf14      	ite	ne
  4021ca:	f44f 4200 	movne.w	r2, #32768	; 0x8000
        SystemCoreClock = CHIP_FREQ_SLCK_RC;
  4021ce:	f44f 42fa 	moveq.w	r2, #32000	; 0x7d00
  4021d2:	4b2c      	ldr	r3, [pc, #176]	; (402284 <SystemCoreClockUpdate+0xf4>)
  4021d4:	601a      	str	r2, [r3, #0]
  4021d6:	e7e4      	b.n	4021a2 <SystemCoreClockUpdate+0x12>
      if ( PMC->CKGR_MOR & CKGR_MOR_MOSCSEL )
  4021d8:	4b29      	ldr	r3, [pc, #164]	; (402280 <SystemCoreClockUpdate+0xf0>)
  4021da:	6a1b      	ldr	r3, [r3, #32]
  4021dc:	f013 7f80 	tst.w	r3, #16777216	; 0x1000000
  4021e0:	d003      	beq.n	4021ea <SystemCoreClockUpdate+0x5a>
        SystemCoreClock = CHIP_FREQ_XTAL_12M;
  4021e2:	4a2a      	ldr	r2, [pc, #168]	; (40228c <SystemCoreClockUpdate+0xfc>)
  4021e4:	4b27      	ldr	r3, [pc, #156]	; (402284 <SystemCoreClockUpdate+0xf4>)
  4021e6:	601a      	str	r2, [r3, #0]
  4021e8:	e7db      	b.n	4021a2 <SystemCoreClockUpdate+0x12>
        SystemCoreClock = CHIP_FREQ_MAINCK_RC_4MHZ;
  4021ea:	4a29      	ldr	r2, [pc, #164]	; (402290 <SystemCoreClockUpdate+0x100>)
  4021ec:	4b25      	ldr	r3, [pc, #148]	; (402284 <SystemCoreClockUpdate+0xf4>)
  4021ee:	601a      	str	r2, [r3, #0]
        switch ( PMC->CKGR_MOR & CKGR_MOR_MOSCRCF_Msk )
  4021f0:	4b23      	ldr	r3, [pc, #140]	; (402280 <SystemCoreClockUpdate+0xf0>)
  4021f2:	6a1b      	ldr	r3, [r3, #32]
  4021f4:	f003 0370 	and.w	r3, r3, #112	; 0x70
  4021f8:	2b10      	cmp	r3, #16
  4021fa:	d005      	beq.n	402208 <SystemCoreClockUpdate+0x78>
  4021fc:	2b20      	cmp	r3, #32
  4021fe:	d1d0      	bne.n	4021a2 <SystemCoreClockUpdate+0x12>
            SystemCoreClock *= 3U;
  402200:	4a22      	ldr	r2, [pc, #136]	; (40228c <SystemCoreClockUpdate+0xfc>)
  402202:	4b20      	ldr	r3, [pc, #128]	; (402284 <SystemCoreClockUpdate+0xf4>)
  402204:	601a      	str	r2, [r3, #0]
          break;
  402206:	e7cc      	b.n	4021a2 <SystemCoreClockUpdate+0x12>
            SystemCoreClock *= 2U;
  402208:	4a22      	ldr	r2, [pc, #136]	; (402294 <SystemCoreClockUpdate+0x104>)
  40220a:	4b1e      	ldr	r3, [pc, #120]	; (402284 <SystemCoreClockUpdate+0xf4>)
  40220c:	601a      	str	r2, [r3, #0]
          break;
  40220e:	e7c8      	b.n	4021a2 <SystemCoreClockUpdate+0x12>
      if ( PMC->CKGR_MOR & CKGR_MOR_MOSCSEL )
  402210:	4b1b      	ldr	r3, [pc, #108]	; (402280 <SystemCoreClockUpdate+0xf0>)
  402212:	6a1b      	ldr	r3, [r3, #32]
  402214:	f013 7f80 	tst.w	r3, #16777216	; 0x1000000
  402218:	d016      	beq.n	402248 <SystemCoreClockUpdate+0xb8>
        SystemCoreClock = CHIP_FREQ_XTAL_12M ;
  40221a:	4a1c      	ldr	r2, [pc, #112]	; (40228c <SystemCoreClockUpdate+0xfc>)
  40221c:	4b19      	ldr	r3, [pc, #100]	; (402284 <SystemCoreClockUpdate+0xf4>)
  40221e:	601a      	str	r2, [r3, #0]
      if ( (uint32_t) (PMC->PMC_MCKR & (uint32_t) PMC_MCKR_CSS_Msk) == PMC_MCKR_CSS_PLLA_CLK )
  402220:	4b17      	ldr	r3, [pc, #92]	; (402280 <SystemCoreClockUpdate+0xf0>)
  402222:	6b1b      	ldr	r3, [r3, #48]	; 0x30
  402224:	f003 0303 	and.w	r3, r3, #3
  402228:	2b02      	cmp	r3, #2
  40222a:	d1ba      	bne.n	4021a2 <SystemCoreClockUpdate+0x12>
        SystemCoreClock *= ((((PMC->CKGR_PLLAR) & CKGR_PLLAR_MULA_Msk) >> CKGR_PLLAR_MULA_Pos) + 1U);
  40222c:	4a14      	ldr	r2, [pc, #80]	; (402280 <SystemCoreClockUpdate+0xf0>)
  40222e:	6a91      	ldr	r1, [r2, #40]	; 0x28
        SystemCoreClock /= ((((PMC->CKGR_PLLAR) & CKGR_PLLAR_DIVA_Msk) >> CKGR_PLLAR_DIVA_Pos));
  402230:	6a92      	ldr	r2, [r2, #40]	; 0x28
  402232:	4814      	ldr	r0, [pc, #80]	; (402284 <SystemCoreClockUpdate+0xf4>)
        SystemCoreClock *= ((((PMC->CKGR_PLLAR) & CKGR_PLLAR_MULA_Msk) >> CKGR_PLLAR_MULA_Pos) + 1U);
  402234:	f3c1 410a 	ubfx	r1, r1, #16, #11
  402238:	6803      	ldr	r3, [r0, #0]
  40223a:	fb01 3303 	mla	r3, r1, r3, r3
        SystemCoreClock /= ((((PMC->CKGR_PLLAR) & CKGR_PLLAR_DIVA_Msk) >> CKGR_PLLAR_DIVA_Pos));
  40223e:	b2d2      	uxtb	r2, r2
  402240:	fbb3 f3f2 	udiv	r3, r3, r2
  402244:	6003      	str	r3, [r0, #0]
  402246:	e7ac      	b.n	4021a2 <SystemCoreClockUpdate+0x12>
        SystemCoreClock = CHIP_FREQ_MAINCK_RC_4MHZ;
  402248:	4a11      	ldr	r2, [pc, #68]	; (402290 <SystemCoreClockUpdate+0x100>)
  40224a:	4b0e      	ldr	r3, [pc, #56]	; (402284 <SystemCoreClockUpdate+0xf4>)
  40224c:	601a      	str	r2, [r3, #0]
        switch ( PMC->CKGR_MOR & CKGR_MOR_MOSCRCF_Msk )
  40224e:	4b0c      	ldr	r3, [pc, #48]	; (402280 <SystemCoreClockUpdate+0xf0>)
  402250:	6a1b      	ldr	r3, [r3, #32]
  402252:	f003 0370 	and.w	r3, r3, #112	; 0x70
  402256:	2b10      	cmp	r3, #16
  402258:	d005      	beq.n	402266 <SystemCoreClockUpdate+0xd6>
  40225a:	2b20      	cmp	r3, #32
  40225c:	d1e0      	bne.n	402220 <SystemCoreClockUpdate+0x90>
            SystemCoreClock *= 3U;
  40225e:	4a0b      	ldr	r2, [pc, #44]	; (40228c <SystemCoreClockUpdate+0xfc>)
  402260:	4b08      	ldr	r3, [pc, #32]	; (402284 <SystemCoreClockUpdate+0xf4>)
  402262:	601a      	str	r2, [r3, #0]
          break;
  402264:	e7dc      	b.n	402220 <SystemCoreClockUpdate+0x90>
            SystemCoreClock *= 2U;
  402266:	4a0b      	ldr	r2, [pc, #44]	; (402294 <SystemCoreClockUpdate+0x104>)
  402268:	4b06      	ldr	r3, [pc, #24]	; (402284 <SystemCoreClockUpdate+0xf4>)
  40226a:	601a      	str	r2, [r3, #0]
          break;
  40226c:	e7d8      	b.n	402220 <SystemCoreClockUpdate+0x90>
    SystemCoreClock /= 3U;
  40226e:	4a05      	ldr	r2, [pc, #20]	; (402284 <SystemCoreClockUpdate+0xf4>)
  402270:	6813      	ldr	r3, [r2, #0]
  402272:	4909      	ldr	r1, [pc, #36]	; (402298 <SystemCoreClockUpdate+0x108>)
  402274:	fba1 1303 	umull	r1, r3, r1, r3
  402278:	085b      	lsrs	r3, r3, #1
  40227a:	6013      	str	r3, [r2, #0]
  40227c:	4770      	bx	lr
  40227e:	bf00      	nop
  402280:	400e0600 	.word	0x400e0600
  402284:	20400008 	.word	0x20400008
  402288:	400e1810 	.word	0x400e1810
  40228c:	00b71b00 	.word	0x00b71b00
  402290:	003d0900 	.word	0x003d0900
  402294:	007a1200 	.word	0x007a1200
  402298:	aaaaaaab 	.word	0xaaaaaaab

0040229c <system_init_flash>:
 * Initialize flash.
 */
void system_init_flash( uint32_t ul_clk )
{
  /* Set FWS for embedded Flash access according to operating frequency */
  if ( ul_clk < CHIP_FREQ_FWS_0 )
  40229c:	4b12      	ldr	r3, [pc, #72]	; (4022e8 <system_init_flash+0x4c>)
  40229e:	4298      	cmp	r0, r3
  4022a0:	d911      	bls.n	4022c6 <system_init_flash+0x2a>
  {
    EFC->EEFC_FMR = EEFC_FMR_FWS(0)|EEFC_FMR_CLOE;
  }
  else
  {
    if (ul_clk < CHIP_FREQ_FWS_1)
  4022a2:	4b12      	ldr	r3, [pc, #72]	; (4022ec <system_init_flash+0x50>)
  4022a4:	4298      	cmp	r0, r3
  4022a6:	d913      	bls.n	4022d0 <system_init_flash+0x34>
    {
      EFC->EEFC_FMR = EEFC_FMR_FWS(1)|EEFC_FMR_CLOE;
    }
    else
    {
      if (ul_clk < CHIP_FREQ_FWS_2)
  4022a8:	4b11      	ldr	r3, [pc, #68]	; (4022f0 <system_init_flash+0x54>)
  4022aa:	4298      	cmp	r0, r3
  4022ac:	d914      	bls.n	4022d8 <system_init_flash+0x3c>
      {
        EFC->EEFC_FMR = EEFC_FMR_FWS(2)|EEFC_FMR_CLOE;
      }
      else
      {
        if ( ul_clk < CHIP_FREQ_FWS_3 )
  4022ae:	4b11      	ldr	r3, [pc, #68]	; (4022f4 <system_init_flash+0x58>)
  4022b0:	4298      	cmp	r0, r3
  4022b2:	d915      	bls.n	4022e0 <system_init_flash+0x44>
        {
          EFC->EEFC_FMR = EEFC_FMR_FWS(3)|EEFC_FMR_CLOE;
        }
        else
        {
          if ( ul_clk < CHIP_FREQ_FWS_4 )
  4022b4:	4b10      	ldr	r3, [pc, #64]	; (4022f8 <system_init_flash+0x5c>)
  4022b6:	4298      	cmp	r0, r3
          {
            EFC->EEFC_FMR = EEFC_FMR_FWS(4)|EEFC_FMR_CLOE;
  4022b8:	bf94      	ite	ls
  4022ba:	f04f 2204 	movls.w	r2, #67109888	; 0x4000400
          }
          else
          {
            EFC->EEFC_FMR = EEFC_FMR_FWS(5)|EEFC_FMR_CLOE;
  4022be:	4a0f      	ldrhi	r2, [pc, #60]	; (4022fc <system_init_flash+0x60>)
  4022c0:	4b0f      	ldr	r3, [pc, #60]	; (402300 <system_init_flash+0x64>)
  4022c2:	601a      	str	r2, [r3, #0]
  4022c4:	4770      	bx	lr
    EFC->EEFC_FMR = EEFC_FMR_FWS(0)|EEFC_FMR_CLOE;
  4022c6:	f04f 6280 	mov.w	r2, #67108864	; 0x4000000
  4022ca:	4b0d      	ldr	r3, [pc, #52]	; (402300 <system_init_flash+0x64>)
  4022cc:	601a      	str	r2, [r3, #0]
  4022ce:	4770      	bx	lr
      EFC->EEFC_FMR = EEFC_FMR_FWS(1)|EEFC_FMR_CLOE;
  4022d0:	4a0c      	ldr	r2, [pc, #48]	; (402304 <system_init_flash+0x68>)
  4022d2:	4b0b      	ldr	r3, [pc, #44]	; (402300 <system_init_flash+0x64>)
  4022d4:	601a      	str	r2, [r3, #0]
  4022d6:	4770      	bx	lr
        EFC->EEFC_FMR = EEFC_FMR_FWS(2)|EEFC_FMR_CLOE;
  4022d8:	4a0b      	ldr	r2, [pc, #44]	; (402308 <system_init_flash+0x6c>)
  4022da:	4b09      	ldr	r3, [pc, #36]	; (402300 <system_init_flash+0x64>)
  4022dc:	601a      	str	r2, [r3, #0]
  4022de:	4770      	bx	lr
          EFC->EEFC_FMR = EEFC_FMR_FWS(3)|EEFC_FMR_CLOE;
  4022e0:	4a0a      	ldr	r2, [pc, #40]	; (40230c <system_init_flash+0x70>)
  4022e2:	4b07      	ldr	r3, [pc, #28]	; (402300 <system_init_flash+0x64>)
  4022e4:	601a      	str	r2, [r3, #0]
  4022e6:	4770      	bx	lr
  4022e8:	01312cff 	.word	0x01312cff
  4022ec:	026259ff 	.word	0x026259ff
  4022f0:	039386ff 	.word	0x039386ff
  4022f4:	04c4b3ff 	.word	0x04c4b3ff
  4022f8:	05f5e0ff 	.word	0x05f5e0ff
  4022fc:	04000500 	.word	0x04000500
  402300:	400e0c00 	.word	0x400e0c00
  402304:	04000100 	.word	0x04000100
  402308:	04000200 	.word	0x04000200
  40230c:	04000300 	.word	0x04000300

00402310 <_sbrk>:
{
	static unsigned char *heap = NULL;
	unsigned char *prev_heap;
	int ramend = (int)&__ram_end__;

	if (heap == NULL) {
  402310:	4b0a      	ldr	r3, [pc, #40]	; (40233c <_sbrk+0x2c>)
  402312:	681b      	ldr	r3, [r3, #0]
  402314:	b153      	cbz	r3, 40232c <_sbrk+0x1c>
		heap = (unsigned char *)&_end;
	}
	prev_heap = heap;
  402316:	4b09      	ldr	r3, [pc, #36]	; (40233c <_sbrk+0x2c>)
  402318:	681b      	ldr	r3, [r3, #0]

	if (((int)prev_heap + incr) > ramend) {
  40231a:	181a      	adds	r2, r3, r0
  40231c:	4908      	ldr	r1, [pc, #32]	; (402340 <_sbrk+0x30>)
  40231e:	4291      	cmp	r1, r2
  402320:	db08      	blt.n	402334 <_sbrk+0x24>
		return (caddr_t) -1;	
	}

	heap += incr;
  402322:	4610      	mov	r0, r2
  402324:	4a05      	ldr	r2, [pc, #20]	; (40233c <_sbrk+0x2c>)
  402326:	6010      	str	r0, [r2, #0]

	return (caddr_t) prev_heap;
  402328:	4618      	mov	r0, r3
  40232a:	4770      	bx	lr
		heap = (unsigned char *)&_end;
  40232c:	4a05      	ldr	r2, [pc, #20]	; (402344 <_sbrk+0x34>)
  40232e:	4b03      	ldr	r3, [pc, #12]	; (40233c <_sbrk+0x2c>)
  402330:	601a      	str	r2, [r3, #0]
  402332:	e7f0      	b.n	402316 <_sbrk+0x6>
		return (caddr_t) -1;	
  402334:	f04f 30ff 	mov.w	r0, #4294967295
}
  402338:	4770      	bx	lr
  40233a:	bf00      	nop
  40233c:	2040c388 	.word	0x2040c388
  402340:	2045fffc 	.word	0x2045fffc
  402344:	2040e638 	.word	0x2040e638

00402348 <_close>:
}

extern int _close(int file)
{
	return -1;
}
  402348:	f04f 30ff 	mov.w	r0, #4294967295
  40234c:	4770      	bx	lr

0040234e <_fstat>:

extern int _fstat(int file, struct stat *st)
{
	st->st_mode = S_IFCHR;
  40234e:	f44f 5300 	mov.w	r3, #8192	; 0x2000
  402352:	604b      	str	r3, [r1, #4]

	return 0;
}
  402354:	2000      	movs	r0, #0
  402356:	4770      	bx	lr

00402358 <_isatty>:

extern int _isatty(int file)
{
	return 1;
}
  402358:	2001      	movs	r0, #1
  40235a:	4770      	bx	lr

0040235c <_lseek>:

extern int _lseek(int file, int ptr, int dir)
{
	return 0;
}
  40235c:	2000      	movs	r0, #0
  40235e:	4770      	bx	lr

00402360 <usart_serial_getchar>:
 * \param p_usart   Base address of the USART instance.
 * \param data   Data to read
 *
 */
static inline void usart_serial_getchar(usart_if p_usart, uint8_t *data)
{
  402360:	b5f0      	push	{r4, r5, r6, r7, lr}
  402362:	b083      	sub	sp, #12
  402364:	4605      	mov	r5, r0
  402366:	460c      	mov	r4, r1
	uint32_t val = 0;
  402368:	2300      	movs	r3, #0
  40236a:	9301      	str	r3, [sp, #4]
	if (UART == (Uart*)p_usart) {
		while (uart_read((Uart*)p_usart, data));
	}
#else
# ifdef UART0
	if (UART0 == (Uart*)p_usart) {
  40236c:	4b2a      	ldr	r3, [pc, #168]	; (402418 <usart_serial_getchar+0xb8>)
  40236e:	4298      	cmp	r0, r3
  402370:	d013      	beq.n	40239a <usart_serial_getchar+0x3a>
		while (uart_read((Uart*)p_usart, data));
	}
# endif
# ifdef UART1
	if (UART1 == (Uart*)p_usart) {
  402372:	4b2a      	ldr	r3, [pc, #168]	; (40241c <usart_serial_getchar+0xbc>)
  402374:	4298      	cmp	r0, r3
  402376:	d018      	beq.n	4023aa <usart_serial_getchar+0x4a>
		while (uart_read((Uart*)p_usart, data));
	}
# endif
# ifdef UART2
	if (UART2 == (Uart*)p_usart) {
  402378:	4b29      	ldr	r3, [pc, #164]	; (402420 <usart_serial_getchar+0xc0>)
  40237a:	4298      	cmp	r0, r3
  40237c:	d01d      	beq.n	4023ba <usart_serial_getchar+0x5a>
		while (uart_read((Uart*)p_usart, data));
	}
# endif
# ifdef UART3
	if (UART3 == (Uart*)p_usart) {
  40237e:	4b29      	ldr	r3, [pc, #164]	; (402424 <usart_serial_getchar+0xc4>)
  402380:	429d      	cmp	r5, r3
  402382:	d022      	beq.n	4023ca <usart_serial_getchar+0x6a>
		while (usart_read(p_usart, &val));
		*data = (uint8_t)(val & 0xFF);
	}
#else
# ifdef USART0
	if (USART0 == p_usart) {
  402384:	4b28      	ldr	r3, [pc, #160]	; (402428 <usart_serial_getchar+0xc8>)
  402386:	429d      	cmp	r5, r3
  402388:	d027      	beq.n	4023da <usart_serial_getchar+0x7a>
		while (usart_read(p_usart, &val));
		*data = (uint8_t)(val & 0xFF);
	}
# endif
# ifdef USART1
	if (USART1 == p_usart) {
  40238a:	4b28      	ldr	r3, [pc, #160]	; (40242c <usart_serial_getchar+0xcc>)
  40238c:	429d      	cmp	r5, r3
  40238e:	d02e      	beq.n	4023ee <usart_serial_getchar+0x8e>
		while (usart_read(p_usart, &val));
		*data = (uint8_t)(val & 0xFF);
	}
# endif
# ifdef USART2
	if (USART2 == p_usart) {
  402390:	4b27      	ldr	r3, [pc, #156]	; (402430 <usart_serial_getchar+0xd0>)
  402392:	429d      	cmp	r5, r3
  402394:	d035      	beq.n	402402 <usart_serial_getchar+0xa2>
		*data = (uint8_t)(val & 0xFF);
	}
# endif
#endif /* ifdef USART */

}
  402396:	b003      	add	sp, #12
  402398:	bdf0      	pop	{r4, r5, r6, r7, pc}
		while (uart_read((Uart*)p_usart, data));
  40239a:	461f      	mov	r7, r3
  40239c:	4e25      	ldr	r6, [pc, #148]	; (402434 <usart_serial_getchar+0xd4>)
  40239e:	4621      	mov	r1, r4
  4023a0:	4638      	mov	r0, r7
  4023a2:	47b0      	blx	r6
  4023a4:	2800      	cmp	r0, #0
  4023a6:	d1fa      	bne.n	40239e <usart_serial_getchar+0x3e>
  4023a8:	e7e9      	b.n	40237e <usart_serial_getchar+0x1e>
		while (uart_read((Uart*)p_usart, data));
  4023aa:	461f      	mov	r7, r3
  4023ac:	4e21      	ldr	r6, [pc, #132]	; (402434 <usart_serial_getchar+0xd4>)
  4023ae:	4621      	mov	r1, r4
  4023b0:	4638      	mov	r0, r7
  4023b2:	47b0      	blx	r6
  4023b4:	2800      	cmp	r0, #0
  4023b6:	d1fa      	bne.n	4023ae <usart_serial_getchar+0x4e>
  4023b8:	e7e4      	b.n	402384 <usart_serial_getchar+0x24>
		while (uart_read((Uart*)p_usart, data));
  4023ba:	461f      	mov	r7, r3
  4023bc:	4e1d      	ldr	r6, [pc, #116]	; (402434 <usart_serial_getchar+0xd4>)
  4023be:	4621      	mov	r1, r4
  4023c0:	4638      	mov	r0, r7
  4023c2:	47b0      	blx	r6
  4023c4:	2800      	cmp	r0, #0
  4023c6:	d1fa      	bne.n	4023be <usart_serial_getchar+0x5e>
  4023c8:	e7df      	b.n	40238a <usart_serial_getchar+0x2a>
		while (uart_read((Uart*)p_usart, data));
  4023ca:	461f      	mov	r7, r3
  4023cc:	4e19      	ldr	r6, [pc, #100]	; (402434 <usart_serial_getchar+0xd4>)
  4023ce:	4621      	mov	r1, r4
  4023d0:	4638      	mov	r0, r7
  4023d2:	47b0      	blx	r6
  4023d4:	2800      	cmp	r0, #0
  4023d6:	d1fa      	bne.n	4023ce <usart_serial_getchar+0x6e>
  4023d8:	e7da      	b.n	402390 <usart_serial_getchar+0x30>
		while (usart_read(p_usart, &val));
  4023da:	461e      	mov	r6, r3
  4023dc:	4d16      	ldr	r5, [pc, #88]	; (402438 <usart_serial_getchar+0xd8>)
  4023de:	a901      	add	r1, sp, #4
  4023e0:	4630      	mov	r0, r6
  4023e2:	47a8      	blx	r5
  4023e4:	2800      	cmp	r0, #0
  4023e6:	d1fa      	bne.n	4023de <usart_serial_getchar+0x7e>
		*data = (uint8_t)(val & 0xFF);
  4023e8:	9b01      	ldr	r3, [sp, #4]
  4023ea:	7023      	strb	r3, [r4, #0]
  4023ec:	e7d3      	b.n	402396 <usart_serial_getchar+0x36>
		while (usart_read(p_usart, &val));
  4023ee:	461e      	mov	r6, r3
  4023f0:	4d11      	ldr	r5, [pc, #68]	; (402438 <usart_serial_getchar+0xd8>)
  4023f2:	a901      	add	r1, sp, #4
  4023f4:	4630      	mov	r0, r6
  4023f6:	47a8      	blx	r5
  4023f8:	2800      	cmp	r0, #0
  4023fa:	d1fa      	bne.n	4023f2 <usart_serial_getchar+0x92>
		*data = (uint8_t)(val & 0xFF);
  4023fc:	9b01      	ldr	r3, [sp, #4]
  4023fe:	7023      	strb	r3, [r4, #0]
  402400:	e7c9      	b.n	402396 <usart_serial_getchar+0x36>
		while (usart_read(p_usart, &val));
  402402:	461e      	mov	r6, r3
  402404:	4d0c      	ldr	r5, [pc, #48]	; (402438 <usart_serial_getchar+0xd8>)
  402406:	a901      	add	r1, sp, #4
  402408:	4630      	mov	r0, r6
  40240a:	47a8      	blx	r5
  40240c:	2800      	cmp	r0, #0
  40240e:	d1fa      	bne.n	402406 <usart_serial_getchar+0xa6>
		*data = (uint8_t)(val & 0xFF);
  402410:	9b01      	ldr	r3, [sp, #4]
  402412:	7023      	strb	r3, [r4, #0]
}
  402414:	e7bf      	b.n	402396 <usart_serial_getchar+0x36>
  402416:	bf00      	nop
  402418:	400e0800 	.word	0x400e0800
  40241c:	400e0a00 	.word	0x400e0a00
  402420:	400e1a00 	.word	0x400e1a00
  402424:	400e1c00 	.word	0x400e1c00
  402428:	40024000 	.word	0x40024000
  40242c:	40028000 	.word	0x40028000
  402430:	4002c000 	.word	0x4002c000
  402434:	00401f97 	.word	0x00401f97
  402438:	004020af 	.word	0x004020af

0040243c <usart_serial_putchar>:
{
  40243c:	b570      	push	{r4, r5, r6, lr}
  40243e:	460c      	mov	r4, r1
	if (UART0 == (Uart*)p_usart) {
  402440:	4b2a      	ldr	r3, [pc, #168]	; (4024ec <usart_serial_putchar+0xb0>)
  402442:	4298      	cmp	r0, r3
  402444:	d013      	beq.n	40246e <usart_serial_putchar+0x32>
	if (UART1 == (Uart*)p_usart) {
  402446:	4b2a      	ldr	r3, [pc, #168]	; (4024f0 <usart_serial_putchar+0xb4>)
  402448:	4298      	cmp	r0, r3
  40244a:	d019      	beq.n	402480 <usart_serial_putchar+0x44>
	if (UART2 == (Uart*)p_usart) {
  40244c:	4b29      	ldr	r3, [pc, #164]	; (4024f4 <usart_serial_putchar+0xb8>)
  40244e:	4298      	cmp	r0, r3
  402450:	d01f      	beq.n	402492 <usart_serial_putchar+0x56>
	if (UART3 == (Uart*)p_usart) {
  402452:	4b29      	ldr	r3, [pc, #164]	; (4024f8 <usart_serial_putchar+0xbc>)
  402454:	4298      	cmp	r0, r3
  402456:	d025      	beq.n	4024a4 <usart_serial_putchar+0x68>
	if (USART0 == p_usart) {
  402458:	4b28      	ldr	r3, [pc, #160]	; (4024fc <usart_serial_putchar+0xc0>)
  40245a:	4298      	cmp	r0, r3
  40245c:	d02b      	beq.n	4024b6 <usart_serial_putchar+0x7a>
	if (USART1 == p_usart) {
  40245e:	4b28      	ldr	r3, [pc, #160]	; (402500 <usart_serial_putchar+0xc4>)
  402460:	4298      	cmp	r0, r3
  402462:	d031      	beq.n	4024c8 <usart_serial_putchar+0x8c>
	if (USART2 == p_usart) {
  402464:	4b27      	ldr	r3, [pc, #156]	; (402504 <usart_serial_putchar+0xc8>)
  402466:	4298      	cmp	r0, r3
  402468:	d037      	beq.n	4024da <usart_serial_putchar+0x9e>
	return 0;
  40246a:	2000      	movs	r0, #0
}
  40246c:	bd70      	pop	{r4, r5, r6, pc}
		while (uart_write((Uart*)p_usart, c)!=0);
  40246e:	461e      	mov	r6, r3
  402470:	4d25      	ldr	r5, [pc, #148]	; (402508 <usart_serial_putchar+0xcc>)
  402472:	4621      	mov	r1, r4
  402474:	4630      	mov	r0, r6
  402476:	47a8      	blx	r5
  402478:	2800      	cmp	r0, #0
  40247a:	d1fa      	bne.n	402472 <usart_serial_putchar+0x36>
		return 1;
  40247c:	2001      	movs	r0, #1
  40247e:	bd70      	pop	{r4, r5, r6, pc}
		while (uart_write((Uart*)p_usart, c)!=0);
  402480:	461e      	mov	r6, r3
  402482:	4d21      	ldr	r5, [pc, #132]	; (402508 <usart_serial_putchar+0xcc>)
  402484:	4621      	mov	r1, r4
  402486:	4630      	mov	r0, r6
  402488:	47a8      	blx	r5
  40248a:	2800      	cmp	r0, #0
  40248c:	d1fa      	bne.n	402484 <usart_serial_putchar+0x48>
		return 1;
  40248e:	2001      	movs	r0, #1
  402490:	bd70      	pop	{r4, r5, r6, pc}
		while (uart_write((Uart*)p_usart, c)!=0);
  402492:	461e      	mov	r6, r3
  402494:	4d1c      	ldr	r5, [pc, #112]	; (402508 <usart_serial_putchar+0xcc>)
  402496:	4621      	mov	r1, r4
  402498:	4630      	mov	r0, r6
  40249a:	47a8      	blx	r5
  40249c:	2800      	cmp	r0, #0
  40249e:	d1fa      	bne.n	402496 <usart_serial_putchar+0x5a>
		return 1;
  4024a0:	2001      	movs	r0, #1
  4024a2:	bd70      	pop	{r4, r5, r6, pc}
		while (uart_write((Uart*)p_usart, c)!=0);
  4024a4:	461e      	mov	r6, r3
  4024a6:	4d18      	ldr	r5, [pc, #96]	; (402508 <usart_serial_putchar+0xcc>)
  4024a8:	4621      	mov	r1, r4
  4024aa:	4630      	mov	r0, r6
  4024ac:	47a8      	blx	r5
  4024ae:	2800      	cmp	r0, #0
  4024b0:	d1fa      	bne.n	4024a8 <usart_serial_putchar+0x6c>
		return 1;
  4024b2:	2001      	movs	r0, #1
  4024b4:	bd70      	pop	{r4, r5, r6, pc}
		while (usart_write(p_usart, c)!=0);
  4024b6:	461e      	mov	r6, r3
  4024b8:	4d14      	ldr	r5, [pc, #80]	; (40250c <usart_serial_putchar+0xd0>)
  4024ba:	4621      	mov	r1, r4
  4024bc:	4630      	mov	r0, r6
  4024be:	47a8      	blx	r5
  4024c0:	2800      	cmp	r0, #0
  4024c2:	d1fa      	bne.n	4024ba <usart_serial_putchar+0x7e>
		return 1;
  4024c4:	2001      	movs	r0, #1
  4024c6:	bd70      	pop	{r4, r5, r6, pc}
		while (usart_write(p_usart, c)!=0);
  4024c8:	461e      	mov	r6, r3
  4024ca:	4d10      	ldr	r5, [pc, #64]	; (40250c <usart_serial_putchar+0xd0>)
  4024cc:	4621      	mov	r1, r4
  4024ce:	4630      	mov	r0, r6
  4024d0:	47a8      	blx	r5
  4024d2:	2800      	cmp	r0, #0
  4024d4:	d1fa      	bne.n	4024cc <usart_serial_putchar+0x90>
		return 1;
  4024d6:	2001      	movs	r0, #1
  4024d8:	bd70      	pop	{r4, r5, r6, pc}
		while (usart_write(p_usart, c)!=0);
  4024da:	461e      	mov	r6, r3
  4024dc:	4d0b      	ldr	r5, [pc, #44]	; (40250c <usart_serial_putchar+0xd0>)
  4024de:	4621      	mov	r1, r4
  4024e0:	4630      	mov	r0, r6
  4024e2:	47a8      	blx	r5
  4024e4:	2800      	cmp	r0, #0
  4024e6:	d1fa      	bne.n	4024de <usart_serial_putchar+0xa2>
		return 1;
  4024e8:	2001      	movs	r0, #1
  4024ea:	bd70      	pop	{r4, r5, r6, pc}
  4024ec:	400e0800 	.word	0x400e0800
  4024f0:	400e0a00 	.word	0x400e0a00
  4024f4:	400e1a00 	.word	0x400e1a00
  4024f8:	400e1c00 	.word	0x400e1c00
  4024fc:	40024000 	.word	0x40024000
  402500:	40028000 	.word	0x40028000
  402504:	4002c000 	.word	0x4002c000
  402508:	00401f85 	.word	0x00401f85
  40250c:	00402099 	.word	0x00402099

00402510 <task_string>:

/************************************************************************/
/* TASKS                                                                */
/************************************************************************/

void task_string(void *pvParameters){
  402510:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  402514:	b08e      	sub	sp, #56	; 0x38
    
  char b[52];
  uint i = 0;
  402516:	f04f 0800 	mov.w	r8, #0
		return usart_is_rx_ready(p_usart);
	}
# endif
# ifdef USART1
	if (USART1 == p_usart) {
		return usart_is_rx_ready(p_usart);
  40251a:	4c12      	ldr	r4, [pc, #72]	; (402564 <task_string+0x54>)
  40251c:	4f12      	ldr	r7, [pc, #72]	; (402568 <task_string+0x58>)
		while (usart_read(p_usart, &val));
  40251e:	4e13      	ldr	r6, [pc, #76]	; (40256c <task_string+0x5c>)
  402520:	e007      	b.n	402532 <task_string+0x22>
  while(1){
    if(usart_serial_is_rx_ready(CONF_UART)){
      usart_serial_getchar(CONF_UART, &b[i]);
      if(b[i]=='\n'){
        b[i] = NULL;
  402522:	f04f 0800 	mov.w	r8, #0
  402526:	f802 8c34 	strb.w	r8, [r2, #-52]
        i=0;
        printf("recebido: %s\n", b);
  40252a:	a901      	add	r1, sp, #4
  40252c:	4810      	ldr	r0, [pc, #64]	; (402570 <task_string+0x60>)
  40252e:	4b11      	ldr	r3, [pc, #68]	; (402574 <task_string+0x64>)
  402530:	4798      	blx	r3
		return usart_is_rx_ready(p_usart);
  402532:	4620      	mov	r0, r4
  402534:	47b8      	blx	r7
    if(usart_serial_is_rx_ready(CONF_UART)){
  402536:	2800      	cmp	r0, #0
  402538:	d0fb      	beq.n	402532 <task_string+0x22>
	uint32_t val = 0;
  40253a:	ad0e      	add	r5, sp, #56	; 0x38
  40253c:	2300      	movs	r3, #0
  40253e:	f845 3d38 	str.w	r3, [r5, #-56]!
		while (usart_read(p_usart, &val));
  402542:	4629      	mov	r1, r5
  402544:	4620      	mov	r0, r4
  402546:	47b0      	blx	r6
  402548:	2800      	cmp	r0, #0
  40254a:	d1fa      	bne.n	402542 <task_string+0x32>
		*data = (uint8_t)(val & 0xFF);
  40254c:	f89d 3000 	ldrb.w	r3, [sp]
  402550:	aa0e      	add	r2, sp, #56	; 0x38
  402552:	4442      	add	r2, r8
  402554:	f802 3c34 	strb.w	r3, [r2, #-52]
      if(b[i]=='\n'){
  402558:	2b0a      	cmp	r3, #10
  40255a:	d0e2      	beq.n	402522 <task_string+0x12>
      }else{
        i++;
  40255c:	f108 0801 	add.w	r8, r8, #1
  402560:	e7e7      	b.n	402532 <task_string+0x22>
  402562:	bf00      	nop
  402564:	40028000 	.word	0x40028000
  402568:	00402091 	.word	0x00402091
  40256c:	004020af 	.word	0x004020af
  402570:	00405644 	.word	0x00405644
  402574:	004026dd 	.word	0x004026dd

00402578 <vApplicationStackOverflowHook>:
{
  402578:	b508      	push	{r3, lr}
	printf("stack overflow %x %s\r\n", pxTask, (portCHAR *)pcTaskName);
  40257a:	460a      	mov	r2, r1
  40257c:	4601      	mov	r1, r0
  40257e:	4802      	ldr	r0, [pc, #8]	; (402588 <vApplicationStackOverflowHook+0x10>)
  402580:	4b02      	ldr	r3, [pc, #8]	; (40258c <vApplicationStackOverflowHook+0x14>)
  402582:	4798      	blx	r3
  402584:	e7fe      	b.n	402584 <vApplicationStackOverflowHook+0xc>
  402586:	bf00      	nop
  402588:	00405654 	.word	0x00405654
  40258c:	004026dd 	.word	0x004026dd

00402590 <vApplicationTickHook>:
{
  402590:	4770      	bx	lr

00402592 <vApplicationMallocFailedHook>:
{
  402592:	4770      	bx	lr

00402594 <USART1_Handler>:
void USART1_Handler(void){
  402594:	b508      	push	{r3, lr}
  uint32_t ret = usart_get_status(CONF_UART);  // ACK IRQ
  402596:	4802      	ldr	r0, [pc, #8]	; (4025a0 <USART1_Handler+0xc>)
  402598:	4b02      	ldr	r3, [pc, #8]	; (4025a4 <USART1_Handler+0x10>)
  40259a:	4798      	blx	r3
  40259c:	bd08      	pop	{r3, pc}
  40259e:	bf00      	nop
  4025a0:	40028000 	.word	0x40028000
  4025a4:	0040208d 	.word	0x0040208d

004025a8 <main>:

/************************************************************************/
/* MAIN                                                                 */
/************************************************************************/
int main(void)
{
  4025a8:	b500      	push	{lr}
  4025aa:	b08b      	sub	sp, #44	; 0x2c
	/* Initialize the board. */
	sysclk_init();
  4025ac:	4b22      	ldr	r3, [pc, #136]	; (402638 <main+0x90>)
  4025ae:	4798      	blx	r3
	board_init();
  4025b0:	4b22      	ldr	r3, [pc, #136]	; (40263c <main+0x94>)
  4025b2:	4798      	blx	r3
  4025b4:	200e      	movs	r0, #14
  4025b6:	4e22      	ldr	r6, [pc, #136]	; (402640 <main+0x98>)
  4025b8:	47b0      	blx	r6
 * \param opt         Options needed to set up RS232 communication (see \ref usart_options_t).
 *
 */
static inline void stdio_serial_init(volatile void *usart, const usart_serial_options_t *opt)
{
	stdio_base = (void *)usart;
  4025ba:	4d22      	ldr	r5, [pc, #136]	; (402644 <main+0x9c>)
  4025bc:	4b22      	ldr	r3, [pc, #136]	; (402648 <main+0xa0>)
  4025be:	601d      	str	r5, [r3, #0]
	ptr_put = (int (*)(void volatile*,char))&usart_serial_putchar;
  4025c0:	4a22      	ldr	r2, [pc, #136]	; (40264c <main+0xa4>)
  4025c2:	4b23      	ldr	r3, [pc, #140]	; (402650 <main+0xa8>)
  4025c4:	601a      	str	r2, [r3, #0]
	ptr_get = (void (*)(void volatile*,char*))&usart_serial_getchar;
  4025c6:	4a23      	ldr	r2, [pc, #140]	; (402654 <main+0xac>)
  4025c8:	4b23      	ldr	r3, [pc, #140]	; (402658 <main+0xb0>)
  4025ca:	601a      	str	r2, [r3, #0]
	usart_settings.baudrate = opt->baudrate;
  4025cc:	f44f 33e1 	mov.w	r3, #115200	; 0x1c200
  4025d0:	9304      	str	r3, [sp, #16]
	usart_settings.char_length = opt->charlength;
  4025d2:	23c0      	movs	r3, #192	; 0xc0
  4025d4:	9305      	str	r3, [sp, #20]
	usart_settings.parity_type = opt->paritytype;
  4025d6:	f44f 6300 	mov.w	r3, #2048	; 0x800
  4025da:	9306      	str	r3, [sp, #24]
	usart_settings.stop_bits= opt->stopbits;
  4025dc:	2400      	movs	r4, #0
  4025de:	9407      	str	r4, [sp, #28]
	usart_settings.channel_mode= US_MR_CHMODE_NORMAL;
  4025e0:	9408      	str	r4, [sp, #32]
  4025e2:	200e      	movs	r0, #14
  4025e4:	47b0      	blx	r6
		usart_init_rs232(p_usart, &usart_settings,
  4025e6:	4a1d      	ldr	r2, [pc, #116]	; (40265c <main+0xb4>)
  4025e8:	a904      	add	r1, sp, #16
  4025ea:	4628      	mov	r0, r5
  4025ec:	4b1c      	ldr	r3, [pc, #112]	; (402660 <main+0xb8>)
  4025ee:	4798      	blx	r3
		usart_enable_tx(p_usart);
  4025f0:	4628      	mov	r0, r5
  4025f2:	4b1c      	ldr	r3, [pc, #112]	; (402664 <main+0xbc>)
  4025f4:	4798      	blx	r3
		usart_enable_rx(p_usart);
  4025f6:	4628      	mov	r0, r5
  4025f8:	4b1b      	ldr	r3, [pc, #108]	; (402668 <main+0xc0>)
  4025fa:	4798      	blx	r3
	fdevopen((int (*)(char, FILE*))(_write),(int (*)(FILE*))(_read));
#  endif
#  if UC3 || SAM
	// For AVR32 and SAM GCC
	// Specify that stdout and stdin should not be buffered.
	setbuf(stdout, NULL);
  4025fc:	4e1b      	ldr	r6, [pc, #108]	; (40266c <main+0xc4>)
  4025fe:	6833      	ldr	r3, [r6, #0]
  402600:	4621      	mov	r1, r4
  402602:	6898      	ldr	r0, [r3, #8]
  402604:	4d1a      	ldr	r5, [pc, #104]	; (402670 <main+0xc8>)
  402606:	47a8      	blx	r5
	setbuf(stdin, NULL);
  402608:	6833      	ldr	r3, [r6, #0]
  40260a:	4621      	mov	r1, r4
  40260c:	6858      	ldr	r0, [r3, #4]
  40260e:	47a8      	blx	r5

	/* Initialize the UART console. */
	configure_console();
   
	if (xTaskCreate(task_string, "string", TASK_STRING_STACK_SIZE, NULL, TASK_STRING_STACK_PRIORITY, NULL) != pdPASS) {
  402610:	9403      	str	r4, [sp, #12]
  402612:	9402      	str	r4, [sp, #8]
  402614:	9401      	str	r4, [sp, #4]
  402616:	9400      	str	r4, [sp, #0]
  402618:	4623      	mov	r3, r4
  40261a:	f44f 6280 	mov.w	r2, #1024	; 0x400
  40261e:	4915      	ldr	r1, [pc, #84]	; (402674 <main+0xcc>)
  402620:	4815      	ldr	r0, [pc, #84]	; (402678 <main+0xd0>)
  402622:	4c16      	ldr	r4, [pc, #88]	; (40267c <main+0xd4>)
  402624:	47a0      	blx	r4
  402626:	2801      	cmp	r0, #1
  402628:	d002      	beq.n	402630 <main+0x88>
		printf("Failed to create Wifi task\r\n");
  40262a:	4815      	ldr	r0, [pc, #84]	; (402680 <main+0xd8>)
  40262c:	4b15      	ldr	r3, [pc, #84]	; (402684 <main+0xdc>)
  40262e:	4798      	blx	r3
	}

	vTaskStartScheduler();
  402630:	4b15      	ldr	r3, [pc, #84]	; (402688 <main+0xe0>)
  402632:	4798      	blx	r3
  402634:	e7fe      	b.n	402634 <main+0x8c>
  402636:	bf00      	nop
  402638:	0040188d 	.word	0x0040188d
  40263c:	00401989 	.word	0x00401989
  402640:	00401f31 	.word	0x00401f31
  402644:	40028000 	.word	0x40028000
  402648:	2040c408 	.word	0x2040c408
  40264c:	0040243d 	.word	0x0040243d
  402650:	2040c404 	.word	0x2040c404
  402654:	00402361 	.word	0x00402361
  402658:	2040c400 	.word	0x2040c400
  40265c:	08f0d180 	.word	0x08f0d180
  402660:	0040202d 	.word	0x0040202d
  402664:	00402081 	.word	0x00402081
  402668:	00402087 	.word	0x00402087
  40266c:	2040000c 	.word	0x2040000c
  402670:	004028d5 	.word	0x004028d5
  402674:	0040561c 	.word	0x0040561c
  402678:	00402511 	.word	0x00402511
  40267c:	00400b7d 	.word	0x00400b7d
  402680:	00405624 	.word	0x00405624
  402684:	004026dd 	.word	0x004026dd
  402688:	00400d79 	.word	0x00400d79

0040268c <__libc_init_array>:
  40268c:	b570      	push	{r4, r5, r6, lr}
  40268e:	4e0f      	ldr	r6, [pc, #60]	; (4026cc <__libc_init_array+0x40>)
  402690:	4d0f      	ldr	r5, [pc, #60]	; (4026d0 <__libc_init_array+0x44>)
  402692:	1b76      	subs	r6, r6, r5
  402694:	10b6      	asrs	r6, r6, #2
  402696:	bf18      	it	ne
  402698:	2400      	movne	r4, #0
  40269a:	d005      	beq.n	4026a8 <__libc_init_array+0x1c>
  40269c:	3401      	adds	r4, #1
  40269e:	f855 3b04 	ldr.w	r3, [r5], #4
  4026a2:	4798      	blx	r3
  4026a4:	42a6      	cmp	r6, r4
  4026a6:	d1f9      	bne.n	40269c <__libc_init_array+0x10>
  4026a8:	4e0a      	ldr	r6, [pc, #40]	; (4026d4 <__libc_init_array+0x48>)
  4026aa:	4d0b      	ldr	r5, [pc, #44]	; (4026d8 <__libc_init_array+0x4c>)
  4026ac:	1b76      	subs	r6, r6, r5
  4026ae:	f003 f891 	bl	4057d4 <_init>
  4026b2:	10b6      	asrs	r6, r6, #2
  4026b4:	bf18      	it	ne
  4026b6:	2400      	movne	r4, #0
  4026b8:	d006      	beq.n	4026c8 <__libc_init_array+0x3c>
  4026ba:	3401      	adds	r4, #1
  4026bc:	f855 3b04 	ldr.w	r3, [r5], #4
  4026c0:	4798      	blx	r3
  4026c2:	42a6      	cmp	r6, r4
  4026c4:	d1f9      	bne.n	4026ba <__libc_init_array+0x2e>
  4026c6:	bd70      	pop	{r4, r5, r6, pc}
  4026c8:	bd70      	pop	{r4, r5, r6, pc}
  4026ca:	bf00      	nop
  4026cc:	004057e0 	.word	0x004057e0
  4026d0:	004057e0 	.word	0x004057e0
  4026d4:	004057e8 	.word	0x004057e8
  4026d8:	004057e0 	.word	0x004057e0

004026dc <iprintf>:
  4026dc:	b40f      	push	{r0, r1, r2, r3}
  4026de:	b500      	push	{lr}
  4026e0:	4907      	ldr	r1, [pc, #28]	; (402700 <iprintf+0x24>)
  4026e2:	b083      	sub	sp, #12
  4026e4:	ab04      	add	r3, sp, #16
  4026e6:	6808      	ldr	r0, [r1, #0]
  4026e8:	f853 2b04 	ldr.w	r2, [r3], #4
  4026ec:	6881      	ldr	r1, [r0, #8]
  4026ee:	9301      	str	r3, [sp, #4]
  4026f0:	f000 fa74 	bl	402bdc <_vfiprintf_r>
  4026f4:	b003      	add	sp, #12
  4026f6:	f85d eb04 	ldr.w	lr, [sp], #4
  4026fa:	b004      	add	sp, #16
  4026fc:	4770      	bx	lr
  4026fe:	bf00      	nop
  402700:	2040000c 	.word	0x2040000c

00402704 <memcpy>:
  402704:	4684      	mov	ip, r0
  402706:	ea41 0300 	orr.w	r3, r1, r0
  40270a:	f013 0303 	ands.w	r3, r3, #3
  40270e:	d16d      	bne.n	4027ec <memcpy+0xe8>
  402710:	3a40      	subs	r2, #64	; 0x40
  402712:	d341      	bcc.n	402798 <memcpy+0x94>
  402714:	f851 3b04 	ldr.w	r3, [r1], #4
  402718:	f840 3b04 	str.w	r3, [r0], #4
  40271c:	f851 3b04 	ldr.w	r3, [r1], #4
  402720:	f840 3b04 	str.w	r3, [r0], #4
  402724:	f851 3b04 	ldr.w	r3, [r1], #4
  402728:	f840 3b04 	str.w	r3, [r0], #4
  40272c:	f851 3b04 	ldr.w	r3, [r1], #4
  402730:	f840 3b04 	str.w	r3, [r0], #4
  402734:	f851 3b04 	ldr.w	r3, [r1], #4
  402738:	f840 3b04 	str.w	r3, [r0], #4
  40273c:	f851 3b04 	ldr.w	r3, [r1], #4
  402740:	f840 3b04 	str.w	r3, [r0], #4
  402744:	f851 3b04 	ldr.w	r3, [r1], #4
  402748:	f840 3b04 	str.w	r3, [r0], #4
  40274c:	f851 3b04 	ldr.w	r3, [r1], #4
  402750:	f840 3b04 	str.w	r3, [r0], #4
  402754:	f851 3b04 	ldr.w	r3, [r1], #4
  402758:	f840 3b04 	str.w	r3, [r0], #4
  40275c:	f851 3b04 	ldr.w	r3, [r1], #4
  402760:	f840 3b04 	str.w	r3, [r0], #4
  402764:	f851 3b04 	ldr.w	r3, [r1], #4
  402768:	f840 3b04 	str.w	r3, [r0], #4
  40276c:	f851 3b04 	ldr.w	r3, [r1], #4
  402770:	f840 3b04 	str.w	r3, [r0], #4
  402774:	f851 3b04 	ldr.w	r3, [r1], #4
  402778:	f840 3b04 	str.w	r3, [r0], #4
  40277c:	f851 3b04 	ldr.w	r3, [r1], #4
  402780:	f840 3b04 	str.w	r3, [r0], #4
  402784:	f851 3b04 	ldr.w	r3, [r1], #4
  402788:	f840 3b04 	str.w	r3, [r0], #4
  40278c:	f851 3b04 	ldr.w	r3, [r1], #4
  402790:	f840 3b04 	str.w	r3, [r0], #4
  402794:	3a40      	subs	r2, #64	; 0x40
  402796:	d2bd      	bcs.n	402714 <memcpy+0x10>
  402798:	3230      	adds	r2, #48	; 0x30
  40279a:	d311      	bcc.n	4027c0 <memcpy+0xbc>
  40279c:	f851 3b04 	ldr.w	r3, [r1], #4
  4027a0:	f840 3b04 	str.w	r3, [r0], #4
  4027a4:	f851 3b04 	ldr.w	r3, [r1], #4
  4027a8:	f840 3b04 	str.w	r3, [r0], #4
  4027ac:	f851 3b04 	ldr.w	r3, [r1], #4
  4027b0:	f840 3b04 	str.w	r3, [r0], #4
  4027b4:	f851 3b04 	ldr.w	r3, [r1], #4
  4027b8:	f840 3b04 	str.w	r3, [r0], #4
  4027bc:	3a10      	subs	r2, #16
  4027be:	d2ed      	bcs.n	40279c <memcpy+0x98>
  4027c0:	320c      	adds	r2, #12
  4027c2:	d305      	bcc.n	4027d0 <memcpy+0xcc>
  4027c4:	f851 3b04 	ldr.w	r3, [r1], #4
  4027c8:	f840 3b04 	str.w	r3, [r0], #4
  4027cc:	3a04      	subs	r2, #4
  4027ce:	d2f9      	bcs.n	4027c4 <memcpy+0xc0>
  4027d0:	3204      	adds	r2, #4
  4027d2:	d008      	beq.n	4027e6 <memcpy+0xe2>
  4027d4:	07d2      	lsls	r2, r2, #31
  4027d6:	bf1c      	itt	ne
  4027d8:	f811 3b01 	ldrbne.w	r3, [r1], #1
  4027dc:	f800 3b01 	strbne.w	r3, [r0], #1
  4027e0:	d301      	bcc.n	4027e6 <memcpy+0xe2>
  4027e2:	880b      	ldrh	r3, [r1, #0]
  4027e4:	8003      	strh	r3, [r0, #0]
  4027e6:	4660      	mov	r0, ip
  4027e8:	4770      	bx	lr
  4027ea:	bf00      	nop
  4027ec:	2a08      	cmp	r2, #8
  4027ee:	d313      	bcc.n	402818 <memcpy+0x114>
  4027f0:	078b      	lsls	r3, r1, #30
  4027f2:	d08d      	beq.n	402710 <memcpy+0xc>
  4027f4:	f010 0303 	ands.w	r3, r0, #3
  4027f8:	d08a      	beq.n	402710 <memcpy+0xc>
  4027fa:	f1c3 0304 	rsb	r3, r3, #4
  4027fe:	1ad2      	subs	r2, r2, r3
  402800:	07db      	lsls	r3, r3, #31
  402802:	bf1c      	itt	ne
  402804:	f811 3b01 	ldrbne.w	r3, [r1], #1
  402808:	f800 3b01 	strbne.w	r3, [r0], #1
  40280c:	d380      	bcc.n	402710 <memcpy+0xc>
  40280e:	f831 3b02 	ldrh.w	r3, [r1], #2
  402812:	f820 3b02 	strh.w	r3, [r0], #2
  402816:	e77b      	b.n	402710 <memcpy+0xc>
  402818:	3a04      	subs	r2, #4
  40281a:	d3d9      	bcc.n	4027d0 <memcpy+0xcc>
  40281c:	3a01      	subs	r2, #1
  40281e:	f811 3b01 	ldrb.w	r3, [r1], #1
  402822:	f800 3b01 	strb.w	r3, [r0], #1
  402826:	d2f9      	bcs.n	40281c <memcpy+0x118>
  402828:	780b      	ldrb	r3, [r1, #0]
  40282a:	7003      	strb	r3, [r0, #0]
  40282c:	784b      	ldrb	r3, [r1, #1]
  40282e:	7043      	strb	r3, [r0, #1]
  402830:	788b      	ldrb	r3, [r1, #2]
  402832:	7083      	strb	r3, [r0, #2]
  402834:	4660      	mov	r0, ip
  402836:	4770      	bx	lr

00402838 <memset>:
  402838:	b470      	push	{r4, r5, r6}
  40283a:	0786      	lsls	r6, r0, #30
  40283c:	d046      	beq.n	4028cc <memset+0x94>
  40283e:	1e54      	subs	r4, r2, #1
  402840:	2a00      	cmp	r2, #0
  402842:	d041      	beq.n	4028c8 <memset+0x90>
  402844:	b2ca      	uxtb	r2, r1
  402846:	4603      	mov	r3, r0
  402848:	e002      	b.n	402850 <memset+0x18>
  40284a:	f114 34ff 	adds.w	r4, r4, #4294967295
  40284e:	d33b      	bcc.n	4028c8 <memset+0x90>
  402850:	f803 2b01 	strb.w	r2, [r3], #1
  402854:	079d      	lsls	r5, r3, #30
  402856:	d1f8      	bne.n	40284a <memset+0x12>
  402858:	2c03      	cmp	r4, #3
  40285a:	d92e      	bls.n	4028ba <memset+0x82>
  40285c:	b2cd      	uxtb	r5, r1
  40285e:	ea45 2505 	orr.w	r5, r5, r5, lsl #8
  402862:	2c0f      	cmp	r4, #15
  402864:	ea45 4505 	orr.w	r5, r5, r5, lsl #16
  402868:	d919      	bls.n	40289e <memset+0x66>
  40286a:	f103 0210 	add.w	r2, r3, #16
  40286e:	4626      	mov	r6, r4
  402870:	3e10      	subs	r6, #16
  402872:	2e0f      	cmp	r6, #15
  402874:	f842 5c10 	str.w	r5, [r2, #-16]
  402878:	f842 5c0c 	str.w	r5, [r2, #-12]
  40287c:	f842 5c08 	str.w	r5, [r2, #-8]
  402880:	f842 5c04 	str.w	r5, [r2, #-4]
  402884:	f102 0210 	add.w	r2, r2, #16
  402888:	d8f2      	bhi.n	402870 <memset+0x38>
  40288a:	f1a4 0210 	sub.w	r2, r4, #16
  40288e:	f022 020f 	bic.w	r2, r2, #15
  402892:	f004 040f 	and.w	r4, r4, #15
  402896:	3210      	adds	r2, #16
  402898:	2c03      	cmp	r4, #3
  40289a:	4413      	add	r3, r2
  40289c:	d90d      	bls.n	4028ba <memset+0x82>
  40289e:	461e      	mov	r6, r3
  4028a0:	4622      	mov	r2, r4
  4028a2:	3a04      	subs	r2, #4
  4028a4:	2a03      	cmp	r2, #3
  4028a6:	f846 5b04 	str.w	r5, [r6], #4
  4028aa:	d8fa      	bhi.n	4028a2 <memset+0x6a>
  4028ac:	1f22      	subs	r2, r4, #4
  4028ae:	f022 0203 	bic.w	r2, r2, #3
  4028b2:	3204      	adds	r2, #4
  4028b4:	4413      	add	r3, r2
  4028b6:	f004 0403 	and.w	r4, r4, #3
  4028ba:	b12c      	cbz	r4, 4028c8 <memset+0x90>
  4028bc:	b2c9      	uxtb	r1, r1
  4028be:	441c      	add	r4, r3
  4028c0:	f803 1b01 	strb.w	r1, [r3], #1
  4028c4:	429c      	cmp	r4, r3
  4028c6:	d1fb      	bne.n	4028c0 <memset+0x88>
  4028c8:	bc70      	pop	{r4, r5, r6}
  4028ca:	4770      	bx	lr
  4028cc:	4614      	mov	r4, r2
  4028ce:	4603      	mov	r3, r0
  4028d0:	e7c2      	b.n	402858 <memset+0x20>
  4028d2:	bf00      	nop

004028d4 <setbuf>:
  4028d4:	2900      	cmp	r1, #0
  4028d6:	bf0c      	ite	eq
  4028d8:	2202      	moveq	r2, #2
  4028da:	2200      	movne	r2, #0
  4028dc:	f44f 6380 	mov.w	r3, #1024	; 0x400
  4028e0:	f000 b800 	b.w	4028e4 <setvbuf>

004028e4 <setvbuf>:
  4028e4:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
  4028e8:	4c61      	ldr	r4, [pc, #388]	; (402a70 <setvbuf+0x18c>)
  4028ea:	6825      	ldr	r5, [r4, #0]
  4028ec:	b083      	sub	sp, #12
  4028ee:	4604      	mov	r4, r0
  4028f0:	460f      	mov	r7, r1
  4028f2:	4690      	mov	r8, r2
  4028f4:	461e      	mov	r6, r3
  4028f6:	b115      	cbz	r5, 4028fe <setvbuf+0x1a>
  4028f8:	6bab      	ldr	r3, [r5, #56]	; 0x38
  4028fa:	2b00      	cmp	r3, #0
  4028fc:	d064      	beq.n	4029c8 <setvbuf+0xe4>
  4028fe:	f1b8 0f02 	cmp.w	r8, #2
  402902:	d006      	beq.n	402912 <setvbuf+0x2e>
  402904:	f1b8 0f01 	cmp.w	r8, #1
  402908:	f200 809f 	bhi.w	402a4a <setvbuf+0x166>
  40290c:	2e00      	cmp	r6, #0
  40290e:	f2c0 809c 	blt.w	402a4a <setvbuf+0x166>
  402912:	6e63      	ldr	r3, [r4, #100]	; 0x64
  402914:	07d8      	lsls	r0, r3, #31
  402916:	d534      	bpl.n	402982 <setvbuf+0x9e>
  402918:	4621      	mov	r1, r4
  40291a:	4628      	mov	r0, r5
  40291c:	f001 f8fc 	bl	403b18 <_fflush_r>
  402920:	6b21      	ldr	r1, [r4, #48]	; 0x30
  402922:	b141      	cbz	r1, 402936 <setvbuf+0x52>
  402924:	f104 0340 	add.w	r3, r4, #64	; 0x40
  402928:	4299      	cmp	r1, r3
  40292a:	d002      	beq.n	402932 <setvbuf+0x4e>
  40292c:	4628      	mov	r0, r5
  40292e:	f001 fa71 	bl	403e14 <_free_r>
  402932:	2300      	movs	r3, #0
  402934:	6323      	str	r3, [r4, #48]	; 0x30
  402936:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
  40293a:	2200      	movs	r2, #0
  40293c:	61a2      	str	r2, [r4, #24]
  40293e:	6062      	str	r2, [r4, #4]
  402940:	061a      	lsls	r2, r3, #24
  402942:	d43a      	bmi.n	4029ba <setvbuf+0xd6>
  402944:	f423 634a 	bic.w	r3, r3, #3232	; 0xca0
  402948:	f023 0303 	bic.w	r3, r3, #3
  40294c:	f1b8 0f02 	cmp.w	r8, #2
  402950:	81a3      	strh	r3, [r4, #12]
  402952:	d01d      	beq.n	402990 <setvbuf+0xac>
  402954:	ab01      	add	r3, sp, #4
  402956:	466a      	mov	r2, sp
  402958:	4621      	mov	r1, r4
  40295a:	4628      	mov	r0, r5
  40295c:	f001 fcf8 	bl	404350 <__swhatbuf_r>
  402960:	89a3      	ldrh	r3, [r4, #12]
  402962:	4318      	orrs	r0, r3
  402964:	81a0      	strh	r0, [r4, #12]
  402966:	2e00      	cmp	r6, #0
  402968:	d132      	bne.n	4029d0 <setvbuf+0xec>
  40296a:	9e00      	ldr	r6, [sp, #0]
  40296c:	4630      	mov	r0, r6
  40296e:	f001 fd67 	bl	404440 <malloc>
  402972:	4607      	mov	r7, r0
  402974:	2800      	cmp	r0, #0
  402976:	d06b      	beq.n	402a50 <setvbuf+0x16c>
  402978:	89a3      	ldrh	r3, [r4, #12]
  40297a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
  40297e:	81a3      	strh	r3, [r4, #12]
  402980:	e028      	b.n	4029d4 <setvbuf+0xf0>
  402982:	89a3      	ldrh	r3, [r4, #12]
  402984:	0599      	lsls	r1, r3, #22
  402986:	d4c7      	bmi.n	402918 <setvbuf+0x34>
  402988:	6da0      	ldr	r0, [r4, #88]	; 0x58
  40298a:	f001 fcdd 	bl	404348 <__retarget_lock_acquire_recursive>
  40298e:	e7c3      	b.n	402918 <setvbuf+0x34>
  402990:	2500      	movs	r5, #0
  402992:	6e61      	ldr	r1, [r4, #100]	; 0x64
  402994:	2600      	movs	r6, #0
  402996:	f104 0243 	add.w	r2, r4, #67	; 0x43
  40299a:	f043 0302 	orr.w	r3, r3, #2
  40299e:	2001      	movs	r0, #1
  4029a0:	60a6      	str	r6, [r4, #8]
  4029a2:	07ce      	lsls	r6, r1, #31
  4029a4:	81a3      	strh	r3, [r4, #12]
  4029a6:	6022      	str	r2, [r4, #0]
  4029a8:	6122      	str	r2, [r4, #16]
  4029aa:	6160      	str	r0, [r4, #20]
  4029ac:	d401      	bmi.n	4029b2 <setvbuf+0xce>
  4029ae:	0598      	lsls	r0, r3, #22
  4029b0:	d53e      	bpl.n	402a30 <setvbuf+0x14c>
  4029b2:	4628      	mov	r0, r5
  4029b4:	b003      	add	sp, #12
  4029b6:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
  4029ba:	6921      	ldr	r1, [r4, #16]
  4029bc:	4628      	mov	r0, r5
  4029be:	f001 fa29 	bl	403e14 <_free_r>
  4029c2:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
  4029c6:	e7bd      	b.n	402944 <setvbuf+0x60>
  4029c8:	4628      	mov	r0, r5
  4029ca:	f001 f8fd 	bl	403bc8 <__sinit>
  4029ce:	e796      	b.n	4028fe <setvbuf+0x1a>
  4029d0:	2f00      	cmp	r7, #0
  4029d2:	d0cb      	beq.n	40296c <setvbuf+0x88>
  4029d4:	6bab      	ldr	r3, [r5, #56]	; 0x38
  4029d6:	2b00      	cmp	r3, #0
  4029d8:	d033      	beq.n	402a42 <setvbuf+0x15e>
  4029da:	9b00      	ldr	r3, [sp, #0]
  4029dc:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
  4029e0:	6027      	str	r7, [r4, #0]
  4029e2:	429e      	cmp	r6, r3
  4029e4:	bf1c      	itt	ne
  4029e6:	f442 6200 	orrne.w	r2, r2, #2048	; 0x800
  4029ea:	81a2      	strhne	r2, [r4, #12]
  4029ec:	f1b8 0f01 	cmp.w	r8, #1
  4029f0:	bf04      	itt	eq
  4029f2:	f042 0201 	orreq.w	r2, r2, #1
  4029f6:	81a2      	strheq	r2, [r4, #12]
  4029f8:	b292      	uxth	r2, r2
  4029fa:	f012 0308 	ands.w	r3, r2, #8
  4029fe:	6127      	str	r7, [r4, #16]
  402a00:	6166      	str	r6, [r4, #20]
  402a02:	d00e      	beq.n	402a22 <setvbuf+0x13e>
  402a04:	07d1      	lsls	r1, r2, #31
  402a06:	d51a      	bpl.n	402a3e <setvbuf+0x15a>
  402a08:	6e65      	ldr	r5, [r4, #100]	; 0x64
  402a0a:	4276      	negs	r6, r6
  402a0c:	2300      	movs	r3, #0
  402a0e:	f015 0501 	ands.w	r5, r5, #1
  402a12:	61a6      	str	r6, [r4, #24]
  402a14:	60a3      	str	r3, [r4, #8]
  402a16:	d009      	beq.n	402a2c <setvbuf+0x148>
  402a18:	2500      	movs	r5, #0
  402a1a:	4628      	mov	r0, r5
  402a1c:	b003      	add	sp, #12
  402a1e:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
  402a22:	60a3      	str	r3, [r4, #8]
  402a24:	6e65      	ldr	r5, [r4, #100]	; 0x64
  402a26:	f015 0501 	ands.w	r5, r5, #1
  402a2a:	d1f5      	bne.n	402a18 <setvbuf+0x134>
  402a2c:	0593      	lsls	r3, r2, #22
  402a2e:	d4c0      	bmi.n	4029b2 <setvbuf+0xce>
  402a30:	6da0      	ldr	r0, [r4, #88]	; 0x58
  402a32:	f001 fc8b 	bl	40434c <__retarget_lock_release_recursive>
  402a36:	4628      	mov	r0, r5
  402a38:	b003      	add	sp, #12
  402a3a:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
  402a3e:	60a6      	str	r6, [r4, #8]
  402a40:	e7f0      	b.n	402a24 <setvbuf+0x140>
  402a42:	4628      	mov	r0, r5
  402a44:	f001 f8c0 	bl	403bc8 <__sinit>
  402a48:	e7c7      	b.n	4029da <setvbuf+0xf6>
  402a4a:	f04f 35ff 	mov.w	r5, #4294967295
  402a4e:	e7b0      	b.n	4029b2 <setvbuf+0xce>
  402a50:	f8dd 9000 	ldr.w	r9, [sp]
  402a54:	45b1      	cmp	r9, r6
  402a56:	d004      	beq.n	402a62 <setvbuf+0x17e>
  402a58:	4648      	mov	r0, r9
  402a5a:	f001 fcf1 	bl	404440 <malloc>
  402a5e:	4607      	mov	r7, r0
  402a60:	b920      	cbnz	r0, 402a6c <setvbuf+0x188>
  402a62:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
  402a66:	f04f 35ff 	mov.w	r5, #4294967295
  402a6a:	e792      	b.n	402992 <setvbuf+0xae>
  402a6c:	464e      	mov	r6, r9
  402a6e:	e783      	b.n	402978 <setvbuf+0x94>
  402a70:	2040000c 	.word	0x2040000c
	...

00402a80 <strlen>:
  402a80:	f890 f000 	pld	[r0]
  402a84:	e96d 4502 	strd	r4, r5, [sp, #-8]!
  402a88:	f020 0107 	bic.w	r1, r0, #7
  402a8c:	f06f 0c00 	mvn.w	ip, #0
  402a90:	f010 0407 	ands.w	r4, r0, #7
  402a94:	f891 f020 	pld	[r1, #32]
  402a98:	f040 8049 	bne.w	402b2e <strlen+0xae>
  402a9c:	f04f 0400 	mov.w	r4, #0
  402aa0:	f06f 0007 	mvn.w	r0, #7
  402aa4:	e9d1 2300 	ldrd	r2, r3, [r1]
  402aa8:	f891 f040 	pld	[r1, #64]	; 0x40
  402aac:	f100 0008 	add.w	r0, r0, #8
  402ab0:	fa82 f24c 	uadd8	r2, r2, ip
  402ab4:	faa4 f28c 	sel	r2, r4, ip
  402ab8:	fa83 f34c 	uadd8	r3, r3, ip
  402abc:	faa2 f38c 	sel	r3, r2, ip
  402ac0:	bb4b      	cbnz	r3, 402b16 <strlen+0x96>
  402ac2:	e9d1 2302 	ldrd	r2, r3, [r1, #8]
  402ac6:	fa82 f24c 	uadd8	r2, r2, ip
  402aca:	f100 0008 	add.w	r0, r0, #8
  402ace:	faa4 f28c 	sel	r2, r4, ip
  402ad2:	fa83 f34c 	uadd8	r3, r3, ip
  402ad6:	faa2 f38c 	sel	r3, r2, ip
  402ada:	b9e3      	cbnz	r3, 402b16 <strlen+0x96>
  402adc:	e9d1 2304 	ldrd	r2, r3, [r1, #16]
  402ae0:	fa82 f24c 	uadd8	r2, r2, ip
  402ae4:	f100 0008 	add.w	r0, r0, #8
  402ae8:	faa4 f28c 	sel	r2, r4, ip
  402aec:	fa83 f34c 	uadd8	r3, r3, ip
  402af0:	faa2 f38c 	sel	r3, r2, ip
  402af4:	b97b      	cbnz	r3, 402b16 <strlen+0x96>
  402af6:	e9d1 2306 	ldrd	r2, r3, [r1, #24]
  402afa:	f101 0120 	add.w	r1, r1, #32
  402afe:	fa82 f24c 	uadd8	r2, r2, ip
  402b02:	f100 0008 	add.w	r0, r0, #8
  402b06:	faa4 f28c 	sel	r2, r4, ip
  402b0a:	fa83 f34c 	uadd8	r3, r3, ip
  402b0e:	faa2 f38c 	sel	r3, r2, ip
  402b12:	2b00      	cmp	r3, #0
  402b14:	d0c6      	beq.n	402aa4 <strlen+0x24>
  402b16:	2a00      	cmp	r2, #0
  402b18:	bf04      	itt	eq
  402b1a:	3004      	addeq	r0, #4
  402b1c:	461a      	moveq	r2, r3
  402b1e:	ba12      	rev	r2, r2
  402b20:	fab2 f282 	clz	r2, r2
  402b24:	e8fd 4502 	ldrd	r4, r5, [sp], #8
  402b28:	eb00 00d2 	add.w	r0, r0, r2, lsr #3
  402b2c:	4770      	bx	lr
  402b2e:	e9d1 2300 	ldrd	r2, r3, [r1]
  402b32:	f004 0503 	and.w	r5, r4, #3
  402b36:	f1c4 0000 	rsb	r0, r4, #0
  402b3a:	ea4f 05c5 	mov.w	r5, r5, lsl #3
  402b3e:	f014 0f04 	tst.w	r4, #4
  402b42:	f891 f040 	pld	[r1, #64]	; 0x40
  402b46:	fa0c f505 	lsl.w	r5, ip, r5
  402b4a:	ea62 0205 	orn	r2, r2, r5
  402b4e:	bf1c      	itt	ne
  402b50:	ea63 0305 	ornne	r3, r3, r5
  402b54:	4662      	movne	r2, ip
  402b56:	f04f 0400 	mov.w	r4, #0
  402b5a:	e7a9      	b.n	402ab0 <strlen+0x30>

00402b5c <__sprint_r.part.0>:
  402b5c:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
  402b60:	6e4b      	ldr	r3, [r1, #100]	; 0x64
  402b62:	049c      	lsls	r4, r3, #18
  402b64:	4693      	mov	fp, r2
  402b66:	d52f      	bpl.n	402bc8 <__sprint_r.part.0+0x6c>
  402b68:	6893      	ldr	r3, [r2, #8]
  402b6a:	6812      	ldr	r2, [r2, #0]
  402b6c:	b353      	cbz	r3, 402bc4 <__sprint_r.part.0+0x68>
  402b6e:	460e      	mov	r6, r1
  402b70:	4607      	mov	r7, r0
  402b72:	f102 0908 	add.w	r9, r2, #8
  402b76:	e919 0420 	ldmdb	r9, {r5, sl}
  402b7a:	ea5f 089a 	movs.w	r8, sl, lsr #2
  402b7e:	d017      	beq.n	402bb0 <__sprint_r.part.0+0x54>
  402b80:	3d04      	subs	r5, #4
  402b82:	2400      	movs	r4, #0
  402b84:	e001      	b.n	402b8a <__sprint_r.part.0+0x2e>
  402b86:	45a0      	cmp	r8, r4
  402b88:	d010      	beq.n	402bac <__sprint_r.part.0+0x50>
  402b8a:	4632      	mov	r2, r6
  402b8c:	f855 1f04 	ldr.w	r1, [r5, #4]!
  402b90:	4638      	mov	r0, r7
  402b92:	f001 f8bb 	bl	403d0c <_fputwc_r>
  402b96:	1c43      	adds	r3, r0, #1
  402b98:	f104 0401 	add.w	r4, r4, #1
  402b9c:	d1f3      	bne.n	402b86 <__sprint_r.part.0+0x2a>
  402b9e:	2300      	movs	r3, #0
  402ba0:	f8cb 3008 	str.w	r3, [fp, #8]
  402ba4:	f8cb 3004 	str.w	r3, [fp, #4]
  402ba8:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
  402bac:	f8db 3008 	ldr.w	r3, [fp, #8]
  402bb0:	f02a 0a03 	bic.w	sl, sl, #3
  402bb4:	eba3 030a 	sub.w	r3, r3, sl
  402bb8:	f8cb 3008 	str.w	r3, [fp, #8]
  402bbc:	f109 0908 	add.w	r9, r9, #8
  402bc0:	2b00      	cmp	r3, #0
  402bc2:	d1d8      	bne.n	402b76 <__sprint_r.part.0+0x1a>
  402bc4:	2000      	movs	r0, #0
  402bc6:	e7ea      	b.n	402b9e <__sprint_r.part.0+0x42>
  402bc8:	f001 fa0a 	bl	403fe0 <__sfvwrite_r>
  402bcc:	2300      	movs	r3, #0
  402bce:	f8cb 3008 	str.w	r3, [fp, #8]
  402bd2:	f8cb 3004 	str.w	r3, [fp, #4]
  402bd6:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
  402bda:	bf00      	nop

00402bdc <_vfiprintf_r>:
  402bdc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  402be0:	b0ad      	sub	sp, #180	; 0xb4
  402be2:	461d      	mov	r5, r3
  402be4:	468b      	mov	fp, r1
  402be6:	4690      	mov	r8, r2
  402be8:	9307      	str	r3, [sp, #28]
  402bea:	9006      	str	r0, [sp, #24]
  402bec:	b118      	cbz	r0, 402bf6 <_vfiprintf_r+0x1a>
  402bee:	6b83      	ldr	r3, [r0, #56]	; 0x38
  402bf0:	2b00      	cmp	r3, #0
  402bf2:	f000 80f3 	beq.w	402ddc <_vfiprintf_r+0x200>
  402bf6:	f8db 3064 	ldr.w	r3, [fp, #100]	; 0x64
  402bfa:	f9bb 000c 	ldrsh.w	r0, [fp, #12]
  402bfe:	07df      	lsls	r7, r3, #31
  402c00:	b281      	uxth	r1, r0
  402c02:	d402      	bmi.n	402c0a <_vfiprintf_r+0x2e>
  402c04:	058e      	lsls	r6, r1, #22
  402c06:	f140 80fc 	bpl.w	402e02 <_vfiprintf_r+0x226>
  402c0a:	048c      	lsls	r4, r1, #18
  402c0c:	d40a      	bmi.n	402c24 <_vfiprintf_r+0x48>
  402c0e:	f8db 3064 	ldr.w	r3, [fp, #100]	; 0x64
  402c12:	f440 5100 	orr.w	r1, r0, #8192	; 0x2000
  402c16:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
  402c1a:	f8ab 100c 	strh.w	r1, [fp, #12]
  402c1e:	f8cb 3064 	str.w	r3, [fp, #100]	; 0x64
  402c22:	b289      	uxth	r1, r1
  402c24:	0708      	lsls	r0, r1, #28
  402c26:	f140 80b3 	bpl.w	402d90 <_vfiprintf_r+0x1b4>
  402c2a:	f8db 3010 	ldr.w	r3, [fp, #16]
  402c2e:	2b00      	cmp	r3, #0
  402c30:	f000 80ae 	beq.w	402d90 <_vfiprintf_r+0x1b4>
  402c34:	f001 031a 	and.w	r3, r1, #26
  402c38:	2b0a      	cmp	r3, #10
  402c3a:	f000 80b5 	beq.w	402da8 <_vfiprintf_r+0x1cc>
  402c3e:	2300      	movs	r3, #0
  402c40:	f10d 0970 	add.w	r9, sp, #112	; 0x70
  402c44:	930b      	str	r3, [sp, #44]	; 0x2c
  402c46:	9311      	str	r3, [sp, #68]	; 0x44
  402c48:	9310      	str	r3, [sp, #64]	; 0x40
  402c4a:	9303      	str	r3, [sp, #12]
  402c4c:	f8cd 903c 	str.w	r9, [sp, #60]	; 0x3c
  402c50:	46ca      	mov	sl, r9
  402c52:	f8cd b010 	str.w	fp, [sp, #16]
  402c56:	f898 3000 	ldrb.w	r3, [r8]
  402c5a:	4644      	mov	r4, r8
  402c5c:	b1fb      	cbz	r3, 402c9e <_vfiprintf_r+0xc2>
  402c5e:	2b25      	cmp	r3, #37	; 0x25
  402c60:	d102      	bne.n	402c68 <_vfiprintf_r+0x8c>
  402c62:	e01c      	b.n	402c9e <_vfiprintf_r+0xc2>
  402c64:	2b25      	cmp	r3, #37	; 0x25
  402c66:	d003      	beq.n	402c70 <_vfiprintf_r+0x94>
  402c68:	f814 3f01 	ldrb.w	r3, [r4, #1]!
  402c6c:	2b00      	cmp	r3, #0
  402c6e:	d1f9      	bne.n	402c64 <_vfiprintf_r+0x88>
  402c70:	eba4 0508 	sub.w	r5, r4, r8
  402c74:	b19d      	cbz	r5, 402c9e <_vfiprintf_r+0xc2>
  402c76:	9b10      	ldr	r3, [sp, #64]	; 0x40
  402c78:	9a11      	ldr	r2, [sp, #68]	; 0x44
  402c7a:	f8ca 8000 	str.w	r8, [sl]
  402c7e:	3301      	adds	r3, #1
  402c80:	442a      	add	r2, r5
  402c82:	2b07      	cmp	r3, #7
  402c84:	f8ca 5004 	str.w	r5, [sl, #4]
  402c88:	9211      	str	r2, [sp, #68]	; 0x44
  402c8a:	9310      	str	r3, [sp, #64]	; 0x40
  402c8c:	dd7a      	ble.n	402d84 <_vfiprintf_r+0x1a8>
  402c8e:	2a00      	cmp	r2, #0
  402c90:	f040 84b0 	bne.w	4035f4 <_vfiprintf_r+0xa18>
  402c94:	9b03      	ldr	r3, [sp, #12]
  402c96:	9210      	str	r2, [sp, #64]	; 0x40
  402c98:	442b      	add	r3, r5
  402c9a:	46ca      	mov	sl, r9
  402c9c:	9303      	str	r3, [sp, #12]
  402c9e:	7823      	ldrb	r3, [r4, #0]
  402ca0:	2b00      	cmp	r3, #0
  402ca2:	f000 83e0 	beq.w	403466 <_vfiprintf_r+0x88a>
  402ca6:	2000      	movs	r0, #0
  402ca8:	f04f 0300 	mov.w	r3, #0
  402cac:	f88d 3037 	strb.w	r3, [sp, #55]	; 0x37
  402cb0:	f104 0801 	add.w	r8, r4, #1
  402cb4:	7862      	ldrb	r2, [r4, #1]
  402cb6:	4605      	mov	r5, r0
  402cb8:	4606      	mov	r6, r0
  402cba:	4603      	mov	r3, r0
  402cbc:	f04f 34ff 	mov.w	r4, #4294967295
  402cc0:	f108 0801 	add.w	r8, r8, #1
  402cc4:	f1a2 0120 	sub.w	r1, r2, #32
  402cc8:	2958      	cmp	r1, #88	; 0x58
  402cca:	f200 82de 	bhi.w	40328a <_vfiprintf_r+0x6ae>
  402cce:	e8df f011 	tbh	[pc, r1, lsl #1]
  402cd2:	0221      	.short	0x0221
  402cd4:	02dc02dc 	.word	0x02dc02dc
  402cd8:	02dc0229 	.word	0x02dc0229
  402cdc:	02dc02dc 	.word	0x02dc02dc
  402ce0:	02dc02dc 	.word	0x02dc02dc
  402ce4:	028902dc 	.word	0x028902dc
  402ce8:	02dc0295 	.word	0x02dc0295
  402cec:	02bd00a2 	.word	0x02bd00a2
  402cf0:	019f02dc 	.word	0x019f02dc
  402cf4:	01a401a4 	.word	0x01a401a4
  402cf8:	01a401a4 	.word	0x01a401a4
  402cfc:	01a401a4 	.word	0x01a401a4
  402d00:	01a401a4 	.word	0x01a401a4
  402d04:	02dc01a4 	.word	0x02dc01a4
  402d08:	02dc02dc 	.word	0x02dc02dc
  402d0c:	02dc02dc 	.word	0x02dc02dc
  402d10:	02dc02dc 	.word	0x02dc02dc
  402d14:	02dc02dc 	.word	0x02dc02dc
  402d18:	01b202dc 	.word	0x01b202dc
  402d1c:	02dc02dc 	.word	0x02dc02dc
  402d20:	02dc02dc 	.word	0x02dc02dc
  402d24:	02dc02dc 	.word	0x02dc02dc
  402d28:	02dc02dc 	.word	0x02dc02dc
  402d2c:	02dc02dc 	.word	0x02dc02dc
  402d30:	02dc0197 	.word	0x02dc0197
  402d34:	02dc02dc 	.word	0x02dc02dc
  402d38:	02dc02dc 	.word	0x02dc02dc
  402d3c:	02dc019b 	.word	0x02dc019b
  402d40:	025302dc 	.word	0x025302dc
  402d44:	02dc02dc 	.word	0x02dc02dc
  402d48:	02dc02dc 	.word	0x02dc02dc
  402d4c:	02dc02dc 	.word	0x02dc02dc
  402d50:	02dc02dc 	.word	0x02dc02dc
  402d54:	02dc02dc 	.word	0x02dc02dc
  402d58:	021b025a 	.word	0x021b025a
  402d5c:	02dc02dc 	.word	0x02dc02dc
  402d60:	026e02dc 	.word	0x026e02dc
  402d64:	02dc021b 	.word	0x02dc021b
  402d68:	027302dc 	.word	0x027302dc
  402d6c:	01f502dc 	.word	0x01f502dc
  402d70:	02090182 	.word	0x02090182
  402d74:	02dc02d7 	.word	0x02dc02d7
  402d78:	02dc029a 	.word	0x02dc029a
  402d7c:	02dc00a7 	.word	0x02dc00a7
  402d80:	022e02dc 	.word	0x022e02dc
  402d84:	f10a 0a08 	add.w	sl, sl, #8
  402d88:	9b03      	ldr	r3, [sp, #12]
  402d8a:	442b      	add	r3, r5
  402d8c:	9303      	str	r3, [sp, #12]
  402d8e:	e786      	b.n	402c9e <_vfiprintf_r+0xc2>
  402d90:	4659      	mov	r1, fp
  402d92:	9806      	ldr	r0, [sp, #24]
  402d94:	f000 fdac 	bl	4038f0 <__swsetup_r>
  402d98:	bb18      	cbnz	r0, 402de2 <_vfiprintf_r+0x206>
  402d9a:	f8bb 100c 	ldrh.w	r1, [fp, #12]
  402d9e:	f001 031a 	and.w	r3, r1, #26
  402da2:	2b0a      	cmp	r3, #10
  402da4:	f47f af4b 	bne.w	402c3e <_vfiprintf_r+0x62>
  402da8:	f9bb 300e 	ldrsh.w	r3, [fp, #14]
  402dac:	2b00      	cmp	r3, #0
  402dae:	f6ff af46 	blt.w	402c3e <_vfiprintf_r+0x62>
  402db2:	f8db 3064 	ldr.w	r3, [fp, #100]	; 0x64
  402db6:	07db      	lsls	r3, r3, #31
  402db8:	d405      	bmi.n	402dc6 <_vfiprintf_r+0x1ea>
  402dba:	058f      	lsls	r7, r1, #22
  402dbc:	d403      	bmi.n	402dc6 <_vfiprintf_r+0x1ea>
  402dbe:	f8db 0058 	ldr.w	r0, [fp, #88]	; 0x58
  402dc2:	f001 fac3 	bl	40434c <__retarget_lock_release_recursive>
  402dc6:	462b      	mov	r3, r5
  402dc8:	4642      	mov	r2, r8
  402dca:	4659      	mov	r1, fp
  402dcc:	9806      	ldr	r0, [sp, #24]
  402dce:	f000 fd4d 	bl	40386c <__sbprintf>
  402dd2:	9003      	str	r0, [sp, #12]
  402dd4:	9803      	ldr	r0, [sp, #12]
  402dd6:	b02d      	add	sp, #180	; 0xb4
  402dd8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  402ddc:	f000 fef4 	bl	403bc8 <__sinit>
  402de0:	e709      	b.n	402bf6 <_vfiprintf_r+0x1a>
  402de2:	f8db 3064 	ldr.w	r3, [fp, #100]	; 0x64
  402de6:	07d9      	lsls	r1, r3, #31
  402de8:	d404      	bmi.n	402df4 <_vfiprintf_r+0x218>
  402dea:	f8bb 300c 	ldrh.w	r3, [fp, #12]
  402dee:	059a      	lsls	r2, r3, #22
  402df0:	f140 84aa 	bpl.w	403748 <_vfiprintf_r+0xb6c>
  402df4:	f04f 33ff 	mov.w	r3, #4294967295
  402df8:	9303      	str	r3, [sp, #12]
  402dfa:	9803      	ldr	r0, [sp, #12]
  402dfc:	b02d      	add	sp, #180	; 0xb4
  402dfe:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  402e02:	f8db 0058 	ldr.w	r0, [fp, #88]	; 0x58
  402e06:	f001 fa9f 	bl	404348 <__retarget_lock_acquire_recursive>
  402e0a:	f9bb 000c 	ldrsh.w	r0, [fp, #12]
  402e0e:	b281      	uxth	r1, r0
  402e10:	e6fb      	b.n	402c0a <_vfiprintf_r+0x2e>
  402e12:	4276      	negs	r6, r6
  402e14:	9207      	str	r2, [sp, #28]
  402e16:	f043 0304 	orr.w	r3, r3, #4
  402e1a:	f898 2000 	ldrb.w	r2, [r8]
  402e1e:	e74f      	b.n	402cc0 <_vfiprintf_r+0xe4>
  402e20:	9608      	str	r6, [sp, #32]
  402e22:	069e      	lsls	r6, r3, #26
  402e24:	f100 8450 	bmi.w	4036c8 <_vfiprintf_r+0xaec>
  402e28:	9907      	ldr	r1, [sp, #28]
  402e2a:	06dd      	lsls	r5, r3, #27
  402e2c:	460a      	mov	r2, r1
  402e2e:	f100 83ef 	bmi.w	403610 <_vfiprintf_r+0xa34>
  402e32:	0658      	lsls	r0, r3, #25
  402e34:	f140 83ec 	bpl.w	403610 <_vfiprintf_r+0xa34>
  402e38:	880e      	ldrh	r6, [r1, #0]
  402e3a:	3104      	adds	r1, #4
  402e3c:	2700      	movs	r7, #0
  402e3e:	2201      	movs	r2, #1
  402e40:	9107      	str	r1, [sp, #28]
  402e42:	f04f 0100 	mov.w	r1, #0
  402e46:	f88d 1037 	strb.w	r1, [sp, #55]	; 0x37
  402e4a:	2500      	movs	r5, #0
  402e4c:	1c61      	adds	r1, r4, #1
  402e4e:	f000 8116 	beq.w	40307e <_vfiprintf_r+0x4a2>
  402e52:	f023 0180 	bic.w	r1, r3, #128	; 0x80
  402e56:	9102      	str	r1, [sp, #8]
  402e58:	ea56 0107 	orrs.w	r1, r6, r7
  402e5c:	f040 8114 	bne.w	403088 <_vfiprintf_r+0x4ac>
  402e60:	2c00      	cmp	r4, #0
  402e62:	f040 835c 	bne.w	40351e <_vfiprintf_r+0x942>
  402e66:	2a00      	cmp	r2, #0
  402e68:	f040 83b7 	bne.w	4035da <_vfiprintf_r+0x9fe>
  402e6c:	f013 0301 	ands.w	r3, r3, #1
  402e70:	9305      	str	r3, [sp, #20]
  402e72:	f000 8457 	beq.w	403724 <_vfiprintf_r+0xb48>
  402e76:	f10d 0bb0 	add.w	fp, sp, #176	; 0xb0
  402e7a:	2330      	movs	r3, #48	; 0x30
  402e7c:	f80b 3d41 	strb.w	r3, [fp, #-65]!
  402e80:	9b05      	ldr	r3, [sp, #20]
  402e82:	42a3      	cmp	r3, r4
  402e84:	bfb8      	it	lt
  402e86:	4623      	movlt	r3, r4
  402e88:	9301      	str	r3, [sp, #4]
  402e8a:	b10d      	cbz	r5, 402e90 <_vfiprintf_r+0x2b4>
  402e8c:	3301      	adds	r3, #1
  402e8e:	9301      	str	r3, [sp, #4]
  402e90:	9b02      	ldr	r3, [sp, #8]
  402e92:	f013 0302 	ands.w	r3, r3, #2
  402e96:	9309      	str	r3, [sp, #36]	; 0x24
  402e98:	d002      	beq.n	402ea0 <_vfiprintf_r+0x2c4>
  402e9a:	9b01      	ldr	r3, [sp, #4]
  402e9c:	3302      	adds	r3, #2
  402e9e:	9301      	str	r3, [sp, #4]
  402ea0:	9b02      	ldr	r3, [sp, #8]
  402ea2:	f013 0384 	ands.w	r3, r3, #132	; 0x84
  402ea6:	930a      	str	r3, [sp, #40]	; 0x28
  402ea8:	f040 8217 	bne.w	4032da <_vfiprintf_r+0x6fe>
  402eac:	9b08      	ldr	r3, [sp, #32]
  402eae:	9a01      	ldr	r2, [sp, #4]
  402eb0:	1a9d      	subs	r5, r3, r2
  402eb2:	2d00      	cmp	r5, #0
  402eb4:	f340 8211 	ble.w	4032da <_vfiprintf_r+0x6fe>
  402eb8:	2d10      	cmp	r5, #16
  402eba:	f340 8490 	ble.w	4037de <_vfiprintf_r+0xc02>
  402ebe:	9b10      	ldr	r3, [sp, #64]	; 0x40
  402ec0:	9a11      	ldr	r2, [sp, #68]	; 0x44
  402ec2:	4ec4      	ldr	r6, [pc, #784]	; (4031d4 <_vfiprintf_r+0x5f8>)
  402ec4:	46d6      	mov	lr, sl
  402ec6:	2710      	movs	r7, #16
  402ec8:	46a2      	mov	sl, r4
  402eca:	4619      	mov	r1, r3
  402ecc:	9c06      	ldr	r4, [sp, #24]
  402ece:	e007      	b.n	402ee0 <_vfiprintf_r+0x304>
  402ed0:	f101 0c02 	add.w	ip, r1, #2
  402ed4:	f10e 0e08 	add.w	lr, lr, #8
  402ed8:	4601      	mov	r1, r0
  402eda:	3d10      	subs	r5, #16
  402edc:	2d10      	cmp	r5, #16
  402ede:	dd11      	ble.n	402f04 <_vfiprintf_r+0x328>
  402ee0:	1c48      	adds	r0, r1, #1
  402ee2:	3210      	adds	r2, #16
  402ee4:	2807      	cmp	r0, #7
  402ee6:	9211      	str	r2, [sp, #68]	; 0x44
  402ee8:	e88e 00c0 	stmia.w	lr, {r6, r7}
  402eec:	9010      	str	r0, [sp, #64]	; 0x40
  402eee:	ddef      	ble.n	402ed0 <_vfiprintf_r+0x2f4>
  402ef0:	2a00      	cmp	r2, #0
  402ef2:	f040 81e4 	bne.w	4032be <_vfiprintf_r+0x6e2>
  402ef6:	3d10      	subs	r5, #16
  402ef8:	2d10      	cmp	r5, #16
  402efa:	4611      	mov	r1, r2
  402efc:	f04f 0c01 	mov.w	ip, #1
  402f00:	46ce      	mov	lr, r9
  402f02:	dced      	bgt.n	402ee0 <_vfiprintf_r+0x304>
  402f04:	4654      	mov	r4, sl
  402f06:	4661      	mov	r1, ip
  402f08:	46f2      	mov	sl, lr
  402f0a:	442a      	add	r2, r5
  402f0c:	2907      	cmp	r1, #7
  402f0e:	9211      	str	r2, [sp, #68]	; 0x44
  402f10:	f8ca 6000 	str.w	r6, [sl]
  402f14:	f8ca 5004 	str.w	r5, [sl, #4]
  402f18:	9110      	str	r1, [sp, #64]	; 0x40
  402f1a:	f300 82ec 	bgt.w	4034f6 <_vfiprintf_r+0x91a>
  402f1e:	f89d 5037 	ldrb.w	r5, [sp, #55]	; 0x37
  402f22:	f10a 0a08 	add.w	sl, sl, #8
  402f26:	1c48      	adds	r0, r1, #1
  402f28:	2d00      	cmp	r5, #0
  402f2a:	f040 81de 	bne.w	4032ea <_vfiprintf_r+0x70e>
  402f2e:	9b09      	ldr	r3, [sp, #36]	; 0x24
  402f30:	2b00      	cmp	r3, #0
  402f32:	f000 81f8 	beq.w	403326 <_vfiprintf_r+0x74a>
  402f36:	3202      	adds	r2, #2
  402f38:	a90e      	add	r1, sp, #56	; 0x38
  402f3a:	2302      	movs	r3, #2
  402f3c:	2807      	cmp	r0, #7
  402f3e:	9211      	str	r2, [sp, #68]	; 0x44
  402f40:	9010      	str	r0, [sp, #64]	; 0x40
  402f42:	e88a 000a 	stmia.w	sl, {r1, r3}
  402f46:	f340 81ea 	ble.w	40331e <_vfiprintf_r+0x742>
  402f4a:	2a00      	cmp	r2, #0
  402f4c:	f040 838c 	bne.w	403668 <_vfiprintf_r+0xa8c>
  402f50:	9b0a      	ldr	r3, [sp, #40]	; 0x28
  402f52:	2b80      	cmp	r3, #128	; 0x80
  402f54:	f04f 0001 	mov.w	r0, #1
  402f58:	4611      	mov	r1, r2
  402f5a:	46ca      	mov	sl, r9
  402f5c:	f040 81e7 	bne.w	40332e <_vfiprintf_r+0x752>
  402f60:	9b08      	ldr	r3, [sp, #32]
  402f62:	9d01      	ldr	r5, [sp, #4]
  402f64:	1b5e      	subs	r6, r3, r5
  402f66:	2e00      	cmp	r6, #0
  402f68:	f340 81e1 	ble.w	40332e <_vfiprintf_r+0x752>
  402f6c:	2e10      	cmp	r6, #16
  402f6e:	4d9a      	ldr	r5, [pc, #616]	; (4031d8 <_vfiprintf_r+0x5fc>)
  402f70:	f340 8450 	ble.w	403814 <_vfiprintf_r+0xc38>
  402f74:	46d4      	mov	ip, sl
  402f76:	2710      	movs	r7, #16
  402f78:	46a2      	mov	sl, r4
  402f7a:	9c06      	ldr	r4, [sp, #24]
  402f7c:	e007      	b.n	402f8e <_vfiprintf_r+0x3b2>
  402f7e:	f101 0e02 	add.w	lr, r1, #2
  402f82:	f10c 0c08 	add.w	ip, ip, #8
  402f86:	4601      	mov	r1, r0
  402f88:	3e10      	subs	r6, #16
  402f8a:	2e10      	cmp	r6, #16
  402f8c:	dd11      	ble.n	402fb2 <_vfiprintf_r+0x3d6>
  402f8e:	1c48      	adds	r0, r1, #1
  402f90:	3210      	adds	r2, #16
  402f92:	2807      	cmp	r0, #7
  402f94:	9211      	str	r2, [sp, #68]	; 0x44
  402f96:	e88c 00a0 	stmia.w	ip, {r5, r7}
  402f9a:	9010      	str	r0, [sp, #64]	; 0x40
  402f9c:	ddef      	ble.n	402f7e <_vfiprintf_r+0x3a2>
  402f9e:	2a00      	cmp	r2, #0
  402fa0:	f040 829d 	bne.w	4034de <_vfiprintf_r+0x902>
  402fa4:	3e10      	subs	r6, #16
  402fa6:	2e10      	cmp	r6, #16
  402fa8:	f04f 0e01 	mov.w	lr, #1
  402fac:	4611      	mov	r1, r2
  402fae:	46cc      	mov	ip, r9
  402fb0:	dced      	bgt.n	402f8e <_vfiprintf_r+0x3b2>
  402fb2:	4654      	mov	r4, sl
  402fb4:	46e2      	mov	sl, ip
  402fb6:	4432      	add	r2, r6
  402fb8:	f1be 0f07 	cmp.w	lr, #7
  402fbc:	9211      	str	r2, [sp, #68]	; 0x44
  402fbe:	e88a 0060 	stmia.w	sl, {r5, r6}
  402fc2:	f8cd e040 	str.w	lr, [sp, #64]	; 0x40
  402fc6:	f300 8369 	bgt.w	40369c <_vfiprintf_r+0xac0>
  402fca:	f10a 0a08 	add.w	sl, sl, #8
  402fce:	f10e 0001 	add.w	r0, lr, #1
  402fd2:	4671      	mov	r1, lr
  402fd4:	e1ab      	b.n	40332e <_vfiprintf_r+0x752>
  402fd6:	9608      	str	r6, [sp, #32]
  402fd8:	f013 0220 	ands.w	r2, r3, #32
  402fdc:	f040 838c 	bne.w	4036f8 <_vfiprintf_r+0xb1c>
  402fe0:	f013 0110 	ands.w	r1, r3, #16
  402fe4:	f040 831a 	bne.w	40361c <_vfiprintf_r+0xa40>
  402fe8:	f013 0240 	ands.w	r2, r3, #64	; 0x40
  402fec:	f000 8316 	beq.w	40361c <_vfiprintf_r+0xa40>
  402ff0:	9807      	ldr	r0, [sp, #28]
  402ff2:	460a      	mov	r2, r1
  402ff4:	4601      	mov	r1, r0
  402ff6:	3104      	adds	r1, #4
  402ff8:	8806      	ldrh	r6, [r0, #0]
  402ffa:	9107      	str	r1, [sp, #28]
  402ffc:	2700      	movs	r7, #0
  402ffe:	e720      	b.n	402e42 <_vfiprintf_r+0x266>
  403000:	9608      	str	r6, [sp, #32]
  403002:	f043 0310 	orr.w	r3, r3, #16
  403006:	e7e7      	b.n	402fd8 <_vfiprintf_r+0x3fc>
  403008:	9608      	str	r6, [sp, #32]
  40300a:	f043 0310 	orr.w	r3, r3, #16
  40300e:	e708      	b.n	402e22 <_vfiprintf_r+0x246>
  403010:	f043 0380 	orr.w	r3, r3, #128	; 0x80
  403014:	f898 2000 	ldrb.w	r2, [r8]
  403018:	e652      	b.n	402cc0 <_vfiprintf_r+0xe4>
  40301a:	f1a2 0130 	sub.w	r1, r2, #48	; 0x30
  40301e:	2600      	movs	r6, #0
  403020:	f818 2b01 	ldrb.w	r2, [r8], #1
  403024:	eb06 0686 	add.w	r6, r6, r6, lsl #2
  403028:	eb01 0646 	add.w	r6, r1, r6, lsl #1
  40302c:	f1a2 0130 	sub.w	r1, r2, #48	; 0x30
  403030:	2909      	cmp	r1, #9
  403032:	d9f5      	bls.n	403020 <_vfiprintf_r+0x444>
  403034:	e646      	b.n	402cc4 <_vfiprintf_r+0xe8>
  403036:	9608      	str	r6, [sp, #32]
  403038:	2800      	cmp	r0, #0
  40303a:	f040 8408 	bne.w	40384e <_vfiprintf_r+0xc72>
  40303e:	f043 0310 	orr.w	r3, r3, #16
  403042:	069e      	lsls	r6, r3, #26
  403044:	f100 834c 	bmi.w	4036e0 <_vfiprintf_r+0xb04>
  403048:	06dd      	lsls	r5, r3, #27
  40304a:	f100 82f3 	bmi.w	403634 <_vfiprintf_r+0xa58>
  40304e:	0658      	lsls	r0, r3, #25
  403050:	f140 82f0 	bpl.w	403634 <_vfiprintf_r+0xa58>
  403054:	9d07      	ldr	r5, [sp, #28]
  403056:	f9b5 6000 	ldrsh.w	r6, [r5]
  40305a:	462a      	mov	r2, r5
  40305c:	17f7      	asrs	r7, r6, #31
  40305e:	3204      	adds	r2, #4
  403060:	4630      	mov	r0, r6
  403062:	4639      	mov	r1, r7
  403064:	9207      	str	r2, [sp, #28]
  403066:	2800      	cmp	r0, #0
  403068:	f171 0200 	sbcs.w	r2, r1, #0
  40306c:	f2c0 835d 	blt.w	40372a <_vfiprintf_r+0xb4e>
  403070:	1c61      	adds	r1, r4, #1
  403072:	f89d 5037 	ldrb.w	r5, [sp, #55]	; 0x37
  403076:	f04f 0201 	mov.w	r2, #1
  40307a:	f47f aeea 	bne.w	402e52 <_vfiprintf_r+0x276>
  40307e:	ea56 0107 	orrs.w	r1, r6, r7
  403082:	f000 824d 	beq.w	403520 <_vfiprintf_r+0x944>
  403086:	9302      	str	r3, [sp, #8]
  403088:	2a01      	cmp	r2, #1
  40308a:	f000 828c 	beq.w	4035a6 <_vfiprintf_r+0x9ca>
  40308e:	2a02      	cmp	r2, #2
  403090:	f040 825c 	bne.w	40354c <_vfiprintf_r+0x970>
  403094:	980b      	ldr	r0, [sp, #44]	; 0x2c
  403096:	46cb      	mov	fp, r9
  403098:	0933      	lsrs	r3, r6, #4
  40309a:	f006 010f 	and.w	r1, r6, #15
  40309e:	ea43 7307 	orr.w	r3, r3, r7, lsl #28
  4030a2:	093a      	lsrs	r2, r7, #4
  4030a4:	461e      	mov	r6, r3
  4030a6:	4617      	mov	r7, r2
  4030a8:	5c43      	ldrb	r3, [r0, r1]
  4030aa:	f80b 3d01 	strb.w	r3, [fp, #-1]!
  4030ae:	ea56 0307 	orrs.w	r3, r6, r7
  4030b2:	d1f1      	bne.n	403098 <_vfiprintf_r+0x4bc>
  4030b4:	eba9 030b 	sub.w	r3, r9, fp
  4030b8:	9305      	str	r3, [sp, #20]
  4030ba:	e6e1      	b.n	402e80 <_vfiprintf_r+0x2a4>
  4030bc:	2800      	cmp	r0, #0
  4030be:	f040 83c0 	bne.w	403842 <_vfiprintf_r+0xc66>
  4030c2:	0699      	lsls	r1, r3, #26
  4030c4:	f100 8367 	bmi.w	403796 <_vfiprintf_r+0xbba>
  4030c8:	06da      	lsls	r2, r3, #27
  4030ca:	f100 80f1 	bmi.w	4032b0 <_vfiprintf_r+0x6d4>
  4030ce:	065b      	lsls	r3, r3, #25
  4030d0:	f140 80ee 	bpl.w	4032b0 <_vfiprintf_r+0x6d4>
  4030d4:	9a07      	ldr	r2, [sp, #28]
  4030d6:	6813      	ldr	r3, [r2, #0]
  4030d8:	3204      	adds	r2, #4
  4030da:	9207      	str	r2, [sp, #28]
  4030dc:	f8bd 200c 	ldrh.w	r2, [sp, #12]
  4030e0:	801a      	strh	r2, [r3, #0]
  4030e2:	e5b8      	b.n	402c56 <_vfiprintf_r+0x7a>
  4030e4:	9807      	ldr	r0, [sp, #28]
  4030e6:	4a3d      	ldr	r2, [pc, #244]	; (4031dc <_vfiprintf_r+0x600>)
  4030e8:	9608      	str	r6, [sp, #32]
  4030ea:	920b      	str	r2, [sp, #44]	; 0x2c
  4030ec:	6806      	ldr	r6, [r0, #0]
  4030ee:	2278      	movs	r2, #120	; 0x78
  4030f0:	2130      	movs	r1, #48	; 0x30
  4030f2:	3004      	adds	r0, #4
  4030f4:	f88d 2039 	strb.w	r2, [sp, #57]	; 0x39
  4030f8:	f043 0302 	orr.w	r3, r3, #2
  4030fc:	9007      	str	r0, [sp, #28]
  4030fe:	2700      	movs	r7, #0
  403100:	f88d 1038 	strb.w	r1, [sp, #56]	; 0x38
  403104:	2202      	movs	r2, #2
  403106:	e69c      	b.n	402e42 <_vfiprintf_r+0x266>
  403108:	9608      	str	r6, [sp, #32]
  40310a:	2800      	cmp	r0, #0
  40310c:	d099      	beq.n	403042 <_vfiprintf_r+0x466>
  40310e:	f88d 5037 	strb.w	r5, [sp, #55]	; 0x37
  403112:	e796      	b.n	403042 <_vfiprintf_r+0x466>
  403114:	f898 2000 	ldrb.w	r2, [r8]
  403118:	2d00      	cmp	r5, #0
  40311a:	f47f add1 	bne.w	402cc0 <_vfiprintf_r+0xe4>
  40311e:	2001      	movs	r0, #1
  403120:	2520      	movs	r5, #32
  403122:	e5cd      	b.n	402cc0 <_vfiprintf_r+0xe4>
  403124:	f043 0301 	orr.w	r3, r3, #1
  403128:	f898 2000 	ldrb.w	r2, [r8]
  40312c:	e5c8      	b.n	402cc0 <_vfiprintf_r+0xe4>
  40312e:	9608      	str	r6, [sp, #32]
  403130:	2800      	cmp	r0, #0
  403132:	f040 8393 	bne.w	40385c <_vfiprintf_r+0xc80>
  403136:	4929      	ldr	r1, [pc, #164]	; (4031dc <_vfiprintf_r+0x600>)
  403138:	910b      	str	r1, [sp, #44]	; 0x2c
  40313a:	069f      	lsls	r7, r3, #26
  40313c:	f100 82e8 	bmi.w	403710 <_vfiprintf_r+0xb34>
  403140:	9807      	ldr	r0, [sp, #28]
  403142:	06de      	lsls	r6, r3, #27
  403144:	4601      	mov	r1, r0
  403146:	f100 8270 	bmi.w	40362a <_vfiprintf_r+0xa4e>
  40314a:	065d      	lsls	r5, r3, #25
  40314c:	f140 826d 	bpl.w	40362a <_vfiprintf_r+0xa4e>
  403150:	3104      	adds	r1, #4
  403152:	8806      	ldrh	r6, [r0, #0]
  403154:	9107      	str	r1, [sp, #28]
  403156:	2700      	movs	r7, #0
  403158:	07d8      	lsls	r0, r3, #31
  40315a:	f140 8222 	bpl.w	4035a2 <_vfiprintf_r+0x9c6>
  40315e:	ea56 0107 	orrs.w	r1, r6, r7
  403162:	f000 821e 	beq.w	4035a2 <_vfiprintf_r+0x9c6>
  403166:	2130      	movs	r1, #48	; 0x30
  403168:	f88d 2039 	strb.w	r2, [sp, #57]	; 0x39
  40316c:	f043 0302 	orr.w	r3, r3, #2
  403170:	f88d 1038 	strb.w	r1, [sp, #56]	; 0x38
  403174:	2202      	movs	r2, #2
  403176:	e664      	b.n	402e42 <_vfiprintf_r+0x266>
  403178:	9608      	str	r6, [sp, #32]
  40317a:	2800      	cmp	r0, #0
  40317c:	f040 836b 	bne.w	403856 <_vfiprintf_r+0xc7a>
  403180:	4917      	ldr	r1, [pc, #92]	; (4031e0 <_vfiprintf_r+0x604>)
  403182:	910b      	str	r1, [sp, #44]	; 0x2c
  403184:	e7d9      	b.n	40313a <_vfiprintf_r+0x55e>
  403186:	9907      	ldr	r1, [sp, #28]
  403188:	9608      	str	r6, [sp, #32]
  40318a:	680a      	ldr	r2, [r1, #0]
  40318c:	f88d 2048 	strb.w	r2, [sp, #72]	; 0x48
  403190:	f04f 0000 	mov.w	r0, #0
  403194:	460a      	mov	r2, r1
  403196:	f88d 0037 	strb.w	r0, [sp, #55]	; 0x37
  40319a:	3204      	adds	r2, #4
  40319c:	2001      	movs	r0, #1
  40319e:	9001      	str	r0, [sp, #4]
  4031a0:	9207      	str	r2, [sp, #28]
  4031a2:	9005      	str	r0, [sp, #20]
  4031a4:	f10d 0b48 	add.w	fp, sp, #72	; 0x48
  4031a8:	9302      	str	r3, [sp, #8]
  4031aa:	2400      	movs	r4, #0
  4031ac:	e670      	b.n	402e90 <_vfiprintf_r+0x2b4>
  4031ae:	f043 0340 	orr.w	r3, r3, #64	; 0x40
  4031b2:	f898 2000 	ldrb.w	r2, [r8]
  4031b6:	e583      	b.n	402cc0 <_vfiprintf_r+0xe4>
  4031b8:	f898 2000 	ldrb.w	r2, [r8]
  4031bc:	2a6c      	cmp	r2, #108	; 0x6c
  4031be:	bf03      	ittte	eq
  4031c0:	f898 2001 	ldrbeq.w	r2, [r8, #1]
  4031c4:	f043 0320 	orreq.w	r3, r3, #32
  4031c8:	f108 0801 	addeq.w	r8, r8, #1
  4031cc:	f043 0310 	orrne.w	r3, r3, #16
  4031d0:	e576      	b.n	402cc0 <_vfiprintf_r+0xe4>
  4031d2:	bf00      	nop
  4031d4:	004056a0 	.word	0x004056a0
  4031d8:	004056b0 	.word	0x004056b0
  4031dc:	00405684 	.word	0x00405684
  4031e0:	00405670 	.word	0x00405670
  4031e4:	9907      	ldr	r1, [sp, #28]
  4031e6:	680e      	ldr	r6, [r1, #0]
  4031e8:	460a      	mov	r2, r1
  4031ea:	2e00      	cmp	r6, #0
  4031ec:	f102 0204 	add.w	r2, r2, #4
  4031f0:	f6ff ae0f 	blt.w	402e12 <_vfiprintf_r+0x236>
  4031f4:	9207      	str	r2, [sp, #28]
  4031f6:	f898 2000 	ldrb.w	r2, [r8]
  4031fa:	e561      	b.n	402cc0 <_vfiprintf_r+0xe4>
  4031fc:	f898 2000 	ldrb.w	r2, [r8]
  403200:	2001      	movs	r0, #1
  403202:	252b      	movs	r5, #43	; 0x2b
  403204:	e55c      	b.n	402cc0 <_vfiprintf_r+0xe4>
  403206:	9907      	ldr	r1, [sp, #28]
  403208:	9608      	str	r6, [sp, #32]
  40320a:	f8d1 b000 	ldr.w	fp, [r1]
  40320e:	f04f 0200 	mov.w	r2, #0
  403212:	f88d 2037 	strb.w	r2, [sp, #55]	; 0x37
  403216:	1d0e      	adds	r6, r1, #4
  403218:	f1bb 0f00 	cmp.w	fp, #0
  40321c:	f000 82e5 	beq.w	4037ea <_vfiprintf_r+0xc0e>
  403220:	1c67      	adds	r7, r4, #1
  403222:	f000 82c4 	beq.w	4037ae <_vfiprintf_r+0xbd2>
  403226:	4622      	mov	r2, r4
  403228:	2100      	movs	r1, #0
  40322a:	4658      	mov	r0, fp
  40322c:	9301      	str	r3, [sp, #4]
  40322e:	f001 fbd7 	bl	4049e0 <memchr>
  403232:	9b01      	ldr	r3, [sp, #4]
  403234:	2800      	cmp	r0, #0
  403236:	f000 82e5 	beq.w	403804 <_vfiprintf_r+0xc28>
  40323a:	eba0 020b 	sub.w	r2, r0, fp
  40323e:	9205      	str	r2, [sp, #20]
  403240:	9607      	str	r6, [sp, #28]
  403242:	9302      	str	r3, [sp, #8]
  403244:	f89d 5037 	ldrb.w	r5, [sp, #55]	; 0x37
  403248:	2400      	movs	r4, #0
  40324a:	e619      	b.n	402e80 <_vfiprintf_r+0x2a4>
  40324c:	f898 2000 	ldrb.w	r2, [r8]
  403250:	2a2a      	cmp	r2, #42	; 0x2a
  403252:	f108 0701 	add.w	r7, r8, #1
  403256:	f000 82e9 	beq.w	40382c <_vfiprintf_r+0xc50>
  40325a:	f1a2 0130 	sub.w	r1, r2, #48	; 0x30
  40325e:	2909      	cmp	r1, #9
  403260:	46b8      	mov	r8, r7
  403262:	f04f 0400 	mov.w	r4, #0
  403266:	f63f ad2d 	bhi.w	402cc4 <_vfiprintf_r+0xe8>
  40326a:	f818 2b01 	ldrb.w	r2, [r8], #1
  40326e:	eb04 0484 	add.w	r4, r4, r4, lsl #2
  403272:	eb01 0444 	add.w	r4, r1, r4, lsl #1
  403276:	f1a2 0130 	sub.w	r1, r2, #48	; 0x30
  40327a:	2909      	cmp	r1, #9
  40327c:	d9f5      	bls.n	40326a <_vfiprintf_r+0x68e>
  40327e:	e521      	b.n	402cc4 <_vfiprintf_r+0xe8>
  403280:	f043 0320 	orr.w	r3, r3, #32
  403284:	f898 2000 	ldrb.w	r2, [r8]
  403288:	e51a      	b.n	402cc0 <_vfiprintf_r+0xe4>
  40328a:	9608      	str	r6, [sp, #32]
  40328c:	2800      	cmp	r0, #0
  40328e:	f040 82db 	bne.w	403848 <_vfiprintf_r+0xc6c>
  403292:	2a00      	cmp	r2, #0
  403294:	f000 80e7 	beq.w	403466 <_vfiprintf_r+0x88a>
  403298:	2101      	movs	r1, #1
  40329a:	f88d 2048 	strb.w	r2, [sp, #72]	; 0x48
  40329e:	f04f 0200 	mov.w	r2, #0
  4032a2:	9101      	str	r1, [sp, #4]
  4032a4:	f88d 2037 	strb.w	r2, [sp, #55]	; 0x37
  4032a8:	9105      	str	r1, [sp, #20]
  4032aa:	f10d 0b48 	add.w	fp, sp, #72	; 0x48
  4032ae:	e77b      	b.n	4031a8 <_vfiprintf_r+0x5cc>
  4032b0:	9a07      	ldr	r2, [sp, #28]
  4032b2:	6813      	ldr	r3, [r2, #0]
  4032b4:	3204      	adds	r2, #4
  4032b6:	9207      	str	r2, [sp, #28]
  4032b8:	9a03      	ldr	r2, [sp, #12]
  4032ba:	601a      	str	r2, [r3, #0]
  4032bc:	e4cb      	b.n	402c56 <_vfiprintf_r+0x7a>
  4032be:	aa0f      	add	r2, sp, #60	; 0x3c
  4032c0:	9904      	ldr	r1, [sp, #16]
  4032c2:	4620      	mov	r0, r4
  4032c4:	f7ff fc4a 	bl	402b5c <__sprint_r.part.0>
  4032c8:	2800      	cmp	r0, #0
  4032ca:	f040 8139 	bne.w	403540 <_vfiprintf_r+0x964>
  4032ce:	9910      	ldr	r1, [sp, #64]	; 0x40
  4032d0:	9a11      	ldr	r2, [sp, #68]	; 0x44
  4032d2:	f101 0c01 	add.w	ip, r1, #1
  4032d6:	46ce      	mov	lr, r9
  4032d8:	e5ff      	b.n	402eda <_vfiprintf_r+0x2fe>
  4032da:	9910      	ldr	r1, [sp, #64]	; 0x40
  4032dc:	9a11      	ldr	r2, [sp, #68]	; 0x44
  4032de:	1c48      	adds	r0, r1, #1
  4032e0:	f89d 5037 	ldrb.w	r5, [sp, #55]	; 0x37
  4032e4:	2d00      	cmp	r5, #0
  4032e6:	f43f ae22 	beq.w	402f2e <_vfiprintf_r+0x352>
  4032ea:	3201      	adds	r2, #1
  4032ec:	f10d 0537 	add.w	r5, sp, #55	; 0x37
  4032f0:	2101      	movs	r1, #1
  4032f2:	2807      	cmp	r0, #7
  4032f4:	9211      	str	r2, [sp, #68]	; 0x44
  4032f6:	9010      	str	r0, [sp, #64]	; 0x40
  4032f8:	f8ca 5000 	str.w	r5, [sl]
  4032fc:	f8ca 1004 	str.w	r1, [sl, #4]
  403300:	f340 8108 	ble.w	403514 <_vfiprintf_r+0x938>
  403304:	2a00      	cmp	r2, #0
  403306:	f040 81bc 	bne.w	403682 <_vfiprintf_r+0xaa6>
  40330a:	9b09      	ldr	r3, [sp, #36]	; 0x24
  40330c:	2b00      	cmp	r3, #0
  40330e:	f43f ae1f 	beq.w	402f50 <_vfiprintf_r+0x374>
  403312:	ab0e      	add	r3, sp, #56	; 0x38
  403314:	2202      	movs	r2, #2
  403316:	4608      	mov	r0, r1
  403318:	931c      	str	r3, [sp, #112]	; 0x70
  40331a:	921d      	str	r2, [sp, #116]	; 0x74
  40331c:	46ca      	mov	sl, r9
  40331e:	4601      	mov	r1, r0
  403320:	f10a 0a08 	add.w	sl, sl, #8
  403324:	3001      	adds	r0, #1
  403326:	9b0a      	ldr	r3, [sp, #40]	; 0x28
  403328:	2b80      	cmp	r3, #128	; 0x80
  40332a:	f43f ae19 	beq.w	402f60 <_vfiprintf_r+0x384>
  40332e:	9b05      	ldr	r3, [sp, #20]
  403330:	1ae4      	subs	r4, r4, r3
  403332:	2c00      	cmp	r4, #0
  403334:	dd2e      	ble.n	403394 <_vfiprintf_r+0x7b8>
  403336:	2c10      	cmp	r4, #16
  403338:	4db3      	ldr	r5, [pc, #716]	; (403608 <_vfiprintf_r+0xa2c>)
  40333a:	dd1e      	ble.n	40337a <_vfiprintf_r+0x79e>
  40333c:	46d6      	mov	lr, sl
  40333e:	2610      	movs	r6, #16
  403340:	9f06      	ldr	r7, [sp, #24]
  403342:	f8dd a010 	ldr.w	sl, [sp, #16]
  403346:	e006      	b.n	403356 <_vfiprintf_r+0x77a>
  403348:	1c88      	adds	r0, r1, #2
  40334a:	f10e 0e08 	add.w	lr, lr, #8
  40334e:	4619      	mov	r1, r3
  403350:	3c10      	subs	r4, #16
  403352:	2c10      	cmp	r4, #16
  403354:	dd10      	ble.n	403378 <_vfiprintf_r+0x79c>
  403356:	1c4b      	adds	r3, r1, #1
  403358:	3210      	adds	r2, #16
  40335a:	2b07      	cmp	r3, #7
  40335c:	9211      	str	r2, [sp, #68]	; 0x44
  40335e:	e88e 0060 	stmia.w	lr, {r5, r6}
  403362:	9310      	str	r3, [sp, #64]	; 0x40
  403364:	ddf0      	ble.n	403348 <_vfiprintf_r+0x76c>
  403366:	2a00      	cmp	r2, #0
  403368:	d165      	bne.n	403436 <_vfiprintf_r+0x85a>
  40336a:	3c10      	subs	r4, #16
  40336c:	2c10      	cmp	r4, #16
  40336e:	f04f 0001 	mov.w	r0, #1
  403372:	4611      	mov	r1, r2
  403374:	46ce      	mov	lr, r9
  403376:	dcee      	bgt.n	403356 <_vfiprintf_r+0x77a>
  403378:	46f2      	mov	sl, lr
  40337a:	4422      	add	r2, r4
  40337c:	2807      	cmp	r0, #7
  40337e:	9211      	str	r2, [sp, #68]	; 0x44
  403380:	f8ca 5000 	str.w	r5, [sl]
  403384:	f8ca 4004 	str.w	r4, [sl, #4]
  403388:	9010      	str	r0, [sp, #64]	; 0x40
  40338a:	f300 8085 	bgt.w	403498 <_vfiprintf_r+0x8bc>
  40338e:	f10a 0a08 	add.w	sl, sl, #8
  403392:	3001      	adds	r0, #1
  403394:	9905      	ldr	r1, [sp, #20]
  403396:	f8ca b000 	str.w	fp, [sl]
  40339a:	440a      	add	r2, r1
  40339c:	2807      	cmp	r0, #7
  40339e:	9211      	str	r2, [sp, #68]	; 0x44
  4033a0:	f8ca 1004 	str.w	r1, [sl, #4]
  4033a4:	9010      	str	r0, [sp, #64]	; 0x40
  4033a6:	f340 8082 	ble.w	4034ae <_vfiprintf_r+0x8d2>
  4033aa:	2a00      	cmp	r2, #0
  4033ac:	f040 8118 	bne.w	4035e0 <_vfiprintf_r+0xa04>
  4033b0:	9b02      	ldr	r3, [sp, #8]
  4033b2:	9210      	str	r2, [sp, #64]	; 0x40
  4033b4:	0758      	lsls	r0, r3, #29
  4033b6:	d535      	bpl.n	403424 <_vfiprintf_r+0x848>
  4033b8:	9b08      	ldr	r3, [sp, #32]
  4033ba:	9901      	ldr	r1, [sp, #4]
  4033bc:	1a5c      	subs	r4, r3, r1
  4033be:	2c00      	cmp	r4, #0
  4033c0:	f340 80e7 	ble.w	403592 <_vfiprintf_r+0x9b6>
  4033c4:	46ca      	mov	sl, r9
  4033c6:	2c10      	cmp	r4, #16
  4033c8:	f340 8218 	ble.w	4037fc <_vfiprintf_r+0xc20>
  4033cc:	9910      	ldr	r1, [sp, #64]	; 0x40
  4033ce:	4e8f      	ldr	r6, [pc, #572]	; (40360c <_vfiprintf_r+0xa30>)
  4033d0:	9f06      	ldr	r7, [sp, #24]
  4033d2:	f8dd b010 	ldr.w	fp, [sp, #16]
  4033d6:	2510      	movs	r5, #16
  4033d8:	e006      	b.n	4033e8 <_vfiprintf_r+0x80c>
  4033da:	1c88      	adds	r0, r1, #2
  4033dc:	f10a 0a08 	add.w	sl, sl, #8
  4033e0:	4619      	mov	r1, r3
  4033e2:	3c10      	subs	r4, #16
  4033e4:	2c10      	cmp	r4, #16
  4033e6:	dd11      	ble.n	40340c <_vfiprintf_r+0x830>
  4033e8:	1c4b      	adds	r3, r1, #1
  4033ea:	3210      	adds	r2, #16
  4033ec:	2b07      	cmp	r3, #7
  4033ee:	9211      	str	r2, [sp, #68]	; 0x44
  4033f0:	f8ca 6000 	str.w	r6, [sl]
  4033f4:	f8ca 5004 	str.w	r5, [sl, #4]
  4033f8:	9310      	str	r3, [sp, #64]	; 0x40
  4033fa:	ddee      	ble.n	4033da <_vfiprintf_r+0x7fe>
  4033fc:	bb42      	cbnz	r2, 403450 <_vfiprintf_r+0x874>
  4033fe:	3c10      	subs	r4, #16
  403400:	2c10      	cmp	r4, #16
  403402:	f04f 0001 	mov.w	r0, #1
  403406:	4611      	mov	r1, r2
  403408:	46ca      	mov	sl, r9
  40340a:	dced      	bgt.n	4033e8 <_vfiprintf_r+0x80c>
  40340c:	4422      	add	r2, r4
  40340e:	2807      	cmp	r0, #7
  403410:	9211      	str	r2, [sp, #68]	; 0x44
  403412:	f8ca 6000 	str.w	r6, [sl]
  403416:	f8ca 4004 	str.w	r4, [sl, #4]
  40341a:	9010      	str	r0, [sp, #64]	; 0x40
  40341c:	dd51      	ble.n	4034c2 <_vfiprintf_r+0x8e6>
  40341e:	2a00      	cmp	r2, #0
  403420:	f040 819b 	bne.w	40375a <_vfiprintf_r+0xb7e>
  403424:	9b03      	ldr	r3, [sp, #12]
  403426:	9a08      	ldr	r2, [sp, #32]
  403428:	9901      	ldr	r1, [sp, #4]
  40342a:	428a      	cmp	r2, r1
  40342c:	bfac      	ite	ge
  40342e:	189b      	addge	r3, r3, r2
  403430:	185b      	addlt	r3, r3, r1
  403432:	9303      	str	r3, [sp, #12]
  403434:	e04e      	b.n	4034d4 <_vfiprintf_r+0x8f8>
  403436:	aa0f      	add	r2, sp, #60	; 0x3c
  403438:	4651      	mov	r1, sl
  40343a:	4638      	mov	r0, r7
  40343c:	f7ff fb8e 	bl	402b5c <__sprint_r.part.0>
  403440:	2800      	cmp	r0, #0
  403442:	f040 813f 	bne.w	4036c4 <_vfiprintf_r+0xae8>
  403446:	9910      	ldr	r1, [sp, #64]	; 0x40
  403448:	9a11      	ldr	r2, [sp, #68]	; 0x44
  40344a:	1c48      	adds	r0, r1, #1
  40344c:	46ce      	mov	lr, r9
  40344e:	e77f      	b.n	403350 <_vfiprintf_r+0x774>
  403450:	aa0f      	add	r2, sp, #60	; 0x3c
  403452:	4659      	mov	r1, fp
  403454:	4638      	mov	r0, r7
  403456:	f7ff fb81 	bl	402b5c <__sprint_r.part.0>
  40345a:	b960      	cbnz	r0, 403476 <_vfiprintf_r+0x89a>
  40345c:	9910      	ldr	r1, [sp, #64]	; 0x40
  40345e:	9a11      	ldr	r2, [sp, #68]	; 0x44
  403460:	1c48      	adds	r0, r1, #1
  403462:	46ca      	mov	sl, r9
  403464:	e7bd      	b.n	4033e2 <_vfiprintf_r+0x806>
  403466:	9b11      	ldr	r3, [sp, #68]	; 0x44
  403468:	f8dd b010 	ldr.w	fp, [sp, #16]
  40346c:	2b00      	cmp	r3, #0
  40346e:	f040 81d4 	bne.w	40381a <_vfiprintf_r+0xc3e>
  403472:	2300      	movs	r3, #0
  403474:	9310      	str	r3, [sp, #64]	; 0x40
  403476:	f8db 3064 	ldr.w	r3, [fp, #100]	; 0x64
  40347a:	f013 0f01 	tst.w	r3, #1
  40347e:	f8bb 300c 	ldrh.w	r3, [fp, #12]
  403482:	d102      	bne.n	40348a <_vfiprintf_r+0x8ae>
  403484:	059a      	lsls	r2, r3, #22
  403486:	f140 80de 	bpl.w	403646 <_vfiprintf_r+0xa6a>
  40348a:	065b      	lsls	r3, r3, #25
  40348c:	f53f acb2 	bmi.w	402df4 <_vfiprintf_r+0x218>
  403490:	9803      	ldr	r0, [sp, #12]
  403492:	b02d      	add	sp, #180	; 0xb4
  403494:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  403498:	2a00      	cmp	r2, #0
  40349a:	f040 8106 	bne.w	4036aa <_vfiprintf_r+0xace>
  40349e:	9a05      	ldr	r2, [sp, #20]
  4034a0:	921d      	str	r2, [sp, #116]	; 0x74
  4034a2:	2301      	movs	r3, #1
  4034a4:	9211      	str	r2, [sp, #68]	; 0x44
  4034a6:	f8cd b070 	str.w	fp, [sp, #112]	; 0x70
  4034aa:	9310      	str	r3, [sp, #64]	; 0x40
  4034ac:	46ca      	mov	sl, r9
  4034ae:	f10a 0a08 	add.w	sl, sl, #8
  4034b2:	9b02      	ldr	r3, [sp, #8]
  4034b4:	0759      	lsls	r1, r3, #29
  4034b6:	d504      	bpl.n	4034c2 <_vfiprintf_r+0x8e6>
  4034b8:	9b08      	ldr	r3, [sp, #32]
  4034ba:	9901      	ldr	r1, [sp, #4]
  4034bc:	1a5c      	subs	r4, r3, r1
  4034be:	2c00      	cmp	r4, #0
  4034c0:	dc81      	bgt.n	4033c6 <_vfiprintf_r+0x7ea>
  4034c2:	9b03      	ldr	r3, [sp, #12]
  4034c4:	9908      	ldr	r1, [sp, #32]
  4034c6:	9801      	ldr	r0, [sp, #4]
  4034c8:	4281      	cmp	r1, r0
  4034ca:	bfac      	ite	ge
  4034cc:	185b      	addge	r3, r3, r1
  4034ce:	181b      	addlt	r3, r3, r0
  4034d0:	9303      	str	r3, [sp, #12]
  4034d2:	bb72      	cbnz	r2, 403532 <_vfiprintf_r+0x956>
  4034d4:	2300      	movs	r3, #0
  4034d6:	9310      	str	r3, [sp, #64]	; 0x40
  4034d8:	46ca      	mov	sl, r9
  4034da:	f7ff bbbc 	b.w	402c56 <_vfiprintf_r+0x7a>
  4034de:	aa0f      	add	r2, sp, #60	; 0x3c
  4034e0:	9904      	ldr	r1, [sp, #16]
  4034e2:	4620      	mov	r0, r4
  4034e4:	f7ff fb3a 	bl	402b5c <__sprint_r.part.0>
  4034e8:	bb50      	cbnz	r0, 403540 <_vfiprintf_r+0x964>
  4034ea:	9910      	ldr	r1, [sp, #64]	; 0x40
  4034ec:	9a11      	ldr	r2, [sp, #68]	; 0x44
  4034ee:	f101 0e01 	add.w	lr, r1, #1
  4034f2:	46cc      	mov	ip, r9
  4034f4:	e548      	b.n	402f88 <_vfiprintf_r+0x3ac>
  4034f6:	2a00      	cmp	r2, #0
  4034f8:	f040 8140 	bne.w	40377c <_vfiprintf_r+0xba0>
  4034fc:	f89d 1037 	ldrb.w	r1, [sp, #55]	; 0x37
  403500:	2900      	cmp	r1, #0
  403502:	f000 811b 	beq.w	40373c <_vfiprintf_r+0xb60>
  403506:	2201      	movs	r2, #1
  403508:	f10d 0137 	add.w	r1, sp, #55	; 0x37
  40350c:	4610      	mov	r0, r2
  40350e:	921d      	str	r2, [sp, #116]	; 0x74
  403510:	911c      	str	r1, [sp, #112]	; 0x70
  403512:	46ca      	mov	sl, r9
  403514:	4601      	mov	r1, r0
  403516:	f10a 0a08 	add.w	sl, sl, #8
  40351a:	3001      	adds	r0, #1
  40351c:	e507      	b.n	402f2e <_vfiprintf_r+0x352>
  40351e:	9b02      	ldr	r3, [sp, #8]
  403520:	2a01      	cmp	r2, #1
  403522:	f000 8098 	beq.w	403656 <_vfiprintf_r+0xa7a>
  403526:	2a02      	cmp	r2, #2
  403528:	d10d      	bne.n	403546 <_vfiprintf_r+0x96a>
  40352a:	9302      	str	r3, [sp, #8]
  40352c:	2600      	movs	r6, #0
  40352e:	2700      	movs	r7, #0
  403530:	e5b0      	b.n	403094 <_vfiprintf_r+0x4b8>
  403532:	aa0f      	add	r2, sp, #60	; 0x3c
  403534:	9904      	ldr	r1, [sp, #16]
  403536:	9806      	ldr	r0, [sp, #24]
  403538:	f7ff fb10 	bl	402b5c <__sprint_r.part.0>
  40353c:	2800      	cmp	r0, #0
  40353e:	d0c9      	beq.n	4034d4 <_vfiprintf_r+0x8f8>
  403540:	f8dd b010 	ldr.w	fp, [sp, #16]
  403544:	e797      	b.n	403476 <_vfiprintf_r+0x89a>
  403546:	9302      	str	r3, [sp, #8]
  403548:	2600      	movs	r6, #0
  40354a:	2700      	movs	r7, #0
  40354c:	4649      	mov	r1, r9
  40354e:	e000      	b.n	403552 <_vfiprintf_r+0x976>
  403550:	4659      	mov	r1, fp
  403552:	08f2      	lsrs	r2, r6, #3
  403554:	ea42 7247 	orr.w	r2, r2, r7, lsl #29
  403558:	08f8      	lsrs	r0, r7, #3
  40355a:	f006 0307 	and.w	r3, r6, #7
  40355e:	4607      	mov	r7, r0
  403560:	4616      	mov	r6, r2
  403562:	3330      	adds	r3, #48	; 0x30
  403564:	ea56 0207 	orrs.w	r2, r6, r7
  403568:	f801 3c01 	strb.w	r3, [r1, #-1]
  40356c:	f101 3bff 	add.w	fp, r1, #4294967295
  403570:	d1ee      	bne.n	403550 <_vfiprintf_r+0x974>
  403572:	9a02      	ldr	r2, [sp, #8]
  403574:	07d6      	lsls	r6, r2, #31
  403576:	f57f ad9d 	bpl.w	4030b4 <_vfiprintf_r+0x4d8>
  40357a:	2b30      	cmp	r3, #48	; 0x30
  40357c:	f43f ad9a 	beq.w	4030b4 <_vfiprintf_r+0x4d8>
  403580:	3902      	subs	r1, #2
  403582:	2330      	movs	r3, #48	; 0x30
  403584:	f80b 3c01 	strb.w	r3, [fp, #-1]
  403588:	eba9 0301 	sub.w	r3, r9, r1
  40358c:	9305      	str	r3, [sp, #20]
  40358e:	468b      	mov	fp, r1
  403590:	e476      	b.n	402e80 <_vfiprintf_r+0x2a4>
  403592:	9b03      	ldr	r3, [sp, #12]
  403594:	9a08      	ldr	r2, [sp, #32]
  403596:	428a      	cmp	r2, r1
  403598:	bfac      	ite	ge
  40359a:	189b      	addge	r3, r3, r2
  40359c:	185b      	addlt	r3, r3, r1
  40359e:	9303      	str	r3, [sp, #12]
  4035a0:	e798      	b.n	4034d4 <_vfiprintf_r+0x8f8>
  4035a2:	2202      	movs	r2, #2
  4035a4:	e44d      	b.n	402e42 <_vfiprintf_r+0x266>
  4035a6:	2f00      	cmp	r7, #0
  4035a8:	bf08      	it	eq
  4035aa:	2e0a      	cmpeq	r6, #10
  4035ac:	d352      	bcc.n	403654 <_vfiprintf_r+0xa78>
  4035ae:	46cb      	mov	fp, r9
  4035b0:	4630      	mov	r0, r6
  4035b2:	4639      	mov	r1, r7
  4035b4:	220a      	movs	r2, #10
  4035b6:	2300      	movs	r3, #0
  4035b8:	f001 fe9c 	bl	4052f4 <__aeabi_uldivmod>
  4035bc:	3230      	adds	r2, #48	; 0x30
  4035be:	f80b 2d01 	strb.w	r2, [fp, #-1]!
  4035c2:	4630      	mov	r0, r6
  4035c4:	4639      	mov	r1, r7
  4035c6:	2300      	movs	r3, #0
  4035c8:	220a      	movs	r2, #10
  4035ca:	f001 fe93 	bl	4052f4 <__aeabi_uldivmod>
  4035ce:	4606      	mov	r6, r0
  4035d0:	460f      	mov	r7, r1
  4035d2:	ea56 0307 	orrs.w	r3, r6, r7
  4035d6:	d1eb      	bne.n	4035b0 <_vfiprintf_r+0x9d4>
  4035d8:	e56c      	b.n	4030b4 <_vfiprintf_r+0x4d8>
  4035da:	9405      	str	r4, [sp, #20]
  4035dc:	46cb      	mov	fp, r9
  4035de:	e44f      	b.n	402e80 <_vfiprintf_r+0x2a4>
  4035e0:	aa0f      	add	r2, sp, #60	; 0x3c
  4035e2:	9904      	ldr	r1, [sp, #16]
  4035e4:	9806      	ldr	r0, [sp, #24]
  4035e6:	f7ff fab9 	bl	402b5c <__sprint_r.part.0>
  4035ea:	2800      	cmp	r0, #0
  4035ec:	d1a8      	bne.n	403540 <_vfiprintf_r+0x964>
  4035ee:	9a11      	ldr	r2, [sp, #68]	; 0x44
  4035f0:	46ca      	mov	sl, r9
  4035f2:	e75e      	b.n	4034b2 <_vfiprintf_r+0x8d6>
  4035f4:	aa0f      	add	r2, sp, #60	; 0x3c
  4035f6:	9904      	ldr	r1, [sp, #16]
  4035f8:	9806      	ldr	r0, [sp, #24]
  4035fa:	f7ff faaf 	bl	402b5c <__sprint_r.part.0>
  4035fe:	2800      	cmp	r0, #0
  403600:	d19e      	bne.n	403540 <_vfiprintf_r+0x964>
  403602:	46ca      	mov	sl, r9
  403604:	f7ff bbc0 	b.w	402d88 <_vfiprintf_r+0x1ac>
  403608:	004056b0 	.word	0x004056b0
  40360c:	004056a0 	.word	0x004056a0
  403610:	3104      	adds	r1, #4
  403612:	6816      	ldr	r6, [r2, #0]
  403614:	9107      	str	r1, [sp, #28]
  403616:	2201      	movs	r2, #1
  403618:	2700      	movs	r7, #0
  40361a:	e412      	b.n	402e42 <_vfiprintf_r+0x266>
  40361c:	9807      	ldr	r0, [sp, #28]
  40361e:	4601      	mov	r1, r0
  403620:	3104      	adds	r1, #4
  403622:	6806      	ldr	r6, [r0, #0]
  403624:	9107      	str	r1, [sp, #28]
  403626:	2700      	movs	r7, #0
  403628:	e40b      	b.n	402e42 <_vfiprintf_r+0x266>
  40362a:	680e      	ldr	r6, [r1, #0]
  40362c:	3104      	adds	r1, #4
  40362e:	9107      	str	r1, [sp, #28]
  403630:	2700      	movs	r7, #0
  403632:	e591      	b.n	403158 <_vfiprintf_r+0x57c>
  403634:	9907      	ldr	r1, [sp, #28]
  403636:	680e      	ldr	r6, [r1, #0]
  403638:	460a      	mov	r2, r1
  40363a:	17f7      	asrs	r7, r6, #31
  40363c:	3204      	adds	r2, #4
  40363e:	9207      	str	r2, [sp, #28]
  403640:	4630      	mov	r0, r6
  403642:	4639      	mov	r1, r7
  403644:	e50f      	b.n	403066 <_vfiprintf_r+0x48a>
  403646:	f8db 0058 	ldr.w	r0, [fp, #88]	; 0x58
  40364a:	f000 fe7f 	bl	40434c <__retarget_lock_release_recursive>
  40364e:	f8bb 300c 	ldrh.w	r3, [fp, #12]
  403652:	e71a      	b.n	40348a <_vfiprintf_r+0x8ae>
  403654:	9b02      	ldr	r3, [sp, #8]
  403656:	9302      	str	r3, [sp, #8]
  403658:	f10d 0bb0 	add.w	fp, sp, #176	; 0xb0
  40365c:	3630      	adds	r6, #48	; 0x30
  40365e:	2301      	movs	r3, #1
  403660:	f80b 6d41 	strb.w	r6, [fp, #-65]!
  403664:	9305      	str	r3, [sp, #20]
  403666:	e40b      	b.n	402e80 <_vfiprintf_r+0x2a4>
  403668:	aa0f      	add	r2, sp, #60	; 0x3c
  40366a:	9904      	ldr	r1, [sp, #16]
  40366c:	9806      	ldr	r0, [sp, #24]
  40366e:	f7ff fa75 	bl	402b5c <__sprint_r.part.0>
  403672:	2800      	cmp	r0, #0
  403674:	f47f af64 	bne.w	403540 <_vfiprintf_r+0x964>
  403678:	9910      	ldr	r1, [sp, #64]	; 0x40
  40367a:	9a11      	ldr	r2, [sp, #68]	; 0x44
  40367c:	1c48      	adds	r0, r1, #1
  40367e:	46ca      	mov	sl, r9
  403680:	e651      	b.n	403326 <_vfiprintf_r+0x74a>
  403682:	aa0f      	add	r2, sp, #60	; 0x3c
  403684:	9904      	ldr	r1, [sp, #16]
  403686:	9806      	ldr	r0, [sp, #24]
  403688:	f7ff fa68 	bl	402b5c <__sprint_r.part.0>
  40368c:	2800      	cmp	r0, #0
  40368e:	f47f af57 	bne.w	403540 <_vfiprintf_r+0x964>
  403692:	9910      	ldr	r1, [sp, #64]	; 0x40
  403694:	9a11      	ldr	r2, [sp, #68]	; 0x44
  403696:	1c48      	adds	r0, r1, #1
  403698:	46ca      	mov	sl, r9
  40369a:	e448      	b.n	402f2e <_vfiprintf_r+0x352>
  40369c:	2a00      	cmp	r2, #0
  40369e:	f040 8091 	bne.w	4037c4 <_vfiprintf_r+0xbe8>
  4036a2:	2001      	movs	r0, #1
  4036a4:	4611      	mov	r1, r2
  4036a6:	46ca      	mov	sl, r9
  4036a8:	e641      	b.n	40332e <_vfiprintf_r+0x752>
  4036aa:	aa0f      	add	r2, sp, #60	; 0x3c
  4036ac:	9904      	ldr	r1, [sp, #16]
  4036ae:	9806      	ldr	r0, [sp, #24]
  4036b0:	f7ff fa54 	bl	402b5c <__sprint_r.part.0>
  4036b4:	2800      	cmp	r0, #0
  4036b6:	f47f af43 	bne.w	403540 <_vfiprintf_r+0x964>
  4036ba:	9810      	ldr	r0, [sp, #64]	; 0x40
  4036bc:	9a11      	ldr	r2, [sp, #68]	; 0x44
  4036be:	3001      	adds	r0, #1
  4036c0:	46ca      	mov	sl, r9
  4036c2:	e667      	b.n	403394 <_vfiprintf_r+0x7b8>
  4036c4:	46d3      	mov	fp, sl
  4036c6:	e6d6      	b.n	403476 <_vfiprintf_r+0x89a>
  4036c8:	9e07      	ldr	r6, [sp, #28]
  4036ca:	3607      	adds	r6, #7
  4036cc:	f026 0207 	bic.w	r2, r6, #7
  4036d0:	f102 0108 	add.w	r1, r2, #8
  4036d4:	e9d2 6700 	ldrd	r6, r7, [r2]
  4036d8:	9107      	str	r1, [sp, #28]
  4036da:	2201      	movs	r2, #1
  4036dc:	f7ff bbb1 	b.w	402e42 <_vfiprintf_r+0x266>
  4036e0:	9e07      	ldr	r6, [sp, #28]
  4036e2:	3607      	adds	r6, #7
  4036e4:	f026 0607 	bic.w	r6, r6, #7
  4036e8:	e9d6 0100 	ldrd	r0, r1, [r6]
  4036ec:	f106 0208 	add.w	r2, r6, #8
  4036f0:	9207      	str	r2, [sp, #28]
  4036f2:	4606      	mov	r6, r0
  4036f4:	460f      	mov	r7, r1
  4036f6:	e4b6      	b.n	403066 <_vfiprintf_r+0x48a>
  4036f8:	9e07      	ldr	r6, [sp, #28]
  4036fa:	3607      	adds	r6, #7
  4036fc:	f026 0207 	bic.w	r2, r6, #7
  403700:	f102 0108 	add.w	r1, r2, #8
  403704:	e9d2 6700 	ldrd	r6, r7, [r2]
  403708:	9107      	str	r1, [sp, #28]
  40370a:	2200      	movs	r2, #0
  40370c:	f7ff bb99 	b.w	402e42 <_vfiprintf_r+0x266>
  403710:	9e07      	ldr	r6, [sp, #28]
  403712:	3607      	adds	r6, #7
  403714:	f026 0107 	bic.w	r1, r6, #7
  403718:	f101 0008 	add.w	r0, r1, #8
  40371c:	9007      	str	r0, [sp, #28]
  40371e:	e9d1 6700 	ldrd	r6, r7, [r1]
  403722:	e519      	b.n	403158 <_vfiprintf_r+0x57c>
  403724:	46cb      	mov	fp, r9
  403726:	f7ff bbab 	b.w	402e80 <_vfiprintf_r+0x2a4>
  40372a:	252d      	movs	r5, #45	; 0x2d
  40372c:	4276      	negs	r6, r6
  40372e:	eb67 0747 	sbc.w	r7, r7, r7, lsl #1
  403732:	f88d 5037 	strb.w	r5, [sp, #55]	; 0x37
  403736:	2201      	movs	r2, #1
  403738:	f7ff bb88 	b.w	402e4c <_vfiprintf_r+0x270>
  40373c:	9b09      	ldr	r3, [sp, #36]	; 0x24
  40373e:	b9b3      	cbnz	r3, 40376e <_vfiprintf_r+0xb92>
  403740:	4611      	mov	r1, r2
  403742:	2001      	movs	r0, #1
  403744:	46ca      	mov	sl, r9
  403746:	e5f2      	b.n	40332e <_vfiprintf_r+0x752>
  403748:	f8db 0058 	ldr.w	r0, [fp, #88]	; 0x58
  40374c:	f000 fdfe 	bl	40434c <__retarget_lock_release_recursive>
  403750:	f04f 33ff 	mov.w	r3, #4294967295
  403754:	9303      	str	r3, [sp, #12]
  403756:	f7ff bb50 	b.w	402dfa <_vfiprintf_r+0x21e>
  40375a:	aa0f      	add	r2, sp, #60	; 0x3c
  40375c:	9904      	ldr	r1, [sp, #16]
  40375e:	9806      	ldr	r0, [sp, #24]
  403760:	f7ff f9fc 	bl	402b5c <__sprint_r.part.0>
  403764:	2800      	cmp	r0, #0
  403766:	f47f aeeb 	bne.w	403540 <_vfiprintf_r+0x964>
  40376a:	9a11      	ldr	r2, [sp, #68]	; 0x44
  40376c:	e6a9      	b.n	4034c2 <_vfiprintf_r+0x8e6>
  40376e:	ab0e      	add	r3, sp, #56	; 0x38
  403770:	2202      	movs	r2, #2
  403772:	931c      	str	r3, [sp, #112]	; 0x70
  403774:	921d      	str	r2, [sp, #116]	; 0x74
  403776:	2001      	movs	r0, #1
  403778:	46ca      	mov	sl, r9
  40377a:	e5d0      	b.n	40331e <_vfiprintf_r+0x742>
  40377c:	aa0f      	add	r2, sp, #60	; 0x3c
  40377e:	9904      	ldr	r1, [sp, #16]
  403780:	9806      	ldr	r0, [sp, #24]
  403782:	f7ff f9eb 	bl	402b5c <__sprint_r.part.0>
  403786:	2800      	cmp	r0, #0
  403788:	f47f aeda 	bne.w	403540 <_vfiprintf_r+0x964>
  40378c:	9910      	ldr	r1, [sp, #64]	; 0x40
  40378e:	9a11      	ldr	r2, [sp, #68]	; 0x44
  403790:	1c48      	adds	r0, r1, #1
  403792:	46ca      	mov	sl, r9
  403794:	e5a4      	b.n	4032e0 <_vfiprintf_r+0x704>
  403796:	9a07      	ldr	r2, [sp, #28]
  403798:	9903      	ldr	r1, [sp, #12]
  40379a:	6813      	ldr	r3, [r2, #0]
  40379c:	17cd      	asrs	r5, r1, #31
  40379e:	4608      	mov	r0, r1
  4037a0:	3204      	adds	r2, #4
  4037a2:	4629      	mov	r1, r5
  4037a4:	9207      	str	r2, [sp, #28]
  4037a6:	e9c3 0100 	strd	r0, r1, [r3]
  4037aa:	f7ff ba54 	b.w	402c56 <_vfiprintf_r+0x7a>
  4037ae:	4658      	mov	r0, fp
  4037b0:	9607      	str	r6, [sp, #28]
  4037b2:	9302      	str	r3, [sp, #8]
  4037b4:	f7ff f964 	bl	402a80 <strlen>
  4037b8:	2400      	movs	r4, #0
  4037ba:	9005      	str	r0, [sp, #20]
  4037bc:	f89d 5037 	ldrb.w	r5, [sp, #55]	; 0x37
  4037c0:	f7ff bb5e 	b.w	402e80 <_vfiprintf_r+0x2a4>
  4037c4:	aa0f      	add	r2, sp, #60	; 0x3c
  4037c6:	9904      	ldr	r1, [sp, #16]
  4037c8:	9806      	ldr	r0, [sp, #24]
  4037ca:	f7ff f9c7 	bl	402b5c <__sprint_r.part.0>
  4037ce:	2800      	cmp	r0, #0
  4037d0:	f47f aeb6 	bne.w	403540 <_vfiprintf_r+0x964>
  4037d4:	9910      	ldr	r1, [sp, #64]	; 0x40
  4037d6:	9a11      	ldr	r2, [sp, #68]	; 0x44
  4037d8:	1c48      	adds	r0, r1, #1
  4037da:	46ca      	mov	sl, r9
  4037dc:	e5a7      	b.n	40332e <_vfiprintf_r+0x752>
  4037de:	9910      	ldr	r1, [sp, #64]	; 0x40
  4037e0:	9a11      	ldr	r2, [sp, #68]	; 0x44
  4037e2:	4e20      	ldr	r6, [pc, #128]	; (403864 <_vfiprintf_r+0xc88>)
  4037e4:	3101      	adds	r1, #1
  4037e6:	f7ff bb90 	b.w	402f0a <_vfiprintf_r+0x32e>
  4037ea:	2c06      	cmp	r4, #6
  4037ec:	bf28      	it	cs
  4037ee:	2406      	movcs	r4, #6
  4037f0:	9405      	str	r4, [sp, #20]
  4037f2:	9607      	str	r6, [sp, #28]
  4037f4:	9401      	str	r4, [sp, #4]
  4037f6:	f8df b070 	ldr.w	fp, [pc, #112]	; 403868 <_vfiprintf_r+0xc8c>
  4037fa:	e4d5      	b.n	4031a8 <_vfiprintf_r+0x5cc>
  4037fc:	9810      	ldr	r0, [sp, #64]	; 0x40
  4037fe:	4e19      	ldr	r6, [pc, #100]	; (403864 <_vfiprintf_r+0xc88>)
  403800:	3001      	adds	r0, #1
  403802:	e603      	b.n	40340c <_vfiprintf_r+0x830>
  403804:	9405      	str	r4, [sp, #20]
  403806:	f89d 5037 	ldrb.w	r5, [sp, #55]	; 0x37
  40380a:	9607      	str	r6, [sp, #28]
  40380c:	9302      	str	r3, [sp, #8]
  40380e:	4604      	mov	r4, r0
  403810:	f7ff bb36 	b.w	402e80 <_vfiprintf_r+0x2a4>
  403814:	4686      	mov	lr, r0
  403816:	f7ff bbce 	b.w	402fb6 <_vfiprintf_r+0x3da>
  40381a:	9806      	ldr	r0, [sp, #24]
  40381c:	aa0f      	add	r2, sp, #60	; 0x3c
  40381e:	4659      	mov	r1, fp
  403820:	f7ff f99c 	bl	402b5c <__sprint_r.part.0>
  403824:	2800      	cmp	r0, #0
  403826:	f43f ae24 	beq.w	403472 <_vfiprintf_r+0x896>
  40382a:	e624      	b.n	403476 <_vfiprintf_r+0x89a>
  40382c:	9907      	ldr	r1, [sp, #28]
  40382e:	f898 2001 	ldrb.w	r2, [r8, #1]
  403832:	680c      	ldr	r4, [r1, #0]
  403834:	3104      	adds	r1, #4
  403836:	ea44 74e4 	orr.w	r4, r4, r4, asr #31
  40383a:	46b8      	mov	r8, r7
  40383c:	9107      	str	r1, [sp, #28]
  40383e:	f7ff ba3f 	b.w	402cc0 <_vfiprintf_r+0xe4>
  403842:	f88d 5037 	strb.w	r5, [sp, #55]	; 0x37
  403846:	e43c      	b.n	4030c2 <_vfiprintf_r+0x4e6>
  403848:	f88d 5037 	strb.w	r5, [sp, #55]	; 0x37
  40384c:	e521      	b.n	403292 <_vfiprintf_r+0x6b6>
  40384e:	f88d 5037 	strb.w	r5, [sp, #55]	; 0x37
  403852:	f7ff bbf4 	b.w	40303e <_vfiprintf_r+0x462>
  403856:	f88d 5037 	strb.w	r5, [sp, #55]	; 0x37
  40385a:	e491      	b.n	403180 <_vfiprintf_r+0x5a4>
  40385c:	f88d 5037 	strb.w	r5, [sp, #55]	; 0x37
  403860:	e469      	b.n	403136 <_vfiprintf_r+0x55a>
  403862:	bf00      	nop
  403864:	004056a0 	.word	0x004056a0
  403868:	00405698 	.word	0x00405698

0040386c <__sbprintf>:
  40386c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  403870:	460c      	mov	r4, r1
  403872:	f5ad 6d8d 	sub.w	sp, sp, #1128	; 0x468
  403876:	8989      	ldrh	r1, [r1, #12]
  403878:	6e66      	ldr	r6, [r4, #100]	; 0x64
  40387a:	89e5      	ldrh	r5, [r4, #14]
  40387c:	9619      	str	r6, [sp, #100]	; 0x64
  40387e:	f021 0102 	bic.w	r1, r1, #2
  403882:	4606      	mov	r6, r0
  403884:	69e0      	ldr	r0, [r4, #28]
  403886:	f8ad 100c 	strh.w	r1, [sp, #12]
  40388a:	4617      	mov	r7, r2
  40388c:	f44f 6180 	mov.w	r1, #1024	; 0x400
  403890:	6a62      	ldr	r2, [r4, #36]	; 0x24
  403892:	f8ad 500e 	strh.w	r5, [sp, #14]
  403896:	4698      	mov	r8, r3
  403898:	ad1a      	add	r5, sp, #104	; 0x68
  40389a:	2300      	movs	r3, #0
  40389c:	9007      	str	r0, [sp, #28]
  40389e:	a816      	add	r0, sp, #88	; 0x58
  4038a0:	9209      	str	r2, [sp, #36]	; 0x24
  4038a2:	9306      	str	r3, [sp, #24]
  4038a4:	9500      	str	r5, [sp, #0]
  4038a6:	9504      	str	r5, [sp, #16]
  4038a8:	9102      	str	r1, [sp, #8]
  4038aa:	9105      	str	r1, [sp, #20]
  4038ac:	f000 fd48 	bl	404340 <__retarget_lock_init_recursive>
  4038b0:	4643      	mov	r3, r8
  4038b2:	463a      	mov	r2, r7
  4038b4:	4669      	mov	r1, sp
  4038b6:	4630      	mov	r0, r6
  4038b8:	f7ff f990 	bl	402bdc <_vfiprintf_r>
  4038bc:	1e05      	subs	r5, r0, #0
  4038be:	db07      	blt.n	4038d0 <__sbprintf+0x64>
  4038c0:	4630      	mov	r0, r6
  4038c2:	4669      	mov	r1, sp
  4038c4:	f000 f928 	bl	403b18 <_fflush_r>
  4038c8:	2800      	cmp	r0, #0
  4038ca:	bf18      	it	ne
  4038cc:	f04f 35ff 	movne.w	r5, #4294967295
  4038d0:	f8bd 300c 	ldrh.w	r3, [sp, #12]
  4038d4:	065b      	lsls	r3, r3, #25
  4038d6:	d503      	bpl.n	4038e0 <__sbprintf+0x74>
  4038d8:	89a3      	ldrh	r3, [r4, #12]
  4038da:	f043 0340 	orr.w	r3, r3, #64	; 0x40
  4038de:	81a3      	strh	r3, [r4, #12]
  4038e0:	9816      	ldr	r0, [sp, #88]	; 0x58
  4038e2:	f000 fd2f 	bl	404344 <__retarget_lock_close_recursive>
  4038e6:	4628      	mov	r0, r5
  4038e8:	f50d 6d8d 	add.w	sp, sp, #1128	; 0x468
  4038ec:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

004038f0 <__swsetup_r>:
  4038f0:	b538      	push	{r3, r4, r5, lr}
  4038f2:	4b30      	ldr	r3, [pc, #192]	; (4039b4 <__swsetup_r+0xc4>)
  4038f4:	681b      	ldr	r3, [r3, #0]
  4038f6:	4605      	mov	r5, r0
  4038f8:	460c      	mov	r4, r1
  4038fa:	b113      	cbz	r3, 403902 <__swsetup_r+0x12>
  4038fc:	6b9a      	ldr	r2, [r3, #56]	; 0x38
  4038fe:	2a00      	cmp	r2, #0
  403900:	d038      	beq.n	403974 <__swsetup_r+0x84>
  403902:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
  403906:	b293      	uxth	r3, r2
  403908:	0718      	lsls	r0, r3, #28
  40390a:	d50c      	bpl.n	403926 <__swsetup_r+0x36>
  40390c:	6920      	ldr	r0, [r4, #16]
  40390e:	b1a8      	cbz	r0, 40393c <__swsetup_r+0x4c>
  403910:	f013 0201 	ands.w	r2, r3, #1
  403914:	d01e      	beq.n	403954 <__swsetup_r+0x64>
  403916:	6963      	ldr	r3, [r4, #20]
  403918:	2200      	movs	r2, #0
  40391a:	425b      	negs	r3, r3
  40391c:	61a3      	str	r3, [r4, #24]
  40391e:	60a2      	str	r2, [r4, #8]
  403920:	b1f0      	cbz	r0, 403960 <__swsetup_r+0x70>
  403922:	2000      	movs	r0, #0
  403924:	bd38      	pop	{r3, r4, r5, pc}
  403926:	06d9      	lsls	r1, r3, #27
  403928:	d53c      	bpl.n	4039a4 <__swsetup_r+0xb4>
  40392a:	0758      	lsls	r0, r3, #29
  40392c:	d426      	bmi.n	40397c <__swsetup_r+0x8c>
  40392e:	6920      	ldr	r0, [r4, #16]
  403930:	f042 0308 	orr.w	r3, r2, #8
  403934:	81a3      	strh	r3, [r4, #12]
  403936:	b29b      	uxth	r3, r3
  403938:	2800      	cmp	r0, #0
  40393a:	d1e9      	bne.n	403910 <__swsetup_r+0x20>
  40393c:	f403 7220 	and.w	r2, r3, #640	; 0x280
  403940:	f5b2 7f00 	cmp.w	r2, #512	; 0x200
  403944:	d0e4      	beq.n	403910 <__swsetup_r+0x20>
  403946:	4628      	mov	r0, r5
  403948:	4621      	mov	r1, r4
  40394a:	f000 fd2f 	bl	4043ac <__smakebuf_r>
  40394e:	89a3      	ldrh	r3, [r4, #12]
  403950:	6920      	ldr	r0, [r4, #16]
  403952:	e7dd      	b.n	403910 <__swsetup_r+0x20>
  403954:	0799      	lsls	r1, r3, #30
  403956:	bf58      	it	pl
  403958:	6962      	ldrpl	r2, [r4, #20]
  40395a:	60a2      	str	r2, [r4, #8]
  40395c:	2800      	cmp	r0, #0
  40395e:	d1e0      	bne.n	403922 <__swsetup_r+0x32>
  403960:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
  403964:	061a      	lsls	r2, r3, #24
  403966:	d5dd      	bpl.n	403924 <__swsetup_r+0x34>
  403968:	f043 0340 	orr.w	r3, r3, #64	; 0x40
  40396c:	81a3      	strh	r3, [r4, #12]
  40396e:	f04f 30ff 	mov.w	r0, #4294967295
  403972:	bd38      	pop	{r3, r4, r5, pc}
  403974:	4618      	mov	r0, r3
  403976:	f000 f927 	bl	403bc8 <__sinit>
  40397a:	e7c2      	b.n	403902 <__swsetup_r+0x12>
  40397c:	6b21      	ldr	r1, [r4, #48]	; 0x30
  40397e:	b151      	cbz	r1, 403996 <__swsetup_r+0xa6>
  403980:	f104 0340 	add.w	r3, r4, #64	; 0x40
  403984:	4299      	cmp	r1, r3
  403986:	d004      	beq.n	403992 <__swsetup_r+0xa2>
  403988:	4628      	mov	r0, r5
  40398a:	f000 fa43 	bl	403e14 <_free_r>
  40398e:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
  403992:	2300      	movs	r3, #0
  403994:	6323      	str	r3, [r4, #48]	; 0x30
  403996:	2300      	movs	r3, #0
  403998:	6920      	ldr	r0, [r4, #16]
  40399a:	6063      	str	r3, [r4, #4]
  40399c:	f022 0224 	bic.w	r2, r2, #36	; 0x24
  4039a0:	6020      	str	r0, [r4, #0]
  4039a2:	e7c5      	b.n	403930 <__swsetup_r+0x40>
  4039a4:	f042 0240 	orr.w	r2, r2, #64	; 0x40
  4039a8:	2309      	movs	r3, #9
  4039aa:	602b      	str	r3, [r5, #0]
  4039ac:	f04f 30ff 	mov.w	r0, #4294967295
  4039b0:	81a2      	strh	r2, [r4, #12]
  4039b2:	bd38      	pop	{r3, r4, r5, pc}
  4039b4:	2040000c 	.word	0x2040000c

004039b8 <register_fini>:
  4039b8:	4b02      	ldr	r3, [pc, #8]	; (4039c4 <register_fini+0xc>)
  4039ba:	b113      	cbz	r3, 4039c2 <register_fini+0xa>
  4039bc:	4802      	ldr	r0, [pc, #8]	; (4039c8 <register_fini+0x10>)
  4039be:	f000 b805 	b.w	4039cc <atexit>
  4039c2:	4770      	bx	lr
  4039c4:	00000000 	.word	0x00000000
  4039c8:	00403c39 	.word	0x00403c39

004039cc <atexit>:
  4039cc:	2300      	movs	r3, #0
  4039ce:	4601      	mov	r1, r0
  4039d0:	461a      	mov	r2, r3
  4039d2:	4618      	mov	r0, r3
  4039d4:	f001 bb66 	b.w	4050a4 <__register_exitproc>

004039d8 <__sflush_r>:
  4039d8:	f9b1 300c 	ldrsh.w	r3, [r1, #12]
  4039dc:	b29a      	uxth	r2, r3
  4039de:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  4039e2:	460d      	mov	r5, r1
  4039e4:	0711      	lsls	r1, r2, #28
  4039e6:	4680      	mov	r8, r0
  4039e8:	d43a      	bmi.n	403a60 <__sflush_r+0x88>
  4039ea:	686a      	ldr	r2, [r5, #4]
  4039ec:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
  4039f0:	2a00      	cmp	r2, #0
  4039f2:	81ab      	strh	r3, [r5, #12]
  4039f4:	dd6f      	ble.n	403ad6 <__sflush_r+0xfe>
  4039f6:	6aac      	ldr	r4, [r5, #40]	; 0x28
  4039f8:	2c00      	cmp	r4, #0
  4039fa:	d049      	beq.n	403a90 <__sflush_r+0xb8>
  4039fc:	2200      	movs	r2, #0
  4039fe:	b29b      	uxth	r3, r3
  403a00:	f8d8 6000 	ldr.w	r6, [r8]
  403a04:	f8c8 2000 	str.w	r2, [r8]
  403a08:	f413 5280 	ands.w	r2, r3, #4096	; 0x1000
  403a0c:	d067      	beq.n	403ade <__sflush_r+0x106>
  403a0e:	6d2a      	ldr	r2, [r5, #80]	; 0x50
  403a10:	075f      	lsls	r7, r3, #29
  403a12:	d505      	bpl.n	403a20 <__sflush_r+0x48>
  403a14:	6869      	ldr	r1, [r5, #4]
  403a16:	6b2b      	ldr	r3, [r5, #48]	; 0x30
  403a18:	1a52      	subs	r2, r2, r1
  403a1a:	b10b      	cbz	r3, 403a20 <__sflush_r+0x48>
  403a1c:	6beb      	ldr	r3, [r5, #60]	; 0x3c
  403a1e:	1ad2      	subs	r2, r2, r3
  403a20:	2300      	movs	r3, #0
  403a22:	69e9      	ldr	r1, [r5, #28]
  403a24:	4640      	mov	r0, r8
  403a26:	47a0      	blx	r4
  403a28:	1c44      	adds	r4, r0, #1
  403a2a:	d03c      	beq.n	403aa6 <__sflush_r+0xce>
  403a2c:	f9b5 300c 	ldrsh.w	r3, [r5, #12]
  403a30:	692a      	ldr	r2, [r5, #16]
  403a32:	602a      	str	r2, [r5, #0]
  403a34:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
  403a38:	2200      	movs	r2, #0
  403a3a:	81ab      	strh	r3, [r5, #12]
  403a3c:	04db      	lsls	r3, r3, #19
  403a3e:	606a      	str	r2, [r5, #4]
  403a40:	d447      	bmi.n	403ad2 <__sflush_r+0xfa>
  403a42:	6b29      	ldr	r1, [r5, #48]	; 0x30
  403a44:	f8c8 6000 	str.w	r6, [r8]
  403a48:	b311      	cbz	r1, 403a90 <__sflush_r+0xb8>
  403a4a:	f105 0340 	add.w	r3, r5, #64	; 0x40
  403a4e:	4299      	cmp	r1, r3
  403a50:	d002      	beq.n	403a58 <__sflush_r+0x80>
  403a52:	4640      	mov	r0, r8
  403a54:	f000 f9de 	bl	403e14 <_free_r>
  403a58:	2000      	movs	r0, #0
  403a5a:	6328      	str	r0, [r5, #48]	; 0x30
  403a5c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  403a60:	692e      	ldr	r6, [r5, #16]
  403a62:	b1ae      	cbz	r6, 403a90 <__sflush_r+0xb8>
  403a64:	682c      	ldr	r4, [r5, #0]
  403a66:	602e      	str	r6, [r5, #0]
  403a68:	0791      	lsls	r1, r2, #30
  403a6a:	bf0c      	ite	eq
  403a6c:	696b      	ldreq	r3, [r5, #20]
  403a6e:	2300      	movne	r3, #0
  403a70:	1ba4      	subs	r4, r4, r6
  403a72:	60ab      	str	r3, [r5, #8]
  403a74:	e00a      	b.n	403a8c <__sflush_r+0xb4>
  403a76:	4623      	mov	r3, r4
  403a78:	4632      	mov	r2, r6
  403a7a:	6a6f      	ldr	r7, [r5, #36]	; 0x24
  403a7c:	69e9      	ldr	r1, [r5, #28]
  403a7e:	4640      	mov	r0, r8
  403a80:	47b8      	blx	r7
  403a82:	2800      	cmp	r0, #0
  403a84:	eba4 0400 	sub.w	r4, r4, r0
  403a88:	4406      	add	r6, r0
  403a8a:	dd04      	ble.n	403a96 <__sflush_r+0xbe>
  403a8c:	2c00      	cmp	r4, #0
  403a8e:	dcf2      	bgt.n	403a76 <__sflush_r+0x9e>
  403a90:	2000      	movs	r0, #0
  403a92:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  403a96:	89ab      	ldrh	r3, [r5, #12]
  403a98:	f043 0340 	orr.w	r3, r3, #64	; 0x40
  403a9c:	81ab      	strh	r3, [r5, #12]
  403a9e:	f04f 30ff 	mov.w	r0, #4294967295
  403aa2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  403aa6:	f8d8 4000 	ldr.w	r4, [r8]
  403aaa:	2c1d      	cmp	r4, #29
  403aac:	d8f3      	bhi.n	403a96 <__sflush_r+0xbe>
  403aae:	4b19      	ldr	r3, [pc, #100]	; (403b14 <__sflush_r+0x13c>)
  403ab0:	40e3      	lsrs	r3, r4
  403ab2:	43db      	mvns	r3, r3
  403ab4:	f013 0301 	ands.w	r3, r3, #1
  403ab8:	d1ed      	bne.n	403a96 <__sflush_r+0xbe>
  403aba:	f9b5 200c 	ldrsh.w	r2, [r5, #12]
  403abe:	606b      	str	r3, [r5, #4]
  403ac0:	f422 6300 	bic.w	r3, r2, #2048	; 0x800
  403ac4:	6929      	ldr	r1, [r5, #16]
  403ac6:	81ab      	strh	r3, [r5, #12]
  403ac8:	04da      	lsls	r2, r3, #19
  403aca:	6029      	str	r1, [r5, #0]
  403acc:	d5b9      	bpl.n	403a42 <__sflush_r+0x6a>
  403ace:	2c00      	cmp	r4, #0
  403ad0:	d1b7      	bne.n	403a42 <__sflush_r+0x6a>
  403ad2:	6528      	str	r0, [r5, #80]	; 0x50
  403ad4:	e7b5      	b.n	403a42 <__sflush_r+0x6a>
  403ad6:	6bea      	ldr	r2, [r5, #60]	; 0x3c
  403ad8:	2a00      	cmp	r2, #0
  403ada:	dc8c      	bgt.n	4039f6 <__sflush_r+0x1e>
  403adc:	e7d8      	b.n	403a90 <__sflush_r+0xb8>
  403ade:	2301      	movs	r3, #1
  403ae0:	69e9      	ldr	r1, [r5, #28]
  403ae2:	4640      	mov	r0, r8
  403ae4:	47a0      	blx	r4
  403ae6:	1c43      	adds	r3, r0, #1
  403ae8:	4602      	mov	r2, r0
  403aea:	d002      	beq.n	403af2 <__sflush_r+0x11a>
  403aec:	89ab      	ldrh	r3, [r5, #12]
  403aee:	6aac      	ldr	r4, [r5, #40]	; 0x28
  403af0:	e78e      	b.n	403a10 <__sflush_r+0x38>
  403af2:	f8d8 3000 	ldr.w	r3, [r8]
  403af6:	2b00      	cmp	r3, #0
  403af8:	d0f8      	beq.n	403aec <__sflush_r+0x114>
  403afa:	2b1d      	cmp	r3, #29
  403afc:	d001      	beq.n	403b02 <__sflush_r+0x12a>
  403afe:	2b16      	cmp	r3, #22
  403b00:	d102      	bne.n	403b08 <__sflush_r+0x130>
  403b02:	f8c8 6000 	str.w	r6, [r8]
  403b06:	e7c3      	b.n	403a90 <__sflush_r+0xb8>
  403b08:	89ab      	ldrh	r3, [r5, #12]
  403b0a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
  403b0e:	81ab      	strh	r3, [r5, #12]
  403b10:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  403b14:	20400001 	.word	0x20400001

00403b18 <_fflush_r>:
  403b18:	b538      	push	{r3, r4, r5, lr}
  403b1a:	460d      	mov	r5, r1
  403b1c:	4604      	mov	r4, r0
  403b1e:	b108      	cbz	r0, 403b24 <_fflush_r+0xc>
  403b20:	6b83      	ldr	r3, [r0, #56]	; 0x38
  403b22:	b1bb      	cbz	r3, 403b54 <_fflush_r+0x3c>
  403b24:	f9b5 000c 	ldrsh.w	r0, [r5, #12]
  403b28:	b188      	cbz	r0, 403b4e <_fflush_r+0x36>
  403b2a:	6e6b      	ldr	r3, [r5, #100]	; 0x64
  403b2c:	07db      	lsls	r3, r3, #31
  403b2e:	d401      	bmi.n	403b34 <_fflush_r+0x1c>
  403b30:	0581      	lsls	r1, r0, #22
  403b32:	d517      	bpl.n	403b64 <_fflush_r+0x4c>
  403b34:	4620      	mov	r0, r4
  403b36:	4629      	mov	r1, r5
  403b38:	f7ff ff4e 	bl	4039d8 <__sflush_r>
  403b3c:	6e6b      	ldr	r3, [r5, #100]	; 0x64
  403b3e:	07da      	lsls	r2, r3, #31
  403b40:	4604      	mov	r4, r0
  403b42:	d402      	bmi.n	403b4a <_fflush_r+0x32>
  403b44:	89ab      	ldrh	r3, [r5, #12]
  403b46:	059b      	lsls	r3, r3, #22
  403b48:	d507      	bpl.n	403b5a <_fflush_r+0x42>
  403b4a:	4620      	mov	r0, r4
  403b4c:	bd38      	pop	{r3, r4, r5, pc}
  403b4e:	4604      	mov	r4, r0
  403b50:	4620      	mov	r0, r4
  403b52:	bd38      	pop	{r3, r4, r5, pc}
  403b54:	f000 f838 	bl	403bc8 <__sinit>
  403b58:	e7e4      	b.n	403b24 <_fflush_r+0xc>
  403b5a:	6da8      	ldr	r0, [r5, #88]	; 0x58
  403b5c:	f000 fbf6 	bl	40434c <__retarget_lock_release_recursive>
  403b60:	4620      	mov	r0, r4
  403b62:	bd38      	pop	{r3, r4, r5, pc}
  403b64:	6da8      	ldr	r0, [r5, #88]	; 0x58
  403b66:	f000 fbef 	bl	404348 <__retarget_lock_acquire_recursive>
  403b6a:	e7e3      	b.n	403b34 <_fflush_r+0x1c>

00403b6c <_cleanup_r>:
  403b6c:	4901      	ldr	r1, [pc, #4]	; (403b74 <_cleanup_r+0x8>)
  403b6e:	f000 bbaf 	b.w	4042d0 <_fwalk_reent>
  403b72:	bf00      	nop
  403b74:	0040518d 	.word	0x0040518d

00403b78 <std.isra.0>:
  403b78:	b510      	push	{r4, lr}
  403b7a:	2300      	movs	r3, #0
  403b7c:	4604      	mov	r4, r0
  403b7e:	8181      	strh	r1, [r0, #12]
  403b80:	81c2      	strh	r2, [r0, #14]
  403b82:	6003      	str	r3, [r0, #0]
  403b84:	6043      	str	r3, [r0, #4]
  403b86:	6083      	str	r3, [r0, #8]
  403b88:	6643      	str	r3, [r0, #100]	; 0x64
  403b8a:	6103      	str	r3, [r0, #16]
  403b8c:	6143      	str	r3, [r0, #20]
  403b8e:	6183      	str	r3, [r0, #24]
  403b90:	4619      	mov	r1, r3
  403b92:	2208      	movs	r2, #8
  403b94:	305c      	adds	r0, #92	; 0x5c
  403b96:	f7fe fe4f 	bl	402838 <memset>
  403b9a:	4807      	ldr	r0, [pc, #28]	; (403bb8 <std.isra.0+0x40>)
  403b9c:	4907      	ldr	r1, [pc, #28]	; (403bbc <std.isra.0+0x44>)
  403b9e:	4a08      	ldr	r2, [pc, #32]	; (403bc0 <std.isra.0+0x48>)
  403ba0:	4b08      	ldr	r3, [pc, #32]	; (403bc4 <std.isra.0+0x4c>)
  403ba2:	6220      	str	r0, [r4, #32]
  403ba4:	61e4      	str	r4, [r4, #28]
  403ba6:	6261      	str	r1, [r4, #36]	; 0x24
  403ba8:	62a2      	str	r2, [r4, #40]	; 0x28
  403baa:	62e3      	str	r3, [r4, #44]	; 0x2c
  403bac:	f104 0058 	add.w	r0, r4, #88	; 0x58
  403bb0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  403bb4:	f000 bbc4 	b.w	404340 <__retarget_lock_init_recursive>
  403bb8:	00404ed1 	.word	0x00404ed1
  403bbc:	00404ef5 	.word	0x00404ef5
  403bc0:	00404f31 	.word	0x00404f31
  403bc4:	00404f51 	.word	0x00404f51

00403bc8 <__sinit>:
  403bc8:	b510      	push	{r4, lr}
  403bca:	4604      	mov	r4, r0
  403bcc:	4812      	ldr	r0, [pc, #72]	; (403c18 <__sinit+0x50>)
  403bce:	f000 fbbb 	bl	404348 <__retarget_lock_acquire_recursive>
  403bd2:	6ba2      	ldr	r2, [r4, #56]	; 0x38
  403bd4:	b9d2      	cbnz	r2, 403c0c <__sinit+0x44>
  403bd6:	f504 733b 	add.w	r3, r4, #748	; 0x2ec
  403bda:	4810      	ldr	r0, [pc, #64]	; (403c1c <__sinit+0x54>)
  403bdc:	f8c4 32e8 	str.w	r3, [r4, #744]	; 0x2e8
  403be0:	2103      	movs	r1, #3
  403be2:	f8c4 22e0 	str.w	r2, [r4, #736]	; 0x2e0
  403be6:	63e0      	str	r0, [r4, #60]	; 0x3c
  403be8:	f8c4 12e4 	str.w	r1, [r4, #740]	; 0x2e4
  403bec:	6860      	ldr	r0, [r4, #4]
  403bee:	2104      	movs	r1, #4
  403bf0:	f7ff ffc2 	bl	403b78 <std.isra.0>
  403bf4:	2201      	movs	r2, #1
  403bf6:	2109      	movs	r1, #9
  403bf8:	68a0      	ldr	r0, [r4, #8]
  403bfa:	f7ff ffbd 	bl	403b78 <std.isra.0>
  403bfe:	2202      	movs	r2, #2
  403c00:	2112      	movs	r1, #18
  403c02:	68e0      	ldr	r0, [r4, #12]
  403c04:	f7ff ffb8 	bl	403b78 <std.isra.0>
  403c08:	2301      	movs	r3, #1
  403c0a:	63a3      	str	r3, [r4, #56]	; 0x38
  403c0c:	4802      	ldr	r0, [pc, #8]	; (403c18 <__sinit+0x50>)
  403c0e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  403c12:	f000 bb9b 	b.w	40434c <__retarget_lock_release_recursive>
  403c16:	bf00      	nop
  403c18:	2040c418 	.word	0x2040c418
  403c1c:	00403b6d 	.word	0x00403b6d

00403c20 <__sfp_lock_acquire>:
  403c20:	4801      	ldr	r0, [pc, #4]	; (403c28 <__sfp_lock_acquire+0x8>)
  403c22:	f000 bb91 	b.w	404348 <__retarget_lock_acquire_recursive>
  403c26:	bf00      	nop
  403c28:	2040c42c 	.word	0x2040c42c

00403c2c <__sfp_lock_release>:
  403c2c:	4801      	ldr	r0, [pc, #4]	; (403c34 <__sfp_lock_release+0x8>)
  403c2e:	f000 bb8d 	b.w	40434c <__retarget_lock_release_recursive>
  403c32:	bf00      	nop
  403c34:	2040c42c 	.word	0x2040c42c

00403c38 <__libc_fini_array>:
  403c38:	b538      	push	{r3, r4, r5, lr}
  403c3a:	4c0a      	ldr	r4, [pc, #40]	; (403c64 <__libc_fini_array+0x2c>)
  403c3c:	4d0a      	ldr	r5, [pc, #40]	; (403c68 <__libc_fini_array+0x30>)
  403c3e:	1b64      	subs	r4, r4, r5
  403c40:	10a4      	asrs	r4, r4, #2
  403c42:	d00a      	beq.n	403c5a <__libc_fini_array+0x22>
  403c44:	f104 4380 	add.w	r3, r4, #1073741824	; 0x40000000
  403c48:	3b01      	subs	r3, #1
  403c4a:	eb05 0583 	add.w	r5, r5, r3, lsl #2
  403c4e:	3c01      	subs	r4, #1
  403c50:	f855 3904 	ldr.w	r3, [r5], #-4
  403c54:	4798      	blx	r3
  403c56:	2c00      	cmp	r4, #0
  403c58:	d1f9      	bne.n	403c4e <__libc_fini_array+0x16>
  403c5a:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
  403c5e:	f001 bdc3 	b.w	4057e8 <_fini>
  403c62:	bf00      	nop
  403c64:	004057f8 	.word	0x004057f8
  403c68:	004057f4 	.word	0x004057f4

00403c6c <__fputwc>:
  403c6c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
  403c70:	b082      	sub	sp, #8
  403c72:	4680      	mov	r8, r0
  403c74:	4689      	mov	r9, r1
  403c76:	4614      	mov	r4, r2
  403c78:	f000 fb54 	bl	404324 <__locale_mb_cur_max>
  403c7c:	2801      	cmp	r0, #1
  403c7e:	d036      	beq.n	403cee <__fputwc+0x82>
  403c80:	464a      	mov	r2, r9
  403c82:	f104 035c 	add.w	r3, r4, #92	; 0x5c
  403c86:	a901      	add	r1, sp, #4
  403c88:	4640      	mov	r0, r8
  403c8a:	f001 f9bd 	bl	405008 <_wcrtomb_r>
  403c8e:	1c42      	adds	r2, r0, #1
  403c90:	4606      	mov	r6, r0
  403c92:	d025      	beq.n	403ce0 <__fputwc+0x74>
  403c94:	b3a8      	cbz	r0, 403d02 <__fputwc+0x96>
  403c96:	f89d e004 	ldrb.w	lr, [sp, #4]
  403c9a:	2500      	movs	r5, #0
  403c9c:	f10d 0a04 	add.w	sl, sp, #4
  403ca0:	e009      	b.n	403cb6 <__fputwc+0x4a>
  403ca2:	6823      	ldr	r3, [r4, #0]
  403ca4:	1c5a      	adds	r2, r3, #1
  403ca6:	6022      	str	r2, [r4, #0]
  403ca8:	f883 e000 	strb.w	lr, [r3]
  403cac:	3501      	adds	r5, #1
  403cae:	42b5      	cmp	r5, r6
  403cb0:	d227      	bcs.n	403d02 <__fputwc+0x96>
  403cb2:	f815 e00a 	ldrb.w	lr, [r5, sl]
  403cb6:	68a3      	ldr	r3, [r4, #8]
  403cb8:	3b01      	subs	r3, #1
  403cba:	2b00      	cmp	r3, #0
  403cbc:	60a3      	str	r3, [r4, #8]
  403cbe:	daf0      	bge.n	403ca2 <__fputwc+0x36>
  403cc0:	69a7      	ldr	r7, [r4, #24]
  403cc2:	42bb      	cmp	r3, r7
  403cc4:	4671      	mov	r1, lr
  403cc6:	4622      	mov	r2, r4
  403cc8:	4640      	mov	r0, r8
  403cca:	db02      	blt.n	403cd2 <__fputwc+0x66>
  403ccc:	f1be 0f0a 	cmp.w	lr, #10
  403cd0:	d1e7      	bne.n	403ca2 <__fputwc+0x36>
  403cd2:	f001 f941 	bl	404f58 <__swbuf_r>
  403cd6:	1c43      	adds	r3, r0, #1
  403cd8:	d1e8      	bne.n	403cac <__fputwc+0x40>
  403cda:	b002      	add	sp, #8
  403cdc:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
  403ce0:	89a3      	ldrh	r3, [r4, #12]
  403ce2:	f043 0340 	orr.w	r3, r3, #64	; 0x40
  403ce6:	81a3      	strh	r3, [r4, #12]
  403ce8:	b002      	add	sp, #8
  403cea:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
  403cee:	f109 33ff 	add.w	r3, r9, #4294967295
  403cf2:	2bfe      	cmp	r3, #254	; 0xfe
  403cf4:	d8c4      	bhi.n	403c80 <__fputwc+0x14>
  403cf6:	fa5f fe89 	uxtb.w	lr, r9
  403cfa:	4606      	mov	r6, r0
  403cfc:	f88d e004 	strb.w	lr, [sp, #4]
  403d00:	e7cb      	b.n	403c9a <__fputwc+0x2e>
  403d02:	4648      	mov	r0, r9
  403d04:	b002      	add	sp, #8
  403d06:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
  403d0a:	bf00      	nop

00403d0c <_fputwc_r>:
  403d0c:	b530      	push	{r4, r5, lr}
  403d0e:	6e53      	ldr	r3, [r2, #100]	; 0x64
  403d10:	f013 0f01 	tst.w	r3, #1
  403d14:	f9b2 300c 	ldrsh.w	r3, [r2, #12]
  403d18:	4614      	mov	r4, r2
  403d1a:	b083      	sub	sp, #12
  403d1c:	4605      	mov	r5, r0
  403d1e:	b29a      	uxth	r2, r3
  403d20:	d101      	bne.n	403d26 <_fputwc_r+0x1a>
  403d22:	0590      	lsls	r0, r2, #22
  403d24:	d51c      	bpl.n	403d60 <_fputwc_r+0x54>
  403d26:	0490      	lsls	r0, r2, #18
  403d28:	d406      	bmi.n	403d38 <_fputwc_r+0x2c>
  403d2a:	6e62      	ldr	r2, [r4, #100]	; 0x64
  403d2c:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
  403d30:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
  403d34:	81a3      	strh	r3, [r4, #12]
  403d36:	6662      	str	r2, [r4, #100]	; 0x64
  403d38:	4628      	mov	r0, r5
  403d3a:	4622      	mov	r2, r4
  403d3c:	f7ff ff96 	bl	403c6c <__fputwc>
  403d40:	6e63      	ldr	r3, [r4, #100]	; 0x64
  403d42:	07da      	lsls	r2, r3, #31
  403d44:	4605      	mov	r5, r0
  403d46:	d402      	bmi.n	403d4e <_fputwc_r+0x42>
  403d48:	89a3      	ldrh	r3, [r4, #12]
  403d4a:	059b      	lsls	r3, r3, #22
  403d4c:	d502      	bpl.n	403d54 <_fputwc_r+0x48>
  403d4e:	4628      	mov	r0, r5
  403d50:	b003      	add	sp, #12
  403d52:	bd30      	pop	{r4, r5, pc}
  403d54:	6da0      	ldr	r0, [r4, #88]	; 0x58
  403d56:	f000 faf9 	bl	40434c <__retarget_lock_release_recursive>
  403d5a:	4628      	mov	r0, r5
  403d5c:	b003      	add	sp, #12
  403d5e:	bd30      	pop	{r4, r5, pc}
  403d60:	6da0      	ldr	r0, [r4, #88]	; 0x58
  403d62:	9101      	str	r1, [sp, #4]
  403d64:	f000 faf0 	bl	404348 <__retarget_lock_acquire_recursive>
  403d68:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
  403d6c:	9901      	ldr	r1, [sp, #4]
  403d6e:	b29a      	uxth	r2, r3
  403d70:	e7d9      	b.n	403d26 <_fputwc_r+0x1a>
  403d72:	bf00      	nop

00403d74 <_malloc_trim_r>:
  403d74:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  403d76:	4f24      	ldr	r7, [pc, #144]	; (403e08 <_malloc_trim_r+0x94>)
  403d78:	460c      	mov	r4, r1
  403d7a:	4606      	mov	r6, r0
  403d7c:	f000 fee4 	bl	404b48 <__malloc_lock>
  403d80:	68bb      	ldr	r3, [r7, #8]
  403d82:	685d      	ldr	r5, [r3, #4]
  403d84:	f5c4 617e 	rsb	r1, r4, #4064	; 0xfe0
  403d88:	310f      	adds	r1, #15
  403d8a:	f025 0503 	bic.w	r5, r5, #3
  403d8e:	4429      	add	r1, r5
  403d90:	f421 617f 	bic.w	r1, r1, #4080	; 0xff0
  403d94:	f021 010f 	bic.w	r1, r1, #15
  403d98:	f5a1 5480 	sub.w	r4, r1, #4096	; 0x1000
  403d9c:	f5b4 5f80 	cmp.w	r4, #4096	; 0x1000
  403da0:	db07      	blt.n	403db2 <_malloc_trim_r+0x3e>
  403da2:	2100      	movs	r1, #0
  403da4:	4630      	mov	r0, r6
  403da6:	f001 f881 	bl	404eac <_sbrk_r>
  403daa:	68bb      	ldr	r3, [r7, #8]
  403dac:	442b      	add	r3, r5
  403dae:	4298      	cmp	r0, r3
  403db0:	d004      	beq.n	403dbc <_malloc_trim_r+0x48>
  403db2:	4630      	mov	r0, r6
  403db4:	f000 fece 	bl	404b54 <__malloc_unlock>
  403db8:	2000      	movs	r0, #0
  403dba:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  403dbc:	4261      	negs	r1, r4
  403dbe:	4630      	mov	r0, r6
  403dc0:	f001 f874 	bl	404eac <_sbrk_r>
  403dc4:	3001      	adds	r0, #1
  403dc6:	d00d      	beq.n	403de4 <_malloc_trim_r+0x70>
  403dc8:	4b10      	ldr	r3, [pc, #64]	; (403e0c <_malloc_trim_r+0x98>)
  403dca:	68ba      	ldr	r2, [r7, #8]
  403dcc:	6819      	ldr	r1, [r3, #0]
  403dce:	1b2d      	subs	r5, r5, r4
  403dd0:	f045 0501 	orr.w	r5, r5, #1
  403dd4:	4630      	mov	r0, r6
  403dd6:	1b09      	subs	r1, r1, r4
  403dd8:	6055      	str	r5, [r2, #4]
  403dda:	6019      	str	r1, [r3, #0]
  403ddc:	f000 feba 	bl	404b54 <__malloc_unlock>
  403de0:	2001      	movs	r0, #1
  403de2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  403de4:	2100      	movs	r1, #0
  403de6:	4630      	mov	r0, r6
  403de8:	f001 f860 	bl	404eac <_sbrk_r>
  403dec:	68ba      	ldr	r2, [r7, #8]
  403dee:	1a83      	subs	r3, r0, r2
  403df0:	2b0f      	cmp	r3, #15
  403df2:	ddde      	ble.n	403db2 <_malloc_trim_r+0x3e>
  403df4:	4c06      	ldr	r4, [pc, #24]	; (403e10 <_malloc_trim_r+0x9c>)
  403df6:	4905      	ldr	r1, [pc, #20]	; (403e0c <_malloc_trim_r+0x98>)
  403df8:	6824      	ldr	r4, [r4, #0]
  403dfa:	f043 0301 	orr.w	r3, r3, #1
  403dfe:	1b00      	subs	r0, r0, r4
  403e00:	6053      	str	r3, [r2, #4]
  403e02:	6008      	str	r0, [r1, #0]
  403e04:	e7d5      	b.n	403db2 <_malloc_trim_r+0x3e>
  403e06:	bf00      	nop
  403e08:	204005a8 	.word	0x204005a8
  403e0c:	2040c38c 	.word	0x2040c38c
  403e10:	204009b0 	.word	0x204009b0

00403e14 <_free_r>:
  403e14:	2900      	cmp	r1, #0
  403e16:	d044      	beq.n	403ea2 <_free_r+0x8e>
  403e18:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  403e1c:	460d      	mov	r5, r1
  403e1e:	4680      	mov	r8, r0
  403e20:	f000 fe92 	bl	404b48 <__malloc_lock>
  403e24:	f855 7c04 	ldr.w	r7, [r5, #-4]
  403e28:	4969      	ldr	r1, [pc, #420]	; (403fd0 <_free_r+0x1bc>)
  403e2a:	f027 0301 	bic.w	r3, r7, #1
  403e2e:	f1a5 0408 	sub.w	r4, r5, #8
  403e32:	18e2      	adds	r2, r4, r3
  403e34:	688e      	ldr	r6, [r1, #8]
  403e36:	6850      	ldr	r0, [r2, #4]
  403e38:	42b2      	cmp	r2, r6
  403e3a:	f020 0003 	bic.w	r0, r0, #3
  403e3e:	d05e      	beq.n	403efe <_free_r+0xea>
  403e40:	07fe      	lsls	r6, r7, #31
  403e42:	6050      	str	r0, [r2, #4]
  403e44:	d40b      	bmi.n	403e5e <_free_r+0x4a>
  403e46:	f855 7c08 	ldr.w	r7, [r5, #-8]
  403e4a:	1be4      	subs	r4, r4, r7
  403e4c:	f101 0e08 	add.w	lr, r1, #8
  403e50:	68a5      	ldr	r5, [r4, #8]
  403e52:	4575      	cmp	r5, lr
  403e54:	443b      	add	r3, r7
  403e56:	d06d      	beq.n	403f34 <_free_r+0x120>
  403e58:	68e7      	ldr	r7, [r4, #12]
  403e5a:	60ef      	str	r7, [r5, #12]
  403e5c:	60bd      	str	r5, [r7, #8]
  403e5e:	1815      	adds	r5, r2, r0
  403e60:	686d      	ldr	r5, [r5, #4]
  403e62:	07ed      	lsls	r5, r5, #31
  403e64:	d53e      	bpl.n	403ee4 <_free_r+0xd0>
  403e66:	f043 0201 	orr.w	r2, r3, #1
  403e6a:	6062      	str	r2, [r4, #4]
  403e6c:	50e3      	str	r3, [r4, r3]
  403e6e:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
  403e72:	d217      	bcs.n	403ea4 <_free_r+0x90>
  403e74:	08db      	lsrs	r3, r3, #3
  403e76:	1c58      	adds	r0, r3, #1
  403e78:	109a      	asrs	r2, r3, #2
  403e7a:	684d      	ldr	r5, [r1, #4]
  403e7c:	f851 7030 	ldr.w	r7, [r1, r0, lsl #3]
  403e80:	60a7      	str	r7, [r4, #8]
  403e82:	2301      	movs	r3, #1
  403e84:	4093      	lsls	r3, r2
  403e86:	eb01 02c0 	add.w	r2, r1, r0, lsl #3
  403e8a:	432b      	orrs	r3, r5
  403e8c:	3a08      	subs	r2, #8
  403e8e:	60e2      	str	r2, [r4, #12]
  403e90:	604b      	str	r3, [r1, #4]
  403e92:	f841 4030 	str.w	r4, [r1, r0, lsl #3]
  403e96:	60fc      	str	r4, [r7, #12]
  403e98:	4640      	mov	r0, r8
  403e9a:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
  403e9e:	f000 be59 	b.w	404b54 <__malloc_unlock>
  403ea2:	4770      	bx	lr
  403ea4:	0a5a      	lsrs	r2, r3, #9
  403ea6:	2a04      	cmp	r2, #4
  403ea8:	d852      	bhi.n	403f50 <_free_r+0x13c>
  403eaa:	099a      	lsrs	r2, r3, #6
  403eac:	f102 0739 	add.w	r7, r2, #57	; 0x39
  403eb0:	00ff      	lsls	r7, r7, #3
  403eb2:	f102 0538 	add.w	r5, r2, #56	; 0x38
  403eb6:	19c8      	adds	r0, r1, r7
  403eb8:	59ca      	ldr	r2, [r1, r7]
  403eba:	3808      	subs	r0, #8
  403ebc:	4290      	cmp	r0, r2
  403ebe:	d04f      	beq.n	403f60 <_free_r+0x14c>
  403ec0:	6851      	ldr	r1, [r2, #4]
  403ec2:	f021 0103 	bic.w	r1, r1, #3
  403ec6:	428b      	cmp	r3, r1
  403ec8:	d232      	bcs.n	403f30 <_free_r+0x11c>
  403eca:	6892      	ldr	r2, [r2, #8]
  403ecc:	4290      	cmp	r0, r2
  403ece:	d1f7      	bne.n	403ec0 <_free_r+0xac>
  403ed0:	68c3      	ldr	r3, [r0, #12]
  403ed2:	60a0      	str	r0, [r4, #8]
  403ed4:	60e3      	str	r3, [r4, #12]
  403ed6:	609c      	str	r4, [r3, #8]
  403ed8:	60c4      	str	r4, [r0, #12]
  403eda:	4640      	mov	r0, r8
  403edc:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
  403ee0:	f000 be38 	b.w	404b54 <__malloc_unlock>
  403ee4:	6895      	ldr	r5, [r2, #8]
  403ee6:	4f3b      	ldr	r7, [pc, #236]	; (403fd4 <_free_r+0x1c0>)
  403ee8:	42bd      	cmp	r5, r7
  403eea:	4403      	add	r3, r0
  403eec:	d040      	beq.n	403f70 <_free_r+0x15c>
  403eee:	68d0      	ldr	r0, [r2, #12]
  403ef0:	60e8      	str	r0, [r5, #12]
  403ef2:	f043 0201 	orr.w	r2, r3, #1
  403ef6:	6085      	str	r5, [r0, #8]
  403ef8:	6062      	str	r2, [r4, #4]
  403efa:	50e3      	str	r3, [r4, r3]
  403efc:	e7b7      	b.n	403e6e <_free_r+0x5a>
  403efe:	07ff      	lsls	r7, r7, #31
  403f00:	4403      	add	r3, r0
  403f02:	d407      	bmi.n	403f14 <_free_r+0x100>
  403f04:	f855 2c08 	ldr.w	r2, [r5, #-8]
  403f08:	1aa4      	subs	r4, r4, r2
  403f0a:	4413      	add	r3, r2
  403f0c:	68a0      	ldr	r0, [r4, #8]
  403f0e:	68e2      	ldr	r2, [r4, #12]
  403f10:	60c2      	str	r2, [r0, #12]
  403f12:	6090      	str	r0, [r2, #8]
  403f14:	4a30      	ldr	r2, [pc, #192]	; (403fd8 <_free_r+0x1c4>)
  403f16:	6812      	ldr	r2, [r2, #0]
  403f18:	f043 0001 	orr.w	r0, r3, #1
  403f1c:	4293      	cmp	r3, r2
  403f1e:	6060      	str	r0, [r4, #4]
  403f20:	608c      	str	r4, [r1, #8]
  403f22:	d3b9      	bcc.n	403e98 <_free_r+0x84>
  403f24:	4b2d      	ldr	r3, [pc, #180]	; (403fdc <_free_r+0x1c8>)
  403f26:	4640      	mov	r0, r8
  403f28:	6819      	ldr	r1, [r3, #0]
  403f2a:	f7ff ff23 	bl	403d74 <_malloc_trim_r>
  403f2e:	e7b3      	b.n	403e98 <_free_r+0x84>
  403f30:	4610      	mov	r0, r2
  403f32:	e7cd      	b.n	403ed0 <_free_r+0xbc>
  403f34:	1811      	adds	r1, r2, r0
  403f36:	6849      	ldr	r1, [r1, #4]
  403f38:	07c9      	lsls	r1, r1, #31
  403f3a:	d444      	bmi.n	403fc6 <_free_r+0x1b2>
  403f3c:	6891      	ldr	r1, [r2, #8]
  403f3e:	68d2      	ldr	r2, [r2, #12]
  403f40:	60ca      	str	r2, [r1, #12]
  403f42:	4403      	add	r3, r0
  403f44:	f043 0001 	orr.w	r0, r3, #1
  403f48:	6091      	str	r1, [r2, #8]
  403f4a:	6060      	str	r0, [r4, #4]
  403f4c:	50e3      	str	r3, [r4, r3]
  403f4e:	e7a3      	b.n	403e98 <_free_r+0x84>
  403f50:	2a14      	cmp	r2, #20
  403f52:	d816      	bhi.n	403f82 <_free_r+0x16e>
  403f54:	f102 075c 	add.w	r7, r2, #92	; 0x5c
  403f58:	00ff      	lsls	r7, r7, #3
  403f5a:	f102 055b 	add.w	r5, r2, #91	; 0x5b
  403f5e:	e7aa      	b.n	403eb6 <_free_r+0xa2>
  403f60:	10aa      	asrs	r2, r5, #2
  403f62:	2301      	movs	r3, #1
  403f64:	684d      	ldr	r5, [r1, #4]
  403f66:	4093      	lsls	r3, r2
  403f68:	432b      	orrs	r3, r5
  403f6a:	604b      	str	r3, [r1, #4]
  403f6c:	4603      	mov	r3, r0
  403f6e:	e7b0      	b.n	403ed2 <_free_r+0xbe>
  403f70:	f043 0201 	orr.w	r2, r3, #1
  403f74:	614c      	str	r4, [r1, #20]
  403f76:	610c      	str	r4, [r1, #16]
  403f78:	60e5      	str	r5, [r4, #12]
  403f7a:	60a5      	str	r5, [r4, #8]
  403f7c:	6062      	str	r2, [r4, #4]
  403f7e:	50e3      	str	r3, [r4, r3]
  403f80:	e78a      	b.n	403e98 <_free_r+0x84>
  403f82:	2a54      	cmp	r2, #84	; 0x54
  403f84:	d806      	bhi.n	403f94 <_free_r+0x180>
  403f86:	0b1a      	lsrs	r2, r3, #12
  403f88:	f102 076f 	add.w	r7, r2, #111	; 0x6f
  403f8c:	00ff      	lsls	r7, r7, #3
  403f8e:	f102 056e 	add.w	r5, r2, #110	; 0x6e
  403f92:	e790      	b.n	403eb6 <_free_r+0xa2>
  403f94:	f5b2 7faa 	cmp.w	r2, #340	; 0x154
  403f98:	d806      	bhi.n	403fa8 <_free_r+0x194>
  403f9a:	0bda      	lsrs	r2, r3, #15
  403f9c:	f102 0778 	add.w	r7, r2, #120	; 0x78
  403fa0:	00ff      	lsls	r7, r7, #3
  403fa2:	f102 0577 	add.w	r5, r2, #119	; 0x77
  403fa6:	e786      	b.n	403eb6 <_free_r+0xa2>
  403fa8:	f240 5054 	movw	r0, #1364	; 0x554
  403fac:	4282      	cmp	r2, r0
  403fae:	d806      	bhi.n	403fbe <_free_r+0x1aa>
  403fb0:	0c9a      	lsrs	r2, r3, #18
  403fb2:	f102 077d 	add.w	r7, r2, #125	; 0x7d
  403fb6:	00ff      	lsls	r7, r7, #3
  403fb8:	f102 057c 	add.w	r5, r2, #124	; 0x7c
  403fbc:	e77b      	b.n	403eb6 <_free_r+0xa2>
  403fbe:	f44f 777e 	mov.w	r7, #1016	; 0x3f8
  403fc2:	257e      	movs	r5, #126	; 0x7e
  403fc4:	e777      	b.n	403eb6 <_free_r+0xa2>
  403fc6:	f043 0101 	orr.w	r1, r3, #1
  403fca:	6061      	str	r1, [r4, #4]
  403fcc:	6013      	str	r3, [r2, #0]
  403fce:	e763      	b.n	403e98 <_free_r+0x84>
  403fd0:	204005a8 	.word	0x204005a8
  403fd4:	204005b0 	.word	0x204005b0
  403fd8:	204009b4 	.word	0x204009b4
  403fdc:	2040c3bc 	.word	0x2040c3bc

00403fe0 <__sfvwrite_r>:
  403fe0:	6893      	ldr	r3, [r2, #8]
  403fe2:	2b00      	cmp	r3, #0
  403fe4:	d073      	beq.n	4040ce <__sfvwrite_r+0xee>
  403fe6:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  403fea:	898b      	ldrh	r3, [r1, #12]
  403fec:	b083      	sub	sp, #12
  403fee:	460c      	mov	r4, r1
  403ff0:	0719      	lsls	r1, r3, #28
  403ff2:	9000      	str	r0, [sp, #0]
  403ff4:	4616      	mov	r6, r2
  403ff6:	d526      	bpl.n	404046 <__sfvwrite_r+0x66>
  403ff8:	6922      	ldr	r2, [r4, #16]
  403ffa:	b322      	cbz	r2, 404046 <__sfvwrite_r+0x66>
  403ffc:	f013 0002 	ands.w	r0, r3, #2
  404000:	6835      	ldr	r5, [r6, #0]
  404002:	d02c      	beq.n	40405e <__sfvwrite_r+0x7e>
  404004:	f04f 0900 	mov.w	r9, #0
  404008:	4fb0      	ldr	r7, [pc, #704]	; (4042cc <__sfvwrite_r+0x2ec>)
  40400a:	46c8      	mov	r8, r9
  40400c:	46b2      	mov	sl, r6
  40400e:	45b8      	cmp	r8, r7
  404010:	4643      	mov	r3, r8
  404012:	464a      	mov	r2, r9
  404014:	bf28      	it	cs
  404016:	463b      	movcs	r3, r7
  404018:	9800      	ldr	r0, [sp, #0]
  40401a:	f1b8 0f00 	cmp.w	r8, #0
  40401e:	d050      	beq.n	4040c2 <__sfvwrite_r+0xe2>
  404020:	69e1      	ldr	r1, [r4, #28]
  404022:	6a66      	ldr	r6, [r4, #36]	; 0x24
  404024:	47b0      	blx	r6
  404026:	2800      	cmp	r0, #0
  404028:	dd58      	ble.n	4040dc <__sfvwrite_r+0xfc>
  40402a:	f8da 3008 	ldr.w	r3, [sl, #8]
  40402e:	1a1b      	subs	r3, r3, r0
  404030:	4481      	add	r9, r0
  404032:	eba8 0800 	sub.w	r8, r8, r0
  404036:	f8ca 3008 	str.w	r3, [sl, #8]
  40403a:	2b00      	cmp	r3, #0
  40403c:	d1e7      	bne.n	40400e <__sfvwrite_r+0x2e>
  40403e:	2000      	movs	r0, #0
  404040:	b003      	add	sp, #12
  404042:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  404046:	4621      	mov	r1, r4
  404048:	9800      	ldr	r0, [sp, #0]
  40404a:	f7ff fc51 	bl	4038f0 <__swsetup_r>
  40404e:	2800      	cmp	r0, #0
  404050:	f040 8133 	bne.w	4042ba <__sfvwrite_r+0x2da>
  404054:	89a3      	ldrh	r3, [r4, #12]
  404056:	6835      	ldr	r5, [r6, #0]
  404058:	f013 0002 	ands.w	r0, r3, #2
  40405c:	d1d2      	bne.n	404004 <__sfvwrite_r+0x24>
  40405e:	f013 0901 	ands.w	r9, r3, #1
  404062:	d145      	bne.n	4040f0 <__sfvwrite_r+0x110>
  404064:	464f      	mov	r7, r9
  404066:	9601      	str	r6, [sp, #4]
  404068:	b337      	cbz	r7, 4040b8 <__sfvwrite_r+0xd8>
  40406a:	059a      	lsls	r2, r3, #22
  40406c:	f8d4 8008 	ldr.w	r8, [r4, #8]
  404070:	f140 8083 	bpl.w	40417a <__sfvwrite_r+0x19a>
  404074:	4547      	cmp	r7, r8
  404076:	46c3      	mov	fp, r8
  404078:	f0c0 80ab 	bcc.w	4041d2 <__sfvwrite_r+0x1f2>
  40407c:	f413 6f90 	tst.w	r3, #1152	; 0x480
  404080:	f040 80ac 	bne.w	4041dc <__sfvwrite_r+0x1fc>
  404084:	6820      	ldr	r0, [r4, #0]
  404086:	46ba      	mov	sl, r7
  404088:	465a      	mov	r2, fp
  40408a:	4649      	mov	r1, r9
  40408c:	f000 fcf8 	bl	404a80 <memmove>
  404090:	68a2      	ldr	r2, [r4, #8]
  404092:	6823      	ldr	r3, [r4, #0]
  404094:	eba2 0208 	sub.w	r2, r2, r8
  404098:	445b      	add	r3, fp
  40409a:	60a2      	str	r2, [r4, #8]
  40409c:	6023      	str	r3, [r4, #0]
  40409e:	9a01      	ldr	r2, [sp, #4]
  4040a0:	6893      	ldr	r3, [r2, #8]
  4040a2:	eba3 030a 	sub.w	r3, r3, sl
  4040a6:	44d1      	add	r9, sl
  4040a8:	eba7 070a 	sub.w	r7, r7, sl
  4040ac:	6093      	str	r3, [r2, #8]
  4040ae:	2b00      	cmp	r3, #0
  4040b0:	d0c5      	beq.n	40403e <__sfvwrite_r+0x5e>
  4040b2:	89a3      	ldrh	r3, [r4, #12]
  4040b4:	2f00      	cmp	r7, #0
  4040b6:	d1d8      	bne.n	40406a <__sfvwrite_r+0x8a>
  4040b8:	f8d5 9000 	ldr.w	r9, [r5]
  4040bc:	686f      	ldr	r7, [r5, #4]
  4040be:	3508      	adds	r5, #8
  4040c0:	e7d2      	b.n	404068 <__sfvwrite_r+0x88>
  4040c2:	f8d5 9000 	ldr.w	r9, [r5]
  4040c6:	f8d5 8004 	ldr.w	r8, [r5, #4]
  4040ca:	3508      	adds	r5, #8
  4040cc:	e79f      	b.n	40400e <__sfvwrite_r+0x2e>
  4040ce:	2000      	movs	r0, #0
  4040d0:	4770      	bx	lr
  4040d2:	4621      	mov	r1, r4
  4040d4:	9800      	ldr	r0, [sp, #0]
  4040d6:	f7ff fd1f 	bl	403b18 <_fflush_r>
  4040da:	b370      	cbz	r0, 40413a <__sfvwrite_r+0x15a>
  4040dc:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
  4040e0:	f043 0340 	orr.w	r3, r3, #64	; 0x40
  4040e4:	f04f 30ff 	mov.w	r0, #4294967295
  4040e8:	81a3      	strh	r3, [r4, #12]
  4040ea:	b003      	add	sp, #12
  4040ec:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  4040f0:	4681      	mov	r9, r0
  4040f2:	4633      	mov	r3, r6
  4040f4:	464e      	mov	r6, r9
  4040f6:	46a8      	mov	r8, r5
  4040f8:	469a      	mov	sl, r3
  4040fa:	464d      	mov	r5, r9
  4040fc:	b34e      	cbz	r6, 404152 <__sfvwrite_r+0x172>
  4040fe:	b380      	cbz	r0, 404162 <__sfvwrite_r+0x182>
  404100:	6820      	ldr	r0, [r4, #0]
  404102:	6923      	ldr	r3, [r4, #16]
  404104:	6962      	ldr	r2, [r4, #20]
  404106:	45b1      	cmp	r9, r6
  404108:	46cb      	mov	fp, r9
  40410a:	bf28      	it	cs
  40410c:	46b3      	movcs	fp, r6
  40410e:	4298      	cmp	r0, r3
  404110:	465f      	mov	r7, fp
  404112:	d904      	bls.n	40411e <__sfvwrite_r+0x13e>
  404114:	68a3      	ldr	r3, [r4, #8]
  404116:	4413      	add	r3, r2
  404118:	459b      	cmp	fp, r3
  40411a:	f300 80a6 	bgt.w	40426a <__sfvwrite_r+0x28a>
  40411e:	4593      	cmp	fp, r2
  404120:	db4b      	blt.n	4041ba <__sfvwrite_r+0x1da>
  404122:	4613      	mov	r3, r2
  404124:	6a67      	ldr	r7, [r4, #36]	; 0x24
  404126:	69e1      	ldr	r1, [r4, #28]
  404128:	9800      	ldr	r0, [sp, #0]
  40412a:	462a      	mov	r2, r5
  40412c:	47b8      	blx	r7
  40412e:	1e07      	subs	r7, r0, #0
  404130:	ddd4      	ble.n	4040dc <__sfvwrite_r+0xfc>
  404132:	ebb9 0907 	subs.w	r9, r9, r7
  404136:	d0cc      	beq.n	4040d2 <__sfvwrite_r+0xf2>
  404138:	2001      	movs	r0, #1
  40413a:	f8da 3008 	ldr.w	r3, [sl, #8]
  40413e:	1bdb      	subs	r3, r3, r7
  404140:	443d      	add	r5, r7
  404142:	1bf6      	subs	r6, r6, r7
  404144:	f8ca 3008 	str.w	r3, [sl, #8]
  404148:	2b00      	cmp	r3, #0
  40414a:	f43f af78 	beq.w	40403e <__sfvwrite_r+0x5e>
  40414e:	2e00      	cmp	r6, #0
  404150:	d1d5      	bne.n	4040fe <__sfvwrite_r+0x11e>
  404152:	f108 0308 	add.w	r3, r8, #8
  404156:	e913 0060 	ldmdb	r3, {r5, r6}
  40415a:	4698      	mov	r8, r3
  40415c:	3308      	adds	r3, #8
  40415e:	2e00      	cmp	r6, #0
  404160:	d0f9      	beq.n	404156 <__sfvwrite_r+0x176>
  404162:	4632      	mov	r2, r6
  404164:	210a      	movs	r1, #10
  404166:	4628      	mov	r0, r5
  404168:	f000 fc3a 	bl	4049e0 <memchr>
  40416c:	2800      	cmp	r0, #0
  40416e:	f000 80a1 	beq.w	4042b4 <__sfvwrite_r+0x2d4>
  404172:	3001      	adds	r0, #1
  404174:	eba0 0905 	sub.w	r9, r0, r5
  404178:	e7c2      	b.n	404100 <__sfvwrite_r+0x120>
  40417a:	6820      	ldr	r0, [r4, #0]
  40417c:	6923      	ldr	r3, [r4, #16]
  40417e:	4298      	cmp	r0, r3
  404180:	d802      	bhi.n	404188 <__sfvwrite_r+0x1a8>
  404182:	6963      	ldr	r3, [r4, #20]
  404184:	429f      	cmp	r7, r3
  404186:	d25d      	bcs.n	404244 <__sfvwrite_r+0x264>
  404188:	45b8      	cmp	r8, r7
  40418a:	bf28      	it	cs
  40418c:	46b8      	movcs	r8, r7
  40418e:	4642      	mov	r2, r8
  404190:	4649      	mov	r1, r9
  404192:	f000 fc75 	bl	404a80 <memmove>
  404196:	68a3      	ldr	r3, [r4, #8]
  404198:	6822      	ldr	r2, [r4, #0]
  40419a:	eba3 0308 	sub.w	r3, r3, r8
  40419e:	4442      	add	r2, r8
  4041a0:	60a3      	str	r3, [r4, #8]
  4041a2:	6022      	str	r2, [r4, #0]
  4041a4:	b10b      	cbz	r3, 4041aa <__sfvwrite_r+0x1ca>
  4041a6:	46c2      	mov	sl, r8
  4041a8:	e779      	b.n	40409e <__sfvwrite_r+0xbe>
  4041aa:	4621      	mov	r1, r4
  4041ac:	9800      	ldr	r0, [sp, #0]
  4041ae:	f7ff fcb3 	bl	403b18 <_fflush_r>
  4041b2:	2800      	cmp	r0, #0
  4041b4:	d192      	bne.n	4040dc <__sfvwrite_r+0xfc>
  4041b6:	46c2      	mov	sl, r8
  4041b8:	e771      	b.n	40409e <__sfvwrite_r+0xbe>
  4041ba:	465a      	mov	r2, fp
  4041bc:	4629      	mov	r1, r5
  4041be:	f000 fc5f 	bl	404a80 <memmove>
  4041c2:	68a2      	ldr	r2, [r4, #8]
  4041c4:	6823      	ldr	r3, [r4, #0]
  4041c6:	eba2 020b 	sub.w	r2, r2, fp
  4041ca:	445b      	add	r3, fp
  4041cc:	60a2      	str	r2, [r4, #8]
  4041ce:	6023      	str	r3, [r4, #0]
  4041d0:	e7af      	b.n	404132 <__sfvwrite_r+0x152>
  4041d2:	6820      	ldr	r0, [r4, #0]
  4041d4:	46b8      	mov	r8, r7
  4041d6:	46ba      	mov	sl, r7
  4041d8:	46bb      	mov	fp, r7
  4041da:	e755      	b.n	404088 <__sfvwrite_r+0xa8>
  4041dc:	6962      	ldr	r2, [r4, #20]
  4041de:	6820      	ldr	r0, [r4, #0]
  4041e0:	6921      	ldr	r1, [r4, #16]
  4041e2:	eb02 0842 	add.w	r8, r2, r2, lsl #1
  4041e6:	eba0 0a01 	sub.w	sl, r0, r1
  4041ea:	eb08 78d8 	add.w	r8, r8, r8, lsr #31
  4041ee:	f10a 0001 	add.w	r0, sl, #1
  4041f2:	ea4f 0868 	mov.w	r8, r8, asr #1
  4041f6:	4438      	add	r0, r7
  4041f8:	4540      	cmp	r0, r8
  4041fa:	4642      	mov	r2, r8
  4041fc:	bf84      	itt	hi
  4041fe:	4680      	movhi	r8, r0
  404200:	4642      	movhi	r2, r8
  404202:	055b      	lsls	r3, r3, #21
  404204:	d544      	bpl.n	404290 <__sfvwrite_r+0x2b0>
  404206:	4611      	mov	r1, r2
  404208:	9800      	ldr	r0, [sp, #0]
  40420a:	f000 f921 	bl	404450 <_malloc_r>
  40420e:	4683      	mov	fp, r0
  404210:	2800      	cmp	r0, #0
  404212:	d055      	beq.n	4042c0 <__sfvwrite_r+0x2e0>
  404214:	4652      	mov	r2, sl
  404216:	6921      	ldr	r1, [r4, #16]
  404218:	f7fe fa74 	bl	402704 <memcpy>
  40421c:	89a3      	ldrh	r3, [r4, #12]
  40421e:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
  404222:	f043 0380 	orr.w	r3, r3, #128	; 0x80
  404226:	81a3      	strh	r3, [r4, #12]
  404228:	eb0b 000a 	add.w	r0, fp, sl
  40422c:	eba8 030a 	sub.w	r3, r8, sl
  404230:	f8c4 b010 	str.w	fp, [r4, #16]
  404234:	f8c4 8014 	str.w	r8, [r4, #20]
  404238:	6020      	str	r0, [r4, #0]
  40423a:	60a3      	str	r3, [r4, #8]
  40423c:	46b8      	mov	r8, r7
  40423e:	46ba      	mov	sl, r7
  404240:	46bb      	mov	fp, r7
  404242:	e721      	b.n	404088 <__sfvwrite_r+0xa8>
  404244:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
  404248:	42b9      	cmp	r1, r7
  40424a:	bf28      	it	cs
  40424c:	4639      	movcs	r1, r7
  40424e:	464a      	mov	r2, r9
  404250:	fb91 f1f3 	sdiv	r1, r1, r3
  404254:	9800      	ldr	r0, [sp, #0]
  404256:	6a66      	ldr	r6, [r4, #36]	; 0x24
  404258:	fb03 f301 	mul.w	r3, r3, r1
  40425c:	69e1      	ldr	r1, [r4, #28]
  40425e:	47b0      	blx	r6
  404260:	f1b0 0a00 	subs.w	sl, r0, #0
  404264:	f73f af1b 	bgt.w	40409e <__sfvwrite_r+0xbe>
  404268:	e738      	b.n	4040dc <__sfvwrite_r+0xfc>
  40426a:	461a      	mov	r2, r3
  40426c:	4629      	mov	r1, r5
  40426e:	9301      	str	r3, [sp, #4]
  404270:	f000 fc06 	bl	404a80 <memmove>
  404274:	6822      	ldr	r2, [r4, #0]
  404276:	9b01      	ldr	r3, [sp, #4]
  404278:	9800      	ldr	r0, [sp, #0]
  40427a:	441a      	add	r2, r3
  40427c:	6022      	str	r2, [r4, #0]
  40427e:	4621      	mov	r1, r4
  404280:	f7ff fc4a 	bl	403b18 <_fflush_r>
  404284:	9b01      	ldr	r3, [sp, #4]
  404286:	2800      	cmp	r0, #0
  404288:	f47f af28 	bne.w	4040dc <__sfvwrite_r+0xfc>
  40428c:	461f      	mov	r7, r3
  40428e:	e750      	b.n	404132 <__sfvwrite_r+0x152>
  404290:	9800      	ldr	r0, [sp, #0]
  404292:	f000 fc65 	bl	404b60 <_realloc_r>
  404296:	4683      	mov	fp, r0
  404298:	2800      	cmp	r0, #0
  40429a:	d1c5      	bne.n	404228 <__sfvwrite_r+0x248>
  40429c:	9d00      	ldr	r5, [sp, #0]
  40429e:	6921      	ldr	r1, [r4, #16]
  4042a0:	4628      	mov	r0, r5
  4042a2:	f7ff fdb7 	bl	403e14 <_free_r>
  4042a6:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
  4042aa:	220c      	movs	r2, #12
  4042ac:	f023 0380 	bic.w	r3, r3, #128	; 0x80
  4042b0:	602a      	str	r2, [r5, #0]
  4042b2:	e715      	b.n	4040e0 <__sfvwrite_r+0x100>
  4042b4:	f106 0901 	add.w	r9, r6, #1
  4042b8:	e722      	b.n	404100 <__sfvwrite_r+0x120>
  4042ba:	f04f 30ff 	mov.w	r0, #4294967295
  4042be:	e6bf      	b.n	404040 <__sfvwrite_r+0x60>
  4042c0:	9a00      	ldr	r2, [sp, #0]
  4042c2:	230c      	movs	r3, #12
  4042c4:	6013      	str	r3, [r2, #0]
  4042c6:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
  4042ca:	e709      	b.n	4040e0 <__sfvwrite_r+0x100>
  4042cc:	7ffffc00 	.word	0x7ffffc00

004042d0 <_fwalk_reent>:
  4042d0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
  4042d4:	f510 7738 	adds.w	r7, r0, #736	; 0x2e0
  4042d8:	d01f      	beq.n	40431a <_fwalk_reent+0x4a>
  4042da:	4688      	mov	r8, r1
  4042dc:	4606      	mov	r6, r0
  4042de:	f04f 0900 	mov.w	r9, #0
  4042e2:	687d      	ldr	r5, [r7, #4]
  4042e4:	68bc      	ldr	r4, [r7, #8]
  4042e6:	3d01      	subs	r5, #1
  4042e8:	d411      	bmi.n	40430e <_fwalk_reent+0x3e>
  4042ea:	89a3      	ldrh	r3, [r4, #12]
  4042ec:	2b01      	cmp	r3, #1
  4042ee:	f105 35ff 	add.w	r5, r5, #4294967295
  4042f2:	d908      	bls.n	404306 <_fwalk_reent+0x36>
  4042f4:	f9b4 300e 	ldrsh.w	r3, [r4, #14]
  4042f8:	3301      	adds	r3, #1
  4042fa:	4621      	mov	r1, r4
  4042fc:	4630      	mov	r0, r6
  4042fe:	d002      	beq.n	404306 <_fwalk_reent+0x36>
  404300:	47c0      	blx	r8
  404302:	ea49 0900 	orr.w	r9, r9, r0
  404306:	1c6b      	adds	r3, r5, #1
  404308:	f104 0468 	add.w	r4, r4, #104	; 0x68
  40430c:	d1ed      	bne.n	4042ea <_fwalk_reent+0x1a>
  40430e:	683f      	ldr	r7, [r7, #0]
  404310:	2f00      	cmp	r7, #0
  404312:	d1e6      	bne.n	4042e2 <_fwalk_reent+0x12>
  404314:	4648      	mov	r0, r9
  404316:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
  40431a:	46b9      	mov	r9, r7
  40431c:	4648      	mov	r0, r9
  40431e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
  404322:	bf00      	nop

00404324 <__locale_mb_cur_max>:
  404324:	4b04      	ldr	r3, [pc, #16]	; (404338 <__locale_mb_cur_max+0x14>)
  404326:	4a05      	ldr	r2, [pc, #20]	; (40433c <__locale_mb_cur_max+0x18>)
  404328:	681b      	ldr	r3, [r3, #0]
  40432a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
  40432c:	2b00      	cmp	r3, #0
  40432e:	bf08      	it	eq
  404330:	4613      	moveq	r3, r2
  404332:	f893 0128 	ldrb.w	r0, [r3, #296]	; 0x128
  404336:	4770      	bx	lr
  404338:	2040000c 	.word	0x2040000c
  40433c:	2040043c 	.word	0x2040043c

00404340 <__retarget_lock_init_recursive>:
  404340:	4770      	bx	lr
  404342:	bf00      	nop

00404344 <__retarget_lock_close_recursive>:
  404344:	4770      	bx	lr
  404346:	bf00      	nop

00404348 <__retarget_lock_acquire_recursive>:
  404348:	4770      	bx	lr
  40434a:	bf00      	nop

0040434c <__retarget_lock_release_recursive>:
  40434c:	4770      	bx	lr
  40434e:	bf00      	nop

00404350 <__swhatbuf_r>:
  404350:	b570      	push	{r4, r5, r6, lr}
  404352:	460c      	mov	r4, r1
  404354:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
  404358:	2900      	cmp	r1, #0
  40435a:	b090      	sub	sp, #64	; 0x40
  40435c:	4615      	mov	r5, r2
  40435e:	461e      	mov	r6, r3
  404360:	db14      	blt.n	40438c <__swhatbuf_r+0x3c>
  404362:	aa01      	add	r2, sp, #4
  404364:	f000 ff74 	bl	405250 <_fstat_r>
  404368:	2800      	cmp	r0, #0
  40436a:	db0f      	blt.n	40438c <__swhatbuf_r+0x3c>
  40436c:	9a02      	ldr	r2, [sp, #8]
  40436e:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
  404372:	f5a2 5200 	sub.w	r2, r2, #8192	; 0x2000
  404376:	fab2 f282 	clz	r2, r2
  40437a:	0952      	lsrs	r2, r2, #5
  40437c:	f44f 6380 	mov.w	r3, #1024	; 0x400
  404380:	f44f 6000 	mov.w	r0, #2048	; 0x800
  404384:	6032      	str	r2, [r6, #0]
  404386:	602b      	str	r3, [r5, #0]
  404388:	b010      	add	sp, #64	; 0x40
  40438a:	bd70      	pop	{r4, r5, r6, pc}
  40438c:	89a2      	ldrh	r2, [r4, #12]
  40438e:	2300      	movs	r3, #0
  404390:	f012 0080 	ands.w	r0, r2, #128	; 0x80
  404394:	6033      	str	r3, [r6, #0]
  404396:	d004      	beq.n	4043a2 <__swhatbuf_r+0x52>
  404398:	2240      	movs	r2, #64	; 0x40
  40439a:	4618      	mov	r0, r3
  40439c:	602a      	str	r2, [r5, #0]
  40439e:	b010      	add	sp, #64	; 0x40
  4043a0:	bd70      	pop	{r4, r5, r6, pc}
  4043a2:	f44f 6380 	mov.w	r3, #1024	; 0x400
  4043a6:	602b      	str	r3, [r5, #0]
  4043a8:	b010      	add	sp, #64	; 0x40
  4043aa:	bd70      	pop	{r4, r5, r6, pc}

004043ac <__smakebuf_r>:
  4043ac:	898a      	ldrh	r2, [r1, #12]
  4043ae:	0792      	lsls	r2, r2, #30
  4043b0:	460b      	mov	r3, r1
  4043b2:	d506      	bpl.n	4043c2 <__smakebuf_r+0x16>
  4043b4:	f101 0243 	add.w	r2, r1, #67	; 0x43
  4043b8:	2101      	movs	r1, #1
  4043ba:	601a      	str	r2, [r3, #0]
  4043bc:	611a      	str	r2, [r3, #16]
  4043be:	6159      	str	r1, [r3, #20]
  4043c0:	4770      	bx	lr
  4043c2:	b5f0      	push	{r4, r5, r6, r7, lr}
  4043c4:	b083      	sub	sp, #12
  4043c6:	ab01      	add	r3, sp, #4
  4043c8:	466a      	mov	r2, sp
  4043ca:	460c      	mov	r4, r1
  4043cc:	4606      	mov	r6, r0
  4043ce:	f7ff ffbf 	bl	404350 <__swhatbuf_r>
  4043d2:	9900      	ldr	r1, [sp, #0]
  4043d4:	4605      	mov	r5, r0
  4043d6:	4630      	mov	r0, r6
  4043d8:	f000 f83a 	bl	404450 <_malloc_r>
  4043dc:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
  4043e0:	b1d8      	cbz	r0, 40441a <__smakebuf_r+0x6e>
  4043e2:	9a01      	ldr	r2, [sp, #4]
  4043e4:	4f15      	ldr	r7, [pc, #84]	; (40443c <__smakebuf_r+0x90>)
  4043e6:	9900      	ldr	r1, [sp, #0]
  4043e8:	63f7      	str	r7, [r6, #60]	; 0x3c
  4043ea:	f043 0380 	orr.w	r3, r3, #128	; 0x80
  4043ee:	81a3      	strh	r3, [r4, #12]
  4043f0:	6020      	str	r0, [r4, #0]
  4043f2:	6120      	str	r0, [r4, #16]
  4043f4:	6161      	str	r1, [r4, #20]
  4043f6:	b91a      	cbnz	r2, 404400 <__smakebuf_r+0x54>
  4043f8:	432b      	orrs	r3, r5
  4043fa:	81a3      	strh	r3, [r4, #12]
  4043fc:	b003      	add	sp, #12
  4043fe:	bdf0      	pop	{r4, r5, r6, r7, pc}
  404400:	4630      	mov	r0, r6
  404402:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
  404406:	f000 ff37 	bl	405278 <_isatty_r>
  40440a:	b1a0      	cbz	r0, 404436 <__smakebuf_r+0x8a>
  40440c:	89a3      	ldrh	r3, [r4, #12]
  40440e:	f023 0303 	bic.w	r3, r3, #3
  404412:	f043 0301 	orr.w	r3, r3, #1
  404416:	b21b      	sxth	r3, r3
  404418:	e7ee      	b.n	4043f8 <__smakebuf_r+0x4c>
  40441a:	059a      	lsls	r2, r3, #22
  40441c:	d4ee      	bmi.n	4043fc <__smakebuf_r+0x50>
  40441e:	f023 0303 	bic.w	r3, r3, #3
  404422:	f104 0243 	add.w	r2, r4, #67	; 0x43
  404426:	f043 0302 	orr.w	r3, r3, #2
  40442a:	2101      	movs	r1, #1
  40442c:	81a3      	strh	r3, [r4, #12]
  40442e:	6022      	str	r2, [r4, #0]
  404430:	6122      	str	r2, [r4, #16]
  404432:	6161      	str	r1, [r4, #20]
  404434:	e7e2      	b.n	4043fc <__smakebuf_r+0x50>
  404436:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
  40443a:	e7dd      	b.n	4043f8 <__smakebuf_r+0x4c>
  40443c:	00403b6d 	.word	0x00403b6d

00404440 <malloc>:
  404440:	4b02      	ldr	r3, [pc, #8]	; (40444c <malloc+0xc>)
  404442:	4601      	mov	r1, r0
  404444:	6818      	ldr	r0, [r3, #0]
  404446:	f000 b803 	b.w	404450 <_malloc_r>
  40444a:	bf00      	nop
  40444c:	2040000c 	.word	0x2040000c

00404450 <_malloc_r>:
  404450:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  404454:	f101 060b 	add.w	r6, r1, #11
  404458:	2e16      	cmp	r6, #22
  40445a:	b083      	sub	sp, #12
  40445c:	4605      	mov	r5, r0
  40445e:	f240 809e 	bls.w	40459e <_malloc_r+0x14e>
  404462:	f036 0607 	bics.w	r6, r6, #7
  404466:	f100 80bd 	bmi.w	4045e4 <_malloc_r+0x194>
  40446a:	42b1      	cmp	r1, r6
  40446c:	f200 80ba 	bhi.w	4045e4 <_malloc_r+0x194>
  404470:	f000 fb6a 	bl	404b48 <__malloc_lock>
  404474:	f5b6 7ffc 	cmp.w	r6, #504	; 0x1f8
  404478:	f0c0 8293 	bcc.w	4049a2 <_malloc_r+0x552>
  40447c:	0a73      	lsrs	r3, r6, #9
  40447e:	f000 80b8 	beq.w	4045f2 <_malloc_r+0x1a2>
  404482:	2b04      	cmp	r3, #4
  404484:	f200 8179 	bhi.w	40477a <_malloc_r+0x32a>
  404488:	09b3      	lsrs	r3, r6, #6
  40448a:	f103 0039 	add.w	r0, r3, #57	; 0x39
  40448e:	f103 0e38 	add.w	lr, r3, #56	; 0x38
  404492:	00c3      	lsls	r3, r0, #3
  404494:	4fbf      	ldr	r7, [pc, #764]	; (404794 <_malloc_r+0x344>)
  404496:	443b      	add	r3, r7
  404498:	f1a3 0108 	sub.w	r1, r3, #8
  40449c:	685c      	ldr	r4, [r3, #4]
  40449e:	42a1      	cmp	r1, r4
  4044a0:	d106      	bne.n	4044b0 <_malloc_r+0x60>
  4044a2:	e00c      	b.n	4044be <_malloc_r+0x6e>
  4044a4:	2a00      	cmp	r2, #0
  4044a6:	f280 80aa 	bge.w	4045fe <_malloc_r+0x1ae>
  4044aa:	68e4      	ldr	r4, [r4, #12]
  4044ac:	42a1      	cmp	r1, r4
  4044ae:	d006      	beq.n	4044be <_malloc_r+0x6e>
  4044b0:	6863      	ldr	r3, [r4, #4]
  4044b2:	f023 0303 	bic.w	r3, r3, #3
  4044b6:	1b9a      	subs	r2, r3, r6
  4044b8:	2a0f      	cmp	r2, #15
  4044ba:	ddf3      	ble.n	4044a4 <_malloc_r+0x54>
  4044bc:	4670      	mov	r0, lr
  4044be:	693c      	ldr	r4, [r7, #16]
  4044c0:	f8df e2e4 	ldr.w	lr, [pc, #740]	; 4047a8 <_malloc_r+0x358>
  4044c4:	4574      	cmp	r4, lr
  4044c6:	f000 81ab 	beq.w	404820 <_malloc_r+0x3d0>
  4044ca:	6863      	ldr	r3, [r4, #4]
  4044cc:	f023 0303 	bic.w	r3, r3, #3
  4044d0:	1b9a      	subs	r2, r3, r6
  4044d2:	2a0f      	cmp	r2, #15
  4044d4:	f300 8190 	bgt.w	4047f8 <_malloc_r+0x3a8>
  4044d8:	2a00      	cmp	r2, #0
  4044da:	f8c7 e014 	str.w	lr, [r7, #20]
  4044de:	f8c7 e010 	str.w	lr, [r7, #16]
  4044e2:	f280 809d 	bge.w	404620 <_malloc_r+0x1d0>
  4044e6:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
  4044ea:	f080 8161 	bcs.w	4047b0 <_malloc_r+0x360>
  4044ee:	08db      	lsrs	r3, r3, #3
  4044f0:	f103 0c01 	add.w	ip, r3, #1
  4044f4:	1099      	asrs	r1, r3, #2
  4044f6:	687a      	ldr	r2, [r7, #4]
  4044f8:	f857 803c 	ldr.w	r8, [r7, ip, lsl #3]
  4044fc:	f8c4 8008 	str.w	r8, [r4, #8]
  404500:	2301      	movs	r3, #1
  404502:	408b      	lsls	r3, r1
  404504:	eb07 01cc 	add.w	r1, r7, ip, lsl #3
  404508:	4313      	orrs	r3, r2
  40450a:	3908      	subs	r1, #8
  40450c:	60e1      	str	r1, [r4, #12]
  40450e:	607b      	str	r3, [r7, #4]
  404510:	f847 403c 	str.w	r4, [r7, ip, lsl #3]
  404514:	f8c8 400c 	str.w	r4, [r8, #12]
  404518:	1082      	asrs	r2, r0, #2
  40451a:	2401      	movs	r4, #1
  40451c:	4094      	lsls	r4, r2
  40451e:	429c      	cmp	r4, r3
  404520:	f200 808b 	bhi.w	40463a <_malloc_r+0x1ea>
  404524:	421c      	tst	r4, r3
  404526:	d106      	bne.n	404536 <_malloc_r+0xe6>
  404528:	f020 0003 	bic.w	r0, r0, #3
  40452c:	0064      	lsls	r4, r4, #1
  40452e:	421c      	tst	r4, r3
  404530:	f100 0004 	add.w	r0, r0, #4
  404534:	d0fa      	beq.n	40452c <_malloc_r+0xdc>
  404536:	eb07 09c0 	add.w	r9, r7, r0, lsl #3
  40453a:	46cc      	mov	ip, r9
  40453c:	4680      	mov	r8, r0
  40453e:	f8dc 300c 	ldr.w	r3, [ip, #12]
  404542:	459c      	cmp	ip, r3
  404544:	d107      	bne.n	404556 <_malloc_r+0x106>
  404546:	e16d      	b.n	404824 <_malloc_r+0x3d4>
  404548:	2a00      	cmp	r2, #0
  40454a:	f280 817b 	bge.w	404844 <_malloc_r+0x3f4>
  40454e:	68db      	ldr	r3, [r3, #12]
  404550:	459c      	cmp	ip, r3
  404552:	f000 8167 	beq.w	404824 <_malloc_r+0x3d4>
  404556:	6859      	ldr	r1, [r3, #4]
  404558:	f021 0103 	bic.w	r1, r1, #3
  40455c:	1b8a      	subs	r2, r1, r6
  40455e:	2a0f      	cmp	r2, #15
  404560:	ddf2      	ble.n	404548 <_malloc_r+0xf8>
  404562:	f8d3 c00c 	ldr.w	ip, [r3, #12]
  404566:	f8d3 8008 	ldr.w	r8, [r3, #8]
  40456a:	9300      	str	r3, [sp, #0]
  40456c:	199c      	adds	r4, r3, r6
  40456e:	4628      	mov	r0, r5
  404570:	f046 0601 	orr.w	r6, r6, #1
  404574:	f042 0501 	orr.w	r5, r2, #1
  404578:	605e      	str	r6, [r3, #4]
  40457a:	f8c8 c00c 	str.w	ip, [r8, #12]
  40457e:	f8cc 8008 	str.w	r8, [ip, #8]
  404582:	617c      	str	r4, [r7, #20]
  404584:	613c      	str	r4, [r7, #16]
  404586:	f8c4 e00c 	str.w	lr, [r4, #12]
  40458a:	f8c4 e008 	str.w	lr, [r4, #8]
  40458e:	6065      	str	r5, [r4, #4]
  404590:	505a      	str	r2, [r3, r1]
  404592:	f000 fadf 	bl	404b54 <__malloc_unlock>
  404596:	9b00      	ldr	r3, [sp, #0]
  404598:	f103 0408 	add.w	r4, r3, #8
  40459c:	e01e      	b.n	4045dc <_malloc_r+0x18c>
  40459e:	2910      	cmp	r1, #16
  4045a0:	d820      	bhi.n	4045e4 <_malloc_r+0x194>
  4045a2:	f000 fad1 	bl	404b48 <__malloc_lock>
  4045a6:	2610      	movs	r6, #16
  4045a8:	2318      	movs	r3, #24
  4045aa:	2002      	movs	r0, #2
  4045ac:	4f79      	ldr	r7, [pc, #484]	; (404794 <_malloc_r+0x344>)
  4045ae:	443b      	add	r3, r7
  4045b0:	f1a3 0208 	sub.w	r2, r3, #8
  4045b4:	685c      	ldr	r4, [r3, #4]
  4045b6:	4294      	cmp	r4, r2
  4045b8:	f000 813d 	beq.w	404836 <_malloc_r+0x3e6>
  4045bc:	6863      	ldr	r3, [r4, #4]
  4045be:	68e1      	ldr	r1, [r4, #12]
  4045c0:	68a6      	ldr	r6, [r4, #8]
  4045c2:	f023 0303 	bic.w	r3, r3, #3
  4045c6:	4423      	add	r3, r4
  4045c8:	4628      	mov	r0, r5
  4045ca:	685a      	ldr	r2, [r3, #4]
  4045cc:	60f1      	str	r1, [r6, #12]
  4045ce:	f042 0201 	orr.w	r2, r2, #1
  4045d2:	608e      	str	r6, [r1, #8]
  4045d4:	605a      	str	r2, [r3, #4]
  4045d6:	f000 fabd 	bl	404b54 <__malloc_unlock>
  4045da:	3408      	adds	r4, #8
  4045dc:	4620      	mov	r0, r4
  4045de:	b003      	add	sp, #12
  4045e0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  4045e4:	2400      	movs	r4, #0
  4045e6:	230c      	movs	r3, #12
  4045e8:	4620      	mov	r0, r4
  4045ea:	602b      	str	r3, [r5, #0]
  4045ec:	b003      	add	sp, #12
  4045ee:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  4045f2:	2040      	movs	r0, #64	; 0x40
  4045f4:	f44f 7300 	mov.w	r3, #512	; 0x200
  4045f8:	f04f 0e3f 	mov.w	lr, #63	; 0x3f
  4045fc:	e74a      	b.n	404494 <_malloc_r+0x44>
  4045fe:	4423      	add	r3, r4
  404600:	68e1      	ldr	r1, [r4, #12]
  404602:	685a      	ldr	r2, [r3, #4]
  404604:	68a6      	ldr	r6, [r4, #8]
  404606:	f042 0201 	orr.w	r2, r2, #1
  40460a:	60f1      	str	r1, [r6, #12]
  40460c:	4628      	mov	r0, r5
  40460e:	608e      	str	r6, [r1, #8]
  404610:	605a      	str	r2, [r3, #4]
  404612:	f000 fa9f 	bl	404b54 <__malloc_unlock>
  404616:	3408      	adds	r4, #8
  404618:	4620      	mov	r0, r4
  40461a:	b003      	add	sp, #12
  40461c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  404620:	4423      	add	r3, r4
  404622:	4628      	mov	r0, r5
  404624:	685a      	ldr	r2, [r3, #4]
  404626:	f042 0201 	orr.w	r2, r2, #1
  40462a:	605a      	str	r2, [r3, #4]
  40462c:	f000 fa92 	bl	404b54 <__malloc_unlock>
  404630:	3408      	adds	r4, #8
  404632:	4620      	mov	r0, r4
  404634:	b003      	add	sp, #12
  404636:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  40463a:	68bc      	ldr	r4, [r7, #8]
  40463c:	6863      	ldr	r3, [r4, #4]
  40463e:	f023 0803 	bic.w	r8, r3, #3
  404642:	45b0      	cmp	r8, r6
  404644:	d304      	bcc.n	404650 <_malloc_r+0x200>
  404646:	eba8 0306 	sub.w	r3, r8, r6
  40464a:	2b0f      	cmp	r3, #15
  40464c:	f300 8085 	bgt.w	40475a <_malloc_r+0x30a>
  404650:	f8df 9158 	ldr.w	r9, [pc, #344]	; 4047ac <_malloc_r+0x35c>
  404654:	4b50      	ldr	r3, [pc, #320]	; (404798 <_malloc_r+0x348>)
  404656:	f8d9 2000 	ldr.w	r2, [r9]
  40465a:	681b      	ldr	r3, [r3, #0]
  40465c:	3201      	adds	r2, #1
  40465e:	4433      	add	r3, r6
  404660:	eb04 0a08 	add.w	sl, r4, r8
  404664:	f000 8155 	beq.w	404912 <_malloc_r+0x4c2>
  404668:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
  40466c:	330f      	adds	r3, #15
  40466e:	f423 6b7f 	bic.w	fp, r3, #4080	; 0xff0
  404672:	f02b 0b0f 	bic.w	fp, fp, #15
  404676:	4659      	mov	r1, fp
  404678:	4628      	mov	r0, r5
  40467a:	f000 fc17 	bl	404eac <_sbrk_r>
  40467e:	1c41      	adds	r1, r0, #1
  404680:	4602      	mov	r2, r0
  404682:	f000 80fc 	beq.w	40487e <_malloc_r+0x42e>
  404686:	4582      	cmp	sl, r0
  404688:	f200 80f7 	bhi.w	40487a <_malloc_r+0x42a>
  40468c:	4b43      	ldr	r3, [pc, #268]	; (40479c <_malloc_r+0x34c>)
  40468e:	6819      	ldr	r1, [r3, #0]
  404690:	4459      	add	r1, fp
  404692:	6019      	str	r1, [r3, #0]
  404694:	f000 814d 	beq.w	404932 <_malloc_r+0x4e2>
  404698:	f8d9 0000 	ldr.w	r0, [r9]
  40469c:	3001      	adds	r0, #1
  40469e:	bf1b      	ittet	ne
  4046a0:	eba2 0a0a 	subne.w	sl, r2, sl
  4046a4:	4451      	addne	r1, sl
  4046a6:	f8c9 2000 	streq.w	r2, [r9]
  4046aa:	6019      	strne	r1, [r3, #0]
  4046ac:	f012 0107 	ands.w	r1, r2, #7
  4046b0:	f000 8115 	beq.w	4048de <_malloc_r+0x48e>
  4046b4:	f1c1 0008 	rsb	r0, r1, #8
  4046b8:	f5c1 5180 	rsb	r1, r1, #4096	; 0x1000
  4046bc:	4402      	add	r2, r0
  4046be:	3108      	adds	r1, #8
  4046c0:	eb02 090b 	add.w	r9, r2, fp
  4046c4:	f3c9 090b 	ubfx	r9, r9, #0, #12
  4046c8:	eba1 0909 	sub.w	r9, r1, r9
  4046cc:	4649      	mov	r1, r9
  4046ce:	4628      	mov	r0, r5
  4046d0:	9301      	str	r3, [sp, #4]
  4046d2:	9200      	str	r2, [sp, #0]
  4046d4:	f000 fbea 	bl	404eac <_sbrk_r>
  4046d8:	1c43      	adds	r3, r0, #1
  4046da:	e89d 000c 	ldmia.w	sp, {r2, r3}
  4046de:	f000 8143 	beq.w	404968 <_malloc_r+0x518>
  4046e2:	1a80      	subs	r0, r0, r2
  4046e4:	4448      	add	r0, r9
  4046e6:	f040 0001 	orr.w	r0, r0, #1
  4046ea:	6819      	ldr	r1, [r3, #0]
  4046ec:	60ba      	str	r2, [r7, #8]
  4046ee:	4449      	add	r1, r9
  4046f0:	42bc      	cmp	r4, r7
  4046f2:	6050      	str	r0, [r2, #4]
  4046f4:	6019      	str	r1, [r3, #0]
  4046f6:	d017      	beq.n	404728 <_malloc_r+0x2d8>
  4046f8:	f1b8 0f0f 	cmp.w	r8, #15
  4046fc:	f240 80fb 	bls.w	4048f6 <_malloc_r+0x4a6>
  404700:	6860      	ldr	r0, [r4, #4]
  404702:	f1a8 020c 	sub.w	r2, r8, #12
  404706:	f022 0207 	bic.w	r2, r2, #7
  40470a:	eb04 0e02 	add.w	lr, r4, r2
  40470e:	f000 0001 	and.w	r0, r0, #1
  404712:	f04f 0c05 	mov.w	ip, #5
  404716:	4310      	orrs	r0, r2
  404718:	2a0f      	cmp	r2, #15
  40471a:	6060      	str	r0, [r4, #4]
  40471c:	f8ce c004 	str.w	ip, [lr, #4]
  404720:	f8ce c008 	str.w	ip, [lr, #8]
  404724:	f200 8117 	bhi.w	404956 <_malloc_r+0x506>
  404728:	4b1d      	ldr	r3, [pc, #116]	; (4047a0 <_malloc_r+0x350>)
  40472a:	68bc      	ldr	r4, [r7, #8]
  40472c:	681a      	ldr	r2, [r3, #0]
  40472e:	4291      	cmp	r1, r2
  404730:	bf88      	it	hi
  404732:	6019      	strhi	r1, [r3, #0]
  404734:	4b1b      	ldr	r3, [pc, #108]	; (4047a4 <_malloc_r+0x354>)
  404736:	681a      	ldr	r2, [r3, #0]
  404738:	4291      	cmp	r1, r2
  40473a:	6862      	ldr	r2, [r4, #4]
  40473c:	bf88      	it	hi
  40473e:	6019      	strhi	r1, [r3, #0]
  404740:	f022 0203 	bic.w	r2, r2, #3
  404744:	4296      	cmp	r6, r2
  404746:	eba2 0306 	sub.w	r3, r2, r6
  40474a:	d801      	bhi.n	404750 <_malloc_r+0x300>
  40474c:	2b0f      	cmp	r3, #15
  40474e:	dc04      	bgt.n	40475a <_malloc_r+0x30a>
  404750:	4628      	mov	r0, r5
  404752:	f000 f9ff 	bl	404b54 <__malloc_unlock>
  404756:	2400      	movs	r4, #0
  404758:	e740      	b.n	4045dc <_malloc_r+0x18c>
  40475a:	19a2      	adds	r2, r4, r6
  40475c:	f043 0301 	orr.w	r3, r3, #1
  404760:	f046 0601 	orr.w	r6, r6, #1
  404764:	6066      	str	r6, [r4, #4]
  404766:	4628      	mov	r0, r5
  404768:	60ba      	str	r2, [r7, #8]
  40476a:	6053      	str	r3, [r2, #4]
  40476c:	f000 f9f2 	bl	404b54 <__malloc_unlock>
  404770:	3408      	adds	r4, #8
  404772:	4620      	mov	r0, r4
  404774:	b003      	add	sp, #12
  404776:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  40477a:	2b14      	cmp	r3, #20
  40477c:	d971      	bls.n	404862 <_malloc_r+0x412>
  40477e:	2b54      	cmp	r3, #84	; 0x54
  404780:	f200 80a3 	bhi.w	4048ca <_malloc_r+0x47a>
  404784:	0b33      	lsrs	r3, r6, #12
  404786:	f103 006f 	add.w	r0, r3, #111	; 0x6f
  40478a:	f103 0e6e 	add.w	lr, r3, #110	; 0x6e
  40478e:	00c3      	lsls	r3, r0, #3
  404790:	e680      	b.n	404494 <_malloc_r+0x44>
  404792:	bf00      	nop
  404794:	204005a8 	.word	0x204005a8
  404798:	2040c3bc 	.word	0x2040c3bc
  40479c:	2040c38c 	.word	0x2040c38c
  4047a0:	2040c3b4 	.word	0x2040c3b4
  4047a4:	2040c3b8 	.word	0x2040c3b8
  4047a8:	204005b0 	.word	0x204005b0
  4047ac:	204009b0 	.word	0x204009b0
  4047b0:	0a5a      	lsrs	r2, r3, #9
  4047b2:	2a04      	cmp	r2, #4
  4047b4:	d95b      	bls.n	40486e <_malloc_r+0x41e>
  4047b6:	2a14      	cmp	r2, #20
  4047b8:	f200 80ae 	bhi.w	404918 <_malloc_r+0x4c8>
  4047bc:	f102 015c 	add.w	r1, r2, #92	; 0x5c
  4047c0:	00c9      	lsls	r1, r1, #3
  4047c2:	325b      	adds	r2, #91	; 0x5b
  4047c4:	eb07 0c01 	add.w	ip, r7, r1
  4047c8:	5879      	ldr	r1, [r7, r1]
  4047ca:	f1ac 0c08 	sub.w	ip, ip, #8
  4047ce:	458c      	cmp	ip, r1
  4047d0:	f000 8088 	beq.w	4048e4 <_malloc_r+0x494>
  4047d4:	684a      	ldr	r2, [r1, #4]
  4047d6:	f022 0203 	bic.w	r2, r2, #3
  4047da:	4293      	cmp	r3, r2
  4047dc:	d273      	bcs.n	4048c6 <_malloc_r+0x476>
  4047de:	6889      	ldr	r1, [r1, #8]
  4047e0:	458c      	cmp	ip, r1
  4047e2:	d1f7      	bne.n	4047d4 <_malloc_r+0x384>
  4047e4:	f8dc 200c 	ldr.w	r2, [ip, #12]
  4047e8:	687b      	ldr	r3, [r7, #4]
  4047ea:	60e2      	str	r2, [r4, #12]
  4047ec:	f8c4 c008 	str.w	ip, [r4, #8]
  4047f0:	6094      	str	r4, [r2, #8]
  4047f2:	f8cc 400c 	str.w	r4, [ip, #12]
  4047f6:	e68f      	b.n	404518 <_malloc_r+0xc8>
  4047f8:	19a1      	adds	r1, r4, r6
  4047fa:	f046 0c01 	orr.w	ip, r6, #1
  4047fe:	f042 0601 	orr.w	r6, r2, #1
  404802:	f8c4 c004 	str.w	ip, [r4, #4]
  404806:	4628      	mov	r0, r5
  404808:	6179      	str	r1, [r7, #20]
  40480a:	6139      	str	r1, [r7, #16]
  40480c:	f8c1 e00c 	str.w	lr, [r1, #12]
  404810:	f8c1 e008 	str.w	lr, [r1, #8]
  404814:	604e      	str	r6, [r1, #4]
  404816:	50e2      	str	r2, [r4, r3]
  404818:	f000 f99c 	bl	404b54 <__malloc_unlock>
  40481c:	3408      	adds	r4, #8
  40481e:	e6dd      	b.n	4045dc <_malloc_r+0x18c>
  404820:	687b      	ldr	r3, [r7, #4]
  404822:	e679      	b.n	404518 <_malloc_r+0xc8>
  404824:	f108 0801 	add.w	r8, r8, #1
  404828:	f018 0f03 	tst.w	r8, #3
  40482c:	f10c 0c08 	add.w	ip, ip, #8
  404830:	f47f ae85 	bne.w	40453e <_malloc_r+0xee>
  404834:	e02d      	b.n	404892 <_malloc_r+0x442>
  404836:	68dc      	ldr	r4, [r3, #12]
  404838:	42a3      	cmp	r3, r4
  40483a:	bf08      	it	eq
  40483c:	3002      	addeq	r0, #2
  40483e:	f43f ae3e 	beq.w	4044be <_malloc_r+0x6e>
  404842:	e6bb      	b.n	4045bc <_malloc_r+0x16c>
  404844:	4419      	add	r1, r3
  404846:	461c      	mov	r4, r3
  404848:	684a      	ldr	r2, [r1, #4]
  40484a:	68db      	ldr	r3, [r3, #12]
  40484c:	f854 6f08 	ldr.w	r6, [r4, #8]!
  404850:	f042 0201 	orr.w	r2, r2, #1
  404854:	604a      	str	r2, [r1, #4]
  404856:	4628      	mov	r0, r5
  404858:	60f3      	str	r3, [r6, #12]
  40485a:	609e      	str	r6, [r3, #8]
  40485c:	f000 f97a 	bl	404b54 <__malloc_unlock>
  404860:	e6bc      	b.n	4045dc <_malloc_r+0x18c>
  404862:	f103 005c 	add.w	r0, r3, #92	; 0x5c
  404866:	f103 0e5b 	add.w	lr, r3, #91	; 0x5b
  40486a:	00c3      	lsls	r3, r0, #3
  40486c:	e612      	b.n	404494 <_malloc_r+0x44>
  40486e:	099a      	lsrs	r2, r3, #6
  404870:	f102 0139 	add.w	r1, r2, #57	; 0x39
  404874:	00c9      	lsls	r1, r1, #3
  404876:	3238      	adds	r2, #56	; 0x38
  404878:	e7a4      	b.n	4047c4 <_malloc_r+0x374>
  40487a:	42bc      	cmp	r4, r7
  40487c:	d054      	beq.n	404928 <_malloc_r+0x4d8>
  40487e:	68bc      	ldr	r4, [r7, #8]
  404880:	6862      	ldr	r2, [r4, #4]
  404882:	f022 0203 	bic.w	r2, r2, #3
  404886:	e75d      	b.n	404744 <_malloc_r+0x2f4>
  404888:	f859 3908 	ldr.w	r3, [r9], #-8
  40488c:	4599      	cmp	r9, r3
  40488e:	f040 8086 	bne.w	40499e <_malloc_r+0x54e>
  404892:	f010 0f03 	tst.w	r0, #3
  404896:	f100 30ff 	add.w	r0, r0, #4294967295
  40489a:	d1f5      	bne.n	404888 <_malloc_r+0x438>
  40489c:	687b      	ldr	r3, [r7, #4]
  40489e:	ea23 0304 	bic.w	r3, r3, r4
  4048a2:	607b      	str	r3, [r7, #4]
  4048a4:	0064      	lsls	r4, r4, #1
  4048a6:	429c      	cmp	r4, r3
  4048a8:	f63f aec7 	bhi.w	40463a <_malloc_r+0x1ea>
  4048ac:	2c00      	cmp	r4, #0
  4048ae:	f43f aec4 	beq.w	40463a <_malloc_r+0x1ea>
  4048b2:	421c      	tst	r4, r3
  4048b4:	4640      	mov	r0, r8
  4048b6:	f47f ae3e 	bne.w	404536 <_malloc_r+0xe6>
  4048ba:	0064      	lsls	r4, r4, #1
  4048bc:	421c      	tst	r4, r3
  4048be:	f100 0004 	add.w	r0, r0, #4
  4048c2:	d0fa      	beq.n	4048ba <_malloc_r+0x46a>
  4048c4:	e637      	b.n	404536 <_malloc_r+0xe6>
  4048c6:	468c      	mov	ip, r1
  4048c8:	e78c      	b.n	4047e4 <_malloc_r+0x394>
  4048ca:	f5b3 7faa 	cmp.w	r3, #340	; 0x154
  4048ce:	d815      	bhi.n	4048fc <_malloc_r+0x4ac>
  4048d0:	0bf3      	lsrs	r3, r6, #15
  4048d2:	f103 0078 	add.w	r0, r3, #120	; 0x78
  4048d6:	f103 0e77 	add.w	lr, r3, #119	; 0x77
  4048da:	00c3      	lsls	r3, r0, #3
  4048dc:	e5da      	b.n	404494 <_malloc_r+0x44>
  4048de:	f44f 5180 	mov.w	r1, #4096	; 0x1000
  4048e2:	e6ed      	b.n	4046c0 <_malloc_r+0x270>
  4048e4:	687b      	ldr	r3, [r7, #4]
  4048e6:	1092      	asrs	r2, r2, #2
  4048e8:	2101      	movs	r1, #1
  4048ea:	fa01 f202 	lsl.w	r2, r1, r2
  4048ee:	4313      	orrs	r3, r2
  4048f0:	607b      	str	r3, [r7, #4]
  4048f2:	4662      	mov	r2, ip
  4048f4:	e779      	b.n	4047ea <_malloc_r+0x39a>
  4048f6:	2301      	movs	r3, #1
  4048f8:	6053      	str	r3, [r2, #4]
  4048fa:	e729      	b.n	404750 <_malloc_r+0x300>
  4048fc:	f240 5254 	movw	r2, #1364	; 0x554
  404900:	4293      	cmp	r3, r2
  404902:	d822      	bhi.n	40494a <_malloc_r+0x4fa>
  404904:	0cb3      	lsrs	r3, r6, #18
  404906:	f103 007d 	add.w	r0, r3, #125	; 0x7d
  40490a:	f103 0e7c 	add.w	lr, r3, #124	; 0x7c
  40490e:	00c3      	lsls	r3, r0, #3
  404910:	e5c0      	b.n	404494 <_malloc_r+0x44>
  404912:	f103 0b10 	add.w	fp, r3, #16
  404916:	e6ae      	b.n	404676 <_malloc_r+0x226>
  404918:	2a54      	cmp	r2, #84	; 0x54
  40491a:	d829      	bhi.n	404970 <_malloc_r+0x520>
  40491c:	0b1a      	lsrs	r2, r3, #12
  40491e:	f102 016f 	add.w	r1, r2, #111	; 0x6f
  404922:	00c9      	lsls	r1, r1, #3
  404924:	326e      	adds	r2, #110	; 0x6e
  404926:	e74d      	b.n	4047c4 <_malloc_r+0x374>
  404928:	4b20      	ldr	r3, [pc, #128]	; (4049ac <_malloc_r+0x55c>)
  40492a:	6819      	ldr	r1, [r3, #0]
  40492c:	4459      	add	r1, fp
  40492e:	6019      	str	r1, [r3, #0]
  404930:	e6b2      	b.n	404698 <_malloc_r+0x248>
  404932:	f3ca 000b 	ubfx	r0, sl, #0, #12
  404936:	2800      	cmp	r0, #0
  404938:	f47f aeae 	bne.w	404698 <_malloc_r+0x248>
  40493c:	eb08 030b 	add.w	r3, r8, fp
  404940:	68ba      	ldr	r2, [r7, #8]
  404942:	f043 0301 	orr.w	r3, r3, #1
  404946:	6053      	str	r3, [r2, #4]
  404948:	e6ee      	b.n	404728 <_malloc_r+0x2d8>
  40494a:	207f      	movs	r0, #127	; 0x7f
  40494c:	f44f 737e 	mov.w	r3, #1016	; 0x3f8
  404950:	f04f 0e7e 	mov.w	lr, #126	; 0x7e
  404954:	e59e      	b.n	404494 <_malloc_r+0x44>
  404956:	f104 0108 	add.w	r1, r4, #8
  40495a:	4628      	mov	r0, r5
  40495c:	9300      	str	r3, [sp, #0]
  40495e:	f7ff fa59 	bl	403e14 <_free_r>
  404962:	9b00      	ldr	r3, [sp, #0]
  404964:	6819      	ldr	r1, [r3, #0]
  404966:	e6df      	b.n	404728 <_malloc_r+0x2d8>
  404968:	2001      	movs	r0, #1
  40496a:	f04f 0900 	mov.w	r9, #0
  40496e:	e6bc      	b.n	4046ea <_malloc_r+0x29a>
  404970:	f5b2 7faa 	cmp.w	r2, #340	; 0x154
  404974:	d805      	bhi.n	404982 <_malloc_r+0x532>
  404976:	0bda      	lsrs	r2, r3, #15
  404978:	f102 0178 	add.w	r1, r2, #120	; 0x78
  40497c:	00c9      	lsls	r1, r1, #3
  40497e:	3277      	adds	r2, #119	; 0x77
  404980:	e720      	b.n	4047c4 <_malloc_r+0x374>
  404982:	f240 5154 	movw	r1, #1364	; 0x554
  404986:	428a      	cmp	r2, r1
  404988:	d805      	bhi.n	404996 <_malloc_r+0x546>
  40498a:	0c9a      	lsrs	r2, r3, #18
  40498c:	f102 017d 	add.w	r1, r2, #125	; 0x7d
  404990:	00c9      	lsls	r1, r1, #3
  404992:	327c      	adds	r2, #124	; 0x7c
  404994:	e716      	b.n	4047c4 <_malloc_r+0x374>
  404996:	f44f 717e 	mov.w	r1, #1016	; 0x3f8
  40499a:	227e      	movs	r2, #126	; 0x7e
  40499c:	e712      	b.n	4047c4 <_malloc_r+0x374>
  40499e:	687b      	ldr	r3, [r7, #4]
  4049a0:	e780      	b.n	4048a4 <_malloc_r+0x454>
  4049a2:	08f0      	lsrs	r0, r6, #3
  4049a4:	f106 0308 	add.w	r3, r6, #8
  4049a8:	e600      	b.n	4045ac <_malloc_r+0x15c>
  4049aa:	bf00      	nop
  4049ac:	2040c38c 	.word	0x2040c38c

004049b0 <__ascii_mbtowc>:
  4049b0:	b082      	sub	sp, #8
  4049b2:	b149      	cbz	r1, 4049c8 <__ascii_mbtowc+0x18>
  4049b4:	b15a      	cbz	r2, 4049ce <__ascii_mbtowc+0x1e>
  4049b6:	b16b      	cbz	r3, 4049d4 <__ascii_mbtowc+0x24>
  4049b8:	7813      	ldrb	r3, [r2, #0]
  4049ba:	600b      	str	r3, [r1, #0]
  4049bc:	7812      	ldrb	r2, [r2, #0]
  4049be:	1c10      	adds	r0, r2, #0
  4049c0:	bf18      	it	ne
  4049c2:	2001      	movne	r0, #1
  4049c4:	b002      	add	sp, #8
  4049c6:	4770      	bx	lr
  4049c8:	a901      	add	r1, sp, #4
  4049ca:	2a00      	cmp	r2, #0
  4049cc:	d1f3      	bne.n	4049b6 <__ascii_mbtowc+0x6>
  4049ce:	4610      	mov	r0, r2
  4049d0:	b002      	add	sp, #8
  4049d2:	4770      	bx	lr
  4049d4:	f06f 0001 	mvn.w	r0, #1
  4049d8:	e7f4      	b.n	4049c4 <__ascii_mbtowc+0x14>
  4049da:	bf00      	nop
  4049dc:	0000      	movs	r0, r0
	...

004049e0 <memchr>:
  4049e0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
  4049e4:	2a10      	cmp	r2, #16
  4049e6:	db2b      	blt.n	404a40 <memchr+0x60>
  4049e8:	f010 0f07 	tst.w	r0, #7
  4049ec:	d008      	beq.n	404a00 <memchr+0x20>
  4049ee:	f810 3b01 	ldrb.w	r3, [r0], #1
  4049f2:	3a01      	subs	r2, #1
  4049f4:	428b      	cmp	r3, r1
  4049f6:	d02d      	beq.n	404a54 <memchr+0x74>
  4049f8:	f010 0f07 	tst.w	r0, #7
  4049fc:	b342      	cbz	r2, 404a50 <memchr+0x70>
  4049fe:	d1f6      	bne.n	4049ee <memchr+0xe>
  404a00:	b4f0      	push	{r4, r5, r6, r7}
  404a02:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
  404a06:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
  404a0a:	f022 0407 	bic.w	r4, r2, #7
  404a0e:	f07f 0700 	mvns.w	r7, #0
  404a12:	2300      	movs	r3, #0
  404a14:	e8f0 5602 	ldrd	r5, r6, [r0], #8
  404a18:	3c08      	subs	r4, #8
  404a1a:	ea85 0501 	eor.w	r5, r5, r1
  404a1e:	ea86 0601 	eor.w	r6, r6, r1
  404a22:	fa85 f547 	uadd8	r5, r5, r7
  404a26:	faa3 f587 	sel	r5, r3, r7
  404a2a:	fa86 f647 	uadd8	r6, r6, r7
  404a2e:	faa5 f687 	sel	r6, r5, r7
  404a32:	b98e      	cbnz	r6, 404a58 <memchr+0x78>
  404a34:	d1ee      	bne.n	404a14 <memchr+0x34>
  404a36:	bcf0      	pop	{r4, r5, r6, r7}
  404a38:	f001 01ff 	and.w	r1, r1, #255	; 0xff
  404a3c:	f002 0207 	and.w	r2, r2, #7
  404a40:	b132      	cbz	r2, 404a50 <memchr+0x70>
  404a42:	f810 3b01 	ldrb.w	r3, [r0], #1
  404a46:	3a01      	subs	r2, #1
  404a48:	ea83 0301 	eor.w	r3, r3, r1
  404a4c:	b113      	cbz	r3, 404a54 <memchr+0x74>
  404a4e:	d1f8      	bne.n	404a42 <memchr+0x62>
  404a50:	2000      	movs	r0, #0
  404a52:	4770      	bx	lr
  404a54:	3801      	subs	r0, #1
  404a56:	4770      	bx	lr
  404a58:	2d00      	cmp	r5, #0
  404a5a:	bf06      	itte	eq
  404a5c:	4635      	moveq	r5, r6
  404a5e:	3803      	subeq	r0, #3
  404a60:	3807      	subne	r0, #7
  404a62:	f015 0f01 	tst.w	r5, #1
  404a66:	d107      	bne.n	404a78 <memchr+0x98>
  404a68:	3001      	adds	r0, #1
  404a6a:	f415 7f80 	tst.w	r5, #256	; 0x100
  404a6e:	bf02      	ittt	eq
  404a70:	3001      	addeq	r0, #1
  404a72:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
  404a76:	3001      	addeq	r0, #1
  404a78:	bcf0      	pop	{r4, r5, r6, r7}
  404a7a:	3801      	subs	r0, #1
  404a7c:	4770      	bx	lr
  404a7e:	bf00      	nop

00404a80 <memmove>:
  404a80:	4288      	cmp	r0, r1
  404a82:	b5f0      	push	{r4, r5, r6, r7, lr}
  404a84:	d90d      	bls.n	404aa2 <memmove+0x22>
  404a86:	188b      	adds	r3, r1, r2
  404a88:	4298      	cmp	r0, r3
  404a8a:	d20a      	bcs.n	404aa2 <memmove+0x22>
  404a8c:	1884      	adds	r4, r0, r2
  404a8e:	2a00      	cmp	r2, #0
  404a90:	d051      	beq.n	404b36 <memmove+0xb6>
  404a92:	4622      	mov	r2, r4
  404a94:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
  404a98:	f802 4d01 	strb.w	r4, [r2, #-1]!
  404a9c:	4299      	cmp	r1, r3
  404a9e:	d1f9      	bne.n	404a94 <memmove+0x14>
  404aa0:	bdf0      	pop	{r4, r5, r6, r7, pc}
  404aa2:	2a0f      	cmp	r2, #15
  404aa4:	d948      	bls.n	404b38 <memmove+0xb8>
  404aa6:	ea41 0300 	orr.w	r3, r1, r0
  404aaa:	079b      	lsls	r3, r3, #30
  404aac:	d146      	bne.n	404b3c <memmove+0xbc>
  404aae:	f100 0410 	add.w	r4, r0, #16
  404ab2:	f101 0310 	add.w	r3, r1, #16
  404ab6:	4615      	mov	r5, r2
  404ab8:	f853 6c10 	ldr.w	r6, [r3, #-16]
  404abc:	f844 6c10 	str.w	r6, [r4, #-16]
  404ac0:	f853 6c0c 	ldr.w	r6, [r3, #-12]
  404ac4:	f844 6c0c 	str.w	r6, [r4, #-12]
  404ac8:	f853 6c08 	ldr.w	r6, [r3, #-8]
  404acc:	f844 6c08 	str.w	r6, [r4, #-8]
  404ad0:	3d10      	subs	r5, #16
  404ad2:	f853 6c04 	ldr.w	r6, [r3, #-4]
  404ad6:	f844 6c04 	str.w	r6, [r4, #-4]
  404ada:	2d0f      	cmp	r5, #15
  404adc:	f103 0310 	add.w	r3, r3, #16
  404ae0:	f104 0410 	add.w	r4, r4, #16
  404ae4:	d8e8      	bhi.n	404ab8 <memmove+0x38>
  404ae6:	f1a2 0310 	sub.w	r3, r2, #16
  404aea:	f023 030f 	bic.w	r3, r3, #15
  404aee:	f002 0e0f 	and.w	lr, r2, #15
  404af2:	3310      	adds	r3, #16
  404af4:	f1be 0f03 	cmp.w	lr, #3
  404af8:	4419      	add	r1, r3
  404afa:	4403      	add	r3, r0
  404afc:	d921      	bls.n	404b42 <memmove+0xc2>
  404afe:	1f1e      	subs	r6, r3, #4
  404b00:	460d      	mov	r5, r1
  404b02:	4674      	mov	r4, lr
  404b04:	3c04      	subs	r4, #4
  404b06:	f855 7b04 	ldr.w	r7, [r5], #4
  404b0a:	f846 7f04 	str.w	r7, [r6, #4]!
  404b0e:	2c03      	cmp	r4, #3
  404b10:	d8f8      	bhi.n	404b04 <memmove+0x84>
  404b12:	f1ae 0404 	sub.w	r4, lr, #4
  404b16:	f024 0403 	bic.w	r4, r4, #3
  404b1a:	3404      	adds	r4, #4
  404b1c:	4421      	add	r1, r4
  404b1e:	4423      	add	r3, r4
  404b20:	f002 0203 	and.w	r2, r2, #3
  404b24:	b162      	cbz	r2, 404b40 <memmove+0xc0>
  404b26:	3b01      	subs	r3, #1
  404b28:	440a      	add	r2, r1
  404b2a:	f811 4b01 	ldrb.w	r4, [r1], #1
  404b2e:	f803 4f01 	strb.w	r4, [r3, #1]!
  404b32:	428a      	cmp	r2, r1
  404b34:	d1f9      	bne.n	404b2a <memmove+0xaa>
  404b36:	bdf0      	pop	{r4, r5, r6, r7, pc}
  404b38:	4603      	mov	r3, r0
  404b3a:	e7f3      	b.n	404b24 <memmove+0xa4>
  404b3c:	4603      	mov	r3, r0
  404b3e:	e7f2      	b.n	404b26 <memmove+0xa6>
  404b40:	bdf0      	pop	{r4, r5, r6, r7, pc}
  404b42:	4672      	mov	r2, lr
  404b44:	e7ee      	b.n	404b24 <memmove+0xa4>
  404b46:	bf00      	nop

00404b48 <__malloc_lock>:
  404b48:	4801      	ldr	r0, [pc, #4]	; (404b50 <__malloc_lock+0x8>)
  404b4a:	f7ff bbfd 	b.w	404348 <__retarget_lock_acquire_recursive>
  404b4e:	bf00      	nop
  404b50:	2040c41c 	.word	0x2040c41c

00404b54 <__malloc_unlock>:
  404b54:	4801      	ldr	r0, [pc, #4]	; (404b5c <__malloc_unlock+0x8>)
  404b56:	f7ff bbf9 	b.w	40434c <__retarget_lock_release_recursive>
  404b5a:	bf00      	nop
  404b5c:	2040c41c 	.word	0x2040c41c

00404b60 <_realloc_r>:
  404b60:	2900      	cmp	r1, #0
  404b62:	f000 8095 	beq.w	404c90 <_realloc_r+0x130>
  404b66:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  404b6a:	460d      	mov	r5, r1
  404b6c:	4616      	mov	r6, r2
  404b6e:	b083      	sub	sp, #12
  404b70:	4680      	mov	r8, r0
  404b72:	f106 070b 	add.w	r7, r6, #11
  404b76:	f7ff ffe7 	bl	404b48 <__malloc_lock>
  404b7a:	f855 ec04 	ldr.w	lr, [r5, #-4]
  404b7e:	2f16      	cmp	r7, #22
  404b80:	f02e 0403 	bic.w	r4, lr, #3
  404b84:	f1a5 0908 	sub.w	r9, r5, #8
  404b88:	d83c      	bhi.n	404c04 <_realloc_r+0xa4>
  404b8a:	2210      	movs	r2, #16
  404b8c:	4617      	mov	r7, r2
  404b8e:	42be      	cmp	r6, r7
  404b90:	d83d      	bhi.n	404c0e <_realloc_r+0xae>
  404b92:	4294      	cmp	r4, r2
  404b94:	da43      	bge.n	404c1e <_realloc_r+0xbe>
  404b96:	4bc4      	ldr	r3, [pc, #784]	; (404ea8 <_realloc_r+0x348>)
  404b98:	6899      	ldr	r1, [r3, #8]
  404b9a:	eb09 0004 	add.w	r0, r9, r4
  404b9e:	4288      	cmp	r0, r1
  404ba0:	f000 80b4 	beq.w	404d0c <_realloc_r+0x1ac>
  404ba4:	6843      	ldr	r3, [r0, #4]
  404ba6:	f023 0101 	bic.w	r1, r3, #1
  404baa:	4401      	add	r1, r0
  404bac:	6849      	ldr	r1, [r1, #4]
  404bae:	07c9      	lsls	r1, r1, #31
  404bb0:	d54c      	bpl.n	404c4c <_realloc_r+0xec>
  404bb2:	f01e 0f01 	tst.w	lr, #1
  404bb6:	f000 809b 	beq.w	404cf0 <_realloc_r+0x190>
  404bba:	4631      	mov	r1, r6
  404bbc:	4640      	mov	r0, r8
  404bbe:	f7ff fc47 	bl	404450 <_malloc_r>
  404bc2:	4606      	mov	r6, r0
  404bc4:	2800      	cmp	r0, #0
  404bc6:	d03a      	beq.n	404c3e <_realloc_r+0xde>
  404bc8:	f855 3c04 	ldr.w	r3, [r5, #-4]
  404bcc:	f023 0301 	bic.w	r3, r3, #1
  404bd0:	444b      	add	r3, r9
  404bd2:	f1a0 0208 	sub.w	r2, r0, #8
  404bd6:	429a      	cmp	r2, r3
  404bd8:	f000 8121 	beq.w	404e1e <_realloc_r+0x2be>
  404bdc:	1f22      	subs	r2, r4, #4
  404bde:	2a24      	cmp	r2, #36	; 0x24
  404be0:	f200 8107 	bhi.w	404df2 <_realloc_r+0x292>
  404be4:	2a13      	cmp	r2, #19
  404be6:	f200 80db 	bhi.w	404da0 <_realloc_r+0x240>
  404bea:	4603      	mov	r3, r0
  404bec:	462a      	mov	r2, r5
  404bee:	6811      	ldr	r1, [r2, #0]
  404bf0:	6019      	str	r1, [r3, #0]
  404bf2:	6851      	ldr	r1, [r2, #4]
  404bf4:	6059      	str	r1, [r3, #4]
  404bf6:	6892      	ldr	r2, [r2, #8]
  404bf8:	609a      	str	r2, [r3, #8]
  404bfa:	4629      	mov	r1, r5
  404bfc:	4640      	mov	r0, r8
  404bfe:	f7ff f909 	bl	403e14 <_free_r>
  404c02:	e01c      	b.n	404c3e <_realloc_r+0xde>
  404c04:	f027 0707 	bic.w	r7, r7, #7
  404c08:	2f00      	cmp	r7, #0
  404c0a:	463a      	mov	r2, r7
  404c0c:	dabf      	bge.n	404b8e <_realloc_r+0x2e>
  404c0e:	2600      	movs	r6, #0
  404c10:	230c      	movs	r3, #12
  404c12:	4630      	mov	r0, r6
  404c14:	f8c8 3000 	str.w	r3, [r8]
  404c18:	b003      	add	sp, #12
  404c1a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  404c1e:	462e      	mov	r6, r5
  404c20:	1be3      	subs	r3, r4, r7
  404c22:	2b0f      	cmp	r3, #15
  404c24:	d81e      	bhi.n	404c64 <_realloc_r+0x104>
  404c26:	f8d9 3004 	ldr.w	r3, [r9, #4]
  404c2a:	f003 0301 	and.w	r3, r3, #1
  404c2e:	4323      	orrs	r3, r4
  404c30:	444c      	add	r4, r9
  404c32:	f8c9 3004 	str.w	r3, [r9, #4]
  404c36:	6863      	ldr	r3, [r4, #4]
  404c38:	f043 0301 	orr.w	r3, r3, #1
  404c3c:	6063      	str	r3, [r4, #4]
  404c3e:	4640      	mov	r0, r8
  404c40:	f7ff ff88 	bl	404b54 <__malloc_unlock>
  404c44:	4630      	mov	r0, r6
  404c46:	b003      	add	sp, #12
  404c48:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  404c4c:	f023 0303 	bic.w	r3, r3, #3
  404c50:	18e1      	adds	r1, r4, r3
  404c52:	4291      	cmp	r1, r2
  404c54:	db1f      	blt.n	404c96 <_realloc_r+0x136>
  404c56:	68c3      	ldr	r3, [r0, #12]
  404c58:	6882      	ldr	r2, [r0, #8]
  404c5a:	462e      	mov	r6, r5
  404c5c:	60d3      	str	r3, [r2, #12]
  404c5e:	460c      	mov	r4, r1
  404c60:	609a      	str	r2, [r3, #8]
  404c62:	e7dd      	b.n	404c20 <_realloc_r+0xc0>
  404c64:	f8d9 2004 	ldr.w	r2, [r9, #4]
  404c68:	eb09 0107 	add.w	r1, r9, r7
  404c6c:	f002 0201 	and.w	r2, r2, #1
  404c70:	444c      	add	r4, r9
  404c72:	f043 0301 	orr.w	r3, r3, #1
  404c76:	4317      	orrs	r7, r2
  404c78:	f8c9 7004 	str.w	r7, [r9, #4]
  404c7c:	604b      	str	r3, [r1, #4]
  404c7e:	6863      	ldr	r3, [r4, #4]
  404c80:	f043 0301 	orr.w	r3, r3, #1
  404c84:	3108      	adds	r1, #8
  404c86:	6063      	str	r3, [r4, #4]
  404c88:	4640      	mov	r0, r8
  404c8a:	f7ff f8c3 	bl	403e14 <_free_r>
  404c8e:	e7d6      	b.n	404c3e <_realloc_r+0xde>
  404c90:	4611      	mov	r1, r2
  404c92:	f7ff bbdd 	b.w	404450 <_malloc_r>
  404c96:	f01e 0f01 	tst.w	lr, #1
  404c9a:	d18e      	bne.n	404bba <_realloc_r+0x5a>
  404c9c:	f855 1c08 	ldr.w	r1, [r5, #-8]
  404ca0:	eba9 0a01 	sub.w	sl, r9, r1
  404ca4:	f8da 1004 	ldr.w	r1, [sl, #4]
  404ca8:	f021 0103 	bic.w	r1, r1, #3
  404cac:	440b      	add	r3, r1
  404cae:	4423      	add	r3, r4
  404cb0:	4293      	cmp	r3, r2
  404cb2:	db25      	blt.n	404d00 <_realloc_r+0x1a0>
  404cb4:	68c2      	ldr	r2, [r0, #12]
  404cb6:	6881      	ldr	r1, [r0, #8]
  404cb8:	4656      	mov	r6, sl
  404cba:	60ca      	str	r2, [r1, #12]
  404cbc:	6091      	str	r1, [r2, #8]
  404cbe:	f8da 100c 	ldr.w	r1, [sl, #12]
  404cc2:	f856 0f08 	ldr.w	r0, [r6, #8]!
  404cc6:	1f22      	subs	r2, r4, #4
  404cc8:	2a24      	cmp	r2, #36	; 0x24
  404cca:	60c1      	str	r1, [r0, #12]
  404ccc:	6088      	str	r0, [r1, #8]
  404cce:	f200 8094 	bhi.w	404dfa <_realloc_r+0x29a>
  404cd2:	2a13      	cmp	r2, #19
  404cd4:	d96f      	bls.n	404db6 <_realloc_r+0x256>
  404cd6:	6829      	ldr	r1, [r5, #0]
  404cd8:	f8ca 1008 	str.w	r1, [sl, #8]
  404cdc:	6869      	ldr	r1, [r5, #4]
  404cde:	f8ca 100c 	str.w	r1, [sl, #12]
  404ce2:	2a1b      	cmp	r2, #27
  404ce4:	f200 80a2 	bhi.w	404e2c <_realloc_r+0x2cc>
  404ce8:	3508      	adds	r5, #8
  404cea:	f10a 0210 	add.w	r2, sl, #16
  404cee:	e063      	b.n	404db8 <_realloc_r+0x258>
  404cf0:	f855 3c08 	ldr.w	r3, [r5, #-8]
  404cf4:	eba9 0a03 	sub.w	sl, r9, r3
  404cf8:	f8da 1004 	ldr.w	r1, [sl, #4]
  404cfc:	f021 0103 	bic.w	r1, r1, #3
  404d00:	1863      	adds	r3, r4, r1
  404d02:	4293      	cmp	r3, r2
  404d04:	f6ff af59 	blt.w	404bba <_realloc_r+0x5a>
  404d08:	4656      	mov	r6, sl
  404d0a:	e7d8      	b.n	404cbe <_realloc_r+0x15e>
  404d0c:	6841      	ldr	r1, [r0, #4]
  404d0e:	f021 0b03 	bic.w	fp, r1, #3
  404d12:	44a3      	add	fp, r4
  404d14:	f107 0010 	add.w	r0, r7, #16
  404d18:	4583      	cmp	fp, r0
  404d1a:	da56      	bge.n	404dca <_realloc_r+0x26a>
  404d1c:	f01e 0f01 	tst.w	lr, #1
  404d20:	f47f af4b 	bne.w	404bba <_realloc_r+0x5a>
  404d24:	f855 1c08 	ldr.w	r1, [r5, #-8]
  404d28:	eba9 0a01 	sub.w	sl, r9, r1
  404d2c:	f8da 1004 	ldr.w	r1, [sl, #4]
  404d30:	f021 0103 	bic.w	r1, r1, #3
  404d34:	448b      	add	fp, r1
  404d36:	4558      	cmp	r0, fp
  404d38:	dce2      	bgt.n	404d00 <_realloc_r+0x1a0>
  404d3a:	4656      	mov	r6, sl
  404d3c:	f8da 100c 	ldr.w	r1, [sl, #12]
  404d40:	f856 0f08 	ldr.w	r0, [r6, #8]!
  404d44:	1f22      	subs	r2, r4, #4
  404d46:	2a24      	cmp	r2, #36	; 0x24
  404d48:	60c1      	str	r1, [r0, #12]
  404d4a:	6088      	str	r0, [r1, #8]
  404d4c:	f200 808f 	bhi.w	404e6e <_realloc_r+0x30e>
  404d50:	2a13      	cmp	r2, #19
  404d52:	f240 808a 	bls.w	404e6a <_realloc_r+0x30a>
  404d56:	6829      	ldr	r1, [r5, #0]
  404d58:	f8ca 1008 	str.w	r1, [sl, #8]
  404d5c:	6869      	ldr	r1, [r5, #4]
  404d5e:	f8ca 100c 	str.w	r1, [sl, #12]
  404d62:	2a1b      	cmp	r2, #27
  404d64:	f200 808a 	bhi.w	404e7c <_realloc_r+0x31c>
  404d68:	3508      	adds	r5, #8
  404d6a:	f10a 0210 	add.w	r2, sl, #16
  404d6e:	6829      	ldr	r1, [r5, #0]
  404d70:	6011      	str	r1, [r2, #0]
  404d72:	6869      	ldr	r1, [r5, #4]
  404d74:	6051      	str	r1, [r2, #4]
  404d76:	68a9      	ldr	r1, [r5, #8]
  404d78:	6091      	str	r1, [r2, #8]
  404d7a:	eb0a 0107 	add.w	r1, sl, r7
  404d7e:	ebab 0207 	sub.w	r2, fp, r7
  404d82:	f042 0201 	orr.w	r2, r2, #1
  404d86:	6099      	str	r1, [r3, #8]
  404d88:	604a      	str	r2, [r1, #4]
  404d8a:	f8da 3004 	ldr.w	r3, [sl, #4]
  404d8e:	f003 0301 	and.w	r3, r3, #1
  404d92:	431f      	orrs	r7, r3
  404d94:	4640      	mov	r0, r8
  404d96:	f8ca 7004 	str.w	r7, [sl, #4]
  404d9a:	f7ff fedb 	bl	404b54 <__malloc_unlock>
  404d9e:	e751      	b.n	404c44 <_realloc_r+0xe4>
  404da0:	682b      	ldr	r3, [r5, #0]
  404da2:	6003      	str	r3, [r0, #0]
  404da4:	686b      	ldr	r3, [r5, #4]
  404da6:	6043      	str	r3, [r0, #4]
  404da8:	2a1b      	cmp	r2, #27
  404daa:	d82d      	bhi.n	404e08 <_realloc_r+0x2a8>
  404dac:	f100 0308 	add.w	r3, r0, #8
  404db0:	f105 0208 	add.w	r2, r5, #8
  404db4:	e71b      	b.n	404bee <_realloc_r+0x8e>
  404db6:	4632      	mov	r2, r6
  404db8:	6829      	ldr	r1, [r5, #0]
  404dba:	6011      	str	r1, [r2, #0]
  404dbc:	6869      	ldr	r1, [r5, #4]
  404dbe:	6051      	str	r1, [r2, #4]
  404dc0:	68a9      	ldr	r1, [r5, #8]
  404dc2:	6091      	str	r1, [r2, #8]
  404dc4:	461c      	mov	r4, r3
  404dc6:	46d1      	mov	r9, sl
  404dc8:	e72a      	b.n	404c20 <_realloc_r+0xc0>
  404dca:	eb09 0107 	add.w	r1, r9, r7
  404dce:	ebab 0b07 	sub.w	fp, fp, r7
  404dd2:	f04b 0201 	orr.w	r2, fp, #1
  404dd6:	6099      	str	r1, [r3, #8]
  404dd8:	604a      	str	r2, [r1, #4]
  404dda:	f855 3c04 	ldr.w	r3, [r5, #-4]
  404dde:	f003 0301 	and.w	r3, r3, #1
  404de2:	431f      	orrs	r7, r3
  404de4:	4640      	mov	r0, r8
  404de6:	f845 7c04 	str.w	r7, [r5, #-4]
  404dea:	f7ff feb3 	bl	404b54 <__malloc_unlock>
  404dee:	462e      	mov	r6, r5
  404df0:	e728      	b.n	404c44 <_realloc_r+0xe4>
  404df2:	4629      	mov	r1, r5
  404df4:	f7ff fe44 	bl	404a80 <memmove>
  404df8:	e6ff      	b.n	404bfa <_realloc_r+0x9a>
  404dfa:	4629      	mov	r1, r5
  404dfc:	4630      	mov	r0, r6
  404dfe:	461c      	mov	r4, r3
  404e00:	46d1      	mov	r9, sl
  404e02:	f7ff fe3d 	bl	404a80 <memmove>
  404e06:	e70b      	b.n	404c20 <_realloc_r+0xc0>
  404e08:	68ab      	ldr	r3, [r5, #8]
  404e0a:	6083      	str	r3, [r0, #8]
  404e0c:	68eb      	ldr	r3, [r5, #12]
  404e0e:	60c3      	str	r3, [r0, #12]
  404e10:	2a24      	cmp	r2, #36	; 0x24
  404e12:	d017      	beq.n	404e44 <_realloc_r+0x2e4>
  404e14:	f100 0310 	add.w	r3, r0, #16
  404e18:	f105 0210 	add.w	r2, r5, #16
  404e1c:	e6e7      	b.n	404bee <_realloc_r+0x8e>
  404e1e:	f850 3c04 	ldr.w	r3, [r0, #-4]
  404e22:	f023 0303 	bic.w	r3, r3, #3
  404e26:	441c      	add	r4, r3
  404e28:	462e      	mov	r6, r5
  404e2a:	e6f9      	b.n	404c20 <_realloc_r+0xc0>
  404e2c:	68a9      	ldr	r1, [r5, #8]
  404e2e:	f8ca 1010 	str.w	r1, [sl, #16]
  404e32:	68e9      	ldr	r1, [r5, #12]
  404e34:	f8ca 1014 	str.w	r1, [sl, #20]
  404e38:	2a24      	cmp	r2, #36	; 0x24
  404e3a:	d00c      	beq.n	404e56 <_realloc_r+0x2f6>
  404e3c:	3510      	adds	r5, #16
  404e3e:	f10a 0218 	add.w	r2, sl, #24
  404e42:	e7b9      	b.n	404db8 <_realloc_r+0x258>
  404e44:	692b      	ldr	r3, [r5, #16]
  404e46:	6103      	str	r3, [r0, #16]
  404e48:	696b      	ldr	r3, [r5, #20]
  404e4a:	6143      	str	r3, [r0, #20]
  404e4c:	f105 0218 	add.w	r2, r5, #24
  404e50:	f100 0318 	add.w	r3, r0, #24
  404e54:	e6cb      	b.n	404bee <_realloc_r+0x8e>
  404e56:	692a      	ldr	r2, [r5, #16]
  404e58:	f8ca 2018 	str.w	r2, [sl, #24]
  404e5c:	696a      	ldr	r2, [r5, #20]
  404e5e:	f8ca 201c 	str.w	r2, [sl, #28]
  404e62:	3518      	adds	r5, #24
  404e64:	f10a 0220 	add.w	r2, sl, #32
  404e68:	e7a6      	b.n	404db8 <_realloc_r+0x258>
  404e6a:	4632      	mov	r2, r6
  404e6c:	e77f      	b.n	404d6e <_realloc_r+0x20e>
  404e6e:	4629      	mov	r1, r5
  404e70:	4630      	mov	r0, r6
  404e72:	9301      	str	r3, [sp, #4]
  404e74:	f7ff fe04 	bl	404a80 <memmove>
  404e78:	9b01      	ldr	r3, [sp, #4]
  404e7a:	e77e      	b.n	404d7a <_realloc_r+0x21a>
  404e7c:	68a9      	ldr	r1, [r5, #8]
  404e7e:	f8ca 1010 	str.w	r1, [sl, #16]
  404e82:	68e9      	ldr	r1, [r5, #12]
  404e84:	f8ca 1014 	str.w	r1, [sl, #20]
  404e88:	2a24      	cmp	r2, #36	; 0x24
  404e8a:	d003      	beq.n	404e94 <_realloc_r+0x334>
  404e8c:	3510      	adds	r5, #16
  404e8e:	f10a 0218 	add.w	r2, sl, #24
  404e92:	e76c      	b.n	404d6e <_realloc_r+0x20e>
  404e94:	692a      	ldr	r2, [r5, #16]
  404e96:	f8ca 2018 	str.w	r2, [sl, #24]
  404e9a:	696a      	ldr	r2, [r5, #20]
  404e9c:	f8ca 201c 	str.w	r2, [sl, #28]
  404ea0:	3518      	adds	r5, #24
  404ea2:	f10a 0220 	add.w	r2, sl, #32
  404ea6:	e762      	b.n	404d6e <_realloc_r+0x20e>
  404ea8:	204005a8 	.word	0x204005a8

00404eac <_sbrk_r>:
  404eac:	b538      	push	{r3, r4, r5, lr}
  404eae:	4c07      	ldr	r4, [pc, #28]	; (404ecc <_sbrk_r+0x20>)
  404eb0:	2300      	movs	r3, #0
  404eb2:	4605      	mov	r5, r0
  404eb4:	4608      	mov	r0, r1
  404eb6:	6023      	str	r3, [r4, #0]
  404eb8:	f7fd fa2a 	bl	402310 <_sbrk>
  404ebc:	1c43      	adds	r3, r0, #1
  404ebe:	d000      	beq.n	404ec2 <_sbrk_r+0x16>
  404ec0:	bd38      	pop	{r3, r4, r5, pc}
  404ec2:	6823      	ldr	r3, [r4, #0]
  404ec4:	2b00      	cmp	r3, #0
  404ec6:	d0fb      	beq.n	404ec0 <_sbrk_r+0x14>
  404ec8:	602b      	str	r3, [r5, #0]
  404eca:	bd38      	pop	{r3, r4, r5, pc}
  404ecc:	2040c430 	.word	0x2040c430

00404ed0 <__sread>:
  404ed0:	b510      	push	{r4, lr}
  404ed2:	460c      	mov	r4, r1
  404ed4:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
  404ed8:	f000 f9f6 	bl	4052c8 <_read_r>
  404edc:	2800      	cmp	r0, #0
  404ede:	db03      	blt.n	404ee8 <__sread+0x18>
  404ee0:	6d23      	ldr	r3, [r4, #80]	; 0x50
  404ee2:	4403      	add	r3, r0
  404ee4:	6523      	str	r3, [r4, #80]	; 0x50
  404ee6:	bd10      	pop	{r4, pc}
  404ee8:	89a3      	ldrh	r3, [r4, #12]
  404eea:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
  404eee:	81a3      	strh	r3, [r4, #12]
  404ef0:	bd10      	pop	{r4, pc}
  404ef2:	bf00      	nop

00404ef4 <__swrite>:
  404ef4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  404ef8:	4616      	mov	r6, r2
  404efa:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
  404efe:	461f      	mov	r7, r3
  404f00:	05d3      	lsls	r3, r2, #23
  404f02:	460c      	mov	r4, r1
  404f04:	4605      	mov	r5, r0
  404f06:	d507      	bpl.n	404f18 <__swrite+0x24>
  404f08:	2200      	movs	r2, #0
  404f0a:	2302      	movs	r3, #2
  404f0c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
  404f10:	f000 f9c4 	bl	40529c <_lseek_r>
  404f14:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
  404f18:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
  404f1c:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
  404f20:	81a2      	strh	r2, [r4, #12]
  404f22:	463b      	mov	r3, r7
  404f24:	4632      	mov	r2, r6
  404f26:	4628      	mov	r0, r5
  404f28:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
  404f2c:	f000 b8a4 	b.w	405078 <_write_r>

00404f30 <__sseek>:
  404f30:	b510      	push	{r4, lr}
  404f32:	460c      	mov	r4, r1
  404f34:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
  404f38:	f000 f9b0 	bl	40529c <_lseek_r>
  404f3c:	89a3      	ldrh	r3, [r4, #12]
  404f3e:	1c42      	adds	r2, r0, #1
  404f40:	bf0e      	itee	eq
  404f42:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
  404f46:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
  404f4a:	6520      	strne	r0, [r4, #80]	; 0x50
  404f4c:	81a3      	strh	r3, [r4, #12]
  404f4e:	bd10      	pop	{r4, pc}

00404f50 <__sclose>:
  404f50:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
  404f54:	f000 b908 	b.w	405168 <_close_r>

00404f58 <__swbuf_r>:
  404f58:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  404f5a:	460d      	mov	r5, r1
  404f5c:	4614      	mov	r4, r2
  404f5e:	4606      	mov	r6, r0
  404f60:	b110      	cbz	r0, 404f68 <__swbuf_r+0x10>
  404f62:	6b83      	ldr	r3, [r0, #56]	; 0x38
  404f64:	2b00      	cmp	r3, #0
  404f66:	d04b      	beq.n	405000 <__swbuf_r+0xa8>
  404f68:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
  404f6c:	69a3      	ldr	r3, [r4, #24]
  404f6e:	60a3      	str	r3, [r4, #8]
  404f70:	b291      	uxth	r1, r2
  404f72:	0708      	lsls	r0, r1, #28
  404f74:	d539      	bpl.n	404fea <__swbuf_r+0x92>
  404f76:	6923      	ldr	r3, [r4, #16]
  404f78:	2b00      	cmp	r3, #0
  404f7a:	d036      	beq.n	404fea <__swbuf_r+0x92>
  404f7c:	b2ed      	uxtb	r5, r5
  404f7e:	0489      	lsls	r1, r1, #18
  404f80:	462f      	mov	r7, r5
  404f82:	d515      	bpl.n	404fb0 <__swbuf_r+0x58>
  404f84:	6822      	ldr	r2, [r4, #0]
  404f86:	6961      	ldr	r1, [r4, #20]
  404f88:	1ad3      	subs	r3, r2, r3
  404f8a:	428b      	cmp	r3, r1
  404f8c:	da1c      	bge.n	404fc8 <__swbuf_r+0x70>
  404f8e:	3301      	adds	r3, #1
  404f90:	68a1      	ldr	r1, [r4, #8]
  404f92:	1c50      	adds	r0, r2, #1
  404f94:	3901      	subs	r1, #1
  404f96:	60a1      	str	r1, [r4, #8]
  404f98:	6020      	str	r0, [r4, #0]
  404f9a:	7015      	strb	r5, [r2, #0]
  404f9c:	6962      	ldr	r2, [r4, #20]
  404f9e:	429a      	cmp	r2, r3
  404fa0:	d01a      	beq.n	404fd8 <__swbuf_r+0x80>
  404fa2:	89a3      	ldrh	r3, [r4, #12]
  404fa4:	07db      	lsls	r3, r3, #31
  404fa6:	d501      	bpl.n	404fac <__swbuf_r+0x54>
  404fa8:	2d0a      	cmp	r5, #10
  404faa:	d015      	beq.n	404fd8 <__swbuf_r+0x80>
  404fac:	4638      	mov	r0, r7
  404fae:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  404fb0:	6e61      	ldr	r1, [r4, #100]	; 0x64
  404fb2:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
  404fb6:	f421 5100 	bic.w	r1, r1, #8192	; 0x2000
  404fba:	81a2      	strh	r2, [r4, #12]
  404fbc:	6822      	ldr	r2, [r4, #0]
  404fbe:	6661      	str	r1, [r4, #100]	; 0x64
  404fc0:	6961      	ldr	r1, [r4, #20]
  404fc2:	1ad3      	subs	r3, r2, r3
  404fc4:	428b      	cmp	r3, r1
  404fc6:	dbe2      	blt.n	404f8e <__swbuf_r+0x36>
  404fc8:	4621      	mov	r1, r4
  404fca:	4630      	mov	r0, r6
  404fcc:	f7fe fda4 	bl	403b18 <_fflush_r>
  404fd0:	b940      	cbnz	r0, 404fe4 <__swbuf_r+0x8c>
  404fd2:	6822      	ldr	r2, [r4, #0]
  404fd4:	2301      	movs	r3, #1
  404fd6:	e7db      	b.n	404f90 <__swbuf_r+0x38>
  404fd8:	4621      	mov	r1, r4
  404fda:	4630      	mov	r0, r6
  404fdc:	f7fe fd9c 	bl	403b18 <_fflush_r>
  404fe0:	2800      	cmp	r0, #0
  404fe2:	d0e3      	beq.n	404fac <__swbuf_r+0x54>
  404fe4:	f04f 37ff 	mov.w	r7, #4294967295
  404fe8:	e7e0      	b.n	404fac <__swbuf_r+0x54>
  404fea:	4621      	mov	r1, r4
  404fec:	4630      	mov	r0, r6
  404fee:	f7fe fc7f 	bl	4038f0 <__swsetup_r>
  404ff2:	2800      	cmp	r0, #0
  404ff4:	d1f6      	bne.n	404fe4 <__swbuf_r+0x8c>
  404ff6:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
  404ffa:	6923      	ldr	r3, [r4, #16]
  404ffc:	b291      	uxth	r1, r2
  404ffe:	e7bd      	b.n	404f7c <__swbuf_r+0x24>
  405000:	f7fe fde2 	bl	403bc8 <__sinit>
  405004:	e7b0      	b.n	404f68 <__swbuf_r+0x10>
  405006:	bf00      	nop

00405008 <_wcrtomb_r>:
  405008:	b5f0      	push	{r4, r5, r6, r7, lr}
  40500a:	4606      	mov	r6, r0
  40500c:	b085      	sub	sp, #20
  40500e:	461f      	mov	r7, r3
  405010:	b189      	cbz	r1, 405036 <_wcrtomb_r+0x2e>
  405012:	4c10      	ldr	r4, [pc, #64]	; (405054 <_wcrtomb_r+0x4c>)
  405014:	4d10      	ldr	r5, [pc, #64]	; (405058 <_wcrtomb_r+0x50>)
  405016:	6824      	ldr	r4, [r4, #0]
  405018:	6b64      	ldr	r4, [r4, #52]	; 0x34
  40501a:	2c00      	cmp	r4, #0
  40501c:	bf08      	it	eq
  40501e:	462c      	moveq	r4, r5
  405020:	f8d4 40e0 	ldr.w	r4, [r4, #224]	; 0xe0
  405024:	47a0      	blx	r4
  405026:	1c43      	adds	r3, r0, #1
  405028:	d103      	bne.n	405032 <_wcrtomb_r+0x2a>
  40502a:	2200      	movs	r2, #0
  40502c:	238a      	movs	r3, #138	; 0x8a
  40502e:	603a      	str	r2, [r7, #0]
  405030:	6033      	str	r3, [r6, #0]
  405032:	b005      	add	sp, #20
  405034:	bdf0      	pop	{r4, r5, r6, r7, pc}
  405036:	460c      	mov	r4, r1
  405038:	4906      	ldr	r1, [pc, #24]	; (405054 <_wcrtomb_r+0x4c>)
  40503a:	4a07      	ldr	r2, [pc, #28]	; (405058 <_wcrtomb_r+0x50>)
  40503c:	6809      	ldr	r1, [r1, #0]
  40503e:	6b49      	ldr	r1, [r1, #52]	; 0x34
  405040:	2900      	cmp	r1, #0
  405042:	bf08      	it	eq
  405044:	4611      	moveq	r1, r2
  405046:	4622      	mov	r2, r4
  405048:	f8d1 40e0 	ldr.w	r4, [r1, #224]	; 0xe0
  40504c:	a901      	add	r1, sp, #4
  40504e:	47a0      	blx	r4
  405050:	e7e9      	b.n	405026 <_wcrtomb_r+0x1e>
  405052:	bf00      	nop
  405054:	2040000c 	.word	0x2040000c
  405058:	2040043c 	.word	0x2040043c

0040505c <__ascii_wctomb>:
  40505c:	b121      	cbz	r1, 405068 <__ascii_wctomb+0xc>
  40505e:	2aff      	cmp	r2, #255	; 0xff
  405060:	d804      	bhi.n	40506c <__ascii_wctomb+0x10>
  405062:	700a      	strb	r2, [r1, #0]
  405064:	2001      	movs	r0, #1
  405066:	4770      	bx	lr
  405068:	4608      	mov	r0, r1
  40506a:	4770      	bx	lr
  40506c:	238a      	movs	r3, #138	; 0x8a
  40506e:	6003      	str	r3, [r0, #0]
  405070:	f04f 30ff 	mov.w	r0, #4294967295
  405074:	4770      	bx	lr
  405076:	bf00      	nop

00405078 <_write_r>:
  405078:	b570      	push	{r4, r5, r6, lr}
  40507a:	460d      	mov	r5, r1
  40507c:	4c08      	ldr	r4, [pc, #32]	; (4050a0 <_write_r+0x28>)
  40507e:	4611      	mov	r1, r2
  405080:	4606      	mov	r6, r0
  405082:	461a      	mov	r2, r3
  405084:	4628      	mov	r0, r5
  405086:	2300      	movs	r3, #0
  405088:	6023      	str	r3, [r4, #0]
  40508a:	f7fc fc55 	bl	401938 <_write>
  40508e:	1c43      	adds	r3, r0, #1
  405090:	d000      	beq.n	405094 <_write_r+0x1c>
  405092:	bd70      	pop	{r4, r5, r6, pc}
  405094:	6823      	ldr	r3, [r4, #0]
  405096:	2b00      	cmp	r3, #0
  405098:	d0fb      	beq.n	405092 <_write_r+0x1a>
  40509a:	6033      	str	r3, [r6, #0]
  40509c:	bd70      	pop	{r4, r5, r6, pc}
  40509e:	bf00      	nop
  4050a0:	2040c430 	.word	0x2040c430

004050a4 <__register_exitproc>:
  4050a4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
  4050a8:	4d2c      	ldr	r5, [pc, #176]	; (40515c <__register_exitproc+0xb8>)
  4050aa:	4606      	mov	r6, r0
  4050ac:	6828      	ldr	r0, [r5, #0]
  4050ae:	4698      	mov	r8, r3
  4050b0:	460f      	mov	r7, r1
  4050b2:	4691      	mov	r9, r2
  4050b4:	f7ff f948 	bl	404348 <__retarget_lock_acquire_recursive>
  4050b8:	4b29      	ldr	r3, [pc, #164]	; (405160 <__register_exitproc+0xbc>)
  4050ba:	681c      	ldr	r4, [r3, #0]
  4050bc:	f8d4 3148 	ldr.w	r3, [r4, #328]	; 0x148
  4050c0:	2b00      	cmp	r3, #0
  4050c2:	d03e      	beq.n	405142 <__register_exitproc+0x9e>
  4050c4:	685a      	ldr	r2, [r3, #4]
  4050c6:	2a1f      	cmp	r2, #31
  4050c8:	dc1c      	bgt.n	405104 <__register_exitproc+0x60>
  4050ca:	f102 0e01 	add.w	lr, r2, #1
  4050ce:	b176      	cbz	r6, 4050ee <__register_exitproc+0x4a>
  4050d0:	eb03 0182 	add.w	r1, r3, r2, lsl #2
  4050d4:	2401      	movs	r4, #1
  4050d6:	f8c1 9088 	str.w	r9, [r1, #136]	; 0x88
  4050da:	f8d3 0188 	ldr.w	r0, [r3, #392]	; 0x188
  4050de:	4094      	lsls	r4, r2
  4050e0:	4320      	orrs	r0, r4
  4050e2:	2e02      	cmp	r6, #2
  4050e4:	f8c3 0188 	str.w	r0, [r3, #392]	; 0x188
  4050e8:	f8c1 8108 	str.w	r8, [r1, #264]	; 0x108
  4050ec:	d023      	beq.n	405136 <__register_exitproc+0x92>
  4050ee:	3202      	adds	r2, #2
  4050f0:	f8c3 e004 	str.w	lr, [r3, #4]
  4050f4:	6828      	ldr	r0, [r5, #0]
  4050f6:	f843 7022 	str.w	r7, [r3, r2, lsl #2]
  4050fa:	f7ff f927 	bl	40434c <__retarget_lock_release_recursive>
  4050fe:	2000      	movs	r0, #0
  405100:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
  405104:	4b17      	ldr	r3, [pc, #92]	; (405164 <__register_exitproc+0xc0>)
  405106:	b30b      	cbz	r3, 40514c <__register_exitproc+0xa8>
  405108:	f44f 70c8 	mov.w	r0, #400	; 0x190
  40510c:	f7ff f998 	bl	404440 <malloc>
  405110:	4603      	mov	r3, r0
  405112:	b1d8      	cbz	r0, 40514c <__register_exitproc+0xa8>
  405114:	f8d4 2148 	ldr.w	r2, [r4, #328]	; 0x148
  405118:	6002      	str	r2, [r0, #0]
  40511a:	2100      	movs	r1, #0
  40511c:	6041      	str	r1, [r0, #4]
  40511e:	460a      	mov	r2, r1
  405120:	f8c4 0148 	str.w	r0, [r4, #328]	; 0x148
  405124:	f04f 0e01 	mov.w	lr, #1
  405128:	f8c0 1188 	str.w	r1, [r0, #392]	; 0x188
  40512c:	f8c0 118c 	str.w	r1, [r0, #396]	; 0x18c
  405130:	2e00      	cmp	r6, #0
  405132:	d0dc      	beq.n	4050ee <__register_exitproc+0x4a>
  405134:	e7cc      	b.n	4050d0 <__register_exitproc+0x2c>
  405136:	f8d3 118c 	ldr.w	r1, [r3, #396]	; 0x18c
  40513a:	430c      	orrs	r4, r1
  40513c:	f8c3 418c 	str.w	r4, [r3, #396]	; 0x18c
  405140:	e7d5      	b.n	4050ee <__register_exitproc+0x4a>
  405142:	f504 73a6 	add.w	r3, r4, #332	; 0x14c
  405146:	f8c4 3148 	str.w	r3, [r4, #328]	; 0x148
  40514a:	e7bb      	b.n	4050c4 <__register_exitproc+0x20>
  40514c:	6828      	ldr	r0, [r5, #0]
  40514e:	f7ff f8fd 	bl	40434c <__retarget_lock_release_recursive>
  405152:	f04f 30ff 	mov.w	r0, #4294967295
  405156:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
  40515a:	bf00      	nop
  40515c:	20400438 	.word	0x20400438
  405160:	0040566c 	.word	0x0040566c
  405164:	00404441 	.word	0x00404441

00405168 <_close_r>:
  405168:	b538      	push	{r3, r4, r5, lr}
  40516a:	4c07      	ldr	r4, [pc, #28]	; (405188 <_close_r+0x20>)
  40516c:	2300      	movs	r3, #0
  40516e:	4605      	mov	r5, r0
  405170:	4608      	mov	r0, r1
  405172:	6023      	str	r3, [r4, #0]
  405174:	f7fd f8e8 	bl	402348 <_close>
  405178:	1c43      	adds	r3, r0, #1
  40517a:	d000      	beq.n	40517e <_close_r+0x16>
  40517c:	bd38      	pop	{r3, r4, r5, pc}
  40517e:	6823      	ldr	r3, [r4, #0]
  405180:	2b00      	cmp	r3, #0
  405182:	d0fb      	beq.n	40517c <_close_r+0x14>
  405184:	602b      	str	r3, [r5, #0]
  405186:	bd38      	pop	{r3, r4, r5, pc}
  405188:	2040c430 	.word	0x2040c430

0040518c <_fclose_r>:
  40518c:	b570      	push	{r4, r5, r6, lr}
  40518e:	b159      	cbz	r1, 4051a8 <_fclose_r+0x1c>
  405190:	4605      	mov	r5, r0
  405192:	460c      	mov	r4, r1
  405194:	b110      	cbz	r0, 40519c <_fclose_r+0x10>
  405196:	6b83      	ldr	r3, [r0, #56]	; 0x38
  405198:	2b00      	cmp	r3, #0
  40519a:	d03c      	beq.n	405216 <_fclose_r+0x8a>
  40519c:	6e63      	ldr	r3, [r4, #100]	; 0x64
  40519e:	07d8      	lsls	r0, r3, #31
  4051a0:	d505      	bpl.n	4051ae <_fclose_r+0x22>
  4051a2:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
  4051a6:	b92b      	cbnz	r3, 4051b4 <_fclose_r+0x28>
  4051a8:	2600      	movs	r6, #0
  4051aa:	4630      	mov	r0, r6
  4051ac:	bd70      	pop	{r4, r5, r6, pc}
  4051ae:	89a3      	ldrh	r3, [r4, #12]
  4051b0:	0599      	lsls	r1, r3, #22
  4051b2:	d53c      	bpl.n	40522e <_fclose_r+0xa2>
  4051b4:	4621      	mov	r1, r4
  4051b6:	4628      	mov	r0, r5
  4051b8:	f7fe fc0e 	bl	4039d8 <__sflush_r>
  4051bc:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
  4051be:	4606      	mov	r6, r0
  4051c0:	b133      	cbz	r3, 4051d0 <_fclose_r+0x44>
  4051c2:	69e1      	ldr	r1, [r4, #28]
  4051c4:	4628      	mov	r0, r5
  4051c6:	4798      	blx	r3
  4051c8:	2800      	cmp	r0, #0
  4051ca:	bfb8      	it	lt
  4051cc:	f04f 36ff 	movlt.w	r6, #4294967295
  4051d0:	89a3      	ldrh	r3, [r4, #12]
  4051d2:	061a      	lsls	r2, r3, #24
  4051d4:	d422      	bmi.n	40521c <_fclose_r+0x90>
  4051d6:	6b21      	ldr	r1, [r4, #48]	; 0x30
  4051d8:	b141      	cbz	r1, 4051ec <_fclose_r+0x60>
  4051da:	f104 0340 	add.w	r3, r4, #64	; 0x40
  4051de:	4299      	cmp	r1, r3
  4051e0:	d002      	beq.n	4051e8 <_fclose_r+0x5c>
  4051e2:	4628      	mov	r0, r5
  4051e4:	f7fe fe16 	bl	403e14 <_free_r>
  4051e8:	2300      	movs	r3, #0
  4051ea:	6323      	str	r3, [r4, #48]	; 0x30
  4051ec:	6c61      	ldr	r1, [r4, #68]	; 0x44
  4051ee:	b121      	cbz	r1, 4051fa <_fclose_r+0x6e>
  4051f0:	4628      	mov	r0, r5
  4051f2:	f7fe fe0f 	bl	403e14 <_free_r>
  4051f6:	2300      	movs	r3, #0
  4051f8:	6463      	str	r3, [r4, #68]	; 0x44
  4051fa:	f7fe fd11 	bl	403c20 <__sfp_lock_acquire>
  4051fe:	6e63      	ldr	r3, [r4, #100]	; 0x64
  405200:	2200      	movs	r2, #0
  405202:	07db      	lsls	r3, r3, #31
  405204:	81a2      	strh	r2, [r4, #12]
  405206:	d50e      	bpl.n	405226 <_fclose_r+0x9a>
  405208:	6da0      	ldr	r0, [r4, #88]	; 0x58
  40520a:	f7ff f89b 	bl	404344 <__retarget_lock_close_recursive>
  40520e:	f7fe fd0d 	bl	403c2c <__sfp_lock_release>
  405212:	4630      	mov	r0, r6
  405214:	bd70      	pop	{r4, r5, r6, pc}
  405216:	f7fe fcd7 	bl	403bc8 <__sinit>
  40521a:	e7bf      	b.n	40519c <_fclose_r+0x10>
  40521c:	6921      	ldr	r1, [r4, #16]
  40521e:	4628      	mov	r0, r5
  405220:	f7fe fdf8 	bl	403e14 <_free_r>
  405224:	e7d7      	b.n	4051d6 <_fclose_r+0x4a>
  405226:	6da0      	ldr	r0, [r4, #88]	; 0x58
  405228:	f7ff f890 	bl	40434c <__retarget_lock_release_recursive>
  40522c:	e7ec      	b.n	405208 <_fclose_r+0x7c>
  40522e:	6da0      	ldr	r0, [r4, #88]	; 0x58
  405230:	f7ff f88a 	bl	404348 <__retarget_lock_acquire_recursive>
  405234:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
  405238:	2b00      	cmp	r3, #0
  40523a:	d1bb      	bne.n	4051b4 <_fclose_r+0x28>
  40523c:	6e66      	ldr	r6, [r4, #100]	; 0x64
  40523e:	f016 0601 	ands.w	r6, r6, #1
  405242:	d1b1      	bne.n	4051a8 <_fclose_r+0x1c>
  405244:	6da0      	ldr	r0, [r4, #88]	; 0x58
  405246:	f7ff f881 	bl	40434c <__retarget_lock_release_recursive>
  40524a:	4630      	mov	r0, r6
  40524c:	bd70      	pop	{r4, r5, r6, pc}
  40524e:	bf00      	nop

00405250 <_fstat_r>:
  405250:	b538      	push	{r3, r4, r5, lr}
  405252:	460b      	mov	r3, r1
  405254:	4c07      	ldr	r4, [pc, #28]	; (405274 <_fstat_r+0x24>)
  405256:	4605      	mov	r5, r0
  405258:	4611      	mov	r1, r2
  40525a:	4618      	mov	r0, r3
  40525c:	2300      	movs	r3, #0
  40525e:	6023      	str	r3, [r4, #0]
  405260:	f7fd f875 	bl	40234e <_fstat>
  405264:	1c43      	adds	r3, r0, #1
  405266:	d000      	beq.n	40526a <_fstat_r+0x1a>
  405268:	bd38      	pop	{r3, r4, r5, pc}
  40526a:	6823      	ldr	r3, [r4, #0]
  40526c:	2b00      	cmp	r3, #0
  40526e:	d0fb      	beq.n	405268 <_fstat_r+0x18>
  405270:	602b      	str	r3, [r5, #0]
  405272:	bd38      	pop	{r3, r4, r5, pc}
  405274:	2040c430 	.word	0x2040c430

00405278 <_isatty_r>:
  405278:	b538      	push	{r3, r4, r5, lr}
  40527a:	4c07      	ldr	r4, [pc, #28]	; (405298 <_isatty_r+0x20>)
  40527c:	2300      	movs	r3, #0
  40527e:	4605      	mov	r5, r0
  405280:	4608      	mov	r0, r1
  405282:	6023      	str	r3, [r4, #0]
  405284:	f7fd f868 	bl	402358 <_isatty>
  405288:	1c43      	adds	r3, r0, #1
  40528a:	d000      	beq.n	40528e <_isatty_r+0x16>
  40528c:	bd38      	pop	{r3, r4, r5, pc}
  40528e:	6823      	ldr	r3, [r4, #0]
  405290:	2b00      	cmp	r3, #0
  405292:	d0fb      	beq.n	40528c <_isatty_r+0x14>
  405294:	602b      	str	r3, [r5, #0]
  405296:	bd38      	pop	{r3, r4, r5, pc}
  405298:	2040c430 	.word	0x2040c430

0040529c <_lseek_r>:
  40529c:	b570      	push	{r4, r5, r6, lr}
  40529e:	460d      	mov	r5, r1
  4052a0:	4c08      	ldr	r4, [pc, #32]	; (4052c4 <_lseek_r+0x28>)
  4052a2:	4611      	mov	r1, r2
  4052a4:	4606      	mov	r6, r0
  4052a6:	461a      	mov	r2, r3
  4052a8:	4628      	mov	r0, r5
  4052aa:	2300      	movs	r3, #0
  4052ac:	6023      	str	r3, [r4, #0]
  4052ae:	f7fd f855 	bl	40235c <_lseek>
  4052b2:	1c43      	adds	r3, r0, #1
  4052b4:	d000      	beq.n	4052b8 <_lseek_r+0x1c>
  4052b6:	bd70      	pop	{r4, r5, r6, pc}
  4052b8:	6823      	ldr	r3, [r4, #0]
  4052ba:	2b00      	cmp	r3, #0
  4052bc:	d0fb      	beq.n	4052b6 <_lseek_r+0x1a>
  4052be:	6033      	str	r3, [r6, #0]
  4052c0:	bd70      	pop	{r4, r5, r6, pc}
  4052c2:	bf00      	nop
  4052c4:	2040c430 	.word	0x2040c430

004052c8 <_read_r>:
  4052c8:	b570      	push	{r4, r5, r6, lr}
  4052ca:	460d      	mov	r5, r1
  4052cc:	4c08      	ldr	r4, [pc, #32]	; (4052f0 <_read_r+0x28>)
  4052ce:	4611      	mov	r1, r2
  4052d0:	4606      	mov	r6, r0
  4052d2:	461a      	mov	r2, r3
  4052d4:	4628      	mov	r0, r5
  4052d6:	2300      	movs	r3, #0
  4052d8:	6023      	str	r3, [r4, #0]
  4052da:	f7fc fb0f 	bl	4018fc <_read>
  4052de:	1c43      	adds	r3, r0, #1
  4052e0:	d000      	beq.n	4052e4 <_read_r+0x1c>
  4052e2:	bd70      	pop	{r4, r5, r6, pc}
  4052e4:	6823      	ldr	r3, [r4, #0]
  4052e6:	2b00      	cmp	r3, #0
  4052e8:	d0fb      	beq.n	4052e2 <_read_r+0x1a>
  4052ea:	6033      	str	r3, [r6, #0]
  4052ec:	bd70      	pop	{r4, r5, r6, pc}
  4052ee:	bf00      	nop
  4052f0:	2040c430 	.word	0x2040c430

004052f4 <__aeabi_uldivmod>:
  4052f4:	b953      	cbnz	r3, 40530c <__aeabi_uldivmod+0x18>
  4052f6:	b94a      	cbnz	r2, 40530c <__aeabi_uldivmod+0x18>
  4052f8:	2900      	cmp	r1, #0
  4052fa:	bf08      	it	eq
  4052fc:	2800      	cmpeq	r0, #0
  4052fe:	bf1c      	itt	ne
  405300:	f04f 31ff 	movne.w	r1, #4294967295
  405304:	f04f 30ff 	movne.w	r0, #4294967295
  405308:	f000 b97a 	b.w	405600 <__aeabi_idiv0>
  40530c:	f1ad 0c08 	sub.w	ip, sp, #8
  405310:	e96d ce04 	strd	ip, lr, [sp, #-16]!
  405314:	f000 f806 	bl	405324 <__udivmoddi4>
  405318:	f8dd e004 	ldr.w	lr, [sp, #4]
  40531c:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
  405320:	b004      	add	sp, #16
  405322:	4770      	bx	lr

00405324 <__udivmoddi4>:
  405324:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
  405328:	468c      	mov	ip, r1
  40532a:	460d      	mov	r5, r1
  40532c:	4604      	mov	r4, r0
  40532e:	9e08      	ldr	r6, [sp, #32]
  405330:	2b00      	cmp	r3, #0
  405332:	d151      	bne.n	4053d8 <__udivmoddi4+0xb4>
  405334:	428a      	cmp	r2, r1
  405336:	4617      	mov	r7, r2
  405338:	d96d      	bls.n	405416 <__udivmoddi4+0xf2>
  40533a:	fab2 fe82 	clz	lr, r2
  40533e:	f1be 0f00 	cmp.w	lr, #0
  405342:	d00b      	beq.n	40535c <__udivmoddi4+0x38>
  405344:	f1ce 0c20 	rsb	ip, lr, #32
  405348:	fa01 f50e 	lsl.w	r5, r1, lr
  40534c:	fa20 fc0c 	lsr.w	ip, r0, ip
  405350:	fa02 f70e 	lsl.w	r7, r2, lr
  405354:	ea4c 0c05 	orr.w	ip, ip, r5
  405358:	fa00 f40e 	lsl.w	r4, r0, lr
  40535c:	ea4f 4a17 	mov.w	sl, r7, lsr #16
  405360:	0c25      	lsrs	r5, r4, #16
  405362:	fbbc f8fa 	udiv	r8, ip, sl
  405366:	fa1f f987 	uxth.w	r9, r7
  40536a:	fb0a cc18 	mls	ip, sl, r8, ip
  40536e:	ea45 450c 	orr.w	r5, r5, ip, lsl #16
  405372:	fb08 f309 	mul.w	r3, r8, r9
  405376:	42ab      	cmp	r3, r5
  405378:	d90a      	bls.n	405390 <__udivmoddi4+0x6c>
  40537a:	19ed      	adds	r5, r5, r7
  40537c:	f108 32ff 	add.w	r2, r8, #4294967295
  405380:	f080 8123 	bcs.w	4055ca <__udivmoddi4+0x2a6>
  405384:	42ab      	cmp	r3, r5
  405386:	f240 8120 	bls.w	4055ca <__udivmoddi4+0x2a6>
  40538a:	f1a8 0802 	sub.w	r8, r8, #2
  40538e:	443d      	add	r5, r7
  405390:	1aed      	subs	r5, r5, r3
  405392:	b2a4      	uxth	r4, r4
  405394:	fbb5 f0fa 	udiv	r0, r5, sl
  405398:	fb0a 5510 	mls	r5, sl, r0, r5
  40539c:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
  4053a0:	fb00 f909 	mul.w	r9, r0, r9
  4053a4:	45a1      	cmp	r9, r4
  4053a6:	d909      	bls.n	4053bc <__udivmoddi4+0x98>
  4053a8:	19e4      	adds	r4, r4, r7
  4053aa:	f100 33ff 	add.w	r3, r0, #4294967295
  4053ae:	f080 810a 	bcs.w	4055c6 <__udivmoddi4+0x2a2>
  4053b2:	45a1      	cmp	r9, r4
  4053b4:	f240 8107 	bls.w	4055c6 <__udivmoddi4+0x2a2>
  4053b8:	3802      	subs	r0, #2
  4053ba:	443c      	add	r4, r7
  4053bc:	eba4 0409 	sub.w	r4, r4, r9
  4053c0:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
  4053c4:	2100      	movs	r1, #0
  4053c6:	2e00      	cmp	r6, #0
  4053c8:	d061      	beq.n	40548e <__udivmoddi4+0x16a>
  4053ca:	fa24 f40e 	lsr.w	r4, r4, lr
  4053ce:	2300      	movs	r3, #0
  4053d0:	6034      	str	r4, [r6, #0]
  4053d2:	6073      	str	r3, [r6, #4]
  4053d4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
  4053d8:	428b      	cmp	r3, r1
  4053da:	d907      	bls.n	4053ec <__udivmoddi4+0xc8>
  4053dc:	2e00      	cmp	r6, #0
  4053de:	d054      	beq.n	40548a <__udivmoddi4+0x166>
  4053e0:	2100      	movs	r1, #0
  4053e2:	e886 0021 	stmia.w	r6, {r0, r5}
  4053e6:	4608      	mov	r0, r1
  4053e8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
  4053ec:	fab3 f183 	clz	r1, r3
  4053f0:	2900      	cmp	r1, #0
  4053f2:	f040 808e 	bne.w	405512 <__udivmoddi4+0x1ee>
  4053f6:	42ab      	cmp	r3, r5
  4053f8:	d302      	bcc.n	405400 <__udivmoddi4+0xdc>
  4053fa:	4282      	cmp	r2, r0
  4053fc:	f200 80fa 	bhi.w	4055f4 <__udivmoddi4+0x2d0>
  405400:	1a84      	subs	r4, r0, r2
  405402:	eb65 0503 	sbc.w	r5, r5, r3
  405406:	2001      	movs	r0, #1
  405408:	46ac      	mov	ip, r5
  40540a:	2e00      	cmp	r6, #0
  40540c:	d03f      	beq.n	40548e <__udivmoddi4+0x16a>
  40540e:	e886 1010 	stmia.w	r6, {r4, ip}
  405412:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
  405416:	b912      	cbnz	r2, 40541e <__udivmoddi4+0xfa>
  405418:	2701      	movs	r7, #1
  40541a:	fbb7 f7f2 	udiv	r7, r7, r2
  40541e:	fab7 fe87 	clz	lr, r7
  405422:	f1be 0f00 	cmp.w	lr, #0
  405426:	d134      	bne.n	405492 <__udivmoddi4+0x16e>
  405428:	1beb      	subs	r3, r5, r7
  40542a:	0c3a      	lsrs	r2, r7, #16
  40542c:	fa1f fc87 	uxth.w	ip, r7
  405430:	2101      	movs	r1, #1
  405432:	fbb3 f8f2 	udiv	r8, r3, r2
  405436:	0c25      	lsrs	r5, r4, #16
  405438:	fb02 3318 	mls	r3, r2, r8, r3
  40543c:	ea45 4503 	orr.w	r5, r5, r3, lsl #16
  405440:	fb0c f308 	mul.w	r3, ip, r8
  405444:	42ab      	cmp	r3, r5
  405446:	d907      	bls.n	405458 <__udivmoddi4+0x134>
  405448:	19ed      	adds	r5, r5, r7
  40544a:	f108 30ff 	add.w	r0, r8, #4294967295
  40544e:	d202      	bcs.n	405456 <__udivmoddi4+0x132>
  405450:	42ab      	cmp	r3, r5
  405452:	f200 80d1 	bhi.w	4055f8 <__udivmoddi4+0x2d4>
  405456:	4680      	mov	r8, r0
  405458:	1aed      	subs	r5, r5, r3
  40545a:	b2a3      	uxth	r3, r4
  40545c:	fbb5 f0f2 	udiv	r0, r5, r2
  405460:	fb02 5510 	mls	r5, r2, r0, r5
  405464:	ea43 4405 	orr.w	r4, r3, r5, lsl #16
  405468:	fb0c fc00 	mul.w	ip, ip, r0
  40546c:	45a4      	cmp	ip, r4
  40546e:	d907      	bls.n	405480 <__udivmoddi4+0x15c>
  405470:	19e4      	adds	r4, r4, r7
  405472:	f100 33ff 	add.w	r3, r0, #4294967295
  405476:	d202      	bcs.n	40547e <__udivmoddi4+0x15a>
  405478:	45a4      	cmp	ip, r4
  40547a:	f200 80b8 	bhi.w	4055ee <__udivmoddi4+0x2ca>
  40547e:	4618      	mov	r0, r3
  405480:	eba4 040c 	sub.w	r4, r4, ip
  405484:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
  405488:	e79d      	b.n	4053c6 <__udivmoddi4+0xa2>
  40548a:	4631      	mov	r1, r6
  40548c:	4630      	mov	r0, r6
  40548e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
  405492:	f1ce 0420 	rsb	r4, lr, #32
  405496:	fa05 f30e 	lsl.w	r3, r5, lr
  40549a:	fa07 f70e 	lsl.w	r7, r7, lr
  40549e:	fa20 f804 	lsr.w	r8, r0, r4
  4054a2:	0c3a      	lsrs	r2, r7, #16
  4054a4:	fa25 f404 	lsr.w	r4, r5, r4
  4054a8:	ea48 0803 	orr.w	r8, r8, r3
  4054ac:	fbb4 f1f2 	udiv	r1, r4, r2
  4054b0:	ea4f 4518 	mov.w	r5, r8, lsr #16
  4054b4:	fb02 4411 	mls	r4, r2, r1, r4
  4054b8:	fa1f fc87 	uxth.w	ip, r7
  4054bc:	ea45 4504 	orr.w	r5, r5, r4, lsl #16
  4054c0:	fb01 f30c 	mul.w	r3, r1, ip
  4054c4:	42ab      	cmp	r3, r5
  4054c6:	fa00 f40e 	lsl.w	r4, r0, lr
  4054ca:	d909      	bls.n	4054e0 <__udivmoddi4+0x1bc>
  4054cc:	19ed      	adds	r5, r5, r7
  4054ce:	f101 30ff 	add.w	r0, r1, #4294967295
  4054d2:	f080 808a 	bcs.w	4055ea <__udivmoddi4+0x2c6>
  4054d6:	42ab      	cmp	r3, r5
  4054d8:	f240 8087 	bls.w	4055ea <__udivmoddi4+0x2c6>
  4054dc:	3902      	subs	r1, #2
  4054de:	443d      	add	r5, r7
  4054e0:	1aeb      	subs	r3, r5, r3
  4054e2:	fa1f f588 	uxth.w	r5, r8
  4054e6:	fbb3 f0f2 	udiv	r0, r3, r2
  4054ea:	fb02 3310 	mls	r3, r2, r0, r3
  4054ee:	ea45 4503 	orr.w	r5, r5, r3, lsl #16
  4054f2:	fb00 f30c 	mul.w	r3, r0, ip
  4054f6:	42ab      	cmp	r3, r5
  4054f8:	d907      	bls.n	40550a <__udivmoddi4+0x1e6>
  4054fa:	19ed      	adds	r5, r5, r7
  4054fc:	f100 38ff 	add.w	r8, r0, #4294967295
  405500:	d26f      	bcs.n	4055e2 <__udivmoddi4+0x2be>
  405502:	42ab      	cmp	r3, r5
  405504:	d96d      	bls.n	4055e2 <__udivmoddi4+0x2be>
  405506:	3802      	subs	r0, #2
  405508:	443d      	add	r5, r7
  40550a:	1aeb      	subs	r3, r5, r3
  40550c:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
  405510:	e78f      	b.n	405432 <__udivmoddi4+0x10e>
  405512:	f1c1 0720 	rsb	r7, r1, #32
  405516:	fa22 f807 	lsr.w	r8, r2, r7
  40551a:	408b      	lsls	r3, r1
  40551c:	fa05 f401 	lsl.w	r4, r5, r1
  405520:	ea48 0303 	orr.w	r3, r8, r3
  405524:	fa20 fe07 	lsr.w	lr, r0, r7
  405528:	ea4f 4c13 	mov.w	ip, r3, lsr #16
  40552c:	40fd      	lsrs	r5, r7
  40552e:	ea4e 0e04 	orr.w	lr, lr, r4
  405532:	fbb5 f9fc 	udiv	r9, r5, ip
  405536:	ea4f 441e 	mov.w	r4, lr, lsr #16
  40553a:	fb0c 5519 	mls	r5, ip, r9, r5
  40553e:	fa1f f883 	uxth.w	r8, r3
  405542:	ea44 4505 	orr.w	r5, r4, r5, lsl #16
  405546:	fb09 f408 	mul.w	r4, r9, r8
  40554a:	42ac      	cmp	r4, r5
  40554c:	fa02 f201 	lsl.w	r2, r2, r1
  405550:	fa00 fa01 	lsl.w	sl, r0, r1
  405554:	d908      	bls.n	405568 <__udivmoddi4+0x244>
  405556:	18ed      	adds	r5, r5, r3
  405558:	f109 30ff 	add.w	r0, r9, #4294967295
  40555c:	d243      	bcs.n	4055e6 <__udivmoddi4+0x2c2>
  40555e:	42ac      	cmp	r4, r5
  405560:	d941      	bls.n	4055e6 <__udivmoddi4+0x2c2>
  405562:	f1a9 0902 	sub.w	r9, r9, #2
  405566:	441d      	add	r5, r3
  405568:	1b2d      	subs	r5, r5, r4
  40556a:	fa1f fe8e 	uxth.w	lr, lr
  40556e:	fbb5 f0fc 	udiv	r0, r5, ip
  405572:	fb0c 5510 	mls	r5, ip, r0, r5
  405576:	ea4e 4405 	orr.w	r4, lr, r5, lsl #16
  40557a:	fb00 f808 	mul.w	r8, r0, r8
  40557e:	45a0      	cmp	r8, r4
  405580:	d907      	bls.n	405592 <__udivmoddi4+0x26e>
  405582:	18e4      	adds	r4, r4, r3
  405584:	f100 35ff 	add.w	r5, r0, #4294967295
  405588:	d229      	bcs.n	4055de <__udivmoddi4+0x2ba>
  40558a:	45a0      	cmp	r8, r4
  40558c:	d927      	bls.n	4055de <__udivmoddi4+0x2ba>
  40558e:	3802      	subs	r0, #2
  405590:	441c      	add	r4, r3
  405592:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
  405596:	eba4 0408 	sub.w	r4, r4, r8
  40559a:	fba0 8902 	umull	r8, r9, r0, r2
  40559e:	454c      	cmp	r4, r9
  4055a0:	46c6      	mov	lr, r8
  4055a2:	464d      	mov	r5, r9
  4055a4:	d315      	bcc.n	4055d2 <__udivmoddi4+0x2ae>
  4055a6:	d012      	beq.n	4055ce <__udivmoddi4+0x2aa>
  4055a8:	b156      	cbz	r6, 4055c0 <__udivmoddi4+0x29c>
  4055aa:	ebba 030e 	subs.w	r3, sl, lr
  4055ae:	eb64 0405 	sbc.w	r4, r4, r5
  4055b2:	fa04 f707 	lsl.w	r7, r4, r7
  4055b6:	40cb      	lsrs	r3, r1
  4055b8:	431f      	orrs	r7, r3
  4055ba:	40cc      	lsrs	r4, r1
  4055bc:	6037      	str	r7, [r6, #0]
  4055be:	6074      	str	r4, [r6, #4]
  4055c0:	2100      	movs	r1, #0
  4055c2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
  4055c6:	4618      	mov	r0, r3
  4055c8:	e6f8      	b.n	4053bc <__udivmoddi4+0x98>
  4055ca:	4690      	mov	r8, r2
  4055cc:	e6e0      	b.n	405390 <__udivmoddi4+0x6c>
  4055ce:	45c2      	cmp	sl, r8
  4055d0:	d2ea      	bcs.n	4055a8 <__udivmoddi4+0x284>
  4055d2:	ebb8 0e02 	subs.w	lr, r8, r2
  4055d6:	eb69 0503 	sbc.w	r5, r9, r3
  4055da:	3801      	subs	r0, #1
  4055dc:	e7e4      	b.n	4055a8 <__udivmoddi4+0x284>
  4055de:	4628      	mov	r0, r5
  4055e0:	e7d7      	b.n	405592 <__udivmoddi4+0x26e>
  4055e2:	4640      	mov	r0, r8
  4055e4:	e791      	b.n	40550a <__udivmoddi4+0x1e6>
  4055e6:	4681      	mov	r9, r0
  4055e8:	e7be      	b.n	405568 <__udivmoddi4+0x244>
  4055ea:	4601      	mov	r1, r0
  4055ec:	e778      	b.n	4054e0 <__udivmoddi4+0x1bc>
  4055ee:	3802      	subs	r0, #2
  4055f0:	443c      	add	r4, r7
  4055f2:	e745      	b.n	405480 <__udivmoddi4+0x15c>
  4055f4:	4608      	mov	r0, r1
  4055f6:	e708      	b.n	40540a <__udivmoddi4+0xe6>
  4055f8:	f1a8 0802 	sub.w	r8, r8, #2
  4055fc:	443d      	add	r5, r7
  4055fe:	e72b      	b.n	405458 <__udivmoddi4+0x134>

00405600 <__aeabi_idiv0>:
  405600:	4770      	bx	lr
  405602:	bf00      	nop
  405604:	454c4449 	.word	0x454c4449
  405608:	00000000 	.word	0x00000000
  40560c:	51726d54 	.word	0x51726d54
  405610:	00000000 	.word	0x00000000
  405614:	20726d54 	.word	0x20726d54
  405618:	00637653 	.word	0x00637653
  40561c:	69727473 	.word	0x69727473
  405620:	0000676e 	.word	0x0000676e
  405624:	6c696146 	.word	0x6c696146
  405628:	74206465 	.word	0x74206465
  40562c:	7263206f 	.word	0x7263206f
  405630:	65746165 	.word	0x65746165
  405634:	66695720 	.word	0x66695720
  405638:	61742069 	.word	0x61742069
  40563c:	0a0d6b73 	.word	0x0a0d6b73
  405640:	00000000 	.word	0x00000000
  405644:	65636572 	.word	0x65636572
  405648:	6f646962 	.word	0x6f646962
  40564c:	7325203a 	.word	0x7325203a
  405650:	0000000a 	.word	0x0000000a
  405654:	63617473 	.word	0x63617473
  405658:	766f206b 	.word	0x766f206b
  40565c:	6c667265 	.word	0x6c667265
  405660:	2520776f 	.word	0x2520776f
  405664:	73252078 	.word	0x73252078
  405668:	00000a0d 	.word	0x00000a0d

0040566c <_global_impure_ptr>:
  40566c:	20400010 33323130 37363534 42413938     ..@ 0123456789AB
  40567c:	46454443 00000000 33323130 37363534     CDEF....01234567
  40568c:	62613938 66656463 00000000 6c756e28     89abcdef....(nul
  40569c:	0000296c                                l)..

004056a0 <blanks.7217>:
  4056a0:	20202020 20202020 20202020 20202020                     

004056b0 <zeroes.7218>:
  4056b0:	30303030 30303030 30303030 30303030     0000000000000000
  4056c0:	00000043 49534f50 00000058 0000002e     C...POSIX.......

004056d0 <_ctype_>:
  4056d0:	20202000 20202020 28282020 20282828     .         ((((( 
  4056e0:	20202020 20202020 20202020 20202020                     
  4056f0:	10108820 10101010 10101010 10101010      ...............
  405700:	04040410 04040404 10040404 10101010     ................
  405710:	41411010 41414141 01010101 01010101     ..AAAAAA........
  405720:	01010101 01010101 01010101 10101010     ................
  405730:	42421010 42424242 02020202 02020202     ..BBBBBB........
  405740:	02020202 02020202 02020202 10101010     ................
  405750:	00000020 00000000 00000000 00000000      ...............
	...

004057d4 <_init>:
  4057d4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  4057d6:	bf00      	nop
  4057d8:	bcf8      	pop	{r3, r4, r5, r6, r7}
  4057da:	bc08      	pop	{r3}
  4057dc:	469e      	mov	lr, r3
  4057de:	4770      	bx	lr

004057e0 <__init_array_start>:
  4057e0:	004039b9 	.word	0x004039b9

004057e4 <__frame_dummy_init_array_entry>:
  4057e4:	00400165                                e.@.

004057e8 <_fini>:
  4057e8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  4057ea:	bf00      	nop
  4057ec:	bcf8      	pop	{r3, r4, r5, r6, r7}
  4057ee:	bc08      	pop	{r3}
  4057f0:	469e      	mov	lr, r3
  4057f2:	4770      	bx	lr

004057f4 <__fini_array_start>:
  4057f4:	00400141 	.word	0x00400141
