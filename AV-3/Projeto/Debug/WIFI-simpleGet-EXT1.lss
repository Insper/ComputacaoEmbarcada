
WIFI-simpleGet-EXT1.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         0000db54  00400000  00400000  00010000  2**6
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .ARM.exidx    00000008  0040db54  0040db54  0001db54  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  2 .relocate     000009f8  20400000  0040db5c  00020000  2**3
                  CONTENTS, ALLOC, LOAD, CODE
  3 .bss          0000c134  204009f8  0040e554  000209f8  2**2
                  ALLOC
  4 .stack        00002004  2040cb2c  0041a688  000209f8  2**0
                  ALLOC
  5 .heap         00000200  2040eb30  0041c68c  000209f8  2**0
                  ALLOC
  6 .ARM.attributes 0000002e  00000000  00000000  000209f8  2**0
                  CONTENTS, READONLY
  7 .comment      00000059  00000000  00000000  00020a26  2**0
                  CONTENTS, READONLY
  8 .debug_info   000430a4  00000000  00000000  00020a7f  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_abbrev 00008863  00000000  00000000  00063b23  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    0001c996  00000000  00000000  0006c386  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_aranges 00001a98  00000000  00000000  00088d1c  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00002028  00000000  00000000  0008a7b4  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_macro  0002e640  00000000  00000000  0008c7dc  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_line   00024142  00000000  00000000  000bae1c  2**0
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_str    000a2eee  00000000  00000000  000def5e  2**0
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_frame  00005538  00000000  00000000  00181e4c  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00400000 <exception_table>:
  400000:	30 eb 40 20 f5 87 40 00 f3 87 40 00 f3 87 40 00     0.@ ..@...@...@.
  400010:	f3 87 40 00 f3 87 40 00 f3 87 40 00 00 00 00 00     ..@...@...@.....
	...
  40002c:	e5 34 40 00 f3 87 40 00 00 00 00 00 85 35 40 00     .4@...@......5@.
  40003c:	ed 35 40 00 f3 87 40 00 f3 87 40 00 f3 87 40 00     .5@...@...@...@.
  40004c:	f3 87 40 00 f3 87 40 00 f3 87 40 00 f3 87 40 00     ..@...@...@...@.
  40005c:	f3 87 40 00 f3 87 40 00 00 00 00 00 0d 83 40 00     ..@...@.......@.
  40006c:	21 83 40 00 35 83 40 00 f3 87 40 00 f3 87 40 00     !.@.5.@...@...@.
  40007c:	f3 87 40 00 49 83 40 00 5d 83 40 00 f3 87 40 00     ..@.I.@.].@...@.
  40008c:	f3 87 40 00 f3 87 40 00 f3 87 40 00 f3 87 40 00     ..@...@...@...@.
  40009c:	f3 87 40 00 f3 87 40 00 f3 87 40 00 f3 87 40 00     ..@...@...@...@.
  4000ac:	f3 87 40 00 f3 87 40 00 f3 87 40 00 f3 87 40 00     ..@...@...@...@.
  4000bc:	f3 87 40 00 f3 87 40 00 f3 87 40 00 f3 87 40 00     ..@...@...@...@.
  4000cc:	f3 87 40 00 00 00 00 00 f3 87 40 00 00 00 00 00     ..@.......@.....
  4000dc:	f3 87 40 00 f3 87 40 00 f3 87 40 00 f3 87 40 00     ..@...@...@...@.
  4000ec:	f3 87 40 00 f3 87 40 00 f3 87 40 00 f3 87 40 00     ..@...@...@...@.
  4000fc:	f3 87 40 00 f3 87 40 00 f3 87 40 00 f3 87 40 00     ..@...@...@...@.
  40010c:	f3 87 40 00 f3 87 40 00 00 00 00 00 00 00 00 00     ..@...@.........
  40011c:	00 00 00 00 f3 87 40 00 f3 87 40 00 f3 87 40 00     ......@...@...@.
  40012c:	f3 87 40 00 f3 87 40 00 00 00 00 00 f3 87 40 00     ..@...@.......@.
  40013c:	f3 87 40 00                                         ..@.

00400140 <__do_global_dtors_aux>:
  400140:	b510      	push	{r4, lr}
  400142:	4c05      	ldr	r4, [pc, #20]	; (400158 <__do_global_dtors_aux+0x18>)
  400144:	7823      	ldrb	r3, [r4, #0]
  400146:	b933      	cbnz	r3, 400156 <__do_global_dtors_aux+0x16>
  400148:	4b04      	ldr	r3, [pc, #16]	; (40015c <__do_global_dtors_aux+0x1c>)
  40014a:	b113      	cbz	r3, 400152 <__do_global_dtors_aux+0x12>
  40014c:	4804      	ldr	r0, [pc, #16]	; (400160 <__do_global_dtors_aux+0x20>)
  40014e:	f3af 8000 	nop.w
  400152:	2301      	movs	r3, #1
  400154:	7023      	strb	r3, [r4, #0]
  400156:	bd10      	pop	{r4, pc}
  400158:	204009f8 	.word	0x204009f8
  40015c:	00000000 	.word	0x00000000
  400160:	0040db5c 	.word	0x0040db5c

00400164 <frame_dummy>:
  400164:	4b0c      	ldr	r3, [pc, #48]	; (400198 <frame_dummy+0x34>)
  400166:	b143      	cbz	r3, 40017a <frame_dummy+0x16>
  400168:	480c      	ldr	r0, [pc, #48]	; (40019c <frame_dummy+0x38>)
  40016a:	490d      	ldr	r1, [pc, #52]	; (4001a0 <frame_dummy+0x3c>)
  40016c:	b510      	push	{r4, lr}
  40016e:	f3af 8000 	nop.w
  400172:	480c      	ldr	r0, [pc, #48]	; (4001a4 <frame_dummy+0x40>)
  400174:	6803      	ldr	r3, [r0, #0]
  400176:	b923      	cbnz	r3, 400182 <frame_dummy+0x1e>
  400178:	bd10      	pop	{r4, pc}
  40017a:	480a      	ldr	r0, [pc, #40]	; (4001a4 <frame_dummy+0x40>)
  40017c:	6803      	ldr	r3, [r0, #0]
  40017e:	b933      	cbnz	r3, 40018e <frame_dummy+0x2a>
  400180:	4770      	bx	lr
  400182:	4b09      	ldr	r3, [pc, #36]	; (4001a8 <frame_dummy+0x44>)
  400184:	2b00      	cmp	r3, #0
  400186:	d0f7      	beq.n	400178 <frame_dummy+0x14>
  400188:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  40018c:	4718      	bx	r3
  40018e:	4b06      	ldr	r3, [pc, #24]	; (4001a8 <frame_dummy+0x44>)
  400190:	2b00      	cmp	r3, #0
  400192:	d0f5      	beq.n	400180 <frame_dummy+0x1c>
  400194:	4718      	bx	r3
  400196:	bf00      	nop
  400198:	00000000 	.word	0x00000000
  40019c:	0040db5c 	.word	0x0040db5c
  4001a0:	204009fc 	.word	0x204009fc
  4001a4:	0040db5c 	.word	0x0040db5c
  4001a8:	00000000 	.word	0x00000000

004001ac <sd_mmc_configure_slot>:

/**
 * \brief Configures the driver with the selected card configuration
 */
static void sd_mmc_configure_slot(void)
{
  4001ac:	b510      	push	{r4, lr}
	driver_select_device(sd_mmc_slot_sel, sd_mmc_card->clock,
  4001ae:	4b07      	ldr	r3, [pc, #28]	; (4001cc <sd_mmc_configure_slot+0x20>)
  4001b0:	6819      	ldr	r1, [r3, #0]
  4001b2:	f891 3022 	ldrb.w	r3, [r1, #34]	; 0x22
  4001b6:	3300      	adds	r3, #0
  4001b8:	bf18      	it	ne
  4001ba:	2301      	movne	r3, #1
  4001bc:	7c4a      	ldrb	r2, [r1, #17]
  4001be:	6809      	ldr	r1, [r1, #0]
  4001c0:	4803      	ldr	r0, [pc, #12]	; (4001d0 <sd_mmc_configure_slot+0x24>)
  4001c2:	7800      	ldrb	r0, [r0, #0]
  4001c4:	4c03      	ldr	r4, [pc, #12]	; (4001d4 <sd_mmc_configure_slot+0x28>)
  4001c6:	47a0      	blx	r4
  4001c8:	bd10      	pop	{r4, pc}
  4001ca:	bf00      	nop
  4001cc:	20400a14 	.word	0x20400a14
  4001d0:	20400a1d 	.word	0x20400a1d
  4001d4:	00401191 	.word	0x00401191

004001d8 <sd_mmc_select_slot>:
	if (slot >= SD_MMC_MEM_CNT) {
  4001d8:	b108      	cbz	r0, 4001de <sd_mmc_select_slot+0x6>
		return SD_MMC_ERR_SLOT;
  4001da:	2004      	movs	r0, #4
  4001dc:	4770      	bx	lr
	if (ioport_get_pin_level(sd_mmc_cards[slot].cd_gpio)
  4001de:	4b32      	ldr	r3, [pc, #200]	; (4002a8 <sd_mmc_select_slot+0xd0>)
  4001e0:	689a      	ldr	r2, [r3, #8]
	} else {
		return (Pio *)((uintptr_t)IOPORT_BASE_ADDRESS +
		       (IOPORT_PIO_OFFSET * port));
	}
#else
	return (Pio *)((uintptr_t)IOPORT_BASE_ADDRESS +
  4001e2:	4b32      	ldr	r3, [pc, #200]	; (4002ac <sd_mmc_select_slot+0xd4>)
  4001e4:	eb03 1352 	add.w	r3, r3, r2, lsr #5
  4001e8:	025b      	lsls	r3, r3, #9
	base->PIO_CODR = mask & ~level;
}

__always_inline static bool arch_ioport_get_pin_level(ioport_pin_t pin)
{
	return arch_ioport_pin_to_base(pin)->PIO_PDSR & arch_ioport_pin_to_mask(pin);
  4001ea:	6bd9      	ldr	r1, [r3, #60]	; 0x3c
	return 1U << (pin & 0x1F);
  4001ec:	f002 021f 	and.w	r2, r2, #31
  4001f0:	2301      	movs	r3, #1
  4001f2:	fa03 f202 	lsl.w	r2, r3, r2
  4001f6:	420a      	tst	r2, r1
  4001f8:	d010      	beq.n	40021c <sd_mmc_select_slot+0x44>
		if (sd_mmc_cards[slot].state == SD_MMC_CARD_STATE_DEBOUNCE) {
  4001fa:	4b2b      	ldr	r3, [pc, #172]	; (4002a8 <sd_mmc_select_slot+0xd0>)
  4001fc:	7b9b      	ldrb	r3, [r3, #14]
  4001fe:	2b01      	cmp	r3, #1
  400200:	d004      	beq.n	40020c <sd_mmc_select_slot+0x34>
		sd_mmc_cards[slot].state = SD_MMC_CARD_STATE_NO_CARD;
  400202:	2204      	movs	r2, #4
  400204:	4b28      	ldr	r3, [pc, #160]	; (4002a8 <sd_mmc_select_slot+0xd0>)
  400206:	739a      	strb	r2, [r3, #14]
		return SD_MMC_ERR_NO_CARD;
  400208:	2002      	movs	r0, #2
  40020a:	4770      	bx	lr
	if (sd_mmc_sam_systick_used) {
  40020c:	4b28      	ldr	r3, [pc, #160]	; (4002b0 <sd_mmc_select_slot+0xd8>)
  40020e:	781b      	ldrb	r3, [r3, #0]
  400210:	2b00      	cmp	r3, #0
  400212:	d0f6      	beq.n	400202 <sd_mmc_select_slot+0x2a>
		SysTick->CTRL = 0;
  400214:	2200      	movs	r2, #0
  400216:	4b27      	ldr	r3, [pc, #156]	; (4002b4 <sd_mmc_select_slot+0xdc>)
  400218:	601a      	str	r2, [r3, #0]
  40021a:	e7f2      	b.n	400202 <sd_mmc_select_slot+0x2a>
{
  40021c:	b510      	push	{r4, lr}
	if (sd_mmc_cards[slot].state == SD_MMC_CARD_STATE_NO_CARD) {
  40021e:	4b22      	ldr	r3, [pc, #136]	; (4002a8 <sd_mmc_select_slot+0xd0>)
  400220:	7b9b      	ldrb	r3, [r3, #14]
  400222:	2b04      	cmp	r3, #4
  400224:	d005      	beq.n	400232 <sd_mmc_select_slot+0x5a>
	if (sd_mmc_cards[slot].state == SD_MMC_CARD_STATE_DEBOUNCE) {
  400226:	2b01      	cmp	r3, #1
  400228:	d019      	beq.n	40025e <sd_mmc_select_slot+0x86>
	if (sd_mmc_cards[slot].state == SD_MMC_CARD_STATE_UNUSABLE) {
  40022a:	2b03      	cmp	r3, #3
  40022c:	d12c      	bne.n	400288 <sd_mmc_select_slot+0xb0>
		return SD_MMC_ERR_UNUSABLE;
  40022e:	2003      	movs	r0, #3
  400230:	bd10      	pop	{r4, pc}
		sd_mmc_cards[slot].state = SD_MMC_CARD_STATE_DEBOUNCE;
  400232:	2201      	movs	r2, #1
  400234:	4b1c      	ldr	r3, [pc, #112]	; (4002a8 <sd_mmc_select_slot+0xd0>)
  400236:	739a      	strb	r2, [r3, #14]
	if (!SysTick->CTRL) {
  400238:	4b1e      	ldr	r3, [pc, #120]	; (4002b4 <sd_mmc_select_slot+0xdc>)
  40023a:	681b      	ldr	r3, [r3, #0]
  40023c:	b93b      	cbnz	r3, 40024e <sd_mmc_select_slot+0x76>
		sd_mmc_sam_systick_used = true;
  40023e:	4b1c      	ldr	r3, [pc, #112]	; (4002b0 <sd_mmc_select_slot+0xd8>)
  400240:	701a      	strb	r2, [r3, #0]
		SysTick->LOAD = (sysclk_get_cpu_hz() / (8 * 1000))
  400242:	4b1c      	ldr	r3, [pc, #112]	; (4002b4 <sd_mmc_select_slot+0xdc>)
  400244:	491c      	ldr	r1, [pc, #112]	; (4002b8 <sd_mmc_select_slot+0xe0>)
  400246:	6059      	str	r1, [r3, #4]
		SysTick->CTRL = SysTick_CTRL_ENABLE_Msk;
  400248:	601a      	str	r2, [r3, #0]
		return SD_MMC_ERR_NO_CARD;
  40024a:	2002      	movs	r0, #2
  40024c:	bd10      	pop	{r4, pc}
		sd_mmc_sam_systick_used = false;
  40024e:	2200      	movs	r2, #0
  400250:	4b17      	ldr	r3, [pc, #92]	; (4002b0 <sd_mmc_select_slot+0xd8>)
  400252:	701a      	strb	r2, [r3, #0]
		delay_ms(SD_MMC_DEBOUNCE_TIMEOUT);
  400254:	4819      	ldr	r0, [pc, #100]	; (4002bc <sd_mmc_select_slot+0xe4>)
  400256:	4b1a      	ldr	r3, [pc, #104]	; (4002c0 <sd_mmc_select_slot+0xe8>)
  400258:	4798      	blx	r3
		return SD_MMC_ERR_NO_CARD;
  40025a:	2002      	movs	r0, #2
  40025c:	bd10      	pop	{r4, pc}
	if (!sd_mmc_sam_systick_used) {
  40025e:	4b14      	ldr	r3, [pc, #80]	; (4002b0 <sd_mmc_select_slot+0xd8>)
  400260:	781b      	ldrb	r3, [r3, #0]
  400262:	b13b      	cbz	r3, 400274 <sd_mmc_select_slot+0x9c>
	if (SysTick->CTRL & SysTick_CTRL_COUNTFLAG_Msk) {
  400264:	4b13      	ldr	r3, [pc, #76]	; (4002b4 <sd_mmc_select_slot+0xdc>)
  400266:	681b      	ldr	r3, [r3, #0]
  400268:	f413 3f80 	tst.w	r3, #65536	; 0x10000
  40026c:	d01a      	beq.n	4002a4 <sd_mmc_select_slot+0xcc>
		SysTick->CTRL = 0;
  40026e:	2200      	movs	r2, #0
  400270:	4b10      	ldr	r3, [pc, #64]	; (4002b4 <sd_mmc_select_slot+0xdc>)
  400272:	601a      	str	r2, [r3, #0]
		sd_mmc_cards[slot].state = SD_MMC_CARD_STATE_INIT;
  400274:	4b0c      	ldr	r3, [pc, #48]	; (4002a8 <sd_mmc_select_slot+0xd0>)
  400276:	2202      	movs	r2, #2
  400278:	739a      	strb	r2, [r3, #14]
		sd_mmc_cards[slot].clock = SDMMC_CLOCK_INIT;
  40027a:	4a12      	ldr	r2, [pc, #72]	; (4002c4 <sd_mmc_select_slot+0xec>)
  40027c:	601a      	str	r2, [r3, #0]
		sd_mmc_cards[slot].bus_width = 1;
  40027e:	2201      	movs	r2, #1
  400280:	745a      	strb	r2, [r3, #17]
		sd_mmc_cards[slot].high_speed = 0;
  400282:	2200      	movs	r2, #0
  400284:	f883 2022 	strb.w	r2, [r3, #34]	; 0x22
	sd_mmc_slot_sel = slot;
  400288:	2200      	movs	r2, #0
  40028a:	4b0f      	ldr	r3, [pc, #60]	; (4002c8 <sd_mmc_select_slot+0xf0>)
  40028c:	701a      	strb	r2, [r3, #0]
	sd_mmc_card = &sd_mmc_cards[slot];
  40028e:	4c06      	ldr	r4, [pc, #24]	; (4002a8 <sd_mmc_select_slot+0xd0>)
  400290:	4b0e      	ldr	r3, [pc, #56]	; (4002cc <sd_mmc_select_slot+0xf4>)
  400292:	601c      	str	r4, [r3, #0]
	sd_mmc_configure_slot();
  400294:	4b0e      	ldr	r3, [pc, #56]	; (4002d0 <sd_mmc_select_slot+0xf8>)
  400296:	4798      	blx	r3
			SD_MMC_INIT_ONGOING : SD_MMC_OK;
  400298:	7ba0      	ldrb	r0, [r4, #14]
  40029a:	2802      	cmp	r0, #2
  40029c:	bf14      	ite	ne
  40029e:	2000      	movne	r0, #0
  4002a0:	2001      	moveq	r0, #1
  4002a2:	bd10      	pop	{r4, pc}
			return SD_MMC_ERR_NO_CARD;
  4002a4:	2002      	movs	r0, #2
  4002a6:	bd10      	pop	{r4, pc}
  4002a8:	2040000c 	.word	0x2040000c
  4002ac:	00200707 	.word	0x00200707
  4002b0:	20400a1c 	.word	0x20400a1c
  4002b4:	e000e010 	.word	0xe000e010
  4002b8:	023c3460 	.word	0x023c3460
  4002bc:	0303af6b 	.word	0x0303af6b
  4002c0:	20400001 	.word	0x20400001
  4002c4:	00061a80 	.word	0x00061a80
  4002c8:	20400a1d 	.word	0x20400a1d
  4002cc:	20400a14 	.word	0x20400a14
  4002d0:	004001ad 	.word	0x004001ad

004002d4 <sdio_cmd52>:
{
  4002d4:	b538      	push	{r3, r4, r5, lr}
  4002d6:	9c04      	ldr	r4, [sp, #16]
		| ((uint32_t)reg_addr << SDIO_CMD52_REG_ADRR))) {
  4002d8:	0252      	lsls	r2, r2, #9
	if (!driver_send_cmd(SDIO_CMD52_IO_RW_DIRECT,
  4002da:	ea42 62c3 	orr.w	r2, r2, r3, lsl #27
  4002de:	ea42 7201 	orr.w	r2, r2, r1, lsl #28
  4002e2:	ea42 72c0 	orr.w	r2, r2, r0, lsl #31
		((uint32_t)*io_data << SDIO_CMD52_WR_DATA)
  4002e6:	7821      	ldrb	r1, [r4, #0]
	if (!driver_send_cmd(SDIO_CMD52_IO_RW_DIRECT,
  4002e8:	4311      	orrs	r1, r2
  4002ea:	f241 3034 	movw	r0, #4916	; 0x1334
  4002ee:	4b05      	ldr	r3, [pc, #20]	; (400304 <sdio_cmd52+0x30>)
  4002f0:	4798      	blx	r3
  4002f2:	4605      	mov	r5, r0
  4002f4:	b908      	cbnz	r0, 4002fa <sdio_cmd52+0x26>
}
  4002f6:	4628      	mov	r0, r5
  4002f8:	bd38      	pop	{r3, r4, r5, pc}
	*io_data = driver_get_response() & 0xFF;
  4002fa:	4b03      	ldr	r3, [pc, #12]	; (400308 <sdio_cmd52+0x34>)
  4002fc:	4798      	blx	r3
  4002fe:	7020      	strb	r0, [r4, #0]
	return true;
  400300:	e7f9      	b.n	4002f6 <sdio_cmd52+0x22>
  400302:	bf00      	nop
  400304:	00401279 	.word	0x00401279
  400308:	0040129d 	.word	0x0040129d

0040030c <sd_mmc_cmd9_mci>:
{
  40030c:	b510      	push	{r4, lr}
	if (!driver_send_cmd(SDMMC_MCI_CMD9_SEND_CSD, (uint32_t)sd_mmc_card->rca << 16)) {
  40030e:	4b09      	ldr	r3, [pc, #36]	; (400334 <sd_mmc_cmd9_mci+0x28>)
  400310:	681b      	ldr	r3, [r3, #0]
  400312:	8999      	ldrh	r1, [r3, #12]
  400314:	0409      	lsls	r1, r1, #16
  400316:	f641 3009 	movw	r0, #6921	; 0x1b09
  40031a:	4b07      	ldr	r3, [pc, #28]	; (400338 <sd_mmc_cmd9_mci+0x2c>)
  40031c:	4798      	blx	r3
  40031e:	4604      	mov	r4, r0
  400320:	b908      	cbnz	r0, 400326 <sd_mmc_cmd9_mci+0x1a>
}
  400322:	4620      	mov	r0, r4
  400324:	bd10      	pop	{r4, pc}
	driver_get_response_128(sd_mmc_card->csd);
  400326:	4b03      	ldr	r3, [pc, #12]	; (400334 <sd_mmc_cmd9_mci+0x28>)
  400328:	6818      	ldr	r0, [r3, #0]
  40032a:	3012      	adds	r0, #18
  40032c:	4b03      	ldr	r3, [pc, #12]	; (40033c <sd_mmc_cmd9_mci+0x30>)
  40032e:	4798      	blx	r3
	return true;
  400330:	e7f7      	b.n	400322 <sd_mmc_cmd9_mci+0x16>
  400332:	bf00      	nop
  400334:	20400a14 	.word	0x20400a14
  400338:	00401279 	.word	0x00401279
  40033c:	004012a5 	.word	0x004012a5

00400340 <sd_mmc_deselect_slot>:

/**
 * \brief Deselect the current card slot
 */
static void sd_mmc_deselect_slot(void)
{
  400340:	b508      	push	{r3, lr}
	if (sd_mmc_slot_sel < SD_MMC_MEM_CNT) {
  400342:	4b04      	ldr	r3, [pc, #16]	; (400354 <sd_mmc_deselect_slot+0x14>)
  400344:	781b      	ldrb	r3, [r3, #0]
  400346:	b103      	cbz	r3, 40034a <sd_mmc_deselect_slot+0xa>
  400348:	bd08      	pop	{r3, pc}
		driver_deselect_device(sd_mmc_slot_sel);
  40034a:	2000      	movs	r0, #0
  40034c:	4b02      	ldr	r3, [pc, #8]	; (400358 <sd_mmc_deselect_slot+0x18>)
  40034e:	4798      	blx	r3
	}
}
  400350:	e7fa      	b.n	400348 <sd_mmc_deselect_slot+0x8>
  400352:	bf00      	nop
  400354:	20400a1d 	.word	0x20400a1d
  400358:	00401255 	.word	0x00401255

0040035c <sd_mmc_init>:

//-------------------------------------------------------------------
//--------------------- PUBLIC FUNCTIONS ----------------------------

void sd_mmc_init(void)
{
  40035c:	b508      	push	{r3, lr}
	//! Enable the PMC clock for the card detect pins
#if (defined SD_MMC_0_CD_GPIO) && (SAM) && (!SAM4L)
# include "pmc.h"
# define SD_MMC_ENABLE_CD_PIN(slot, unused) \
	pmc_enable_periph_clk(SD_MMC_##slot##_CD_PIO_ID);
	MREPEAT(SD_MMC_MEM_CNT, SD_MMC_ENABLE_CD_PIN, ~)
  40035e:	2010      	movs	r0, #16
  400360:	4b05      	ldr	r3, [pc, #20]	; (400378 <sd_mmc_init+0x1c>)
  400362:	4798      	blx	r3
	pmc_enable_periph_clk(SD_MMC_##slot##_WP_PIO_ID);
	MREPEAT(SD_MMC_MEM_CNT, SD_MMC_ENABLE_WP_PIN, ~)
# undef SD_MMC_ENABLE_WP_PIN
#endif
	for (uint8_t slot = 0; slot < SD_MMC_MEM_CNT; slot++) {
		sd_mmc_cards[slot].state = SD_MMC_CARD_STATE_NO_CARD;
  400364:	2204      	movs	r2, #4
  400366:	4b05      	ldr	r3, [pc, #20]	; (40037c <sd_mmc_init+0x20>)
  400368:	739a      	strb	r2, [r3, #14]
	}
	sd_mmc_slot_sel = 0xFF; // No slot configurated
  40036a:	22ff      	movs	r2, #255	; 0xff
  40036c:	4b04      	ldr	r3, [pc, #16]	; (400380 <sd_mmc_init+0x24>)
  40036e:	701a      	strb	r2, [r3, #0]
	driver_init();
  400370:	4b04      	ldr	r3, [pc, #16]	; (400384 <sd_mmc_init+0x28>)
  400372:	4798      	blx	r3
  400374:	bd08      	pop	{r3, pc}
  400376:	bf00      	nop
  400378:	00408515 	.word	0x00408515
  40037c:	2040000c 	.word	0x2040000c
  400380:	20400a1d 	.word	0x20400a1d
  400384:	00401155 	.word	0x00401155

00400388 <sd_mmc_check>:
{
	return SD_MMC_MEM_CNT;
}

sd_mmc_err_t sd_mmc_check(uint8_t slot)
{
  400388:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
  40038c:	b095      	sub	sp, #84	; 0x54
	sd_mmc_err_t sd_mmc_err;

	sd_mmc_err = sd_mmc_select_slot(slot);
  40038e:	4ba7      	ldr	r3, [pc, #668]	; (40062c <sd_mmc_check+0x2a4>)
  400390:	4798      	blx	r3
  400392:	4604      	mov	r4, r0
	if (sd_mmc_err != SD_MMC_INIT_ONGOING) {
  400394:	2801      	cmp	r0, #1
  400396:	d005      	beq.n	4003a4 <sd_mmc_check+0x1c>
		sd_mmc_deselect_slot();
  400398:	4ba5      	ldr	r3, [pc, #660]	; (400630 <sd_mmc_check+0x2a8>)
  40039a:	4798      	blx	r3
	}
	sd_mmc_debug("SD/MMC card initialization failed\n\r");
	sd_mmc_card->state = SD_MMC_CARD_STATE_UNUSABLE;
	sd_mmc_deselect_slot();
	return SD_MMC_ERR_UNUSABLE;
}
  40039c:	4620      	mov	r0, r4
  40039e:	b015      	add	sp, #84	; 0x54
  4003a0:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
	uint8_t data = 0x08;
  4003a4:	ae14      	add	r6, sp, #80	; 0x50
  4003a6:	2308      	movs	r3, #8
  4003a8:	f806 3d45 	strb.w	r3, [r6, #-69]!
	sd_mmc_card->type = CARD_TYPE_SD;
  4003ac:	4ba1      	ldr	r3, [pc, #644]	; (400634 <sd_mmc_check+0x2ac>)
  4003ae:	681b      	ldr	r3, [r3, #0]
  4003b0:	2701      	movs	r7, #1
  4003b2:	73df      	strb	r7, [r3, #15]
	sd_mmc_card->version = CARD_VER_UNKNOWN;
  4003b4:	2500      	movs	r5, #0
  4003b6:	741d      	strb	r5, [r3, #16]
	sd_mmc_card->rca = 0;
  4003b8:	819d      	strh	r5, [r3, #12]
	driver_send_clock();
  4003ba:	4b9f      	ldr	r3, [pc, #636]	; (400638 <sd_mmc_check+0x2b0>)
  4003bc:	4798      	blx	r3
	sdio_cmd52(SDIO_CMD52_WRITE_FLAG, SDIO_CIA,SDIO_CCCR_IOA, 0, &data);
  4003be:	9600      	str	r6, [sp, #0]
  4003c0:	462b      	mov	r3, r5
  4003c2:	2206      	movs	r2, #6
  4003c4:	4629      	mov	r1, r5
  4003c6:	4638      	mov	r0, r7
  4003c8:	4e9c      	ldr	r6, [pc, #624]	; (40063c <sd_mmc_check+0x2b4>)
  4003ca:	47b0      	blx	r6
	if (!driver_send_cmd(SDMMC_MCI_CMD0_GO_IDLE_STATE, 0)) {
  4003cc:	4629      	mov	r1, r5
  4003ce:	f44f 4080 	mov.w	r0, #16384	; 0x4000
  4003d2:	4b9b      	ldr	r3, [pc, #620]	; (400640 <sd_mmc_check+0x2b8>)
  4003d4:	4798      	blx	r3
  4003d6:	b930      	cbnz	r0, 4003e6 <sd_mmc_check+0x5e>
	sd_mmc_card->state = SD_MMC_CARD_STATE_UNUSABLE;
  4003d8:	4b96      	ldr	r3, [pc, #600]	; (400634 <sd_mmc_check+0x2ac>)
  4003da:	681b      	ldr	r3, [r3, #0]
  4003dc:	2403      	movs	r4, #3
  4003de:	739c      	strb	r4, [r3, #14]
	sd_mmc_deselect_slot();
  4003e0:	4b93      	ldr	r3, [pc, #588]	; (400630 <sd_mmc_check+0x2a8>)
  4003e2:	4798      	blx	r3
	return SD_MMC_ERR_UNUSABLE;
  4003e4:	e7da      	b.n	40039c <sd_mmc_check+0x14>
	if (!driver_send_cmd(SD_CMD8_SEND_IF_COND,
  4003e6:	f44f 71d5 	mov.w	r1, #426	; 0x1aa
  4003ea:	f245 5008 	movw	r0, #21768	; 0x5508
  4003ee:	4b94      	ldr	r3, [pc, #592]	; (400640 <sd_mmc_check+0x2b8>)
  4003f0:	4798      	blx	r3
  4003f2:	2800      	cmp	r0, #0
  4003f4:	f040 8093 	bne.w	40051e <sd_mmc_check+0x196>
	*v2 = 0;
  4003f8:	f04f 0900 	mov.w	r9, #0
	if (!driver_send_cmd(SDIO_CMD5_SEND_OP_COND, 0)) {
  4003fc:	2100      	movs	r1, #0
  4003fe:	f244 5005 	movw	r0, #17669	; 0x4505
  400402:	4b8f      	ldr	r3, [pc, #572]	; (400640 <sd_mmc_check+0x2b8>)
  400404:	4798      	blx	r3
  400406:	2800      	cmp	r0, #0
  400408:	f040 8097 	bne.w	40053a <sd_mmc_check+0x1b2>
	if (sd_mmc_card->type & CARD_TYPE_SD) {
  40040c:	4b89      	ldr	r3, [pc, #548]	; (400634 <sd_mmc_check+0x2ac>)
  40040e:	681b      	ldr	r3, [r3, #0]
  400410:	7bdb      	ldrb	r3, [r3, #15]
  400412:	f013 0f01 	tst.w	r3, #1
  400416:	f040 80b5 	bne.w	400584 <sd_mmc_check+0x1fc>
	if (!driver_send_cmd(SD_CMD3_SEND_RELATIVE_ADDR, 0)) {
  40041a:	2100      	movs	r1, #0
  40041c:	f245 1003 	movw	r0, #20739	; 0x5103
  400420:	4b87      	ldr	r3, [pc, #540]	; (400640 <sd_mmc_check+0x2b8>)
  400422:	4798      	blx	r3
  400424:	2800      	cmp	r0, #0
  400426:	d0d7      	beq.n	4003d8 <sd_mmc_check+0x50>
	sd_mmc_card->rca = (driver_get_response() >> 16) & 0xFFFF;
  400428:	4d82      	ldr	r5, [pc, #520]	; (400634 <sd_mmc_check+0x2ac>)
  40042a:	682e      	ldr	r6, [r5, #0]
  40042c:	4b85      	ldr	r3, [pc, #532]	; (400644 <sd_mmc_check+0x2bc>)
  40042e:	4798      	blx	r3
  400430:	0c00      	lsrs	r0, r0, #16
  400432:	81b0      	strh	r0, [r6, #12]
	if (sd_mmc_card->type & CARD_TYPE_SD) {
  400434:	682b      	ldr	r3, [r5, #0]
  400436:	7bdb      	ldrb	r3, [r3, #15]
  400438:	f013 0f01 	tst.w	r3, #1
  40043c:	d034      	beq.n	4004a8 <sd_mmc_check+0x120>
		if (!sd_mmc_cmd9_mci()) {
  40043e:	4b82      	ldr	r3, [pc, #520]	; (400648 <sd_mmc_check+0x2c0>)
  400440:	4798      	blx	r3
  400442:	2800      	cmp	r0, #0
  400444:	d0c8      	beq.n	4003d8 <sd_mmc_check+0x50>
	tran_speed = CSD_TRAN_SPEED(sd_mmc_card->csd);
  400446:	682b      	ldr	r3, [r5, #0]
 */
static inline uint32_t SDMMC_UNSTUFF_BITS(uint8_t *reg, uint16_t reg_size,
		uint16_t pos, uint8_t size)
{
	uint32_t value;
	value = reg[((reg_size - pos + 7) / 8) - 1] >> (pos % 8);
  400448:	7d5a      	ldrb	r2, [r3, #21]
	mul = sd_trans_multipliers[(tran_speed >> 3) & 0xF];
  40044a:	f3c2 00c3 	ubfx	r0, r2, #3, #4
	unit = sd_mmc_trans_units[tran_speed & 0x7];
  40044e:	f002 0207 	and.w	r2, r2, #7
	sd_mmc_card->clock = unit * mul * 1000;
  400452:	497e      	ldr	r1, [pc, #504]	; (40064c <sd_mmc_check+0x2c4>)
  400454:	f851 1022 	ldr.w	r1, [r1, r2, lsl #2]
  400458:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
  40045c:	fb02 f201 	mul.w	r2, r2, r1
  400460:	497b      	ldr	r1, [pc, #492]	; (400650 <sd_mmc_check+0x2c8>)
  400462:	f851 1020 	ldr.w	r1, [r1, r0, lsl #2]
  400466:	fb02 f201 	mul.w	r2, r2, r1
  40046a:	601a      	str	r2, [r3, #0]
	if (CSD_STRUCTURE_VERSION(sd_mmc_card->csd) >= SD_CSD_VER_2_0) {
  40046c:	7c9a      	ldrb	r2, [r3, #18]
  40046e:	0992      	lsrs	r2, r2, #6
  400470:	f040 820c 	bne.w	40088c <sd_mmc_check+0x504>
  400474:	7e99      	ldrb	r1, [r3, #26]
	if (((pos % 8) + size) > 8) {
		value |= (uint32_t)reg[((reg_size - pos + 7) / 8) - 2] << (8 - (pos % 8));
  400476:	7e58      	ldrb	r0, [r3, #25]
	}
	if (((pos % 8) + size) > 16) {
		value |= (uint32_t)reg[((reg_size - pos + 7) / 8) - 3] << (16 - (pos % 8));
  400478:	7e1a      	ldrb	r2, [r3, #24]
  40047a:	0292      	lsls	r2, r2, #10
	}
	if (((pos % 8) + size) > 16) {
		value |= (uint32_t)reg[((reg_size - pos + 7) / 8) - 3] << (16 - (pos % 8));
  40047c:	ea42 0280 	orr.w	r2, r2, r0, lsl #2
  400480:	ea42 12a1 	orr.w	r2, r2, r1, asr #6
	value = reg[((reg_size - pos + 7) / 8) - 1] >> (pos % 8);
  400484:	7f18      	ldrb	r0, [r3, #28]
		value |= (uint32_t)reg[((reg_size - pos + 7) / 8) - 2] << (8 - (pos % 8));
  400486:	7ed9      	ldrb	r1, [r3, #27]
  400488:	0049      	lsls	r1, r1, #1
  40048a:	ea41 11e0 	orr.w	r1, r1, r0, asr #7
	}
	value &=  ((uint32_t)1 << size) - 1;
  40048e:	f3c2 020b 	ubfx	r2, r2, #0, #12
		uint32_t blocknr = ((SD_CSD_1_0_C_SIZE(sd_mmc_card->csd) + 1) *
  400492:	3201      	adds	r2, #1
  400494:	f001 0107 	and.w	r1, r1, #7
				(1 << (SD_CSD_1_0_C_SIZE_MULT(sd_mmc_card->csd) + 2)));
  400498:	3102      	adds	r1, #2
		uint32_t blocknr = ((SD_CSD_1_0_C_SIZE(sd_mmc_card->csd) + 1) *
  40049a:	408a      	lsls	r2, r1
  40049c:	7dd9      	ldrb	r1, [r3, #23]
  40049e:	f001 010f 	and.w	r1, r1, #15
		sd_mmc_card->capacity = blocknr *
  4004a2:	408a      	lsls	r2, r1
				/ 1024;
  4004a4:	0a92      	lsrs	r2, r2, #10
		sd_mmc_card->capacity = blocknr *
  4004a6:	605a      	str	r2, [r3, #4]
			(uint32_t)sd_mmc_card->rca << 16)) {
  4004a8:	4b62      	ldr	r3, [pc, #392]	; (400634 <sd_mmc_check+0x2ac>)
  4004aa:	681b      	ldr	r3, [r3, #0]
  4004ac:	8999      	ldrh	r1, [r3, #12]
	if (!driver_send_cmd(SDMMC_CMD7_SELECT_CARD_CMD,
  4004ae:	0409      	lsls	r1, r1, #16
  4004b0:	f243 1007 	movw	r0, #12551	; 0x3107
  4004b4:	4b62      	ldr	r3, [pc, #392]	; (400640 <sd_mmc_check+0x2b8>)
  4004b6:	4798      	blx	r3
  4004b8:	2800      	cmp	r0, #0
  4004ba:	d08d      	beq.n	4003d8 <sd_mmc_check+0x50>
	if (sd_mmc_card->type & CARD_TYPE_SD) {
  4004bc:	4b5d      	ldr	r3, [pc, #372]	; (400634 <sd_mmc_check+0x2ac>)
  4004be:	681b      	ldr	r3, [r3, #0]
  4004c0:	7bda      	ldrb	r2, [r3, #15]
  4004c2:	f012 0f01 	tst.w	r2, #1
  4004c6:	f040 81ee 	bne.w	4008a6 <sd_mmc_check+0x51e>
	if (IS_SDIO()) {
  4004ca:	4b5a      	ldr	r3, [pc, #360]	; (400634 <sd_mmc_check+0x2ac>)
  4004cc:	681b      	ldr	r3, [r3, #0]
  4004ce:	7bdb      	ldrb	r3, [r3, #15]
  4004d0:	f013 0f04 	tst.w	r3, #4
  4004d4:	f000 829d 	beq.w	400a12 <sd_mmc_check+0x68a>
  4004d8:	2509      	movs	r5, #9
		sdio_cmd52(SDIO_CMD52_READ_FLAG, SDIO_CIA, addr_old, 0, &addr_cis[i]);
  4004da:	2700      	movs	r7, #0
  4004dc:	4e57      	ldr	r6, [pc, #348]	; (40063c <sd_mmc_check+0x2b4>)
  4004de:	f1a5 0309 	sub.w	r3, r5, #9
  4004e2:	aa03      	add	r2, sp, #12
  4004e4:	4413      	add	r3, r2
  4004e6:	9300      	str	r3, [sp, #0]
  4004e8:	463b      	mov	r3, r7
  4004ea:	462a      	mov	r2, r5
  4004ec:	4639      	mov	r1, r7
  4004ee:	4638      	mov	r0, r7
  4004f0:	47b0      	blx	r6
		addr_old++;
  4004f2:	3501      	adds	r5, #1
	for(i = 0; i < 4; i++) {
  4004f4:	2d0d      	cmp	r5, #13
  4004f6:	d1f2      	bne.n	4004de <sd_mmc_check+0x156>
	addr_old = addr_cis[0] + (addr_cis[1] << 8) + \
  4004f8:	f89d 300d 	ldrb.w	r3, [sp, #13]
  4004fc:	f89d 900c 	ldrb.w	r9, [sp, #12]
  400500:	eb09 2903 	add.w	r9, r9, r3, lsl #8
				(addr_cis[2] << 16) + (addr_cis[3] << 24);
  400504:	f89d 300e 	ldrb.w	r3, [sp, #14]
	addr_old = addr_cis[0] + (addr_cis[1] << 8) + \
  400508:	eb09 4903 	add.w	r9, r9, r3, lsl #16
				(addr_cis[2] << 16) + (addr_cis[3] << 24);
  40050c:	f89d 300f 	ldrb.w	r3, [sp, #15]
  400510:	eb09 6903 	add.w	r9, r9, r3, lsl #24
	addr_new = addr_old;
  400514:	464e      	mov	r6, r9
			sdio_cmd52(SDIO_CMD52_READ_FLAG, SDIO_CIA, addr_new, 0, &buf[i]);
  400516:	f04f 0800 	mov.w	r8, #0
  40051a:	4f48      	ldr	r7, [pc, #288]	; (40063c <sd_mmc_check+0x2b4>)
  40051c:	e23a      	b.n	400994 <sd_mmc_check+0x60c>
	resp = driver_get_response();
  40051e:	4b49      	ldr	r3, [pc, #292]	; (400644 <sd_mmc_check+0x2bc>)
  400520:	4798      	blx	r3
	if (resp == 0xFFFFFFFF) {
  400522:	f1b0 3fff 	cmp.w	r0, #4294967295
  400526:	f000 834a 	beq.w	400bbe <sd_mmc_check+0x836>
	if ((resp & (SD_CMD8_MASK_PATTERN | SD_CMD8_MASK_VOLTAGE))
  40052a:	f3c0 000b 	ubfx	r0, r0, #0, #12
  40052e:	f5b0 7fd5 	cmp.w	r0, #426	; 0x1aa
  400532:	f47f af51 	bne.w	4003d8 <sd_mmc_check+0x50>
	*v2 = 1;
  400536:	46b9      	mov	r9, r7
  400538:	e760      	b.n	4003fc <sd_mmc_check+0x74>
	resp = driver_get_response();
  40053a:	4b42      	ldr	r3, [pc, #264]	; (400644 <sd_mmc_check+0x2bc>)
  40053c:	4798      	blx	r3
	if ((resp & OCR_SDIO_NF) == 0) {
  40053e:	f010 4fe0 	tst.w	r0, #1879048192	; 0x70000000
  400542:	f43f af63 	beq.w	40040c <sd_mmc_check+0x84>
  400546:	f241 3589 	movw	r5, #5001	; 0x1389
		if (!driver_send_cmd(SDIO_CMD5_SEND_OP_COND,
  40054a:	f244 5805 	movw	r8, #17669	; 0x4505
  40054e:	4e3c      	ldr	r6, [pc, #240]	; (400640 <sd_mmc_check+0x2b8>)
		resp = driver_get_response();
  400550:	4f3c      	ldr	r7, [pc, #240]	; (400644 <sd_mmc_check+0x2bc>)
		if (!driver_send_cmd(SDIO_CMD5_SEND_OP_COND,
  400552:	f400 11fc 	and.w	r1, r0, #2064384	; 0x1f8000
  400556:	4640      	mov	r0, r8
  400558:	47b0      	blx	r6
  40055a:	2800      	cmp	r0, #0
  40055c:	f43f af3c 	beq.w	4003d8 <sd_mmc_check+0x50>
		resp = driver_get_response();
  400560:	47b8      	blx	r7
		if ((resp & OCR_POWER_UP_BUSY) == OCR_POWER_UP_BUSY) {
  400562:	2800      	cmp	r0, #0
  400564:	db02      	blt.n	40056c <sd_mmc_check+0x1e4>
		if (cmd5_retry-- == 0) {
  400566:	3d01      	subs	r5, #1
  400568:	d1f3      	bne.n	400552 <sd_mmc_check+0x1ca>
  40056a:	e735      	b.n	4003d8 <sd_mmc_check+0x50>
	if ((resp & OCR_SDIO_MP) > 0) {
  40056c:	f010 6f00 	tst.w	r0, #134217728	; 0x8000000
  400570:	d104      	bne.n	40057c <sd_mmc_check+0x1f4>
		sd_mmc_card->type = CARD_TYPE_SDIO;
  400572:	4b30      	ldr	r3, [pc, #192]	; (400634 <sd_mmc_check+0x2ac>)
  400574:	681b      	ldr	r3, [r3, #0]
  400576:	2204      	movs	r2, #4
  400578:	73da      	strb	r2, [r3, #15]
  40057a:	e74e      	b.n	40041a <sd_mmc_check+0x92>
		sd_mmc_card->type = CARD_TYPE_SD_COMBO;
  40057c:	4b2d      	ldr	r3, [pc, #180]	; (400634 <sd_mmc_check+0x2ac>)
  40057e:	681b      	ldr	r3, [r3, #0]
  400580:	2205      	movs	r2, #5
  400582:	73da      	strb	r2, [r3, #15]
  400584:	f1b9 0f00 	cmp.w	r9, #0
  400588:	4f32      	ldr	r7, [pc, #200]	; (400654 <sd_mmc_check+0x2cc>)
  40058a:	bf14      	ite	ne
  40058c:	46b9      	movne	r9, r7
  40058e:	f44f 19fc 	moveq.w	r9, #2064384	; 0x1f8000
	if ((resp & OCR_SDIO_NF) == 0) {
  400592:	f640 0535 	movw	r5, #2101	; 0x835
		if (!driver_send_cmd(SDMMC_CMD55_APP_CMD, 0)) {
  400596:	f04f 0800 	mov.w	r8, #0
  40059a:	4e29      	ldr	r6, [pc, #164]	; (400640 <sd_mmc_check+0x2b8>)
		resp = driver_get_response();
  40059c:	4f29      	ldr	r7, [pc, #164]	; (400644 <sd_mmc_check+0x2bc>)
		if (!driver_send_cmd(SDMMC_CMD55_APP_CMD, 0)) {
  40059e:	4641      	mov	r1, r8
  4005a0:	f241 1037 	movw	r0, #4407	; 0x1137
  4005a4:	47b0      	blx	r6
  4005a6:	b148      	cbz	r0, 4005bc <sd_mmc_check+0x234>
		if (!driver_send_cmd(SD_MCI_ACMD41_SD_SEND_OP_COND, arg)) {
  4005a8:	4649      	mov	r1, r9
  4005aa:	f244 5029 	movw	r0, #17705	; 0x4529
  4005ae:	47b0      	blx	r6
  4005b0:	b120      	cbz	r0, 4005bc <sd_mmc_check+0x234>
		resp = driver_get_response();
  4005b2:	47b8      	blx	r7
		if (resp & OCR_POWER_UP_BUSY) {
  4005b4:	2800      	cmp	r0, #0
  4005b6:	db20      	blt.n	4005fa <sd_mmc_check+0x272>
		if (retry-- == 0) {
  4005b8:	3d01      	subs	r5, #1
  4005ba:	d1f0      	bne.n	40059e <sd_mmc_check+0x216>
			sd_mmc_card->type = CARD_TYPE_MMC;
  4005bc:	4b1d      	ldr	r3, [pc, #116]	; (400634 <sd_mmc_check+0x2ac>)
  4005be:	681b      	ldr	r3, [r3, #0]
  4005c0:	2202      	movs	r2, #2
  4005c2:	73da      	strb	r2, [r3, #15]
	if (!driver_send_cmd(SDMMC_MCI_CMD0_GO_IDLE_STATE, 0)) {
  4005c4:	2100      	movs	r1, #0
  4005c6:	f44f 4080 	mov.w	r0, #16384	; 0x4000
  4005ca:	4b1d      	ldr	r3, [pc, #116]	; (400640 <sd_mmc_check+0x2b8>)
  4005cc:	4798      	blx	r3
  4005ce:	2800      	cmp	r0, #0
  4005d0:	f43f af02 	beq.w	4003d8 <sd_mmc_check+0x50>
  4005d4:	f241 0569 	movw	r5, #4201	; 0x1069
		if (!driver_send_cmd(MMC_MCI_CMD1_SEND_OP_COND,
  4005d8:	f8df 8078 	ldr.w	r8, [pc, #120]	; 400654 <sd_mmc_check+0x2cc>
  4005dc:	4e18      	ldr	r6, [pc, #96]	; (400640 <sd_mmc_check+0x2b8>)
		resp = driver_get_response();
  4005de:	4f19      	ldr	r7, [pc, #100]	; (400644 <sd_mmc_check+0x2bc>)
		if (!driver_send_cmd(MMC_MCI_CMD1_SEND_OP_COND,
  4005e0:	4641      	mov	r1, r8
  4005e2:	f244 5001 	movw	r0, #17665	; 0x4501
  4005e6:	47b0      	blx	r6
  4005e8:	2800      	cmp	r0, #0
  4005ea:	f43f aef5 	beq.w	4003d8 <sd_mmc_check+0x50>
		resp = driver_get_response();
  4005ee:	47b8      	blx	r7
		if (resp & OCR_POWER_UP_BUSY) {
  4005f0:	2800      	cmp	r0, #0
  4005f2:	db31      	blt.n	400658 <sd_mmc_check+0x2d0>
		if (retry-- == 0) {
  4005f4:	3d01      	subs	r5, #1
  4005f6:	d1f3      	bne.n	4005e0 <sd_mmc_check+0x258>
  4005f8:	e6ee      	b.n	4003d8 <sd_mmc_check+0x50>
			if ((resp & OCR_CCS) != 0) {
  4005fa:	f010 4f80 	tst.w	r0, #1073741824	; 0x40000000
  4005fe:	d005      	beq.n	40060c <sd_mmc_check+0x284>
				sd_mmc_card->type |= CARD_TYPE_HC;
  400600:	4b0c      	ldr	r3, [pc, #48]	; (400634 <sd_mmc_check+0x2ac>)
  400602:	681a      	ldr	r2, [r3, #0]
  400604:	7bd3      	ldrb	r3, [r2, #15]
  400606:	f043 0308 	orr.w	r3, r3, #8
  40060a:	73d3      	strb	r3, [r2, #15]
	if (sd_mmc_card->type & CARD_TYPE_SD) {
  40060c:	4b09      	ldr	r3, [pc, #36]	; (400634 <sd_mmc_check+0x2ac>)
  40060e:	681b      	ldr	r3, [r3, #0]
  400610:	7bdb      	ldrb	r3, [r3, #15]
  400612:	f013 0f01 	tst.w	r3, #1
  400616:	f43f af00 	beq.w	40041a <sd_mmc_check+0x92>
		if (!driver_send_cmd(SDMMC_CMD2_ALL_SEND_CID, 0)) {
  40061a:	2100      	movs	r1, #0
  40061c:	f645 3002 	movw	r0, #23298	; 0x5b02
  400620:	4b07      	ldr	r3, [pc, #28]	; (400640 <sd_mmc_check+0x2b8>)
  400622:	4798      	blx	r3
  400624:	2800      	cmp	r0, #0
  400626:	f47f aef8 	bne.w	40041a <sd_mmc_check+0x92>
  40062a:	e6d5      	b.n	4003d8 <sd_mmc_check+0x50>
  40062c:	004001d9 	.word	0x004001d9
  400630:	00400341 	.word	0x00400341
  400634:	20400a14 	.word	0x20400a14
  400638:	00401257 	.word	0x00401257
  40063c:	004002d5 	.word	0x004002d5
  400640:	00401279 	.word	0x00401279
  400644:	0040129d 	.word	0x0040129d
  400648:	0040030d 	.word	0x0040030d
  40064c:	0040c384 	.word	0x0040c384
  400650:	0040c3a0 	.word	0x0040c3a0
  400654:	401f8000 	.word	0x401f8000
			if ((resp & OCR_ACCESS_MODE_MASK)
  400658:	f000 40c0 	and.w	r0, r0, #1610612736	; 0x60000000
  40065c:	f1b0 4f80 	cmp.w	r0, #1073741824	; 0x40000000
  400660:	d027      	beq.n	4006b2 <sd_mmc_check+0x32a>
	if (!driver_send_cmd(SDMMC_CMD2_ALL_SEND_CID, 0)) {
  400662:	2100      	movs	r1, #0
  400664:	f645 3002 	movw	r0, #23298	; 0x5b02
  400668:	4ba5      	ldr	r3, [pc, #660]	; (400900 <sd_mmc_check+0x578>)
  40066a:	4798      	blx	r3
  40066c:	2800      	cmp	r0, #0
  40066e:	f43f aeb3 	beq.w	4003d8 <sd_mmc_check+0x50>
	sd_mmc_card->rca = 1;
  400672:	4ba4      	ldr	r3, [pc, #656]	; (400904 <sd_mmc_check+0x57c>)
  400674:	681b      	ldr	r3, [r3, #0]
  400676:	2201      	movs	r2, #1
  400678:	819a      	strh	r2, [r3, #12]
	if (!driver_send_cmd(MMC_CMD3_SET_RELATIVE_ADDR,
  40067a:	f44f 3180 	mov.w	r1, #65536	; 0x10000
  40067e:	f241 1003 	movw	r0, #4355	; 0x1103
  400682:	4b9f      	ldr	r3, [pc, #636]	; (400900 <sd_mmc_check+0x578>)
  400684:	4798      	blx	r3
  400686:	2800      	cmp	r0, #0
  400688:	f43f aea6 	beq.w	4003d8 <sd_mmc_check+0x50>
	if (!sd_mmc_cmd9_mci()) {
  40068c:	4b9e      	ldr	r3, [pc, #632]	; (400908 <sd_mmc_check+0x580>)
  40068e:	4798      	blx	r3
  400690:	2800      	cmp	r0, #0
  400692:	f43f aea1 	beq.w	4003d8 <sd_mmc_check+0x50>
	switch (MMC_CSD_SPEC_VERS(sd_mmc_card->csd)) {
  400696:	4b9b      	ldr	r3, [pc, #620]	; (400904 <sd_mmc_check+0x57c>)
  400698:	681a      	ldr	r2, [r3, #0]
	value = reg[((reg_size - pos + 7) / 8) - 1] >> (pos % 8);
  40069a:	7c93      	ldrb	r3, [r2, #18]
	value &=  ((uint32_t)1 << size) - 1;
  40069c:	f3c3 0383 	ubfx	r3, r3, #2, #4
  4006a0:	3b01      	subs	r3, #1
  4006a2:	2b03      	cmp	r3, #3
  4006a4:	d80c      	bhi.n	4006c0 <sd_mmc_check+0x338>
  4006a6:	e8df f013 	tbh	[pc, r3, lsl #1]
  4006aa:	00cd      	.short	0x00cd
  4006ac:	00d300d0 	.word	0x00d300d0
  4006b0:	00d6      	.short	0x00d6
				sd_mmc_card->type |= CARD_TYPE_HC;
  4006b2:	4b94      	ldr	r3, [pc, #592]	; (400904 <sd_mmc_check+0x57c>)
  4006b4:	681a      	ldr	r2, [r3, #0]
  4006b6:	7bd3      	ldrb	r3, [r2, #15]
  4006b8:	f043 0308 	orr.w	r3, r3, #8
  4006bc:	73d3      	strb	r3, [r2, #15]
  4006be:	e7d0      	b.n	400662 <sd_mmc_check+0x2da>
		sd_mmc_card->version = CARD_VER_MMC_1_2;
  4006c0:	2312      	movs	r3, #18
  4006c2:	7413      	strb	r3, [r2, #16]
	value = reg[((reg_size - pos + 7) / 8) - 1] >> (pos % 8);
  4006c4:	7d53      	ldrb	r3, [r2, #21]
	mul = mmc_trans_multipliers[(tran_speed >> 3) & 0xF];
  4006c6:	f3c3 00c3 	ubfx	r0, r3, #3, #4
	unit = sd_mmc_trans_units[tran_speed & 0x7];
  4006ca:	f003 0307 	and.w	r3, r3, #7
	sd_mmc_card->clock = unit * mul * 1000;
  4006ce:	498f      	ldr	r1, [pc, #572]	; (40090c <sd_mmc_check+0x584>)
  4006d0:	f851 1023 	ldr.w	r1, [r1, r3, lsl #2]
  4006d4:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
  4006d8:	fb03 f301 	mul.w	r3, r3, r1
  4006dc:	498c      	ldr	r1, [pc, #560]	; (400910 <sd_mmc_check+0x588>)
  4006de:	f851 1020 	ldr.w	r1, [r1, r0, lsl #2]
  4006e2:	fb03 f301 	mul.w	r3, r3, r1
  4006e6:	6013      	str	r3, [r2, #0]
  4006e8:	7e91      	ldrb	r1, [r2, #26]
		value |= (uint32_t)reg[((reg_size - pos + 7) / 8) - 2] << (8 - (pos % 8));
  4006ea:	7e50      	ldrb	r0, [r2, #25]
		value |= (uint32_t)reg[((reg_size - pos + 7) / 8) - 3] << (16 - (pos % 8));
  4006ec:	7e13      	ldrb	r3, [r2, #24]
  4006ee:	029b      	lsls	r3, r3, #10
		value |= (uint32_t)reg[((reg_size - pos + 7) / 8) - 3] << (16 - (pos % 8));
  4006f0:	ea43 0380 	orr.w	r3, r3, r0, lsl #2
  4006f4:	ea43 13a1 	orr.w	r3, r3, r1, asr #6
	value &=  ((uint32_t)1 << size) - 1;
  4006f8:	f3c3 030b 	ubfx	r3, r3, #0, #12
	if (MMC_CSD_C_SIZE(sd_mmc_card->csd) != 0xFFF) {
  4006fc:	f640 71ff 	movw	r1, #4095	; 0xfff
  400700:	428b      	cmp	r3, r1
  400702:	d00f      	beq.n	400724 <sd_mmc_check+0x39c>
	value = reg[((reg_size - pos + 7) / 8) - 1] >> (pos % 8);
  400704:	7f10      	ldrb	r0, [r2, #28]
		value |= (uint32_t)reg[((reg_size - pos + 7) / 8) - 2] << (8 - (pos % 8));
  400706:	7ed1      	ldrb	r1, [r2, #27]
  400708:	0049      	lsls	r1, r1, #1
  40070a:	ea41 11e0 	orr.w	r1, r1, r0, asr #7
		uint32_t blocknr = ((MMC_CSD_C_SIZE(sd_mmc_card->csd) + 1) *
  40070e:	3301      	adds	r3, #1
	value &=  ((uint32_t)1 << size) - 1;
  400710:	f001 0107 	and.w	r1, r1, #7
			(1 << (MMC_CSD_C_SIZE_MULT(sd_mmc_card->csd) + 2)));
  400714:	3102      	adds	r1, #2
		uint32_t blocknr = ((MMC_CSD_C_SIZE(sd_mmc_card->csd) + 1) *
  400716:	408b      	lsls	r3, r1
  400718:	7dd1      	ldrb	r1, [r2, #23]
  40071a:	f001 010f 	and.w	r1, r1, #15
		sd_mmc_card->capacity = blocknr *
  40071e:	408b      	lsls	r3, r1
			(1 << MMC_CSD_READ_BL_LEN(sd_mmc_card->csd)) / 1024;
  400720:	0a9b      	lsrs	r3, r3, #10
		sd_mmc_card->capacity = blocknr *
  400722:	6053      	str	r3, [r2, #4]
			(uint32_t)sd_mmc_card->rca << 16)) {
  400724:	8991      	ldrh	r1, [r2, #12]
	if (!driver_send_cmd(SDMMC_CMD7_SELECT_CARD_CMD,
  400726:	0409      	lsls	r1, r1, #16
  400728:	f243 1007 	movw	r0, #12551	; 0x3107
  40072c:	4b74      	ldr	r3, [pc, #464]	; (400900 <sd_mmc_check+0x578>)
  40072e:	4798      	blx	r3
  400730:	2800      	cmp	r0, #0
  400732:	f43f ae51 	beq.w	4003d8 <sd_mmc_check+0x50>
	if (sd_mmc_card->version >= CARD_VER_MMC_4) {
  400736:	4b73      	ldr	r3, [pc, #460]	; (400904 <sd_mmc_check+0x57c>)
  400738:	681b      	ldr	r3, [r3, #0]
  40073a:	7c1b      	ldrb	r3, [r3, #16]
  40073c:	2b3f      	cmp	r3, #63	; 0x3f
  40073e:	f240 8097 	bls.w	400870 <sd_mmc_check+0x4e8>
	if (!driver_adtc_start(MMC_CMD8_SEND_EXT_CSD, 0,
  400742:	2100      	movs	r1, #0
  400744:	9100      	str	r1, [sp, #0]
  400746:	2301      	movs	r3, #1
  400748:	f44f 7200 	mov.w	r2, #512	; 0x200
  40074c:	4871      	ldr	r0, [pc, #452]	; (400914 <sd_mmc_check+0x58c>)
  40074e:	4d72      	ldr	r5, [pc, #456]	; (400918 <sd_mmc_check+0x590>)
  400750:	47a8      	blx	r5
  400752:	2800      	cmp	r0, #0
  400754:	f43f ae40 	beq.w	4003d8 <sd_mmc_check+0x50>
  400758:	2500      	movs	r5, #0
		if (!driver_read_word(&ext_csd)) {
  40075a:	4e70      	ldr	r6, [pc, #448]	; (40091c <sd_mmc_check+0x594>)
  40075c:	a803      	add	r0, sp, #12
  40075e:	47b0      	blx	r6
  400760:	2800      	cmp	r0, #0
  400762:	f43f ae39 	beq.w	4003d8 <sd_mmc_check+0x50>
	for (i = 0; i < (EXT_CSD_CARD_TYPE_INDEX + 4) / 4; i++) {
  400766:	3501      	adds	r5, #1
  400768:	b2ad      	uxth	r5, r5
  40076a:	2d32      	cmp	r5, #50	; 0x32
  40076c:	d1f6      	bne.n	40075c <sd_mmc_check+0x3d4>
			& MMC_CTYPE_52MHZ;
  40076e:	9e03      	ldr	r6, [sp, #12]
  400770:	f006 0602 	and.w	r6, r6, #2
	if (MMC_CSD_C_SIZE(sd_mmc_card->csd) == 0xFFF) {
  400774:	4b63      	ldr	r3, [pc, #396]	; (400904 <sd_mmc_check+0x57c>)
  400776:	681b      	ldr	r3, [r3, #0]
	value = reg[((reg_size - pos + 7) / 8) - 1] >> (pos % 8);
  400778:	7e9a      	ldrb	r2, [r3, #26]
		value |= (uint32_t)reg[((reg_size - pos + 7) / 8) - 2] << (8 - (pos % 8));
  40077a:	7e59      	ldrb	r1, [r3, #25]
		value |= (uint32_t)reg[((reg_size - pos + 7) / 8) - 3] << (16 - (pos % 8));
  40077c:	7e1b      	ldrb	r3, [r3, #24]
  40077e:	029b      	lsls	r3, r3, #10
		value |= (uint32_t)reg[((reg_size - pos + 7) / 8) - 3] << (16 - (pos % 8));
  400780:	ea43 0381 	orr.w	r3, r3, r1, lsl #2
  400784:	ea43 13a2 	orr.w	r3, r3, r2, asr #6
	value &=  ((uint32_t)1 << size) - 1;
  400788:	f3c3 030b 	ubfx	r3, r3, #0, #12
  40078c:	f640 72ff 	movw	r2, #4095	; 0xfff
  400790:	4293      	cmp	r3, r2
  400792:	d10e      	bne.n	4007b2 <sd_mmc_check+0x42a>
			if (!driver_read_word(&sec_count)) {
  400794:	4f61      	ldr	r7, [pc, #388]	; (40091c <sd_mmc_check+0x594>)
  400796:	a804      	add	r0, sp, #16
  400798:	47b8      	blx	r7
  40079a:	2800      	cmp	r0, #0
  40079c:	f43f ae1c 	beq.w	4003d8 <sd_mmc_check+0x50>
		for (; i <(EXT_CSD_SEC_COUNT_INDEX + 4) / 4; i++) {
  4007a0:	3501      	adds	r5, #1
  4007a2:	b2ad      	uxth	r5, r5
  4007a4:	2d35      	cmp	r5, #53	; 0x35
  4007a6:	d9f6      	bls.n	400796 <sd_mmc_check+0x40e>
		sd_mmc_card->capacity = sec_count / 2;
  4007a8:	4b56      	ldr	r3, [pc, #344]	; (400904 <sd_mmc_check+0x57c>)
  4007aa:	681a      	ldr	r2, [r3, #0]
  4007ac:	9b04      	ldr	r3, [sp, #16]
  4007ae:	085b      	lsrs	r3, r3, #1
  4007b0:	6053      	str	r3, [r2, #4]
		if (!driver_read_word(&sec_count)) {
  4007b2:	4f5a      	ldr	r7, [pc, #360]	; (40091c <sd_mmc_check+0x594>)
	for (; i < EXT_CSD_BSIZE / 4; i++) {
  4007b4:	2d7f      	cmp	r5, #127	; 0x7f
  4007b6:	d951      	bls.n	40085c <sd_mmc_check+0x4d4>
		if (4 <= driver_get_bus_width(sd_mmc_slot_sel)) {
  4007b8:	4b59      	ldr	r3, [pc, #356]	; (400920 <sd_mmc_check+0x598>)
  4007ba:	7818      	ldrb	r0, [r3, #0]
  4007bc:	4b59      	ldr	r3, [pc, #356]	; (400924 <sd_mmc_check+0x59c>)
  4007be:	4798      	blx	r3
  4007c0:	2803      	cmp	r0, #3
  4007c2:	d91d      	bls.n	400800 <sd_mmc_check+0x478>
			if (!mmc_cmd6_set_bus_width(driver_get_bus_width(sd_mmc_slot_sel))) {
  4007c4:	4b56      	ldr	r3, [pc, #344]	; (400920 <sd_mmc_check+0x598>)
  4007c6:	7818      	ldrb	r0, [r3, #0]
  4007c8:	4b56      	ldr	r3, [pc, #344]	; (400924 <sd_mmc_check+0x59c>)
  4007ca:	4798      	blx	r3
  4007cc:	4605      	mov	r5, r0
	switch (bus_width) {
  4007ce:	2804      	cmp	r0, #4
  4007d0:	d04c      	beq.n	40086c <sd_mmc_check+0x4e4>
		arg = MMC_CMD6_ACCESS_SET_BITS
  4007d2:	4b55      	ldr	r3, [pc, #340]	; (400928 <sd_mmc_check+0x5a0>)
  4007d4:	4955      	ldr	r1, [pc, #340]	; (40092c <sd_mmc_check+0x5a4>)
  4007d6:	2808      	cmp	r0, #8
  4007d8:	bf18      	it	ne
  4007da:	4619      	movne	r1, r3
	if (!driver_send_cmd(MMC_CMD6_SWITCH, arg)) {
  4007dc:	f243 1006 	movw	r0, #12550	; 0x3106
  4007e0:	4b47      	ldr	r3, [pc, #284]	; (400900 <sd_mmc_check+0x578>)
  4007e2:	4798      	blx	r3
  4007e4:	2800      	cmp	r0, #0
  4007e6:	f43f adf7 	beq.w	4003d8 <sd_mmc_check+0x50>
	if (driver_get_response() & CARD_STATUS_SWITCH_ERROR) {
  4007ea:	4b51      	ldr	r3, [pc, #324]	; (400930 <sd_mmc_check+0x5a8>)
  4007ec:	4798      	blx	r3
  4007ee:	f010 0f80 	tst.w	r0, #128	; 0x80
  4007f2:	f47f adf1 	bne.w	4003d8 <sd_mmc_check+0x50>
	sd_mmc_card->bus_width = bus_width;
  4007f6:	4b43      	ldr	r3, [pc, #268]	; (400904 <sd_mmc_check+0x57c>)
  4007f8:	681b      	ldr	r3, [r3, #0]
  4007fa:	745d      	strb	r5, [r3, #17]
			sd_mmc_configure_slot();
  4007fc:	4b4d      	ldr	r3, [pc, #308]	; (400934 <sd_mmc_check+0x5ac>)
  4007fe:	4798      	blx	r3
		if (driver_is_high_speed_capable() && b_authorize_high_speed) {
  400800:	4b4d      	ldr	r3, [pc, #308]	; (400938 <sd_mmc_check+0x5b0>)
  400802:	4798      	blx	r3
  400804:	b1be      	cbz	r6, 400836 <sd_mmc_check+0x4ae>
  400806:	b1b0      	cbz	r0, 400836 <sd_mmc_check+0x4ae>
	if (!driver_send_cmd(MMC_CMD6_SWITCH,
  400808:	494c      	ldr	r1, [pc, #304]	; (40093c <sd_mmc_check+0x5b4>)
  40080a:	f243 1006 	movw	r0, #12550	; 0x3106
  40080e:	4b3c      	ldr	r3, [pc, #240]	; (400900 <sd_mmc_check+0x578>)
  400810:	4798      	blx	r3
  400812:	2800      	cmp	r0, #0
  400814:	f43f ade0 	beq.w	4003d8 <sd_mmc_check+0x50>
	if (driver_get_response() & CARD_STATUS_SWITCH_ERROR) {
  400818:	4b45      	ldr	r3, [pc, #276]	; (400930 <sd_mmc_check+0x5a8>)
  40081a:	4798      	blx	r3
  40081c:	f010 0f80 	tst.w	r0, #128	; 0x80
  400820:	f47f adda 	bne.w	4003d8 <sd_mmc_check+0x50>
	sd_mmc_card->high_speed = 1;
  400824:	4b37      	ldr	r3, [pc, #220]	; (400904 <sd_mmc_check+0x57c>)
  400826:	681b      	ldr	r3, [r3, #0]
  400828:	2201      	movs	r2, #1
  40082a:	f883 2022 	strb.w	r2, [r3, #34]	; 0x22
	sd_mmc_card->clock = 52000000lu;
  40082e:	4a44      	ldr	r2, [pc, #272]	; (400940 <sd_mmc_check+0x5b8>)
  400830:	601a      	str	r2, [r3, #0]
			sd_mmc_configure_slot();
  400832:	4b40      	ldr	r3, [pc, #256]	; (400934 <sd_mmc_check+0x5ac>)
  400834:	4798      	blx	r3
		arg = MMC_CMD6_ACCESS_SET_BITS
  400836:	250a      	movs	r5, #10
		if (driver_send_cmd(SDMMC_CMD16_SET_BLOCKLEN, SD_MMC_BLOCK_SIZE)) {
  400838:	f44f 7800 	mov.w	r8, #512	; 0x200
  40083c:	f241 1710 	movw	r7, #4368	; 0x1110
  400840:	4e2f      	ldr	r6, [pc, #188]	; (400900 <sd_mmc_check+0x578>)
  400842:	e01d      	b.n	400880 <sd_mmc_check+0x4f8>
		sd_mmc_card->version = CARD_VER_MMC_1_4;
  400844:	2314      	movs	r3, #20
  400846:	7413      	strb	r3, [r2, #16]
  400848:	e73c      	b.n	4006c4 <sd_mmc_check+0x33c>
		sd_mmc_card->version = CARD_VER_MMC_2_2;
  40084a:	2322      	movs	r3, #34	; 0x22
  40084c:	7413      	strb	r3, [r2, #16]
  40084e:	e739      	b.n	4006c4 <sd_mmc_check+0x33c>
		sd_mmc_card->version = CARD_VER_MMC_3;
  400850:	2330      	movs	r3, #48	; 0x30
  400852:	7413      	strb	r3, [r2, #16]
  400854:	e736      	b.n	4006c4 <sd_mmc_check+0x33c>
		sd_mmc_card->version = CARD_VER_MMC_4;
  400856:	2340      	movs	r3, #64	; 0x40
  400858:	7413      	strb	r3, [r2, #16]
  40085a:	e733      	b.n	4006c4 <sd_mmc_check+0x33c>
		if (!driver_read_word(&sec_count)) {
  40085c:	a804      	add	r0, sp, #16
  40085e:	47b8      	blx	r7
  400860:	2800      	cmp	r0, #0
  400862:	f43f adb9 	beq.w	4003d8 <sd_mmc_check+0x50>
	for (; i < EXT_CSD_BSIZE / 4; i++) {
  400866:	3501      	adds	r5, #1
  400868:	b2ad      	uxth	r5, r5
  40086a:	e7a3      	b.n	4007b4 <sd_mmc_check+0x42c>
		arg = MMC_CMD6_ACCESS_SET_BITS
  40086c:	4935      	ldr	r1, [pc, #212]	; (400944 <sd_mmc_check+0x5bc>)
  40086e:	e7b5      	b.n	4007dc <sd_mmc_check+0x454>
		sd_mmc_configure_slot();
  400870:	4b30      	ldr	r3, [pc, #192]	; (400934 <sd_mmc_check+0x5ac>)
  400872:	4798      	blx	r3
  400874:	e7df      	b.n	400836 <sd_mmc_check+0x4ae>
  400876:	3d01      	subs	r5, #1
	while (retry--) {
  400878:	f015 05ff 	ands.w	r5, r5, #255	; 0xff
  40087c:	f43f adac 	beq.w	4003d8 <sd_mmc_check+0x50>
		if (driver_send_cmd(SDMMC_CMD16_SET_BLOCKLEN, SD_MMC_BLOCK_SIZE)) {
  400880:	4641      	mov	r1, r8
  400882:	4638      	mov	r0, r7
  400884:	47b0      	blx	r6
  400886:	2800      	cmp	r0, #0
  400888:	d0f5      	beq.n	400876 <sd_mmc_check+0x4ee>
  40088a:	e10e      	b.n	400aaa <sd_mmc_check+0x722>
	value = reg[((reg_size - pos + 7) / 8) - 1] >> (pos % 8);
  40088c:	7ed9      	ldrb	r1, [r3, #27]
		value |= (uint32_t)reg[((reg_size - pos + 7) / 8) - 2] << (8 - (pos % 8));
  40088e:	7e98      	ldrb	r0, [r3, #26]
		value |= (uint32_t)reg[((reg_size - pos + 7) / 8) - 3] << (16 - (pos % 8));
  400890:	7e5a      	ldrb	r2, [r3, #25]
  400892:	0412      	lsls	r2, r2, #16
		value |= (uint32_t)reg[((reg_size - pos + 7) / 8) - 3] << (16 - (pos % 8));
  400894:	ea42 2200 	orr.w	r2, r2, r0, lsl #8
  400898:	430a      	orrs	r2, r1
	value &=  ((uint32_t)1 << size) - 1;
  40089a:	f3c2 0215 	ubfx	r2, r2, #0, #22
				* 512;
  40089e:	3201      	adds	r2, #1
  4008a0:	0252      	lsls	r2, r2, #9
		sd_mmc_card->capacity =
  4008a2:	605a      	str	r2, [r3, #4]
  4008a4:	e600      	b.n	4004a8 <sd_mmc_check+0x120>
	if (!driver_send_cmd(SDMMC_CMD55_APP_CMD, (uint32_t)sd_mmc_card->rca << 16)) {
  4008a6:	8999      	ldrh	r1, [r3, #12]
  4008a8:	0409      	lsls	r1, r1, #16
  4008aa:	f241 1037 	movw	r0, #4407	; 0x1137
  4008ae:	4b14      	ldr	r3, [pc, #80]	; (400900 <sd_mmc_check+0x578>)
  4008b0:	4798      	blx	r3
  4008b2:	2800      	cmp	r0, #0
  4008b4:	f43f ad90 	beq.w	4003d8 <sd_mmc_check+0x50>
	if (!driver_adtc_start(SD_ACMD51_SEND_SCR, 0,
  4008b8:	2301      	movs	r3, #1
  4008ba:	9300      	str	r3, [sp, #0]
  4008bc:	2208      	movs	r2, #8
  4008be:	2100      	movs	r1, #0
  4008c0:	4821      	ldr	r0, [pc, #132]	; (400948 <sd_mmc_check+0x5c0>)
  4008c2:	4d15      	ldr	r5, [pc, #84]	; (400918 <sd_mmc_check+0x590>)
  4008c4:	47a8      	blx	r5
  4008c6:	2800      	cmp	r0, #0
  4008c8:	f43f ad86 	beq.w	4003d8 <sd_mmc_check+0x50>
	if (!driver_start_read_blocks(scr, 1)) {
  4008cc:	2101      	movs	r1, #1
  4008ce:	a804      	add	r0, sp, #16
  4008d0:	4b1e      	ldr	r3, [pc, #120]	; (40094c <sd_mmc_check+0x5c4>)
  4008d2:	4798      	blx	r3
  4008d4:	2800      	cmp	r0, #0
  4008d6:	f43f ad7f 	beq.w	4003d8 <sd_mmc_check+0x50>
	if (!driver_wait_end_of_read_blocks()) {
  4008da:	4b1d      	ldr	r3, [pc, #116]	; (400950 <sd_mmc_check+0x5c8>)
  4008dc:	4798      	blx	r3
  4008de:	2800      	cmp	r0, #0
  4008e0:	f43f ad7a 	beq.w	4003d8 <sd_mmc_check+0x50>
	switch (SD_SCR_SD_SPEC(scr)) {
  4008e4:	f89d 3010 	ldrb.w	r3, [sp, #16]
  4008e8:	f003 030f 	and.w	r3, r3, #15
  4008ec:	2b01      	cmp	r3, #1
  4008ee:	d036      	beq.n	40095e <sd_mmc_check+0x5d6>
  4008f0:	b383      	cbz	r3, 400954 <sd_mmc_check+0x5cc>
  4008f2:	2b02      	cmp	r3, #2
  4008f4:	d038      	beq.n	400968 <sd_mmc_check+0x5e0>
		sd_mmc_card->version = CARD_VER_SD_1_0;
  4008f6:	4b03      	ldr	r3, [pc, #12]	; (400904 <sd_mmc_check+0x57c>)
  4008f8:	681b      	ldr	r3, [r3, #0]
  4008fa:	2210      	movs	r2, #16
  4008fc:	741a      	strb	r2, [r3, #16]
  4008fe:	e5e4      	b.n	4004ca <sd_mmc_check+0x142>
  400900:	00401279 	.word	0x00401279
  400904:	20400a14 	.word	0x20400a14
  400908:	0040030d 	.word	0x0040030d
  40090c:	0040c384 	.word	0x0040c384
  400910:	0040c344 	.word	0x0040c344
  400914:	00081108 	.word	0x00081108
  400918:	004012d5 	.word	0x004012d5
  40091c:	0040139d 	.word	0x0040139d
  400920:	20400a1d 	.word	0x20400a1d
  400924:	00401181 	.word	0x00401181
  400928:	01b70000 	.word	0x01b70000
  40092c:	01b70200 	.word	0x01b70200
  400930:	0040129d 	.word	0x0040129d
  400934:	004001ad 	.word	0x004001ad
  400938:	0040118b 	.word	0x0040118b
  40093c:	03b90100 	.word	0x03b90100
  400940:	03197500 	.word	0x03197500
  400944:	01b70100 	.word	0x01b70100
  400948:	00081133 	.word	0x00081133
  40094c:	00401411 	.word	0x00401411
  400950:	00401509 	.word	0x00401509
		sd_mmc_card->version = CARD_VER_SD_1_0;
  400954:	4b9b      	ldr	r3, [pc, #620]	; (400bc4 <sd_mmc_check+0x83c>)
  400956:	681b      	ldr	r3, [r3, #0]
  400958:	2210      	movs	r2, #16
  40095a:	741a      	strb	r2, [r3, #16]
  40095c:	e5b5      	b.n	4004ca <sd_mmc_check+0x142>
		sd_mmc_card->version = CARD_VER_SD_1_10;
  40095e:	4b99      	ldr	r3, [pc, #612]	; (400bc4 <sd_mmc_check+0x83c>)
  400960:	681b      	ldr	r3, [r3, #0]
  400962:	221a      	movs	r2, #26
  400964:	741a      	strb	r2, [r3, #16]
  400966:	e5b0      	b.n	4004ca <sd_mmc_check+0x142>
		if (SD_SCR_SD_SPEC3(scr) == SD_SCR_SD_SPEC_3_00) {
  400968:	f89d 3012 	ldrb.w	r3, [sp, #18]
  40096c:	09db      	lsrs	r3, r3, #7
			sd_mmc_card->version = CARD_VER_SD_3_0;
  40096e:	4b95      	ldr	r3, [pc, #596]	; (400bc4 <sd_mmc_check+0x83c>)
  400970:	681b      	ldr	r3, [r3, #0]
  400972:	bf14      	ite	ne
  400974:	2230      	movne	r2, #48	; 0x30
			sd_mmc_card->version = CARD_VER_SD_2_0;
  400976:	2220      	moveq	r2, #32
  400978:	741a      	strb	r2, [r3, #16]
  40097a:	e5a6      	b.n	4004ca <sd_mmc_check+0x142>
		if (buf[1] == 0) {
  40097c:	f89d 3011 	ldrb.w	r3, [sp, #17]
  400980:	2b00      	cmp	r3, #0
  400982:	f43f ad29 	beq.w	4003d8 <sd_mmc_check+0x50>
		addr_new += buf[1]-1;
  400986:	3302      	adds	r3, #2
  400988:	441e      	add	r6, r3
		if (addr_new > (addr_old + 256)) {
  40098a:	f509 7380 	add.w	r3, r9, #256	; 0x100
  40098e:	429e      	cmp	r6, r3
  400990:	f63f ad22 	bhi.w	4003d8 <sd_mmc_check+0x50>
	addr_new = addr_old;
  400994:	2500      	movs	r5, #0
			sdio_cmd52(SDIO_CMD52_READ_FLAG, SDIO_CIA, addr_new, 0, &buf[i]);
  400996:	ab04      	add	r3, sp, #16
  400998:	442b      	add	r3, r5
  40099a:	9300      	str	r3, [sp, #0]
  40099c:	4643      	mov	r3, r8
  40099e:	1972      	adds	r2, r6, r5
  4009a0:	4641      	mov	r1, r8
  4009a2:	4640      	mov	r0, r8
  4009a4:	47b8      	blx	r7
  4009a6:	3501      	adds	r5, #1
		for(i=0; i<3; i++) {
  4009a8:	2d03      	cmp	r5, #3
  4009aa:	d1f4      	bne.n	400996 <sd_mmc_check+0x60e>
		if (buf[0] == SDIO_CISTPL_END) {
  4009ac:	f89d 3010 	ldrb.w	r3, [sp, #16]
  4009b0:	2bff      	cmp	r3, #255	; 0xff
  4009b2:	f43f ad11 	beq.w	4003d8 <sd_mmc_check+0x50>
		if (buf[0] == SDIO_CISTPL_FUNCE && buf[2] == 0x00) {
  4009b6:	2b22      	cmp	r3, #34	; 0x22
  4009b8:	d1e0      	bne.n	40097c <sd_mmc_check+0x5f4>
  4009ba:	f89d 3012 	ldrb.w	r3, [sp, #18]
  4009be:	2b00      	cmp	r3, #0
  4009c0:	d1dc      	bne.n	40097c <sd_mmc_check+0x5f4>
  4009c2:	ad04      	add	r5, sp, #16
  4009c4:	f106 0906 	add.w	r9, r6, #6
		sdio_cmd52(SDIO_CMD52_READ_FLAG, SDIO_CIA, addr_new, 0, &buf[i]);
  4009c8:	f04f 0800 	mov.w	r8, #0
  4009cc:	4f7e      	ldr	r7, [pc, #504]	; (400bc8 <sd_mmc_check+0x840>)
  4009ce:	9500      	str	r5, [sp, #0]
  4009d0:	4643      	mov	r3, r8
  4009d2:	4632      	mov	r2, r6
  4009d4:	4641      	mov	r1, r8
  4009d6:	4640      	mov	r0, r8
  4009d8:	47b8      	blx	r7
		addr_new++;
  4009da:	3601      	adds	r6, #1
  4009dc:	3501      	adds	r5, #1
	for(i = 0; i < 6; i++) {
  4009de:	454e      	cmp	r6, r9
  4009e0:	d1f5      	bne.n	4009ce <sd_mmc_check+0x646>
	tplfe_max_tran_speed = buf[5];
  4009e2:	f89d 3015 	ldrb.w	r3, [sp, #21]
  4009e6:	2b32      	cmp	r3, #50	; 0x32
  4009e8:	bf28      	it	cs
  4009ea:	2332      	movcs	r3, #50	; 0x32
	sd_mmc_card->clock = unit * mul * 1000;
  4009ec:	4a75      	ldr	r2, [pc, #468]	; (400bc4 <sd_mmc_check+0x83c>)
  4009ee:	6812      	ldr	r2, [r2, #0]
	mul = sd_trans_multipliers[(tplfe_max_tran_speed >> 3) & 0xF];
  4009f0:	f3c3 00c3 	ubfx	r0, r3, #3, #4
	unit = sd_mmc_trans_units[tplfe_max_tran_speed & 0x7];
  4009f4:	f003 0307 	and.w	r3, r3, #7
	sd_mmc_card->clock = unit * mul * 1000;
  4009f8:	4974      	ldr	r1, [pc, #464]	; (400bcc <sd_mmc_check+0x844>)
  4009fa:	f851 1023 	ldr.w	r1, [r1, r3, lsl #2]
  4009fe:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
  400a02:	fb03 f301 	mul.w	r3, r3, r1
  400a06:	4972      	ldr	r1, [pc, #456]	; (400bd0 <sd_mmc_check+0x848>)
  400a08:	f851 1020 	ldr.w	r1, [r1, r0, lsl #2]
  400a0c:	fb03 f301 	mul.w	r3, r3, r1
  400a10:	6013      	str	r3, [r2, #0]
	if ((4 <= driver_get_bus_width(sd_mmc_slot_sel))) {
  400a12:	4b70      	ldr	r3, [pc, #448]	; (400bd4 <sd_mmc_check+0x84c>)
  400a14:	7818      	ldrb	r0, [r3, #0]
  400a16:	4b70      	ldr	r3, [pc, #448]	; (400bd8 <sd_mmc_check+0x850>)
  400a18:	4798      	blx	r3
  400a1a:	2803      	cmp	r0, #3
  400a1c:	d922      	bls.n	400a64 <sd_mmc_check+0x6dc>
		if (IS_SDIO()) {
  400a1e:	4b69      	ldr	r3, [pc, #420]	; (400bc4 <sd_mmc_check+0x83c>)
  400a20:	681b      	ldr	r3, [r3, #0]
  400a22:	7bdb      	ldrb	r3, [r3, #15]
  400a24:	f013 0f04 	tst.w	r3, #4
  400a28:	d146      	bne.n	400ab8 <sd_mmc_check+0x730>
		if (sd_mmc_card->type & CARD_TYPE_SD) {
  400a2a:	4b66      	ldr	r3, [pc, #408]	; (400bc4 <sd_mmc_check+0x83c>)
  400a2c:	681b      	ldr	r3, [r3, #0]
  400a2e:	7bda      	ldrb	r2, [r3, #15]
  400a30:	f012 0f01 	tst.w	r2, #1
  400a34:	d014      	beq.n	400a60 <sd_mmc_check+0x6d8>
	if (!driver_send_cmd(SDMMC_CMD55_APP_CMD, (uint32_t)sd_mmc_card->rca << 16)) {
  400a36:	8999      	ldrh	r1, [r3, #12]
  400a38:	0409      	lsls	r1, r1, #16
  400a3a:	f241 1037 	movw	r0, #4407	; 0x1137
  400a3e:	4b67      	ldr	r3, [pc, #412]	; (400bdc <sd_mmc_check+0x854>)
  400a40:	4798      	blx	r3
  400a42:	2800      	cmp	r0, #0
  400a44:	f43f acc8 	beq.w	4003d8 <sd_mmc_check+0x50>
	if (!driver_send_cmd(SD_ACMD6_SET_BUS_WIDTH, 0x2)) {
  400a48:	2102      	movs	r1, #2
  400a4a:	f241 1006 	movw	r0, #4358	; 0x1106
  400a4e:	4b63      	ldr	r3, [pc, #396]	; (400bdc <sd_mmc_check+0x854>)
  400a50:	4798      	blx	r3
  400a52:	2800      	cmp	r0, #0
  400a54:	f43f acc0 	beq.w	4003d8 <sd_mmc_check+0x50>
	sd_mmc_card->bus_width = 4;
  400a58:	4b5a      	ldr	r3, [pc, #360]	; (400bc4 <sd_mmc_check+0x83c>)
  400a5a:	681b      	ldr	r3, [r3, #0]
  400a5c:	2204      	movs	r2, #4
  400a5e:	745a      	strb	r2, [r3, #17]
		sd_mmc_configure_slot();
  400a60:	4b5f      	ldr	r3, [pc, #380]	; (400be0 <sd_mmc_check+0x858>)
  400a62:	4798      	blx	r3
	if (driver_is_high_speed_capable()) {
  400a64:	4b5f      	ldr	r3, [pc, #380]	; (400be4 <sd_mmc_check+0x85c>)
  400a66:	4798      	blx	r3
  400a68:	b180      	cbz	r0, 400a8c <sd_mmc_check+0x704>
		if (IS_SDIO()) {
  400a6a:	4b56      	ldr	r3, [pc, #344]	; (400bc4 <sd_mmc_check+0x83c>)
  400a6c:	681b      	ldr	r3, [r3, #0]
  400a6e:	7bdb      	ldrb	r3, [r3, #15]
  400a70:	f013 0f04 	tst.w	r3, #4
  400a74:	d141      	bne.n	400afa <sd_mmc_check+0x772>
		if (sd_mmc_card->type & CARD_TYPE_SD) {
  400a76:	4b53      	ldr	r3, [pc, #332]	; (400bc4 <sd_mmc_check+0x83c>)
  400a78:	681b      	ldr	r3, [r3, #0]
  400a7a:	7bda      	ldrb	r2, [r3, #15]
  400a7c:	f012 0f01 	tst.w	r2, #1
  400a80:	d002      	beq.n	400a88 <sd_mmc_check+0x700>
			if (sd_mmc_card->version > CARD_VER_SD_1_0) {
  400a82:	7c1b      	ldrb	r3, [r3, #16]
  400a84:	2b10      	cmp	r3, #16
  400a86:	d85e      	bhi.n	400b46 <sd_mmc_check+0x7be>
		sd_mmc_configure_slot();
  400a88:	4b55      	ldr	r3, [pc, #340]	; (400be0 <sd_mmc_check+0x858>)
  400a8a:	4798      	blx	r3
	if (sd_mmc_card->type & CARD_TYPE_SD) {
  400a8c:	4b4d      	ldr	r3, [pc, #308]	; (400bc4 <sd_mmc_check+0x83c>)
  400a8e:	681b      	ldr	r3, [r3, #0]
  400a90:	7bdb      	ldrb	r3, [r3, #15]
  400a92:	f013 0f01 	tst.w	r3, #1
  400a96:	d008      	beq.n	400aaa <sd_mmc_check+0x722>
		if (!driver_send_cmd(SDMMC_CMD16_SET_BLOCKLEN, SD_MMC_BLOCK_SIZE)) {
  400a98:	f44f 7100 	mov.w	r1, #512	; 0x200
  400a9c:	f241 1010 	movw	r0, #4368	; 0x1110
  400aa0:	4b4e      	ldr	r3, [pc, #312]	; (400bdc <sd_mmc_check+0x854>)
  400aa2:	4798      	blx	r3
	if (sd_mmc_is_spi()? sd_mmc_spi_card_init()
  400aa4:	2800      	cmp	r0, #0
  400aa6:	f43f ac97 	beq.w	4003d8 <sd_mmc_check+0x50>
		sd_mmc_card->state = SD_MMC_CARD_STATE_READY;
  400aaa:	4b46      	ldr	r3, [pc, #280]	; (400bc4 <sd_mmc_check+0x83c>)
  400aac:	681b      	ldr	r3, [r3, #0]
  400aae:	2200      	movs	r2, #0
  400ab0:	739a      	strb	r2, [r3, #14]
		sd_mmc_deselect_slot();
  400ab2:	4b4d      	ldr	r3, [pc, #308]	; (400be8 <sd_mmc_check+0x860>)
  400ab4:	4798      	blx	r3
		return SD_MMC_INIT_ONGOING;
  400ab6:	e471      	b.n	40039c <sd_mmc_check+0x14>
	if (!sdio_cmd52(SDIO_CMD52_READ_FLAG, SDIO_CIA, SDIO_CCCR_CAP,
  400ab8:	ab04      	add	r3, sp, #16
  400aba:	9300      	str	r3, [sp, #0]
  400abc:	2300      	movs	r3, #0
  400abe:	2208      	movs	r2, #8
  400ac0:	4619      	mov	r1, r3
  400ac2:	4618      	mov	r0, r3
  400ac4:	4d40      	ldr	r5, [pc, #256]	; (400bc8 <sd_mmc_check+0x840>)
  400ac6:	47a8      	blx	r5
  400ac8:	2800      	cmp	r0, #0
  400aca:	f43f ac85 	beq.w	4003d8 <sd_mmc_check+0x50>
	if ((u8_value & SDIO_CAP_4BLS) != SDIO_CAP_4BLS) {
  400ace:	f99d 3010 	ldrsb.w	r3, [sp, #16]
  400ad2:	2b00      	cmp	r3, #0
  400ad4:	daa9      	bge.n	400a2a <sd_mmc_check+0x6a2>
	u8_value = SDIO_BUSWIDTH_4B;
  400ad6:	ab14      	add	r3, sp, #80	; 0x50
  400ad8:	2202      	movs	r2, #2
  400ada:	f803 2d40 	strb.w	r2, [r3, #-64]!
	if (!sdio_cmd52(SDIO_CMD52_WRITE_FLAG, SDIO_CIA, SDIO_CCCR_BUS_CTRL,
  400ade:	9300      	str	r3, [sp, #0]
  400ae0:	2301      	movs	r3, #1
  400ae2:	2207      	movs	r2, #7
  400ae4:	2100      	movs	r1, #0
  400ae6:	4618      	mov	r0, r3
  400ae8:	47a8      	blx	r5
  400aea:	2800      	cmp	r0, #0
  400aec:	f43f ac74 	beq.w	4003d8 <sd_mmc_check+0x50>
	sd_mmc_card->bus_width = 4;
  400af0:	4b34      	ldr	r3, [pc, #208]	; (400bc4 <sd_mmc_check+0x83c>)
  400af2:	681b      	ldr	r3, [r3, #0]
  400af4:	2204      	movs	r2, #4
  400af6:	745a      	strb	r2, [r3, #17]
  400af8:	e797      	b.n	400a2a <sd_mmc_check+0x6a2>
	if (!sdio_cmd52(SDIO_CMD52_READ_FLAG, SDIO_CIA, SDIO_CCCR_HS, 0, &u8_value)) {
  400afa:	ab04      	add	r3, sp, #16
  400afc:	9300      	str	r3, [sp, #0]
  400afe:	2300      	movs	r3, #0
  400b00:	2213      	movs	r2, #19
  400b02:	4619      	mov	r1, r3
  400b04:	4618      	mov	r0, r3
  400b06:	4d30      	ldr	r5, [pc, #192]	; (400bc8 <sd_mmc_check+0x840>)
  400b08:	47a8      	blx	r5
  400b0a:	2800      	cmp	r0, #0
  400b0c:	f43f ac64 	beq.w	4003d8 <sd_mmc_check+0x50>
	if ((u8_value & SDIO_SHS) != SDIO_SHS) {
  400b10:	f89d 3010 	ldrb.w	r3, [sp, #16]
  400b14:	f013 0f01 	tst.w	r3, #1
  400b18:	d0ad      	beq.n	400a76 <sd_mmc_check+0x6ee>
	u8_value = SDIO_EHS;
  400b1a:	ab14      	add	r3, sp, #80	; 0x50
  400b1c:	2202      	movs	r2, #2
  400b1e:	f803 2d40 	strb.w	r2, [r3, #-64]!
	if (!sdio_cmd52(SDIO_CMD52_WRITE_FLAG, SDIO_CIA, SDIO_CCCR_HS,
  400b22:	9300      	str	r3, [sp, #0]
  400b24:	2301      	movs	r3, #1
  400b26:	2213      	movs	r2, #19
  400b28:	2100      	movs	r1, #0
  400b2a:	4618      	mov	r0, r3
  400b2c:	47a8      	blx	r5
  400b2e:	2800      	cmp	r0, #0
  400b30:	f43f ac52 	beq.w	4003d8 <sd_mmc_check+0x50>
	sd_mmc_card->high_speed = 1;
  400b34:	4b23      	ldr	r3, [pc, #140]	; (400bc4 <sd_mmc_check+0x83c>)
  400b36:	681b      	ldr	r3, [r3, #0]
  400b38:	2201      	movs	r2, #1
  400b3a:	f883 2022 	strb.w	r2, [r3, #34]	; 0x22
	sd_mmc_card->clock *= 2;
  400b3e:	681a      	ldr	r2, [r3, #0]
  400b40:	0052      	lsls	r2, r2, #1
  400b42:	601a      	str	r2, [r3, #0]
  400b44:	e797      	b.n	400a76 <sd_mmc_check+0x6ee>
	uint8_t switch_status[SD_SW_STATUS_BSIZE] = {0};
  400b46:	2540      	movs	r5, #64	; 0x40
  400b48:	462a      	mov	r2, r5
  400b4a:	2100      	movs	r1, #0
  400b4c:	a804      	add	r0, sp, #16
  400b4e:	4b27      	ldr	r3, [pc, #156]	; (400bec <sd_mmc_check+0x864>)
  400b50:	4798      	blx	r3
	if (!driver_adtc_start(SD_CMD6_SWITCH_FUNC,
  400b52:	2301      	movs	r3, #1
  400b54:	9300      	str	r3, [sp, #0]
  400b56:	462a      	mov	r2, r5
  400b58:	4925      	ldr	r1, [pc, #148]	; (400bf0 <sd_mmc_check+0x868>)
  400b5a:	4826      	ldr	r0, [pc, #152]	; (400bf4 <sd_mmc_check+0x86c>)
  400b5c:	4d26      	ldr	r5, [pc, #152]	; (400bf8 <sd_mmc_check+0x870>)
  400b5e:	47a8      	blx	r5
  400b60:	2800      	cmp	r0, #0
  400b62:	f43f ac39 	beq.w	4003d8 <sd_mmc_check+0x50>
	if (!driver_start_read_blocks(switch_status, 1)) {
  400b66:	2101      	movs	r1, #1
  400b68:	a804      	add	r0, sp, #16
  400b6a:	4b24      	ldr	r3, [pc, #144]	; (400bfc <sd_mmc_check+0x874>)
  400b6c:	4798      	blx	r3
  400b6e:	2800      	cmp	r0, #0
  400b70:	f43f ac32 	beq.w	4003d8 <sd_mmc_check+0x50>
	if (!driver_wait_end_of_read_blocks()) {
  400b74:	4b22      	ldr	r3, [pc, #136]	; (400c00 <sd_mmc_check+0x878>)
  400b76:	4798      	blx	r3
  400b78:	2800      	cmp	r0, #0
  400b7a:	f43f ac2d 	beq.w	4003d8 <sd_mmc_check+0x50>
	if (driver_get_response() & CARD_STATUS_SWITCH_ERROR) {
  400b7e:	4b21      	ldr	r3, [pc, #132]	; (400c04 <sd_mmc_check+0x87c>)
  400b80:	4798      	blx	r3
  400b82:	f010 0f80 	tst.w	r0, #128	; 0x80
  400b86:	f47f ac27 	bne.w	4003d8 <sd_mmc_check+0x50>
	if (SD_SW_STATUS_FUN_GRP1_RC(switch_status)
  400b8a:	f89d 3020 	ldrb.w	r3, [sp, #32]
  400b8e:	f003 030f 	and.w	r3, r3, #15
  400b92:	2b0f      	cmp	r3, #15
  400b94:	f43f af78 	beq.w	400a88 <sd_mmc_check+0x700>
	value = reg[((reg_size - pos + 7) / 8) - 1] >> (pos % 8);
  400b98:	f89d 302d 	ldrb.w	r3, [sp, #45]	; 0x2d
		value |= (uint32_t)reg[((reg_size - pos + 7) / 8) - 2] << (8 - (pos % 8));
  400b9c:	f89d 202c 	ldrb.w	r2, [sp, #44]	; 0x2c
	if (SD_SW_STATUS_FUN_GRP1_BUSY(switch_status)) {
  400ba0:	ea53 2302 	orrs.w	r3, r3, r2, lsl #8
  400ba4:	f47f ac18 	bne.w	4003d8 <sd_mmc_check+0x50>
	driver_send_clock();
  400ba8:	4b17      	ldr	r3, [pc, #92]	; (400c08 <sd_mmc_check+0x880>)
  400baa:	4798      	blx	r3
	sd_mmc_card->high_speed = 1;
  400bac:	4b05      	ldr	r3, [pc, #20]	; (400bc4 <sd_mmc_check+0x83c>)
  400bae:	681b      	ldr	r3, [r3, #0]
  400bb0:	2201      	movs	r2, #1
  400bb2:	f883 2022 	strb.w	r2, [r3, #34]	; 0x22
	sd_mmc_card->clock *= 2;
  400bb6:	681a      	ldr	r2, [r3, #0]
  400bb8:	0052      	lsls	r2, r2, #1
  400bba:	601a      	str	r2, [r3, #0]
  400bbc:	e764      	b.n	400a88 <sd_mmc_check+0x700>
	*v2 = 0;
  400bbe:	f04f 0900 	mov.w	r9, #0
  400bc2:	e41b      	b.n	4003fc <sd_mmc_check+0x74>
  400bc4:	20400a14 	.word	0x20400a14
  400bc8:	004002d5 	.word	0x004002d5
  400bcc:	0040c384 	.word	0x0040c384
  400bd0:	0040c3a0 	.word	0x0040c3a0
  400bd4:	20400a1d 	.word	0x20400a1d
  400bd8:	00401181 	.word	0x00401181
  400bdc:	00401279 	.word	0x00401279
  400be0:	004001ad 	.word	0x004001ad
  400be4:	0040118b 	.word	0x0040118b
  400be8:	00400341 	.word	0x00400341
  400bec:	00409561 	.word	0x00409561
  400bf0:	80ffff01 	.word	0x80ffff01
  400bf4:	00081106 	.word	0x00081106
  400bf8:	004012d5 	.word	0x004012d5
  400bfc:	00401411 	.word	0x00401411
  400c00:	00401509 	.word	0x00401509
  400c04:	0040129d 	.word	0x0040129d
  400c08:	00401257 	.word	0x00401257

00400c0c <sd_mmc_get_type>:

card_type_t sd_mmc_get_type(uint8_t slot)
{
  400c0c:	b508      	push	{r3, lr}
	if (SD_MMC_OK != sd_mmc_select_slot(slot)) {
  400c0e:	4b05      	ldr	r3, [pc, #20]	; (400c24 <sd_mmc_get_type+0x18>)
  400c10:	4798      	blx	r3
  400c12:	b108      	cbz	r0, 400c18 <sd_mmc_get_type+0xc>
		return CARD_TYPE_UNKNOWN;
  400c14:	2000      	movs	r0, #0
	}
	sd_mmc_deselect_slot();
	return sd_mmc_card->type;
}
  400c16:	bd08      	pop	{r3, pc}
	sd_mmc_deselect_slot();
  400c18:	4b03      	ldr	r3, [pc, #12]	; (400c28 <sd_mmc_get_type+0x1c>)
  400c1a:	4798      	blx	r3
	return sd_mmc_card->type;
  400c1c:	4b03      	ldr	r3, [pc, #12]	; (400c2c <sd_mmc_get_type+0x20>)
  400c1e:	681b      	ldr	r3, [r3, #0]
  400c20:	7bd8      	ldrb	r0, [r3, #15]
  400c22:	bd08      	pop	{r3, pc}
  400c24:	004001d9 	.word	0x004001d9
  400c28:	00400341 	.word	0x00400341
  400c2c:	20400a14 	.word	0x20400a14

00400c30 <sd_mmc_get_capacity>:
	sd_mmc_deselect_slot();
	return sd_mmc_card->version;
}

uint32_t sd_mmc_get_capacity(uint8_t slot)
{
  400c30:	b508      	push	{r3, lr}
	if (SD_MMC_OK != sd_mmc_select_slot(slot)) {
  400c32:	4b05      	ldr	r3, [pc, #20]	; (400c48 <sd_mmc_get_capacity+0x18>)
  400c34:	4798      	blx	r3
  400c36:	b108      	cbz	r0, 400c3c <sd_mmc_get_capacity+0xc>
		return 0;
  400c38:	2000      	movs	r0, #0
	}
	sd_mmc_deselect_slot();
	return sd_mmc_card->capacity;
}
  400c3a:	bd08      	pop	{r3, pc}
	sd_mmc_deselect_slot();
  400c3c:	4b03      	ldr	r3, [pc, #12]	; (400c4c <sd_mmc_get_capacity+0x1c>)
  400c3e:	4798      	blx	r3
	return sd_mmc_card->capacity;
  400c40:	4b03      	ldr	r3, [pc, #12]	; (400c50 <sd_mmc_get_capacity+0x20>)
  400c42:	681b      	ldr	r3, [r3, #0]
  400c44:	6858      	ldr	r0, [r3, #4]
  400c46:	bd08      	pop	{r3, pc}
  400c48:	004001d9 	.word	0x004001d9
  400c4c:	00400341 	.word	0x00400341
  400c50:	20400a14 	.word	0x20400a14

00400c54 <sd_mmc_is_write_protected>:
			== SD_MMC_0_WP_DETECT_VALUE) {
		return true;
	}
#endif
	return false;
}
  400c54:	2000      	movs	r0, #0
  400c56:	4770      	bx	lr

00400c58 <sd_mmc_init_read_blocks>:

sd_mmc_err_t sd_mmc_init_read_blocks(uint8_t slot, uint32_t start,
		uint16_t nb_block)
{
  400c58:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
  400c5c:	b082      	sub	sp, #8
  400c5e:	468a      	mov	sl, r1
  400c60:	4691      	mov	r9, r2
	sd_mmc_err_t sd_mmc_err;
	uint32_t cmd, arg, resp;

	sd_mmc_err = sd_mmc_select_slot(slot);
  400c62:	4b26      	ldr	r3, [pc, #152]	; (400cfc <sd_mmc_init_read_blocks+0xa4>)
  400c64:	4798      	blx	r3
	if (sd_mmc_err != SD_MMC_OK) {
  400c66:	4680      	mov	r8, r0
  400c68:	b118      	cbz	r0, 400c72 <sd_mmc_init_read_blocks+0x1a>
		}
	}
	sd_mmc_nb_block_remaining = nb_block;
	sd_mmc_nb_block_to_tranfer = nb_block;
	return SD_MMC_OK;
}
  400c6a:	4640      	mov	r0, r8
  400c6c:	b002      	add	sp, #8
  400c6e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
  400c72:	4c23      	ldr	r4, [pc, #140]	; (400d00 <sd_mmc_init_read_blocks+0xa8>)
					(uint32_t)sd_mmc_card->rca << 16)) {
  400c74:	4e23      	ldr	r6, [pc, #140]	; (400d04 <sd_mmc_init_read_blocks+0xac>)
			if (!driver_send_cmd(SDMMC_MCI_CMD13_SEND_STATUS,
  400c76:	4d24      	ldr	r5, [pc, #144]	; (400d08 <sd_mmc_init_read_blocks+0xb0>)
			if (driver_get_response() & CARD_STATUS_READY_FOR_DATA) {
  400c78:	4f24      	ldr	r7, [pc, #144]	; (400d0c <sd_mmc_init_read_blocks+0xb4>)
					(uint32_t)sd_mmc_card->rca << 16)) {
  400c7a:	6833      	ldr	r3, [r6, #0]
  400c7c:	8999      	ldrh	r1, [r3, #12]
			if (!driver_send_cmd(SDMMC_MCI_CMD13_SEND_STATUS,
  400c7e:	0409      	lsls	r1, r1, #16
  400c80:	f241 100d 	movw	r0, #4365	; 0x110d
  400c84:	47a8      	blx	r5
  400c86:	b128      	cbz	r0, 400c94 <sd_mmc_init_read_blocks+0x3c>
			if (driver_get_response() & CARD_STATUS_READY_FOR_DATA) {
  400c88:	47b8      	blx	r7
  400c8a:	f410 7f80 	tst.w	r0, #256	; 0x100
  400c8e:	d117      	bne.n	400cc0 <sd_mmc_init_read_blocks+0x68>
		if (nec_timeout-- == 0) {
  400c90:	3c01      	subs	r4, #1
  400c92:	d1f2      	bne.n	400c7a <sd_mmc_init_read_blocks+0x22>
		sd_mmc_deselect_slot();
  400c94:	4b1e      	ldr	r3, [pc, #120]	; (400d10 <sd_mmc_init_read_blocks+0xb8>)
  400c96:	4798      	blx	r3
		return SD_MMC_ERR_COMM;
  400c98:	f04f 0805 	mov.w	r8, #5
  400c9c:	e7e5      	b.n	400c6a <sd_mmc_init_read_blocks+0x12>
		resp = driver_get_response();
  400c9e:	4b1b      	ldr	r3, [pc, #108]	; (400d0c <sd_mmc_init_read_blocks+0xb4>)
  400ca0:	4798      	blx	r3
		if (resp & CARD_STATUS_ERR_RD_WR) {
  400ca2:	4b1c      	ldr	r3, [pc, #112]	; (400d14 <sd_mmc_init_read_blocks+0xbc>)
  400ca4:	4003      	ands	r3, r0
  400ca6:	b933      	cbnz	r3, 400cb6 <sd_mmc_init_read_blocks+0x5e>
	sd_mmc_nb_block_remaining = nb_block;
  400ca8:	4b1b      	ldr	r3, [pc, #108]	; (400d18 <sd_mmc_init_read_blocks+0xc0>)
  400caa:	f8a3 9000 	strh.w	r9, [r3]
	sd_mmc_nb_block_to_tranfer = nb_block;
  400cae:	4b1b      	ldr	r3, [pc, #108]	; (400d1c <sd_mmc_init_read_blocks+0xc4>)
  400cb0:	f8a3 9000 	strh.w	r9, [r3]
	return SD_MMC_OK;
  400cb4:	e7d9      	b.n	400c6a <sd_mmc_init_read_blocks+0x12>
			sd_mmc_deselect_slot();
  400cb6:	4b16      	ldr	r3, [pc, #88]	; (400d10 <sd_mmc_init_read_blocks+0xb8>)
  400cb8:	4798      	blx	r3
			return SD_MMC_ERR_COMM;
  400cba:	f04f 0805 	mov.w	r8, #5
  400cbe:	e7d4      	b.n	400c6a <sd_mmc_init_read_blocks+0x12>
		cmd = SDMMC_CMD17_READ_SINGLE_BLOCK;
  400cc0:	4b17      	ldr	r3, [pc, #92]	; (400d20 <sd_mmc_init_read_blocks+0xc8>)
  400cc2:	4818      	ldr	r0, [pc, #96]	; (400d24 <sd_mmc_init_read_blocks+0xcc>)
  400cc4:	f1b9 0f01 	cmp.w	r9, #1
  400cc8:	bf98      	it	ls
  400cca:	4618      	movls	r0, r3
	if (sd_mmc_card->type & CARD_TYPE_HC) {
  400ccc:	4b0d      	ldr	r3, [pc, #52]	; (400d04 <sd_mmc_init_read_blocks+0xac>)
  400cce:	681b      	ldr	r3, [r3, #0]
  400cd0:	7bdb      	ldrb	r3, [r3, #15]
  400cd2:	f013 0f08 	tst.w	r3, #8
  400cd6:	d101      	bne.n	400cdc <sd_mmc_init_read_blocks+0x84>
		arg = (start * SD_MMC_BLOCK_SIZE);
  400cd8:	ea4f 2a4a 	mov.w	sl, sl, lsl #9
	if (!driver_adtc_start(cmd, arg, SD_MMC_BLOCK_SIZE, nb_block, true)) {
  400cdc:	2301      	movs	r3, #1
  400cde:	9300      	str	r3, [sp, #0]
  400ce0:	464b      	mov	r3, r9
  400ce2:	f44f 7200 	mov.w	r2, #512	; 0x200
  400ce6:	4651      	mov	r1, sl
  400ce8:	4c0f      	ldr	r4, [pc, #60]	; (400d28 <sd_mmc_init_read_blocks+0xd0>)
  400cea:	47a0      	blx	r4
  400cec:	2800      	cmp	r0, #0
  400cee:	d1d6      	bne.n	400c9e <sd_mmc_init_read_blocks+0x46>
		sd_mmc_deselect_slot();
  400cf0:	4b07      	ldr	r3, [pc, #28]	; (400d10 <sd_mmc_init_read_blocks+0xb8>)
  400cf2:	4798      	blx	r3
		return SD_MMC_ERR_COMM;
  400cf4:	f04f 0805 	mov.w	r8, #5
  400cf8:	e7b7      	b.n	400c6a <sd_mmc_init_read_blocks+0x12>
  400cfa:	bf00      	nop
  400cfc:	004001d9 	.word	0x004001d9
  400d00:	00030d41 	.word	0x00030d41
  400d04:	20400a14 	.word	0x20400a14
  400d08:	00401279 	.word	0x00401279
  400d0c:	0040129d 	.word	0x0040129d
  400d10:	00400341 	.word	0x00400341
  400d14:	e4580000 	.word	0xe4580000
  400d18:	20400a18 	.word	0x20400a18
  400d1c:	20400a1a 	.word	0x20400a1a
  400d20:	00081111 	.word	0x00081111
  400d24:	00101112 	.word	0x00101112
  400d28:	004012d5 	.word	0x004012d5

00400d2c <sd_mmc_start_read_blocks>:

sd_mmc_err_t sd_mmc_start_read_blocks(void *dest, uint16_t nb_block)
{
  400d2c:	b510      	push	{r4, lr}
  400d2e:	460c      	mov	r4, r1
	Assert(sd_mmc_nb_block_remaining >= nb_block);

	if (!driver_start_read_blocks(dest, nb_block)) {
  400d30:	4b06      	ldr	r3, [pc, #24]	; (400d4c <sd_mmc_start_read_blocks+0x20>)
  400d32:	4798      	blx	r3
  400d34:	b920      	cbnz	r0, 400d40 <sd_mmc_start_read_blocks+0x14>
		sd_mmc_nb_block_remaining = 0;
  400d36:	2200      	movs	r2, #0
  400d38:	4b05      	ldr	r3, [pc, #20]	; (400d50 <sd_mmc_start_read_blocks+0x24>)
  400d3a:	801a      	strh	r2, [r3, #0]
		return SD_MMC_ERR_COMM;
  400d3c:	2005      	movs	r0, #5
  400d3e:	bd10      	pop	{r4, pc}
	}
	sd_mmc_nb_block_remaining -= nb_block;
  400d40:	4a03      	ldr	r2, [pc, #12]	; (400d50 <sd_mmc_start_read_blocks+0x24>)
  400d42:	8813      	ldrh	r3, [r2, #0]
  400d44:	1b1c      	subs	r4, r3, r4
  400d46:	8014      	strh	r4, [r2, #0]
	return SD_MMC_OK;
  400d48:	2000      	movs	r0, #0
}
  400d4a:	bd10      	pop	{r4, pc}
  400d4c:	00401411 	.word	0x00401411
  400d50:	20400a18 	.word	0x20400a18

00400d54 <sd_mmc_wait_end_of_read_blocks>:

sd_mmc_err_t sd_mmc_wait_end_of_read_blocks(bool abort)
{
  400d54:	b510      	push	{r4, lr}
  400d56:	4604      	mov	r4, r0
	if (!driver_wait_end_of_read_blocks()) {
  400d58:	4b13      	ldr	r3, [pc, #76]	; (400da8 <sd_mmc_wait_end_of_read_blocks+0x54>)
  400d5a:	4798      	blx	r3
  400d5c:	b908      	cbnz	r0, 400d62 <sd_mmc_wait_end_of_read_blocks+0xe>
		return SD_MMC_ERR_COMM;
  400d5e:	2005      	movs	r0, #5
  400d60:	bd10      	pop	{r4, pc}
	}
	if (abort) {
  400d62:	b184      	cbz	r4, 400d86 <sd_mmc_wait_end_of_read_blocks+0x32>
		sd_mmc_nb_block_remaining = 0;
  400d64:	2200      	movs	r2, #0
  400d66:	4b11      	ldr	r3, [pc, #68]	; (400dac <sd_mmc_wait_end_of_read_blocks+0x58>)
  400d68:	801a      	strh	r2, [r3, #0]
	} else if (sd_mmc_nb_block_remaining) {
		return SD_MMC_OK;
	}

	// All blocks are transfered then stop read operation
	if (sd_mmc_nb_block_to_tranfer == 1) {
  400d6a:	4b11      	ldr	r3, [pc, #68]	; (400db0 <sd_mmc_wait_end_of_read_blocks+0x5c>)
  400d6c:	881b      	ldrh	r3, [r3, #0]
  400d6e:	2b01      	cmp	r3, #1
  400d70:	d00f      	beq.n	400d92 <sd_mmc_wait_end_of_read_blocks+0x3e>
		return SD_MMC_OK;
	}
	// WORKAROUND for no compliance card (Atmel Internal ref. !MMC7 !SD19):
	// The errors on this command must be ignored
	// and one retry can be necessary in SPI mode for no compliance card.
	if (!driver_adtc_stop(SDMMC_CMD12_STOP_TRANSMISSION, 0)) {
  400d72:	2100      	movs	r1, #0
  400d74:	f243 100c 	movw	r0, #12556	; 0x310c
  400d78:	4b0e      	ldr	r3, [pc, #56]	; (400db4 <sd_mmc_wait_end_of_read_blocks+0x60>)
  400d7a:	4798      	blx	r3
  400d7c:	b168      	cbz	r0, 400d9a <sd_mmc_wait_end_of_read_blocks+0x46>
		driver_adtc_stop(SDMMC_CMD12_STOP_TRANSMISSION, 0);
	}
	sd_mmc_deselect_slot();
  400d7e:	4b0e      	ldr	r3, [pc, #56]	; (400db8 <sd_mmc_wait_end_of_read_blocks+0x64>)
  400d80:	4798      	blx	r3
	return SD_MMC_OK;
  400d82:	2000      	movs	r0, #0
  400d84:	bd10      	pop	{r4, pc}
	} else if (sd_mmc_nb_block_remaining) {
  400d86:	4b09      	ldr	r3, [pc, #36]	; (400dac <sd_mmc_wait_end_of_read_blocks+0x58>)
  400d88:	881b      	ldrh	r3, [r3, #0]
  400d8a:	2b00      	cmp	r3, #0
  400d8c:	d0ed      	beq.n	400d6a <sd_mmc_wait_end_of_read_blocks+0x16>
		return SD_MMC_OK;
  400d8e:	2000      	movs	r0, #0
}
  400d90:	bd10      	pop	{r4, pc}
		sd_mmc_deselect_slot();
  400d92:	4b09      	ldr	r3, [pc, #36]	; (400db8 <sd_mmc_wait_end_of_read_blocks+0x64>)
  400d94:	4798      	blx	r3
		return SD_MMC_OK;
  400d96:	2000      	movs	r0, #0
  400d98:	bd10      	pop	{r4, pc}
		driver_adtc_stop(SDMMC_CMD12_STOP_TRANSMISSION, 0);
  400d9a:	2100      	movs	r1, #0
  400d9c:	f243 100c 	movw	r0, #12556	; 0x310c
  400da0:	4b04      	ldr	r3, [pc, #16]	; (400db4 <sd_mmc_wait_end_of_read_blocks+0x60>)
  400da2:	4798      	blx	r3
  400da4:	e7eb      	b.n	400d7e <sd_mmc_wait_end_of_read_blocks+0x2a>
  400da6:	bf00      	nop
  400da8:	00401509 	.word	0x00401509
  400dac:	20400a18 	.word	0x20400a18
  400db0:	20400a1a 	.word	0x20400a1a
  400db4:	00401279 	.word	0x00401279
  400db8:	00400341 	.word	0x00400341

00400dbc <sd_mmc_init_write_blocks>:

sd_mmc_err_t sd_mmc_init_write_blocks(uint8_t slot, uint32_t start,
		uint16_t nb_block)
{
  400dbc:	b570      	push	{r4, r5, r6, lr}
  400dbe:	b082      	sub	sp, #8
  400dc0:	460e      	mov	r6, r1
  400dc2:	4615      	mov	r5, r2
	sd_mmc_err_t sd_mmc_err;
	uint32_t cmd, arg, resp;

	sd_mmc_err = sd_mmc_select_slot(slot);
  400dc4:	4b16      	ldr	r3, [pc, #88]	; (400e20 <sd_mmc_init_write_blocks+0x64>)
  400dc6:	4798      	blx	r3
	if (sd_mmc_err != SD_MMC_OK) {
  400dc8:	4604      	mov	r4, r0
  400dca:	b9b8      	cbnz	r0, 400dfc <sd_mmc_init_write_blocks+0x40>
	}

	if (nb_block > 1) {
		cmd = SDMMC_CMD25_WRITE_MULTIPLE_BLOCK;
	} else {
		cmd = SDMMC_CMD24_WRITE_BLOCK;
  400dcc:	4b15      	ldr	r3, [pc, #84]	; (400e24 <sd_mmc_init_write_blocks+0x68>)
  400dce:	4816      	ldr	r0, [pc, #88]	; (400e28 <sd_mmc_init_write_blocks+0x6c>)
  400dd0:	2d01      	cmp	r5, #1
  400dd2:	bf98      	it	ls
  400dd4:	4618      	movls	r0, r3
	}
	/*
	 * SDSC Card (CCS=0) uses byte unit address,
	 * SDHC and SDXC Cards (CCS=1) use block unit address (512 Bytes unit).
	 */
	if (sd_mmc_card->type & CARD_TYPE_HC) {
  400dd6:	4b15      	ldr	r3, [pc, #84]	; (400e2c <sd_mmc_init_write_blocks+0x70>)
  400dd8:	681b      	ldr	r3, [r3, #0]
  400dda:	7bdb      	ldrb	r3, [r3, #15]
  400ddc:	f013 0f08 	tst.w	r3, #8
		arg = start;
	} else {
		arg = (start * SD_MMC_BLOCK_SIZE);
  400de0:	bf08      	it	eq
  400de2:	0276      	lsleq	r6, r6, #9
	}
	if (!driver_adtc_start(cmd, arg, SD_MMC_BLOCK_SIZE, nb_block, true)) {
  400de4:	2301      	movs	r3, #1
  400de6:	9300      	str	r3, [sp, #0]
  400de8:	462b      	mov	r3, r5
  400dea:	f44f 7200 	mov.w	r2, #512	; 0x200
  400dee:	4631      	mov	r1, r6
  400df0:	4e0f      	ldr	r6, [pc, #60]	; (400e30 <sd_mmc_init_write_blocks+0x74>)
  400df2:	47b0      	blx	r6
  400df4:	b928      	cbnz	r0, 400e02 <sd_mmc_init_write_blocks+0x46>
		sd_mmc_deselect_slot();
  400df6:	4b0f      	ldr	r3, [pc, #60]	; (400e34 <sd_mmc_init_write_blocks+0x78>)
  400df8:	4798      	blx	r3
		return SD_MMC_ERR_COMM;
  400dfa:	2405      	movs	r4, #5
		}
	}
	sd_mmc_nb_block_remaining = nb_block;
	sd_mmc_nb_block_to_tranfer = nb_block;
	return SD_MMC_OK;
}
  400dfc:	4620      	mov	r0, r4
  400dfe:	b002      	add	sp, #8
  400e00:	bd70      	pop	{r4, r5, r6, pc}
		resp = driver_get_response();
  400e02:	4b0d      	ldr	r3, [pc, #52]	; (400e38 <sd_mmc_init_write_blocks+0x7c>)
  400e04:	4798      	blx	r3
		if (resp & CARD_STATUS_ERR_RD_WR) {
  400e06:	4b0d      	ldr	r3, [pc, #52]	; (400e3c <sd_mmc_init_write_blocks+0x80>)
  400e08:	4003      	ands	r3, r0
  400e0a:	b923      	cbnz	r3, 400e16 <sd_mmc_init_write_blocks+0x5a>
	sd_mmc_nb_block_remaining = nb_block;
  400e0c:	4b0c      	ldr	r3, [pc, #48]	; (400e40 <sd_mmc_init_write_blocks+0x84>)
  400e0e:	801d      	strh	r5, [r3, #0]
	sd_mmc_nb_block_to_tranfer = nb_block;
  400e10:	4b0c      	ldr	r3, [pc, #48]	; (400e44 <sd_mmc_init_write_blocks+0x88>)
  400e12:	801d      	strh	r5, [r3, #0]
	return SD_MMC_OK;
  400e14:	e7f2      	b.n	400dfc <sd_mmc_init_write_blocks+0x40>
			sd_mmc_deselect_slot();
  400e16:	4b07      	ldr	r3, [pc, #28]	; (400e34 <sd_mmc_init_write_blocks+0x78>)
  400e18:	4798      	blx	r3
			return SD_MMC_ERR_COMM;
  400e1a:	2405      	movs	r4, #5
  400e1c:	e7ee      	b.n	400dfc <sd_mmc_init_write_blocks+0x40>
  400e1e:	bf00      	nop
  400e20:	004001d9 	.word	0x004001d9
  400e24:	00089118 	.word	0x00089118
  400e28:	00109119 	.word	0x00109119
  400e2c:	20400a14 	.word	0x20400a14
  400e30:	004012d5 	.word	0x004012d5
  400e34:	00400341 	.word	0x00400341
  400e38:	0040129d 	.word	0x0040129d
  400e3c:	e4580000 	.word	0xe4580000
  400e40:	20400a18 	.word	0x20400a18
  400e44:	20400a1a 	.word	0x20400a1a

00400e48 <sd_mmc_start_write_blocks>:

sd_mmc_err_t sd_mmc_start_write_blocks(const void *src, uint16_t nb_block)
{
  400e48:	b510      	push	{r4, lr}
  400e4a:	460c      	mov	r4, r1
	Assert(sd_mmc_nb_block_remaining >= nb_block);
	if (!driver_start_write_blocks(src, nb_block)) {
  400e4c:	4b06      	ldr	r3, [pc, #24]	; (400e68 <sd_mmc_start_write_blocks+0x20>)
  400e4e:	4798      	blx	r3
  400e50:	b920      	cbnz	r0, 400e5c <sd_mmc_start_write_blocks+0x14>
		sd_mmc_nb_block_remaining = 0;
  400e52:	2200      	movs	r2, #0
  400e54:	4b05      	ldr	r3, [pc, #20]	; (400e6c <sd_mmc_start_write_blocks+0x24>)
  400e56:	801a      	strh	r2, [r3, #0]
		return SD_MMC_ERR_COMM;
  400e58:	2005      	movs	r0, #5
  400e5a:	bd10      	pop	{r4, pc}
	}
	sd_mmc_nb_block_remaining -= nb_block;
  400e5c:	4a03      	ldr	r2, [pc, #12]	; (400e6c <sd_mmc_start_write_blocks+0x24>)
  400e5e:	8813      	ldrh	r3, [r2, #0]
  400e60:	1b1c      	subs	r4, r3, r4
  400e62:	8014      	strh	r4, [r2, #0]
	return SD_MMC_OK;
  400e64:	2000      	movs	r0, #0
}
  400e66:	bd10      	pop	{r4, pc}
  400e68:	0040156d 	.word	0x0040156d
  400e6c:	20400a18 	.word	0x20400a18

00400e70 <sd_mmc_wait_end_of_write_blocks>:

sd_mmc_err_t sd_mmc_wait_end_of_write_blocks(bool abort)
{
  400e70:	b510      	push	{r4, lr}
  400e72:	4604      	mov	r4, r0
	if (!driver_wait_end_of_write_blocks()) {
  400e74:	4b12      	ldr	r3, [pc, #72]	; (400ec0 <sd_mmc_wait_end_of_write_blocks+0x50>)
  400e76:	4798      	blx	r3
  400e78:	b908      	cbnz	r0, 400e7e <sd_mmc_wait_end_of_write_blocks+0xe>
		return SD_MMC_ERR_COMM;
  400e7a:	2005      	movs	r0, #5
  400e7c:	bd10      	pop	{r4, pc}
	}
	if (abort) {
  400e7e:	b184      	cbz	r4, 400ea2 <sd_mmc_wait_end_of_write_blocks+0x32>
		sd_mmc_nb_block_remaining = 0;
  400e80:	2200      	movs	r2, #0
  400e82:	4b10      	ldr	r3, [pc, #64]	; (400ec4 <sd_mmc_wait_end_of_write_blocks+0x54>)
  400e84:	801a      	strh	r2, [r3, #0]
	} else if (sd_mmc_nb_block_remaining) {
		return SD_MMC_OK;
	}

	// All blocks are transfered then stop write operation
	if (sd_mmc_nb_block_to_tranfer == 1) {
  400e86:	4b10      	ldr	r3, [pc, #64]	; (400ec8 <sd_mmc_wait_end_of_write_blocks+0x58>)
  400e88:	881b      	ldrh	r3, [r3, #0]
  400e8a:	2b01      	cmp	r3, #1
  400e8c:	d00f      	beq.n	400eae <sd_mmc_wait_end_of_write_blocks+0x3e>
	}

	if (sd_mmc_is_mci()) {
		// Note: SPI multiblock writes terminate using a special
		// token, not a STOP_TRANSMISSION request.
		if (!driver_adtc_stop(SDMMC_CMD12_STOP_TRANSMISSION, 0)) {
  400e8e:	2100      	movs	r1, #0
  400e90:	f243 100c 	movw	r0, #12556	; 0x310c
  400e94:	4b0d      	ldr	r3, [pc, #52]	; (400ecc <sd_mmc_wait_end_of_write_blocks+0x5c>)
  400e96:	4798      	blx	r3
  400e98:	b968      	cbnz	r0, 400eb6 <sd_mmc_wait_end_of_write_blocks+0x46>
			sd_mmc_deselect_slot();
  400e9a:	4b0d      	ldr	r3, [pc, #52]	; (400ed0 <sd_mmc_wait_end_of_write_blocks+0x60>)
  400e9c:	4798      	blx	r3
			return SD_MMC_ERR_COMM;
  400e9e:	2005      	movs	r0, #5
  400ea0:	bd10      	pop	{r4, pc}
	} else if (sd_mmc_nb_block_remaining) {
  400ea2:	4b08      	ldr	r3, [pc, #32]	; (400ec4 <sd_mmc_wait_end_of_write_blocks+0x54>)
  400ea4:	881b      	ldrh	r3, [r3, #0]
  400ea6:	2b00      	cmp	r3, #0
  400ea8:	d0ed      	beq.n	400e86 <sd_mmc_wait_end_of_write_blocks+0x16>
		return SD_MMC_OK;
  400eaa:	2000      	movs	r0, #0
		}
	}
	sd_mmc_deselect_slot();
	return SD_MMC_OK;
}
  400eac:	bd10      	pop	{r4, pc}
		sd_mmc_deselect_slot();
  400eae:	4b08      	ldr	r3, [pc, #32]	; (400ed0 <sd_mmc_wait_end_of_write_blocks+0x60>)
  400eb0:	4798      	blx	r3
		return SD_MMC_OK;
  400eb2:	2000      	movs	r0, #0
  400eb4:	bd10      	pop	{r4, pc}
	sd_mmc_deselect_slot();
  400eb6:	4b06      	ldr	r3, [pc, #24]	; (400ed0 <sd_mmc_wait_end_of_write_blocks+0x60>)
  400eb8:	4798      	blx	r3
	return SD_MMC_OK;
  400eba:	2000      	movs	r0, #0
  400ebc:	bd10      	pop	{r4, pc}
  400ebe:	bf00      	nop
  400ec0:	00401665 	.word	0x00401665
  400ec4:	20400a18 	.word	0x20400a18
  400ec8:	20400a1a 	.word	0x20400a1a
  400ecc:	00401279 	.word	0x00401279
  400ed0:	00400341 	.word	0x00400341

00400ed4 <sd_mmc_test_unit_ready>:
 */

static bool sd_mmc_ejected[2] = {false, false};

Ctrl_status sd_mmc_test_unit_ready(uint8_t slot)
{
  400ed4:	b510      	push	{r4, lr}
  400ed6:	4604      	mov	r4, r0
	switch (sd_mmc_check(slot))
  400ed8:	4b0f      	ldr	r3, [pc, #60]	; (400f18 <sd_mmc_test_unit_ready+0x44>)
  400eda:	4798      	blx	r3
  400edc:	2801      	cmp	r0, #1
  400ede:	d018      	beq.n	400f12 <sd_mmc_test_unit_ready+0x3e>
  400ee0:	b118      	cbz	r0, 400eea <sd_mmc_test_unit_ready+0x16>
  400ee2:	2802      	cmp	r0, #2
  400ee4:	d010      	beq.n	400f08 <sd_mmc_test_unit_ready+0x34>
	case SD_MMC_ERR_NO_CARD:
		sd_mmc_ejected[slot] = false;
		return CTRL_NO_PRESENT;

	default:
		return CTRL_FAIL;
  400ee6:	2001      	movs	r0, #1
  400ee8:	bd10      	pop	{r4, pc}
		if (sd_mmc_ejected[slot]) {
  400eea:	4b0c      	ldr	r3, [pc, #48]	; (400f1c <sd_mmc_test_unit_ready+0x48>)
  400eec:	5d1b      	ldrb	r3, [r3, r4]
  400eee:	b10b      	cbz	r3, 400ef4 <sd_mmc_test_unit_ready+0x20>
			return CTRL_NO_PRESENT;
  400ef0:	2002      	movs	r0, #2
	}
}
  400ef2:	bd10      	pop	{r4, pc}
		if (sd_mmc_get_type(slot) & (CARD_TYPE_SD | CARD_TYPE_MMC)) {
  400ef4:	4620      	mov	r0, r4
  400ef6:	4b0a      	ldr	r3, [pc, #40]	; (400f20 <sd_mmc_test_unit_ready+0x4c>)
  400ef8:	4798      	blx	r3
  400efa:	f000 0003 	and.w	r0, r0, #3
		return CTRL_NO_PRESENT;
  400efe:	2800      	cmp	r0, #0
  400f00:	bf14      	ite	ne
  400f02:	2000      	movne	r0, #0
  400f04:	2002      	moveq	r0, #2
  400f06:	bd10      	pop	{r4, pc}
		sd_mmc_ejected[slot] = false;
  400f08:	2200      	movs	r2, #0
  400f0a:	4b04      	ldr	r3, [pc, #16]	; (400f1c <sd_mmc_test_unit_ready+0x48>)
  400f0c:	551a      	strb	r2, [r3, r4]
		return CTRL_NO_PRESENT;
  400f0e:	2002      	movs	r0, #2
  400f10:	bd10      	pop	{r4, pc}
		return CTRL_BUSY;
  400f12:	2003      	movs	r0, #3
  400f14:	bd10      	pop	{r4, pc}
  400f16:	bf00      	nop
  400f18:	00400389 	.word	0x00400389
  400f1c:	20400a20 	.word	0x20400a20
  400f20:	00400c0d 	.word	0x00400c0d

00400f24 <sd_mmc_test_unit_ready_0>:

Ctrl_status sd_mmc_test_unit_ready_0(void)
{
  400f24:	b508      	push	{r3, lr}
	return sd_mmc_test_unit_ready(0);
  400f26:	2000      	movs	r0, #0
  400f28:	4b01      	ldr	r3, [pc, #4]	; (400f30 <sd_mmc_test_unit_ready_0+0xc>)
  400f2a:	4798      	blx	r3
}
  400f2c:	bd08      	pop	{r3, pc}
  400f2e:	bf00      	nop
  400f30:	00400ed5 	.word	0x00400ed5

00400f34 <sd_mmc_read_capacity>:
{
	return sd_mmc_test_unit_ready(1);
}

Ctrl_status sd_mmc_read_capacity(uint8_t slot, uint32_t *nb_sector)
{
  400f34:	b538      	push	{r3, r4, r5, lr}
  400f36:	4604      	mov	r4, r0
  400f38:	460d      	mov	r5, r1
	// Return last sector address (-1)
	*nb_sector = (sd_mmc_get_capacity(slot) * 2) - 1;
  400f3a:	4b04      	ldr	r3, [pc, #16]	; (400f4c <sd_mmc_read_capacity+0x18>)
  400f3c:	4798      	blx	r3
  400f3e:	0040      	lsls	r0, r0, #1
  400f40:	3801      	subs	r0, #1
  400f42:	6028      	str	r0, [r5, #0]
	return sd_mmc_test_unit_ready(slot);
  400f44:	4620      	mov	r0, r4
  400f46:	4b02      	ldr	r3, [pc, #8]	; (400f50 <sd_mmc_read_capacity+0x1c>)
  400f48:	4798      	blx	r3
}
  400f4a:	bd38      	pop	{r3, r4, r5, pc}
  400f4c:	00400c31 	.word	0x00400c31
  400f50:	00400ed5 	.word	0x00400ed5

00400f54 <sd_mmc_read_capacity_0>:

Ctrl_status sd_mmc_read_capacity_0(uint32_t *nb_sector)
{
  400f54:	b508      	push	{r3, lr}
	return sd_mmc_read_capacity(0, nb_sector);
  400f56:	4601      	mov	r1, r0
  400f58:	2000      	movs	r0, #0
  400f5a:	4b01      	ldr	r3, [pc, #4]	; (400f60 <sd_mmc_read_capacity_0+0xc>)
  400f5c:	4798      	blx	r3
}
  400f5e:	bd08      	pop	{r3, pc}
  400f60:	00400f35 	.word	0x00400f35

00400f64 <sd_mmc_wr_protect_0>:
{
	return sd_mmc_is_write_protected(slot);
}

bool sd_mmc_wr_protect_0(void)
{
  400f64:	b508      	push	{r3, lr}
	return sd_mmc_is_write_protected(slot);
  400f66:	2000      	movs	r0, #0
  400f68:	4b01      	ldr	r3, [pc, #4]	; (400f70 <sd_mmc_wr_protect_0+0xc>)
  400f6a:	4798      	blx	r3
	return sd_mmc_wr_protect(0);
}
  400f6c:	bd08      	pop	{r3, pc}
  400f6e:	bf00      	nop
  400f70:	00400c55 	.word	0x00400c55

00400f74 <sd_mmc_mem_2_ram>:
/**
 * \name MEM <-> RAM Interface
 * @{
 */
Ctrl_status sd_mmc_mem_2_ram(uint8_t slot, uint32_t addr, void *ram)
{
  400f74:	b510      	push	{r4, lr}
  400f76:	4614      	mov	r4, r2
	switch (sd_mmc_init_read_blocks(slot, addr, 1)) {
  400f78:	2201      	movs	r2, #1
  400f7a:	4b0a      	ldr	r3, [pc, #40]	; (400fa4 <sd_mmc_mem_2_ram+0x30>)
  400f7c:	4798      	blx	r3
  400f7e:	b120      	cbz	r0, 400f8a <sd_mmc_mem_2_ram+0x16>
	case SD_MMC_OK:
		break;
	case SD_MMC_ERR_NO_CARD:
		return CTRL_NO_PRESENT;
	default:
		return CTRL_FAIL;
  400f80:	2802      	cmp	r0, #2
  400f82:	bf0c      	ite	eq
  400f84:	2002      	moveq	r0, #2
  400f86:	2001      	movne	r0, #1
  400f88:	bd10      	pop	{r4, pc}
	}
	if (SD_MMC_OK != sd_mmc_start_read_blocks(ram, 1)) {
  400f8a:	2101      	movs	r1, #1
  400f8c:	4620      	mov	r0, r4
  400f8e:	4b06      	ldr	r3, [pc, #24]	; (400fa8 <sd_mmc_mem_2_ram+0x34>)
  400f90:	4798      	blx	r3
  400f92:	b108      	cbz	r0, 400f98 <sd_mmc_mem_2_ram+0x24>
		return CTRL_FAIL;
  400f94:	2001      	movs	r0, #1
	}
	if (SD_MMC_OK != sd_mmc_wait_end_of_read_blocks(false)) {
		return CTRL_FAIL;
	}
	return CTRL_GOOD;
}
  400f96:	bd10      	pop	{r4, pc}
	if (SD_MMC_OK != sd_mmc_wait_end_of_read_blocks(false)) {
  400f98:	4b04      	ldr	r3, [pc, #16]	; (400fac <sd_mmc_mem_2_ram+0x38>)
  400f9a:	4798      	blx	r3
		return CTRL_NO_PRESENT;
  400f9c:	3000      	adds	r0, #0
  400f9e:	bf18      	it	ne
  400fa0:	2001      	movne	r0, #1
  400fa2:	bd10      	pop	{r4, pc}
  400fa4:	00400c59 	.word	0x00400c59
  400fa8:	00400d2d 	.word	0x00400d2d
  400fac:	00400d55 	.word	0x00400d55

00400fb0 <sd_mmc_mem_2_ram_0>:

Ctrl_status sd_mmc_mem_2_ram_0(uint32_t addr, void *ram)
{
  400fb0:	b508      	push	{r3, lr}
	return sd_mmc_mem_2_ram(0, addr, ram);
  400fb2:	460a      	mov	r2, r1
  400fb4:	4601      	mov	r1, r0
  400fb6:	2000      	movs	r0, #0
  400fb8:	4b01      	ldr	r3, [pc, #4]	; (400fc0 <sd_mmc_mem_2_ram_0+0x10>)
  400fba:	4798      	blx	r3
}
  400fbc:	bd08      	pop	{r3, pc}
  400fbe:	bf00      	nop
  400fc0:	00400f75 	.word	0x00400f75

00400fc4 <sd_mmc_ram_2_mem>:
{
	return sd_mmc_mem_2_ram(1, addr, ram);
}

Ctrl_status sd_mmc_ram_2_mem(uint8_t slot, uint32_t addr, const void *ram)
{
  400fc4:	b510      	push	{r4, lr}
  400fc6:	4614      	mov	r4, r2
	switch (sd_mmc_init_write_blocks(slot, addr, 1)) {
  400fc8:	2201      	movs	r2, #1
  400fca:	4b0a      	ldr	r3, [pc, #40]	; (400ff4 <sd_mmc_ram_2_mem+0x30>)
  400fcc:	4798      	blx	r3
  400fce:	b120      	cbz	r0, 400fda <sd_mmc_ram_2_mem+0x16>
	case SD_MMC_OK:
		break;
	case SD_MMC_ERR_NO_CARD:
		return CTRL_NO_PRESENT;
	default:
		return CTRL_FAIL;
  400fd0:	2802      	cmp	r0, #2
  400fd2:	bf0c      	ite	eq
  400fd4:	2002      	moveq	r0, #2
  400fd6:	2001      	movne	r0, #1
  400fd8:	bd10      	pop	{r4, pc}
	}
	if (SD_MMC_OK != sd_mmc_start_write_blocks(ram, 1)) {
  400fda:	2101      	movs	r1, #1
  400fdc:	4620      	mov	r0, r4
  400fde:	4b06      	ldr	r3, [pc, #24]	; (400ff8 <sd_mmc_ram_2_mem+0x34>)
  400fe0:	4798      	blx	r3
  400fe2:	b108      	cbz	r0, 400fe8 <sd_mmc_ram_2_mem+0x24>
		return CTRL_FAIL;
  400fe4:	2001      	movs	r0, #1
	}
	if (SD_MMC_OK != sd_mmc_wait_end_of_write_blocks(false)) {
		return CTRL_FAIL;
	}
	return CTRL_GOOD;
}
  400fe6:	bd10      	pop	{r4, pc}
	if (SD_MMC_OK != sd_mmc_wait_end_of_write_blocks(false)) {
  400fe8:	4b04      	ldr	r3, [pc, #16]	; (400ffc <sd_mmc_ram_2_mem+0x38>)
  400fea:	4798      	blx	r3
		return CTRL_NO_PRESENT;
  400fec:	3000      	adds	r0, #0
  400fee:	bf18      	it	ne
  400ff0:	2001      	movne	r0, #1
  400ff2:	bd10      	pop	{r4, pc}
  400ff4:	00400dbd 	.word	0x00400dbd
  400ff8:	00400e49 	.word	0x00400e49
  400ffc:	00400e71 	.word	0x00400e71

00401000 <sd_mmc_ram_2_mem_0>:

Ctrl_status sd_mmc_ram_2_mem_0(uint32_t addr, const void *ram)
{
  401000:	b508      	push	{r3, lr}
	return sd_mmc_ram_2_mem(0, addr, ram);
  401002:	460a      	mov	r2, r1
  401004:	4601      	mov	r1, r0
  401006:	2000      	movs	r0, #0
  401008:	4b01      	ldr	r3, [pc, #4]	; (401010 <sd_mmc_ram_2_mem_0+0x10>)
  40100a:	4798      	blx	r3
}
  40100c:	bd08      	pop	{r3, pc}
  40100e:	bf00      	nop
  401010:	00400fc5 	.word	0x00400fc5

00401014 <mem_test_unit_ready>:

  if (!Ctrl_access_lock()) return CTRL_FAIL;

  status =
#if MAX_LUN
         (lun < MAX_LUN) ? lun_desc[lun].test_unit_ready() :
  401014:	b108      	cbz	r0, 40101a <mem_test_unit_ready+0x6>
  401016:	2001      	movs	r0, #1
  401018:	4770      	bx	lr
{
  40101a:	b508      	push	{r3, lr}
         (lun < MAX_LUN) ? lun_desc[lun].test_unit_ready() :
  40101c:	4b01      	ldr	r3, [pc, #4]	; (401024 <mem_test_unit_ready+0x10>)
  40101e:	4798      	blx	r3
  401020:	bd08      	pop	{r3, pc}
  401022:	bf00      	nop
  401024:	00400f25 	.word	0x00400f25

00401028 <mem_read_capacity>:

  if (!Ctrl_access_lock()) return CTRL_FAIL;

  status =
#if MAX_LUN
         (lun < MAX_LUN) ? lun_desc[lun].read_capacity(u32_nb_sector) :
  401028:	b108      	cbz	r0, 40102e <mem_read_capacity+0x6>
  40102a:	2001      	movs	r0, #1
  40102c:	4770      	bx	lr
{
  40102e:	b508      	push	{r3, lr}
  401030:	4608      	mov	r0, r1
         (lun < MAX_LUN) ? lun_desc[lun].read_capacity(u32_nb_sector) :
  401032:	4b01      	ldr	r3, [pc, #4]	; (401038 <mem_read_capacity+0x10>)
  401034:	4798      	blx	r3
  401036:	bd08      	pop	{r3, pc}
  401038:	00400f55 	.word	0x00400f55

0040103c <mem_sector_size>:
#endif

  Ctrl_access_unlock();

  return sector_size;
}
  40103c:	fab0 f080 	clz	r0, r0
  401040:	0940      	lsrs	r0, r0, #5
  401042:	4770      	bx	lr

00401044 <mem_wr_protect>:

  if (!Ctrl_access_lock()) return true;

  wr_protect =
#if MAX_LUN
             (lun < MAX_LUN) ? lun_desc[lun].wr_protect() :
  401044:	b108      	cbz	r0, 40104a <mem_wr_protect+0x6>
  401046:	2001      	movs	r0, #1
  401048:	4770      	bx	lr
{
  40104a:	b508      	push	{r3, lr}
             (lun < MAX_LUN) ? lun_desc[lun].wr_protect() :
  40104c:	4b01      	ldr	r3, [pc, #4]	; (401054 <mem_wr_protect+0x10>)
  40104e:	4798      	blx	r3
  401050:	bd08      	pop	{r3, pc}
  401052:	bf00      	nop
  401054:	00400f65 	.word	0x00400f65

00401058 <memory_2_ram>:
  if (!Ctrl_access_lock()) return CTRL_FAIL;

  memory_start_read_action(1);
  status =
#if MAX_LUN
           (lun < MAX_LUN) ? lun_desc[lun].mem_2_ram(addr, ram) :
  401058:	b108      	cbz	r0, 40105e <memory_2_ram+0x6>
  40105a:	2001      	movs	r0, #1
  40105c:	4770      	bx	lr
{
  40105e:	b508      	push	{r3, lr}
  401060:	4608      	mov	r0, r1
           (lun < MAX_LUN) ? lun_desc[lun].mem_2_ram(addr, ram) :
  401062:	4611      	mov	r1, r2
  401064:	4b01      	ldr	r3, [pc, #4]	; (40106c <memory_2_ram+0x14>)
  401066:	4798      	blx	r3
  401068:	bd08      	pop	{r3, pc}
  40106a:	bf00      	nop
  40106c:	00400fb1 	.word	0x00400fb1

00401070 <ram_2_memory>:
  if (!Ctrl_access_lock()) return CTRL_FAIL;

  memory_start_write_action(1);
  status =
#if MAX_LUN
           (lun < MAX_LUN) ? lun_desc[lun].ram_2_mem(addr, ram) :
  401070:	b108      	cbz	r0, 401076 <ram_2_memory+0x6>
  401072:	2001      	movs	r0, #1
  401074:	4770      	bx	lr
{
  401076:	b508      	push	{r3, lr}
  401078:	4608      	mov	r0, r1
           (lun < MAX_LUN) ? lun_desc[lun].ram_2_mem(addr, ram) :
  40107a:	4611      	mov	r1, r2
  40107c:	4b01      	ldr	r3, [pc, #4]	; (401084 <ram_2_memory+0x14>)
  40107e:	4798      	blx	r3
  401080:	bd08      	pop	{r3, pc}
  401082:	bf00      	nop
  401084:	00401001 	.word	0x00401001

00401088 <hsmci_reset>:

/**
 * \brief Reset the HSMCI interface
 */
static void hsmci_reset(void)
{
  401088:	b470      	push	{r4, r5, r6}
	uint32_t mr = HSMCI->HSMCI_MR;
  40108a:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
  40108e:	685d      	ldr	r5, [r3, #4]
	uint32_t dtor = HSMCI->HSMCI_DTOR;
  401090:	689c      	ldr	r4, [r3, #8]
	uint32_t sdcr = HSMCI->HSMCI_SDCR;
  401092:	68d8      	ldr	r0, [r3, #12]
	uint32_t cstor = HSMCI->HSMCI_CSTOR;
  401094:	69d9      	ldr	r1, [r3, #28]
	uint32_t cfg = HSMCI->HSMCI_CFG;
  401096:	6d5a      	ldr	r2, [r3, #84]	; 0x54
	HSMCI->HSMCI_CR = HSMCI_CR_SWRST;
  401098:	2680      	movs	r6, #128	; 0x80
  40109a:	601e      	str	r6, [r3, #0]
	HSMCI->HSMCI_MR = mr;
  40109c:	605d      	str	r5, [r3, #4]
	HSMCI->HSMCI_DTOR = dtor;
  40109e:	609c      	str	r4, [r3, #8]
	HSMCI->HSMCI_SDCR = sdcr;
  4010a0:	60d8      	str	r0, [r3, #12]
	HSMCI->HSMCI_CSTOR = cstor;
  4010a2:	61d9      	str	r1, [r3, #28]
	HSMCI->HSMCI_CFG = cfg;
  4010a4:	655a      	str	r2, [r3, #84]	; 0x54
#ifdef HSMCI_SR_DMADONE
	HSMCI->HSMCI_DMA = 0;
#endif
#if (SAMV70 || SAMV71 || SAME70 || SAMS70)
#ifdef HSMCI_DMA_DMAEN
	HSMCI->HSMCI_DMA = 0;
  4010a6:	2200      	movs	r2, #0
  4010a8:	651a      	str	r2, [r3, #80]	; 0x50
#endif
#endif
	// Enable the HSMCI
	HSMCI->HSMCI_CR = HSMCI_CR_PWSEN | HSMCI_CR_MCIEN;
  4010aa:	2205      	movs	r2, #5
  4010ac:	601a      	str	r2, [r3, #0]
}
  4010ae:	bc70      	pop	{r4, r5, r6}
  4010b0:	4770      	bx	lr
	...

004010b4 <hsmci_send_cmd_execute>:
 *
 * \return true if success, otherwise false
 */
static bool hsmci_send_cmd_execute(uint32_t cmdr, sdmmc_cmd_def_t cmd,
		uint32_t arg)
{
  4010b4:	b508      	push	{r3, lr}
	uint32_t sr;

	cmdr |= HSMCI_CMDR_CMDNB(cmd) | HSMCI_CMDR_SPCMD_STD;
  4010b6:	f001 033f 	and.w	r3, r1, #63	; 0x3f
  4010ba:	4318      	orrs	r0, r3
	if (cmd & SDMMC_RESP_PRESENT) {
  4010bc:	f411 7f80 	tst.w	r1, #256	; 0x100
  4010c0:	d004      	beq.n	4010cc <hsmci_send_cmd_execute+0x18>
		cmdr |= HSMCI_CMDR_MAXLAT;
		if (cmd & SDMMC_RESP_136) {
  4010c2:	f411 6f00 	tst.w	r1, #2048	; 0x800
  4010c6:	d00e      	beq.n	4010e6 <hsmci_send_cmd_execute+0x32>
			cmdr |= HSMCI_CMDR_RSPTYP_136_BIT;
  4010c8:	f440 5084 	orr.w	r0, r0, #4224	; 0x1080
			cmdr |= HSMCI_CMDR_RSPTYP_R1B;
		} else {
			cmdr |= HSMCI_CMDR_RSPTYP_48_BIT;
		}
	}
	if (cmd & SDMMC_CMD_OPENDRAIN) {
  4010cc:	f411 4f80 	tst.w	r1, #16384	; 0x4000
		cmdr |= HSMCI_CMDR_OPDCMD_OPENDRAIN;
  4010d0:	bf18      	it	ne
  4010d2:	f440 6000 	orrne.w	r0, r0, #2048	; 0x800
	}

	// Write argument
	HSMCI->HSMCI_ARGR = arg;
  4010d6:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
  4010da:	611a      	str	r2, [r3, #16]
	// Write and start command
	HSMCI->HSMCI_CMDR = cmdr;
  4010dc:	6158      	str	r0, [r3, #20]

	// Wait end of command
	do {
		sr = HSMCI->HSMCI_SR;
  4010de:	4618      	mov	r0, r3
		if (cmd & SDMMC_RESP_CRC) {
  4010e0:	f401 5280 	and.w	r2, r1, #4096	; 0x1000
  4010e4:	e00d      	b.n	401102 <hsmci_send_cmd_execute+0x4e>
		} else if (cmd & SDMMC_RESP_BUSY) {
  4010e6:	f411 5f00 	tst.w	r1, #8192	; 0x2000
			cmdr |= HSMCI_CMDR_RSPTYP_R1B;
  4010ea:	bf14      	ite	ne
  4010ec:	f440 5086 	orrne.w	r0, r0, #4288	; 0x10c0
			cmdr |= HSMCI_CMDR_RSPTYP_48_BIT;
  4010f0:	f440 5082 	orreq.w	r0, r0, #4160	; 0x1040
  4010f4:	e7ea      	b.n	4010cc <hsmci_send_cmd_execute+0x18>
						__func__, cmd, sr);
				hsmci_reset();
				return false;
			}
		} else {
			if (sr & (HSMCI_SR_CSTOE | HSMCI_SR_RTOE
  4010f6:	f413 0f1b 	tst.w	r3, #10158080	; 0x9b0000
  4010fa:	d10c      	bne.n	401116 <hsmci_send_cmd_execute+0x62>
						__func__, cmd, sr);
				hsmci_reset();
				return false;
			}
		}
	} while (!(sr & HSMCI_SR_CMDRDY));
  4010fc:	f013 0f01 	tst.w	r3, #1
  401100:	d10d      	bne.n	40111e <hsmci_send_cmd_execute+0x6a>
		sr = HSMCI->HSMCI_SR;
  401102:	6c03      	ldr	r3, [r0, #64]	; 0x40
		if (cmd & SDMMC_RESP_CRC) {
  401104:	2a00      	cmp	r2, #0
  401106:	d0f6      	beq.n	4010f6 <hsmci_send_cmd_execute+0x42>
			if (sr & (HSMCI_SR_CSTOE | HSMCI_SR_RTOE
  401108:	f413 0f1f 	tst.w	r3, #10420224	; 0x9f0000
  40110c:	d0f6      	beq.n	4010fc <hsmci_send_cmd_execute+0x48>
				hsmci_reset();
  40110e:	4b10      	ldr	r3, [pc, #64]	; (401150 <hsmci_send_cmd_execute+0x9c>)
  401110:	4798      	blx	r3
				return false;
  401112:	2000      	movs	r0, #0
  401114:	bd08      	pop	{r3, pc}
				hsmci_reset();
  401116:	4b0e      	ldr	r3, [pc, #56]	; (401150 <hsmci_send_cmd_execute+0x9c>)
  401118:	4798      	blx	r3
				return false;
  40111a:	2000      	movs	r0, #0
  40111c:	bd08      	pop	{r3, pc}

	if (cmd & SDMMC_RESP_BUSY) {
  40111e:	f411 5f00 	tst.w	r1, #8192	; 0x2000
  401122:	d103      	bne.n	40112c <hsmci_send_cmd_execute+0x78>
		if (!hsmci_wait_busy()) {
			return false;
		}
	}
	return true;
  401124:	2001      	movs	r0, #1
  401126:	bd08      	pop	{r3, pc}
	return true;
  401128:	2001      	movs	r0, #1
  40112a:	bd08      	pop	{r3, pc}
		sr = HSMCI->HSMCI_SR;
  40112c:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
  401130:	6c1b      	ldr	r3, [r3, #64]	; 0x40
  401132:	f04f 32ff 	mov.w	r2, #4294967295
  401136:	f04f 4180 	mov.w	r1, #1073741824	; 0x40000000
	} while (!((sr & HSMCI_SR_NOTBUSY) && ((sr & HSMCI_SR_DTIP) == 0)));
  40113a:	f003 0330 	and.w	r3, r3, #48	; 0x30
  40113e:	2b20      	cmp	r3, #32
  401140:	d0f2      	beq.n	401128 <hsmci_send_cmd_execute+0x74>
		sr = HSMCI->HSMCI_SR;
  401142:	6c0b      	ldr	r3, [r1, #64]	; 0x40
		if (busy_wait-- == 0) {
  401144:	3a01      	subs	r2, #1
  401146:	d1f8      	bne.n	40113a <hsmci_send_cmd_execute+0x86>
			hsmci_reset();
  401148:	4b01      	ldr	r3, [pc, #4]	; (401150 <hsmci_send_cmd_execute+0x9c>)
  40114a:	4798      	blx	r3
			return false;
  40114c:	2000      	movs	r0, #0
  40114e:	bd08      	pop	{r3, pc}
  401150:	00401089 	.word	0x00401089

00401154 <hsmci_init>:

//-------------------------------------------------------------------
//--------------------- PUBLIC FUNCTIONS ----------------------------

void hsmci_init(void)
{
  401154:	b510      	push	{r4, lr}
	pmc_enable_periph_clk(ID_HSMCI);
  401156:	2012      	movs	r0, #18
  401158:	4c08      	ldr	r4, [pc, #32]	; (40117c <hsmci_init+0x28>)
  40115a:	47a0      	blx	r4
#endif

#if (SAMV70 || SAMV71 || SAME70 || SAMS70)
#ifdef HSMCI_DMA_DMAEN
	// Enable clock for DMA controller
	pmc_enable_periph_clk(ID_XDMAC);
  40115c:	203a      	movs	r0, #58	; 0x3a
  40115e:	47a0      	blx	r4
#endif
#endif

	// Set the Data Timeout Register to 2 Mega Cycles
	HSMCI->HSMCI_DTOR = HSMCI_DTOR_DTOMUL_1048576 | HSMCI_DTOR_DTOCYC(2);
  401160:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
  401164:	2272      	movs	r2, #114	; 0x72
  401166:	609a      	str	r2, [r3, #8]
	// Set Completion Signal Timeout to 2 Mega Cycles
	HSMCI->HSMCI_CSTOR = HSMCI_CSTOR_CSTOMUL_1048576 | HSMCI_CSTOR_CSTOCYC(2);
  401168:	61da      	str	r2, [r3, #28]
	// Set Configuration Register
	HSMCI->HSMCI_CFG = HSMCI_CFG_FIFOMODE | HSMCI_CFG_FERRCTRL;
  40116a:	2211      	movs	r2, #17
  40116c:	655a      	str	r2, [r3, #84]	; 0x54
	// Set power saving to maximum value
	HSMCI->HSMCI_MR = HSMCI_MR_PWSDIV_Msk;
  40116e:	f44f 62e0 	mov.w	r2, #1792	; 0x700
  401172:	605a      	str	r2, [r3, #4]

	// Enable the HSMCI and the Power Saving
	HSMCI->HSMCI_CR = HSMCI_CR_MCIEN | HSMCI_CR_PWSEN;
  401174:	2205      	movs	r2, #5
  401176:	601a      	str	r2, [r3, #0]
  401178:	bd10      	pop	{r4, pc}
  40117a:	bf00      	nop
  40117c:	00408515 	.word	0x00408515

00401180 <hsmci_get_bus_width>:
}

uint8_t hsmci_get_bus_width(uint8_t slot)
{
	switch (slot) {
  401180:	2800      	cmp	r0, #0
		return SD_MMC_HSMCI_SLOT_1_SIZE;
#endif
	default:
		return 0; // Slot number wrong
	}
}
  401182:	bf0c      	ite	eq
  401184:	2004      	moveq	r0, #4
  401186:	2000      	movne	r0, #0
  401188:	4770      	bx	lr

0040118a <hsmci_is_high_speed_capable>:

bool hsmci_is_high_speed_capable(void)
{
	return true;
}
  40118a:	2001      	movs	r0, #1
  40118c:	4770      	bx	lr
	...

00401190 <hsmci_select_device>:
void hsmci_select_device(uint8_t slot, uint32_t clock, uint8_t bus_width, bool high_speed)
{
	uint32_t hsmci_slot = HSMCI_SDCR_SDCSEL_SLOTA;
	uint32_t hsmci_bus_width = HSMCI_SDCR_SDCBUS_1;

	if (high_speed) {
  401190:	b37b      	cbz	r3, 4011f2 <hsmci_select_device+0x62>
		HSMCI->HSMCI_CFG |= HSMCI_CFG_HSMODE;
  401192:	f04f 4080 	mov.w	r0, #1073741824	; 0x40000000
  401196:	6d43      	ldr	r3, [r0, #84]	; 0x54
  401198:	f443 7380 	orr.w	r3, r3, #256	; 0x100
  40119c:	6543      	str	r3, [r0, #84]	; 0x54
	if ((speed * 2) < mck) {
  40119e:	4b2b      	ldr	r3, [pc, #172]	; (40124c <hsmci_select_device+0xbc>)
  4011a0:	ebb3 0f41 	cmp.w	r3, r1, lsl #1
  4011a4:	d337      	bcc.n	401216 <hsmci_select_device+0x86>
{
  4011a6:	b410      	push	{r4}
		div = (mck / speed) - 2;
  4011a8:	4829      	ldr	r0, [pc, #164]	; (401250 <hsmci_select_device+0xc0>)
  4011aa:	fbb0 f3f1 	udiv	r3, r0, r1
		if (mck % speed) {
  4011ae:	fb01 0113 	mls	r1, r1, r3, r0
  4011b2:	bb29      	cbnz	r1, 401200 <hsmci_select_device+0x70>
		div = (mck / speed) - 2;
  4011b4:	3b02      	subs	r3, #2
	HSMCI->HSMCI_MR &= ~HSMCI_MR_CLKDIV_Msk;
  4011b6:	f04f 4180 	mov.w	r1, #1073741824	; 0x40000000
  4011ba:	6848      	ldr	r0, [r1, #4]
  4011bc:	f020 00ff 	bic.w	r0, r0, #255	; 0xff
  4011c0:	6048      	str	r0, [r1, #4]
	HSMCI->HSMCI_MR |= HSMCI_MR_CLKDIV(clkdiv);
  4011c2:	684c      	ldr	r4, [r1, #4]
  4011c4:	f3c3 0047 	ubfx	r0, r3, #1, #8
  4011c8:	4320      	orrs	r0, r4
  4011ca:	6048      	str	r0, [r1, #4]
	if (clkodd) {
  4011cc:	f013 0f01 	tst.w	r3, #1
  4011d0:	d018      	beq.n	401204 <hsmci_select_device+0x74>
		HSMCI->HSMCI_MR |= HSMCI_MR_CLKODD;
  4011d2:	684b      	ldr	r3, [r1, #4]
  4011d4:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
  4011d8:	604b      	str	r3, [r1, #4]
#endif
	default:
		Assert(false); // Slot number wrong
	}

	switch (bus_width) {
  4011da:	2a04      	cmp	r2, #4
  4011dc:	d019      	beq.n	401212 <hsmci_select_device+0x82>
	uint32_t hsmci_bus_width = HSMCI_SDCR_SDCBUS_1;
  4011de:	2a08      	cmp	r2, #8
  4011e0:	bf0c      	ite	eq
  4011e2:	22c0      	moveq	r2, #192	; 0xc0
  4011e4:	2200      	movne	r2, #0
		break;

	default:
		Assert(false); // Bus width wrong
	}
	HSMCI->HSMCI_SDCR = hsmci_slot | hsmci_bus_width;
  4011e6:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
  4011ea:	60da      	str	r2, [r3, #12]
}
  4011ec:	f85d 4b04 	ldr.w	r4, [sp], #4
  4011f0:	4770      	bx	lr
		HSMCI->HSMCI_CFG &= ~HSMCI_CFG_HSMODE;
  4011f2:	f04f 4080 	mov.w	r0, #1073741824	; 0x40000000
  4011f6:	6d43      	ldr	r3, [r0, #84]	; 0x54
  4011f8:	f423 7380 	bic.w	r3, r3, #256	; 0x100
  4011fc:	6543      	str	r3, [r0, #84]	; 0x54
  4011fe:	e7ce      	b.n	40119e <hsmci_select_device+0xe>
			div++;
  401200:	3b01      	subs	r3, #1
  401202:	e7d8      	b.n	4011b6 <hsmci_select_device+0x26>
		HSMCI->HSMCI_MR &= ~HSMCI_MR_CLKODD;
  401204:	f04f 4180 	mov.w	r1, #1073741824	; 0x40000000
  401208:	684b      	ldr	r3, [r1, #4]
  40120a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
  40120e:	604b      	str	r3, [r1, #4]
  401210:	e7e3      	b.n	4011da <hsmci_select_device+0x4a>
		hsmci_bus_width = HSMCI_SDCR_SDCBUS_4;
  401212:	2280      	movs	r2, #128	; 0x80
  401214:	e7e7      	b.n	4011e6 <hsmci_select_device+0x56>
	HSMCI->HSMCI_MR &= ~HSMCI_MR_CLKDIV_Msk;
  401216:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
  40121a:	6859      	ldr	r1, [r3, #4]
  40121c:	f021 01ff 	bic.w	r1, r1, #255	; 0xff
  401220:	6059      	str	r1, [r3, #4]
	HSMCI->HSMCI_MR |= HSMCI_MR_CLKDIV(clkdiv);
  401222:	6859      	ldr	r1, [r3, #4]
  401224:	6059      	str	r1, [r3, #4]
		HSMCI->HSMCI_MR &= ~HSMCI_MR_CLKODD;
  401226:	f04f 4180 	mov.w	r1, #1073741824	; 0x40000000
  40122a:	684b      	ldr	r3, [r1, #4]
  40122c:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
  401230:	604b      	str	r3, [r1, #4]
	switch (bus_width) {
  401232:	2a04      	cmp	r2, #4
  401234:	d007      	beq.n	401246 <hsmci_select_device+0xb6>
	uint32_t hsmci_bus_width = HSMCI_SDCR_SDCBUS_1;
  401236:	2a08      	cmp	r2, #8
  401238:	bf0c      	ite	eq
  40123a:	22c0      	moveq	r2, #192	; 0xc0
  40123c:	2200      	movne	r2, #0
	HSMCI->HSMCI_SDCR = hsmci_slot | hsmci_bus_width;
  40123e:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
  401242:	60da      	str	r2, [r3, #12]
  401244:	4770      	bx	lr
		hsmci_bus_width = HSMCI_SDCR_SDCBUS_4;
  401246:	2280      	movs	r2, #128	; 0x80
  401248:	e7f9      	b.n	40123e <hsmci_select_device+0xae>
  40124a:	bf00      	nop
  40124c:	08f0d17f 	.word	0x08f0d17f
  401250:	08f0d180 	.word	0x08f0d180

00401254 <hsmci_deselect_device>:

void hsmci_deselect_device(uint8_t slot)
{
  401254:	4770      	bx	lr

00401256 <hsmci_send_clock>:
}

void hsmci_send_clock(void)
{
	// Configure command
	HSMCI->HSMCI_MR &= ~(HSMCI_MR_WRPROOF | HSMCI_MR_RDPROOF | HSMCI_MR_FBYTE);
  401256:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
  40125a:	685a      	ldr	r2, [r3, #4]
  40125c:	f422 5260 	bic.w	r2, r2, #14336	; 0x3800
  401260:	605a      	str	r2, [r3, #4]
	// Write argument
	HSMCI->HSMCI_ARGR = 0;
  401262:	2200      	movs	r2, #0
  401264:	611a      	str	r2, [r3, #16]
	// Write and start initialization command
	HSMCI->HSMCI_CMDR = HSMCI_CMDR_RSPTYP_NORESP
  401266:	f44f 6210 	mov.w	r2, #2304	; 0x900
  40126a:	615a      	str	r2, [r3, #20]
			| HSMCI_CMDR_SPCMD_INIT
			| HSMCI_CMDR_OPDCMD_OPENDRAIN;
	// Wait end of initialization command
	while (!(HSMCI->HSMCI_SR & HSMCI_SR_CMDRDY));
  40126c:	461a      	mov	r2, r3
  40126e:	6c13      	ldr	r3, [r2, #64]	; 0x40
  401270:	f013 0f01 	tst.w	r3, #1
  401274:	d0fb      	beq.n	40126e <hsmci_send_clock+0x18>
}
  401276:	4770      	bx	lr

00401278 <hsmci_send_cmd>:

bool hsmci_send_cmd(sdmmc_cmd_def_t cmd, uint32_t arg)
{
  401278:	b510      	push	{r4, lr}
	// Configure command
	HSMCI->HSMCI_MR &= ~(HSMCI_MR_WRPROOF | HSMCI_MR_RDPROOF | HSMCI_MR_FBYTE);
  40127a:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
  40127e:	685a      	ldr	r2, [r3, #4]
  401280:	f422 5260 	bic.w	r2, r2, #14336	; 0x3800
  401284:	605a      	str	r2, [r3, #4]
	HSMCI->HSMCI_MR &= ~HSMCI_MR_PDCMODE;
#endif
#if (SAMV70 || SAMV71 || SAME70 || SAMS70)
#ifdef HSMCI_DMA_DMAEN
	// Disable DMA for HSMCI
	HSMCI->HSMCI_DMA = 0;
  401286:	2400      	movs	r4, #0
  401288:	651c      	str	r4, [r3, #80]	; 0x50
#endif
#endif
	HSMCI->HSMCI_BLKR = 0;
  40128a:	619c      	str	r4, [r3, #24]
	return hsmci_send_cmd_execute(0, cmd, arg);
  40128c:	460a      	mov	r2, r1
  40128e:	4601      	mov	r1, r0
  401290:	4620      	mov	r0, r4
  401292:	4b01      	ldr	r3, [pc, #4]	; (401298 <hsmci_send_cmd+0x20>)
  401294:	4798      	blx	r3
}
  401296:	bd10      	pop	{r4, pc}
  401298:	004010b5 	.word	0x004010b5

0040129c <hsmci_get_response>:

uint32_t hsmci_get_response(void)
{
	return HSMCI->HSMCI_RSPR[0];
  40129c:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
  4012a0:	6a18      	ldr	r0, [r3, #32]
}
  4012a2:	4770      	bx	lr

004012a4 <hsmci_get_response_128>:

void hsmci_get_response_128(uint8_t* response)
{
  4012a4:	b410      	push	{r4}
  4012a6:	1d03      	adds	r3, r0, #4
  4012a8:	3014      	adds	r0, #20
	uint32_t response_32;

	for (uint8_t i = 0; i < 4; i++) {
		response_32 = HSMCI->HSMCI_RSPR[0];
  4012aa:	f04f 4480 	mov.w	r4, #1073741824	; 0x40000000
  4012ae:	6a22      	ldr	r2, [r4, #32]
		*response = (response_32 >> 24) & 0xFF;
  4012b0:	0e11      	lsrs	r1, r2, #24
  4012b2:	f803 1c04 	strb.w	r1, [r3, #-4]
		response++;
		*response = (response_32 >> 16) & 0xFF;
  4012b6:	0c11      	lsrs	r1, r2, #16
  4012b8:	f803 1c03 	strb.w	r1, [r3, #-3]
		response++;
		*response = (response_32 >>  8) & 0xFF;
  4012bc:	0a11      	lsrs	r1, r2, #8
  4012be:	f803 1c02 	strb.w	r1, [r3, #-2]
		response++;
		*response = (response_32 >>  0) & 0xFF;
  4012c2:	f803 2c01 	strb.w	r2, [r3, #-1]
  4012c6:	3304      	adds	r3, #4
	for (uint8_t i = 0; i < 4; i++) {
  4012c8:	4283      	cmp	r3, r0
  4012ca:	d1f0      	bne.n	4012ae <hsmci_get_response_128+0xa>
		response++;
	}
}
  4012cc:	f85d 4b04 	ldr.w	r4, [sp], #4
  4012d0:	4770      	bx	lr
	...

004012d4 <hsmci_adtc_start>:

bool hsmci_adtc_start(sdmmc_cmd_def_t cmd, uint32_t arg, uint16_t block_size, uint16_t nb_block, bool access_block)
{
  4012d4:	b570      	push	{r4, r5, r6, lr}
  4012d6:	f89d 4010 	ldrb.w	r4, [sp, #16]
	}
#endif

#if (SAMV70 || SAMV71 || SAME70 || SAMS70)
#ifdef HSMCI_DMA_DMAEN
	if (access_block) {
  4012da:	b384      	cbz	r4, 40133e <hsmci_adtc_start+0x6a>
		// Enable DMA for HSMCI
		HSMCI->HSMCI_DMA = HSMCI_DMA_DMAEN;
  4012dc:	f44f 7580 	mov.w	r5, #256	; 0x100
  4012e0:	f04f 4480 	mov.w	r4, #1073741824	; 0x40000000
  4012e4:	6525      	str	r5, [r4, #80]	; 0x50
#endif
#endif
	// Enabling Read/Write Proof allows to stop the HSMCI Clock during
	// read/write  access if the internal FIFO is full.
	// This will guarantee data integrity, not bandwidth.
	HSMCI->HSMCI_MR |= HSMCI_MR_WRPROOF | HSMCI_MR_RDPROOF;
  4012e6:	f04f 4580 	mov.w	r5, #1073741824	; 0x40000000
  4012ea:	686c      	ldr	r4, [r5, #4]
  4012ec:	f444 54c0 	orr.w	r4, r4, #6144	; 0x1800
  4012f0:	606c      	str	r4, [r5, #4]
	// Force byte transfer if needed
	if (block_size & 0x3) {
  4012f2:	f012 0f03 	tst.w	r2, #3
  4012f6:	d027      	beq.n	401348 <hsmci_adtc_start+0x74>
		HSMCI->HSMCI_MR |= HSMCI_MR_FBYTE;
  4012f8:	686c      	ldr	r4, [r5, #4]
  4012fa:	f444 5400 	orr.w	r4, r4, #8192	; 0x2000
  4012fe:	606c      	str	r4, [r5, #4]
	} else {
		HSMCI->HSMCI_MR &= ~HSMCI_MR_FBYTE;
	}

	if (cmd & SDMMC_CMD_WRITE) {
  401300:	f400 4400 	and.w	r4, r0, #32768	; 0x8000
		cmdr = HSMCI_CMDR_TRCMD_START_DATA | HSMCI_CMDR_TRDIR_WRITE;
	} else {
		cmdr = HSMCI_CMDR_TRCMD_START_DATA | HSMCI_CMDR_TRDIR_READ;
  401304:	2c00      	cmp	r4, #0
  401306:	bf14      	ite	ne
  401308:	f44f 3480 	movne.w	r4, #65536	; 0x10000
  40130c:	f44f 24a0 	moveq.w	r4, #327680	; 0x50000
	}

	if (cmd & SDMMC_CMD_SDIO_BYTE) {
  401310:	f410 3f80 	tst.w	r0, #65536	; 0x10000
  401314:	d11f      	bne.n	401356 <hsmci_adtc_start+0x82>
			cmdr |= HSMCI_CMDR_TRTYP_BYTE;
			// Value 0 corresponds to a 512-byte transfer
			HSMCI->HSMCI_BLKR = ((block_size % 512) << HSMCI_BLKR_BCNT_Pos);
	} else {
		HSMCI->HSMCI_BLKR = (block_size << HSMCI_BLKR_BLKLEN_Pos) |
  401316:	ea43 4502 	orr.w	r5, r3, r2, lsl #16
  40131a:	f04f 4680 	mov.w	r6, #1073741824	; 0x40000000
  40131e:	61b5      	str	r5, [r6, #24]
				(nb_block << HSMCI_BLKR_BCNT_Pos);
		if (cmd & SDMMC_CMD_SDIO_BLOCK) {
  401320:	f410 3f00 	tst.w	r0, #131072	; 0x20000
  401324:	d12b      	bne.n	40137e <hsmci_adtc_start+0xaa>
			cmdr |= HSMCI_CMDR_TRTYP_BLOCK;
		} else if (cmd & SDMMC_CMD_STREAM) {
  401326:	f410 2f80 	tst.w	r0, #262144	; 0x40000
  40132a:	d12b      	bne.n	401384 <hsmci_adtc_start+0xb0>
			cmdr |= HSMCI_CMDR_TRTYP_STREAM;
		} else if (cmd & SDMMC_CMD_SINGLE_BLOCK) {
  40132c:	f410 2f00 	tst.w	r0, #524288	; 0x80000
  401330:	d118      	bne.n	401364 <hsmci_adtc_start+0x90>
			cmdr |= HSMCI_CMDR_TRTYP_SINGLE;
		} else if (cmd & SDMMC_CMD_MULTI_BLOCK) {
  401332:	f410 1f80 	tst.w	r0, #1048576	; 0x100000
			cmdr |= HSMCI_CMDR_TRTYP_MULTIPLE;
  401336:	bf18      	it	ne
  401338:	f444 2400 	orrne.w	r4, r4, #524288	; 0x80000
  40133c:	e012      	b.n	401364 <hsmci_adtc_start+0x90>
		HSMCI->HSMCI_DMA = 0;
  40133e:	2500      	movs	r5, #0
  401340:	f04f 4480 	mov.w	r4, #1073741824	; 0x40000000
  401344:	6525      	str	r5, [r4, #80]	; 0x50
  401346:	e7ce      	b.n	4012e6 <hsmci_adtc_start+0x12>
		HSMCI->HSMCI_MR &= ~HSMCI_MR_FBYTE;
  401348:	f04f 4580 	mov.w	r5, #1073741824	; 0x40000000
  40134c:	686c      	ldr	r4, [r5, #4]
  40134e:	f424 5400 	bic.w	r4, r4, #8192	; 0x2000
  401352:	606c      	str	r4, [r5, #4]
  401354:	e7d4      	b.n	401300 <hsmci_adtc_start+0x2c>
			cmdr |= HSMCI_CMDR_TRTYP_BYTE;
  401356:	f444 1400 	orr.w	r4, r4, #2097152	; 0x200000
			HSMCI->HSMCI_BLKR = ((block_size % 512) << HSMCI_BLKR_BCNT_Pos);
  40135a:	f3c2 0508 	ubfx	r5, r2, #0, #9
  40135e:	f04f 4680 	mov.w	r6, #1073741824	; 0x40000000
  401362:	61b5      	str	r5, [r6, #24]
		} else {
			Assert(false); // Incorrect flags
		}
	}
	hsmci_transfert_pos = 0;
  401364:	2600      	movs	r6, #0
  401366:	4d09      	ldr	r5, [pc, #36]	; (40138c <hsmci_adtc_start+0xb8>)
  401368:	602e      	str	r6, [r5, #0]
	hsmci_block_size = block_size;
  40136a:	4d09      	ldr	r5, [pc, #36]	; (401390 <hsmci_adtc_start+0xbc>)
  40136c:	802a      	strh	r2, [r5, #0]
	hsmci_nb_block = nb_block;
  40136e:	4a09      	ldr	r2, [pc, #36]	; (401394 <hsmci_adtc_start+0xc0>)
  401370:	8013      	strh	r3, [r2, #0]

	return hsmci_send_cmd_execute(cmdr, cmd, arg);
  401372:	460a      	mov	r2, r1
  401374:	4601      	mov	r1, r0
  401376:	4620      	mov	r0, r4
  401378:	4b07      	ldr	r3, [pc, #28]	; (401398 <hsmci_adtc_start+0xc4>)
  40137a:	4798      	blx	r3
}
  40137c:	bd70      	pop	{r4, r5, r6, pc}
			cmdr |= HSMCI_CMDR_TRTYP_BLOCK;
  40137e:	f444 1420 	orr.w	r4, r4, #2621440	; 0x280000
  401382:	e7ef      	b.n	401364 <hsmci_adtc_start+0x90>
			cmdr |= HSMCI_CMDR_TRTYP_STREAM;
  401384:	f444 1480 	orr.w	r4, r4, #1048576	; 0x100000
  401388:	e7ec      	b.n	401364 <hsmci_adtc_start+0x90>
  40138a:	bf00      	nop
  40138c:	20400a28 	.word	0x20400a28
  401390:	20400a22 	.word	0x20400a22
  401394:	20400a24 	.word	0x20400a24
  401398:	004010b5 	.word	0x004010b5

0040139c <hsmci_read_word>:
{
	return hsmci_send_cmd_execute(HSMCI_CMDR_TRCMD_STOP_DATA, cmd, arg);
}

bool hsmci_read_word(uint32_t* value)
{
  40139c:	b508      	push	{r3, lr}

	Assert(((uint32_t)hsmci_block_size * hsmci_nb_block) > hsmci_transfert_pos);

	// Wait data available
	do {
		sr = HSMCI->HSMCI_SR;
  40139e:	f04f 4180 	mov.w	r1, #1073741824	; 0x40000000
		if (sr & (HSMCI_SR_UNRE | HSMCI_SR_OVRE | \
  4013a2:	4a16      	ldr	r2, [pc, #88]	; (4013fc <hsmci_read_word+0x60>)
		sr = HSMCI->HSMCI_SR;
  4013a4:	6c0b      	ldr	r3, [r1, #64]	; 0x40
		if (sr & (HSMCI_SR_UNRE | HSMCI_SR_OVRE | \
  4013a6:	4213      	tst	r3, r2
  4013a8:	d11d      	bne.n	4013e6 <hsmci_read_word+0x4a>
			hsmci_debug("%s: DMA sr 0x%08x error\n\r",
					__func__, sr);
			hsmci_reset();
			return false;
		}
	} while (!(sr & HSMCI_SR_RXRDY));
  4013aa:	f013 0f02 	tst.w	r3, #2
  4013ae:	d0f9      	beq.n	4013a4 <hsmci_read_word+0x8>

	// Read data
	*value = HSMCI->HSMCI_RDR;
  4013b0:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
  4013b4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
  4013b6:	6003      	str	r3, [r0, #0]
	hsmci_transfert_pos += 4;
  4013b8:	4a11      	ldr	r2, [pc, #68]	; (401400 <hsmci_read_word+0x64>)
  4013ba:	6813      	ldr	r3, [r2, #0]
  4013bc:	3304      	adds	r3, #4
  4013be:	6013      	str	r3, [r2, #0]
	if (((uint32_t)hsmci_block_size * hsmci_nb_block) > hsmci_transfert_pos) {
  4013c0:	4a10      	ldr	r2, [pc, #64]	; (401404 <hsmci_read_word+0x68>)
  4013c2:	8811      	ldrh	r1, [r2, #0]
  4013c4:	4a10      	ldr	r2, [pc, #64]	; (401408 <hsmci_read_word+0x6c>)
  4013c6:	8812      	ldrh	r2, [r2, #0]
  4013c8:	fb02 f201 	mul.w	r2, r2, r1
  4013cc:	4293      	cmp	r3, r2
  4013ce:	d312      	bcc.n	4013f6 <hsmci_read_word+0x5a>
	}

	// Wait end of transfer
	// Note: no need of timeout, because it is include in HSMCI
	do {
		sr = HSMCI->HSMCI_SR;
  4013d0:	f04f 4180 	mov.w	r1, #1073741824	; 0x40000000
		if (sr & (HSMCI_SR_UNRE | HSMCI_SR_OVRE | \
  4013d4:	4a09      	ldr	r2, [pc, #36]	; (4013fc <hsmci_read_word+0x60>)
		sr = HSMCI->HSMCI_SR;
  4013d6:	6c0b      	ldr	r3, [r1, #64]	; 0x40
		if (sr & (HSMCI_SR_UNRE | HSMCI_SR_OVRE | \
  4013d8:	4213      	tst	r3, r2
  4013da:	d108      	bne.n	4013ee <hsmci_read_word+0x52>
			hsmci_debug("%s: DMA sr 0x%08x error\n\r",
					__func__, sr);
			hsmci_reset();
			return false;
		}
	} while (!(sr & HSMCI_SR_XFRDONE));
  4013dc:	f013 6f00 	tst.w	r3, #134217728	; 0x8000000
  4013e0:	d0f9      	beq.n	4013d6 <hsmci_read_word+0x3a>
	return true;
  4013e2:	2001      	movs	r0, #1
  4013e4:	bd08      	pop	{r3, pc}
			hsmci_reset();
  4013e6:	4b09      	ldr	r3, [pc, #36]	; (40140c <hsmci_read_word+0x70>)
  4013e8:	4798      	blx	r3
			return false;
  4013ea:	2000      	movs	r0, #0
  4013ec:	bd08      	pop	{r3, pc}
			hsmci_reset();
  4013ee:	4b07      	ldr	r3, [pc, #28]	; (40140c <hsmci_read_word+0x70>)
  4013f0:	4798      	blx	r3
			return false;
  4013f2:	2000      	movs	r0, #0
  4013f4:	bd08      	pop	{r3, pc}
		return true;
  4013f6:	2001      	movs	r0, #1
}
  4013f8:	bd08      	pop	{r3, pc}
  4013fa:	bf00      	nop
  4013fc:	c0600000 	.word	0xc0600000
  401400:	20400a28 	.word	0x20400a28
  401404:	20400a22 	.word	0x20400a22
  401408:	20400a24 	.word	0x20400a24
  40140c:	00401089 	.word	0x00401089

00401410 <hsmci_start_read_blocks>:
#endif // HSMCI_MR_PDCMODE

#if (SAMV70 || SAMV71 || SAME70 || SAMS70)
#ifdef HSMCI_DMA_DMAEN
bool hsmci_start_read_blocks(void *dest, uint16_t nb_block)
{
  401410:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  401414:	b088      	sub	sp, #32
  401416:	4604      	mov	r4, r0
  401418:	460d      	mov	r5, r1
	xdmac_channel_config_t p_cfg = {0, 0, 0, 0, 0, 0, 0, 0};
  40141a:	2220      	movs	r2, #32
  40141c:	2100      	movs	r1, #0
  40141e:	4668      	mov	r0, sp
  401420:	4b30      	ldr	r3, [pc, #192]	; (4014e4 <hsmci_start_read_blocks+0xd4>)
  401422:	4798      	blx	r3
 */
static inline void xdmac_channel_disable(Xdmac *xdmac, uint32_t channel_num)
{
	Assert(xdmac);
	Assert(channel_num < XDMACCHID_NUMBER);
	xdmac->XDMAC_GD =(XDMAC_GD_DI0 << channel_num);
  401424:	2201      	movs	r2, #1
  401426:	4b30      	ldr	r3, [pc, #192]	; (4014e8 <hsmci_start_read_blocks+0xd8>)
  401428:	621a      	str	r2, [r3, #32]
	Assert(nb_block);
	Assert(dest);

	xdmac_channel_disable(XDMAC, CONF_HSMCI_XDMAC_CHANNEL);

	nb_data = nb_block * hsmci_block_size;
  40142a:	4b30      	ldr	r3, [pc, #192]	; (4014ec <hsmci_start_read_blocks+0xdc>)
  40142c:	881b      	ldrh	r3, [r3, #0]
  40142e:	fb05 f503 	mul.w	r5, r5, r3

	if((uint32_t)dest & 3) {
  401432:	f014 0f03 	tst.w	r4, #3
  401436:	d14a      	bne.n	4014ce <hsmci_start_read_blocks+0xbe>
						| XDMAC_CC_DAM_INCREMENTED_AM
						| XDMAC_CC_PERID(CONF_HSMCI_XDMAC_CHANNEL);
		p_cfg.mbr_ubc = nb_data;
		HSMCI->HSMCI_MR |= HSMCI_MR_FBYTE;
	} else {
		p_cfg.mbr_cfg = XDMAC_CC_TYPE_PER_TRAN
  401438:	4b2d      	ldr	r3, [pc, #180]	; (4014f0 <hsmci_start_read_blocks+0xe0>)
  40143a:	9303      	str	r3, [sp, #12]
						| XDMAC_CC_SIF_AHB_IF1
						| XDMAC_CC_DIF_AHB_IF0
						| XDMAC_CC_SAM_FIXED_AM
						| XDMAC_CC_DAM_INCREMENTED_AM
						| XDMAC_CC_PERID(CONF_HSMCI_XDMAC_CHANNEL);
		p_cfg.mbr_ubc = nb_data / 4;
  40143c:	08ab      	lsrs	r3, r5, #2
  40143e:	9300      	str	r3, [sp, #0]
		HSMCI->HSMCI_MR &= ~HSMCI_MR_FBYTE;
  401440:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
  401444:	6853      	ldr	r3, [r2, #4]
  401446:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
  40144a:	6053      	str	r3, [r2, #4]
	}
	p_cfg.mbr_sa = (uint32_t)&(HSMCI->HSMCI_FIFO[0]);
  40144c:	4b29      	ldr	r3, [pc, #164]	; (4014f4 <hsmci_start_read_blocks+0xe4>)
  40144e:	9301      	str	r3, [sp, #4]
	p_cfg.mbr_da = (uint32_t)dest;
  401450:	9402      	str	r4, [sp, #8]
	xdmac_configure_transfer(XDMAC, CONF_HSMCI_XDMAC_CHANNEL, &p_cfg);
  401452:	466a      	mov	r2, sp
  401454:	2100      	movs	r1, #0
  401456:	4824      	ldr	r0, [pc, #144]	; (4014e8 <hsmci_start_read_blocks+0xd8>)
  401458:	4b27      	ldr	r3, [pc, #156]	; (4014f8 <hsmci_start_read_blocks+0xe8>)
  40145a:	4798      	blx	r3
{
  #if (__DCACHE_PRESENT == 1)
    uint32_t ccsidr, sshift, wshift, sw;
    uint32_t sets, ways;

    ccsidr  = SCB->CCSIDR;
  40145c:	4b27      	ldr	r3, [pc, #156]	; (4014fc <hsmci_start_read_blocks+0xec>)
  40145e:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
    sets    = CCSIDR_SETS(ccsidr);
  401462:	f3c3 374e 	ubfx	r7, r3, #13, #15
    sshift  = CCSIDR_LSSHIFT(ccsidr) + 4;
  401466:	f003 0007 	and.w	r0, r3, #7
  40146a:	3004      	adds	r0, #4
    ways    = CCSIDR_WAYS(ccsidr);
  40146c:	f3c3 0ec9 	ubfx	lr, r3, #3, #10
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE uint8_t __CLZ(uint32_t value)
{
  uint32_t result;

  __ASM volatile ("clz %0, %1" : "=r" (result) : "r" (value) );
  401470:	fabe fc8e 	clz	ip, lr
    wshift  = __CLZ(ways) & 0x1f;
  401474:	f00c 0c1f 	and.w	ip, ip, #31
  __ASM volatile ("dsb");
  401478:	f3bf 8f4f 	dsb	sy
  40147c:	f04f 34ff 	mov.w	r4, #4294967295
  401480:	fa04 f800 	lsl.w	r8, r4, r0
  401484:	fa07 f000 	lsl.w	r0, r7, r0
  401488:	fa04 f40c 	lsl.w	r4, r4, ip
  40148c:	fa0e fc0c 	lsl.w	ip, lr, ip

    do {                                    // clean & invalidate D-Cache
         int32_t tmpways = ways;
         do {
              sw = ((tmpways << wshift) | (sets << sshift));
              SCB->DCCISW = sw;
  401490:	4e1a      	ldr	r6, [pc, #104]	; (4014fc <hsmci_start_read_blocks+0xec>)
         int32_t tmpways = ways;
  401492:	4672      	mov	r2, lr
  401494:	4663      	mov	r3, ip
              sw = ((tmpways << wshift) | (sets << sshift));
  401496:	ea43 0100 	orr.w	r1, r3, r0
              SCB->DCCISW = sw;
  40149a:	f8c6 1274 	str.w	r1, [r6, #628]	; 0x274
            } while(tmpways--);
  40149e:	3a01      	subs	r2, #1
  4014a0:	4423      	add	r3, r4
  4014a2:	f1b2 3fff 	cmp.w	r2, #4294967295
  4014a6:	d1f6      	bne.n	401496 <hsmci_start_read_blocks+0x86>
        } while(sets--);
  4014a8:	3f01      	subs	r7, #1
  4014aa:	4440      	add	r0, r8
  4014ac:	f1b7 3fff 	cmp.w	r7, #4294967295
  4014b0:	d1ef      	bne.n	401492 <hsmci_start_read_blocks+0x82>
  4014b2:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb");
  4014b6:	f3bf 8f6f 	isb	sy
	xdmac->XDMAC_GE = (XDMAC_GE_EN0 << channel_num);
  4014ba:	2001      	movs	r0, #1
  4014bc:	4b0a      	ldr	r3, [pc, #40]	; (4014e8 <hsmci_start_read_blocks+0xd8>)
  4014be:	61d8      	str	r0, [r3, #28]
	xdmac_channel_enable(XDMAC, CONF_HSMCI_XDMAC_CHANNEL);
	hsmci_transfert_pos += nb_data;
  4014c0:	4a0f      	ldr	r2, [pc, #60]	; (401500 <hsmci_start_read_blocks+0xf0>)
  4014c2:	6813      	ldr	r3, [r2, #0]
  4014c4:	442b      	add	r3, r5
  4014c6:	6013      	str	r3, [r2, #0]
	return true;
}
  4014c8:	b008      	add	sp, #32
  4014ca:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		p_cfg.mbr_cfg = XDMAC_CC_TYPE_PER_TRAN
  4014ce:	4b0d      	ldr	r3, [pc, #52]	; (401504 <hsmci_start_read_blocks+0xf4>)
  4014d0:	9303      	str	r3, [sp, #12]
		p_cfg.mbr_ubc = nb_data;
  4014d2:	9500      	str	r5, [sp, #0]
		HSMCI->HSMCI_MR |= HSMCI_MR_FBYTE;
  4014d4:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
  4014d8:	6853      	ldr	r3, [r2, #4]
  4014da:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
  4014de:	6053      	str	r3, [r2, #4]
  4014e0:	e7b4      	b.n	40144c <hsmci_start_read_blocks+0x3c>
  4014e2:	bf00      	nop
  4014e4:	00409561 	.word	0x00409561
  4014e8:	40078000 	.word	0x40078000
  4014ec:	20400a22 	.word	0x20400a22
  4014f0:	00043001 	.word	0x00043001
  4014f4:	40000200 	.word	0x40000200
  4014f8:	00401795 	.word	0x00401795
  4014fc:	e000ed00 	.word	0xe000ed00
  401500:	20400a28 	.word	0x20400a28
  401504:	00042001 	.word	0x00042001

00401508 <hsmci_wait_end_of_read_blocks>:

bool hsmci_wait_end_of_read_blocks(void)
{
  401508:	b570      	push	{r4, r5, r6, lr}
			hsmci_reset();
			// Disable XDMAC
			xdmac_channel_disable(XDMAC, CONF_HSMCI_XDMAC_CHANNEL);
			return false;
		}
		if (((uint32_t)hsmci_block_size * hsmci_nb_block) > hsmci_transfert_pos) {
  40150a:	4b12      	ldr	r3, [pc, #72]	; (401554 <hsmci_wait_end_of_read_blocks+0x4c>)
  40150c:	881b      	ldrh	r3, [r3, #0]
  40150e:	4a12      	ldr	r2, [pc, #72]	; (401558 <hsmci_wait_end_of_read_blocks+0x50>)
  401510:	8812      	ldrh	r2, [r2, #0]
  401512:	fb02 f203 	mul.w	r2, r2, r3
  401516:	4b11      	ldr	r3, [pc, #68]	; (40155c <hsmci_wait_end_of_read_blocks+0x54>)
  401518:	681c      	ldr	r4, [r3, #0]
		sr = HSMCI->HSMCI_SR;
  40151a:	f04f 4080 	mov.w	r0, #1073741824	; 0x40000000
		if (sr & (HSMCI_SR_UNRE | HSMCI_SR_OVRE | \
  40151e:	4910      	ldr	r1, [pc, #64]	; (401560 <hsmci_wait_end_of_read_blocks+0x58>)
 */
static inline uint32_t xdmac_channel_get_interrupt_status(Xdmac *xdmac, uint32_t channel_num)
{
	Assert(xdmac);
	Assert(channel_num < XDMACCHID_NUMBER);
	return xdmac->XDMAC_CHID[channel_num].XDMAC_CIS;
  401520:	4e10      	ldr	r6, [pc, #64]	; (401564 <hsmci_wait_end_of_read_blocks+0x5c>)
  401522:	e009      	b.n	401538 <hsmci_wait_end_of_read_blocks+0x30>
			hsmci_reset();
  401524:	4b10      	ldr	r3, [pc, #64]	; (401568 <hsmci_wait_end_of_read_blocks+0x60>)
  401526:	4798      	blx	r3
	xdmac->XDMAC_GD =(XDMAC_GD_DI0 << channel_num);
  401528:	2201      	movs	r2, #1
  40152a:	4b0e      	ldr	r3, [pc, #56]	; (401564 <hsmci_wait_end_of_read_blocks+0x5c>)
  40152c:	621a      	str	r2, [r3, #32]
			return false;
  40152e:	2000      	movs	r0, #0
  401530:	bd70      	pop	{r4, r5, r6, pc}
			dma_sr = xdmac_channel_get_interrupt_status(XDMAC, CONF_HSMCI_XDMAC_CHANNEL);
			if (dma_sr & XDMAC_CIS_BIS) {
				return true;
			}
		}
	} while (!(sr & HSMCI_SR_XFRDONE));
  401532:	f013 6f00 	tst.w	r3, #134217728	; 0x8000000
  401536:	d10a      	bne.n	40154e <hsmci_wait_end_of_read_blocks+0x46>
		sr = HSMCI->HSMCI_SR;
  401538:	6c03      	ldr	r3, [r0, #64]	; 0x40
		if (sr & (HSMCI_SR_UNRE | HSMCI_SR_OVRE | \
  40153a:	420b      	tst	r3, r1
  40153c:	d1f2      	bne.n	401524 <hsmci_wait_end_of_read_blocks+0x1c>
		if (((uint32_t)hsmci_block_size * hsmci_nb_block) > hsmci_transfert_pos) {
  40153e:	42a2      	cmp	r2, r4
  401540:	d9f7      	bls.n	401532 <hsmci_wait_end_of_read_blocks+0x2a>
	return xdmac->XDMAC_CHID[channel_num].XDMAC_CIS;
  401542:	6df5      	ldr	r5, [r6, #92]	; 0x5c
			if (dma_sr & XDMAC_CIS_BIS) {
  401544:	f015 0f01 	tst.w	r5, #1
  401548:	d0f3      	beq.n	401532 <hsmci_wait_end_of_read_blocks+0x2a>
				return true;
  40154a:	2001      	movs	r0, #1
	return true;
}
  40154c:	bd70      	pop	{r4, r5, r6, pc}
	return true;
  40154e:	2001      	movs	r0, #1
  401550:	bd70      	pop	{r4, r5, r6, pc}
  401552:	bf00      	nop
  401554:	20400a22 	.word	0x20400a22
  401558:	20400a24 	.word	0x20400a24
  40155c:	20400a28 	.word	0x20400a28
  401560:	c0600000 	.word	0xc0600000
  401564:	40078000 	.word	0x40078000
  401568:	00401089 	.word	0x00401089

0040156c <hsmci_start_write_blocks>:

bool hsmci_start_write_blocks(const void *src, uint16_t nb_block)
{
  40156c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  401570:	b088      	sub	sp, #32
  401572:	4604      	mov	r4, r0
  401574:	460d      	mov	r5, r1
	xdmac_channel_config_t p_cfg = {0, 0, 0, 0, 0, 0, 0, 0};
  401576:	2220      	movs	r2, #32
  401578:	2100      	movs	r1, #0
  40157a:	4668      	mov	r0, sp
  40157c:	4b30      	ldr	r3, [pc, #192]	; (401640 <hsmci_start_write_blocks+0xd4>)
  40157e:	4798      	blx	r3
	xdmac->XDMAC_GD =(XDMAC_GD_DI0 << channel_num);
  401580:	2201      	movs	r2, #1
  401582:	4b30      	ldr	r3, [pc, #192]	; (401644 <hsmci_start_write_blocks+0xd8>)
  401584:	621a      	str	r2, [r3, #32]
	Assert(nb_block);
	Assert(dest);

	xdmac_channel_disable(XDMAC, CONF_HSMCI_XDMAC_CHANNEL);

	nb_data = nb_block * hsmci_block_size;
  401586:	4b30      	ldr	r3, [pc, #192]	; (401648 <hsmci_start_write_blocks+0xdc>)
  401588:	881b      	ldrh	r3, [r3, #0]
  40158a:	fb05 f503 	mul.w	r5, r5, r3

	if((uint32_t)src & 3) {
  40158e:	f014 0f03 	tst.w	r4, #3
  401592:	d14a      	bne.n	40162a <hsmci_start_write_blocks+0xbe>
						| XDMAC_CC_DAM_FIXED_AM
						| XDMAC_CC_PERID(CONF_HSMCI_XDMAC_CHANNEL);
		p_cfg.mbr_ubc = nb_data;
		HSMCI->HSMCI_MR |= HSMCI_MR_FBYTE;
	} else {
		p_cfg.mbr_cfg = XDMAC_CC_TYPE_PER_TRAN
  401594:	4b2d      	ldr	r3, [pc, #180]	; (40164c <hsmci_start_write_blocks+0xe0>)
  401596:	9303      	str	r3, [sp, #12]
						| XDMAC_CC_SIF_AHB_IF0
						| XDMAC_CC_DIF_AHB_IF1
						| XDMAC_CC_SAM_INCREMENTED_AM
						| XDMAC_CC_DAM_FIXED_AM
						| XDMAC_CC_PERID(CONF_HSMCI_XDMAC_CHANNEL);
		p_cfg.mbr_ubc = nb_data / 4;
  401598:	08ab      	lsrs	r3, r5, #2
  40159a:	9300      	str	r3, [sp, #0]
		HSMCI->HSMCI_MR &= ~HSMCI_MR_FBYTE;
  40159c:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
  4015a0:	6853      	ldr	r3, [r2, #4]
  4015a2:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
  4015a6:	6053      	str	r3, [r2, #4]
	}
	p_cfg.mbr_sa = (uint32_t)src;
  4015a8:	9401      	str	r4, [sp, #4]
	p_cfg.mbr_da = (uint32_t)&(HSMCI->HSMCI_FIFO[0]);
  4015aa:	4b29      	ldr	r3, [pc, #164]	; (401650 <hsmci_start_write_blocks+0xe4>)
  4015ac:	9302      	str	r3, [sp, #8]
	xdmac_configure_transfer(XDMAC, CONF_HSMCI_XDMAC_CHANNEL, &p_cfg);
  4015ae:	466a      	mov	r2, sp
  4015b0:	2100      	movs	r1, #0
  4015b2:	4824      	ldr	r0, [pc, #144]	; (401644 <hsmci_start_write_blocks+0xd8>)
  4015b4:	4b27      	ldr	r3, [pc, #156]	; (401654 <hsmci_start_write_blocks+0xe8>)
  4015b6:	4798      	blx	r3
    ccsidr  = SCB->CCSIDR;
  4015b8:	4b27      	ldr	r3, [pc, #156]	; (401658 <hsmci_start_write_blocks+0xec>)
  4015ba:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
    sets    = CCSIDR_SETS(ccsidr);
  4015be:	f3c3 374e 	ubfx	r7, r3, #13, #15
    sshift  = CCSIDR_LSSHIFT(ccsidr) + 4;
  4015c2:	f003 0007 	and.w	r0, r3, #7
  4015c6:	3004      	adds	r0, #4
    ways    = CCSIDR_WAYS(ccsidr);
  4015c8:	f3c3 0ec9 	ubfx	lr, r3, #3, #10
  __ASM volatile ("clz %0, %1" : "=r" (result) : "r" (value) );
  4015cc:	fabe fc8e 	clz	ip, lr
    wshift  = __CLZ(ways) & 0x1f;
  4015d0:	f00c 0c1f 	and.w	ip, ip, #31
  __ASM volatile ("dsb");
  4015d4:	f3bf 8f4f 	dsb	sy
  4015d8:	f04f 34ff 	mov.w	r4, #4294967295
  4015dc:	fa04 f800 	lsl.w	r8, r4, r0
  4015e0:	fa07 f000 	lsl.w	r0, r7, r0
  4015e4:	fa04 f40c 	lsl.w	r4, r4, ip
  4015e8:	fa0e fc0c 	lsl.w	ip, lr, ip
              SCB->DCCISW = sw;
  4015ec:	4e1a      	ldr	r6, [pc, #104]	; (401658 <hsmci_start_write_blocks+0xec>)
         int32_t tmpways = ways;
  4015ee:	4672      	mov	r2, lr
  4015f0:	4663      	mov	r3, ip
              sw = ((tmpways << wshift) | (sets << sshift));
  4015f2:	ea43 0100 	orr.w	r1, r3, r0
              SCB->DCCISW = sw;
  4015f6:	f8c6 1274 	str.w	r1, [r6, #628]	; 0x274
            } while(tmpways--);
  4015fa:	3a01      	subs	r2, #1
  4015fc:	4423      	add	r3, r4
  4015fe:	f1b2 3fff 	cmp.w	r2, #4294967295
  401602:	d1f6      	bne.n	4015f2 <hsmci_start_write_blocks+0x86>
        } while(sets--);
  401604:	3f01      	subs	r7, #1
  401606:	4440      	add	r0, r8
  401608:	f1b7 3fff 	cmp.w	r7, #4294967295
  40160c:	d1ef      	bne.n	4015ee <hsmci_start_write_blocks+0x82>
  40160e:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb");
  401612:	f3bf 8f6f 	isb	sy
	xdmac->XDMAC_GE = (XDMAC_GE_EN0 << channel_num);
  401616:	2001      	movs	r0, #1
  401618:	4b0a      	ldr	r3, [pc, #40]	; (401644 <hsmci_start_write_blocks+0xd8>)
  40161a:	61d8      	str	r0, [r3, #28]
	xdmac_channel_enable(XDMAC, CONF_HSMCI_XDMAC_CHANNEL);
	hsmci_transfert_pos += nb_data;
  40161c:	4a0f      	ldr	r2, [pc, #60]	; (40165c <hsmci_start_write_blocks+0xf0>)
  40161e:	6813      	ldr	r3, [r2, #0]
  401620:	442b      	add	r3, r5
  401622:	6013      	str	r3, [r2, #0]
	return true;
}
  401624:	b008      	add	sp, #32
  401626:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		p_cfg.mbr_cfg = XDMAC_CC_TYPE_PER_TRAN
  40162a:	4b0d      	ldr	r3, [pc, #52]	; (401660 <hsmci_start_write_blocks+0xf4>)
  40162c:	9303      	str	r3, [sp, #12]
		p_cfg.mbr_ubc = nb_data;
  40162e:	9500      	str	r5, [sp, #0]
		HSMCI->HSMCI_MR |= HSMCI_MR_FBYTE;
  401630:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
  401634:	6853      	ldr	r3, [r2, #4]
  401636:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
  40163a:	6053      	str	r3, [r2, #4]
  40163c:	e7b4      	b.n	4015a8 <hsmci_start_write_blocks+0x3c>
  40163e:	bf00      	nop
  401640:	00409561 	.word	0x00409561
  401644:	40078000 	.word	0x40078000
  401648:	20400a22 	.word	0x20400a22
  40164c:	00015011 	.word	0x00015011
  401650:	40000200 	.word	0x40000200
  401654:	00401795 	.word	0x00401795
  401658:	e000ed00 	.word	0xe000ed00
  40165c:	20400a28 	.word	0x20400a28
  401660:	00014011 	.word	0x00014011

00401664 <hsmci_wait_end_of_write_blocks>:

bool hsmci_wait_end_of_write_blocks(void)
{
  401664:	b570      	push	{r4, r5, r6, lr}
			hsmci_reset();
			// Disable XDMAC
			xdmac_channel_disable(XDMAC, CONF_HSMCI_XDMAC_CHANNEL);
			return false;
		}
		if (((uint32_t)hsmci_block_size * hsmci_nb_block) > hsmci_transfert_pos) {
  401666:	4b12      	ldr	r3, [pc, #72]	; (4016b0 <hsmci_wait_end_of_write_blocks+0x4c>)
  401668:	881b      	ldrh	r3, [r3, #0]
  40166a:	4a12      	ldr	r2, [pc, #72]	; (4016b4 <hsmci_wait_end_of_write_blocks+0x50>)
  40166c:	8812      	ldrh	r2, [r2, #0]
  40166e:	fb02 f203 	mul.w	r2, r2, r3
  401672:	4b11      	ldr	r3, [pc, #68]	; (4016b8 <hsmci_wait_end_of_write_blocks+0x54>)
  401674:	681c      	ldr	r4, [r3, #0]
		sr = HSMCI->HSMCI_SR;
  401676:	f04f 4080 	mov.w	r0, #1073741824	; 0x40000000
		if (sr & (HSMCI_SR_UNRE | HSMCI_SR_OVRE | \
  40167a:	4910      	ldr	r1, [pc, #64]	; (4016bc <hsmci_wait_end_of_write_blocks+0x58>)
	return xdmac->XDMAC_CHID[channel_num].XDMAC_CIS;
  40167c:	4e10      	ldr	r6, [pc, #64]	; (4016c0 <hsmci_wait_end_of_write_blocks+0x5c>)
  40167e:	e009      	b.n	401694 <hsmci_wait_end_of_write_blocks+0x30>
			hsmci_reset();
  401680:	4b10      	ldr	r3, [pc, #64]	; (4016c4 <hsmci_wait_end_of_write_blocks+0x60>)
  401682:	4798      	blx	r3
	xdmac->XDMAC_GD =(XDMAC_GD_DI0 << channel_num);
  401684:	2201      	movs	r2, #1
  401686:	4b0e      	ldr	r3, [pc, #56]	; (4016c0 <hsmci_wait_end_of_write_blocks+0x5c>)
  401688:	621a      	str	r2, [r3, #32]
			return false;
  40168a:	2000      	movs	r0, #0
  40168c:	bd70      	pop	{r4, r5, r6, pc}
			dma_sr = xdmac_channel_get_interrupt_status(XDMAC, CONF_HSMCI_XDMAC_CHANNEL);
			if (dma_sr & XDMAC_CIS_BIS) {
				return true;
			}
		}
	} while (!(sr & HSMCI_SR_XFRDONE));
  40168e:	f013 6f00 	tst.w	r3, #134217728	; 0x8000000
  401692:	d10a      	bne.n	4016aa <hsmci_wait_end_of_write_blocks+0x46>
		sr = HSMCI->HSMCI_SR;
  401694:	6c03      	ldr	r3, [r0, #64]	; 0x40
		if (sr & (HSMCI_SR_UNRE | HSMCI_SR_OVRE | \
  401696:	420b      	tst	r3, r1
  401698:	d1f2      	bne.n	401680 <hsmci_wait_end_of_write_blocks+0x1c>
		if (((uint32_t)hsmci_block_size * hsmci_nb_block) > hsmci_transfert_pos) {
  40169a:	42a2      	cmp	r2, r4
  40169c:	d9f7      	bls.n	40168e <hsmci_wait_end_of_write_blocks+0x2a>
	return xdmac->XDMAC_CHID[channel_num].XDMAC_CIS;
  40169e:	6df5      	ldr	r5, [r6, #92]	; 0x5c
			if (dma_sr & XDMAC_CIS_BIS) {
  4016a0:	f015 0f01 	tst.w	r5, #1
  4016a4:	d0f3      	beq.n	40168e <hsmci_wait_end_of_write_blocks+0x2a>
				return true;
  4016a6:	2001      	movs	r0, #1

	return true;
}
  4016a8:	bd70      	pop	{r4, r5, r6, pc}
	return true;
  4016aa:	2001      	movs	r0, #1
  4016ac:	bd70      	pop	{r4, r5, r6, pc}
  4016ae:	bf00      	nop
  4016b0:	20400a22 	.word	0x20400a22
  4016b4:	20400a24 	.word	0x20400a24
  4016b8:	20400a28 	.word	0x20400a28
  4016bc:	c0600000 	.word	0xc0600000
  4016c0:	40078000 	.word	0x40078000
  4016c4:	00401089 	.word	0x00401089

004016c8 <rtc_get_time>:
 * \param pul_minute Current minute.
 * \param pul_second Current second.
 */
void rtc_get_time(Rtc *p_rtc, uint32_t *pul_hour, uint32_t *pul_minute,
		uint32_t *pul_second)
{
  4016c8:	b430      	push	{r4, r5}
	uint32_t ul_time;
	uint32_t ul_temp;

	/* Get the current RTC time (multiple reads are necessary to insure a stable value). */
	ul_time = p_rtc->RTC_TIMR;
  4016ca:	6885      	ldr	r5, [r0, #8]
	while (ul_time != p_rtc->RTC_TIMR) {
  4016cc:	6884      	ldr	r4, [r0, #8]
  4016ce:	42a5      	cmp	r5, r4
  4016d0:	d003      	beq.n	4016da <rtc_get_time+0x12>
		ul_time = p_rtc->RTC_TIMR;
  4016d2:	6885      	ldr	r5, [r0, #8]
	while (ul_time != p_rtc->RTC_TIMR) {
  4016d4:	6884      	ldr	r4, [r0, #8]
  4016d6:	42ac      	cmp	r4, r5
  4016d8:	d1fb      	bne.n	4016d2 <rtc_get_time+0xa>
	}

	/* Hour */
	if (pul_hour) {
  4016da:	b161      	cbz	r1, 4016f6 <rtc_get_time+0x2e>
		ul_temp = (ul_time & RTC_TIMR_HOUR_Msk) >> RTC_TIMR_HOUR_Pos;
		*pul_hour = (ul_temp >> BCD_SHIFT) * BCD_FACTOR + (ul_temp & BCD_MASK);
  4016dc:	f3c4 5001 	ubfx	r0, r4, #20, #2
  4016e0:	eb00 0580 	add.w	r5, r0, r0, lsl #2
  4016e4:	f3c4 4003 	ubfx	r0, r4, #16, #4
  4016e8:	eb00 0045 	add.w	r0, r0, r5, lsl #1

		if ((ul_time & RTC_TIMR_AMPM) == RTC_TIMR_AMPM) {
  4016ec:	f414 0f80 	tst.w	r4, #4194304	; 0x400000
			*pul_hour += 12;
  4016f0:	bf18      	it	ne
  4016f2:	300c      	addne	r0, #12
  4016f4:	6008      	str	r0, [r1, #0]
		}
	}

	/* Minute */
	if (pul_minute) {
  4016f6:	b142      	cbz	r2, 40170a <rtc_get_time+0x42>
		ul_temp = (ul_time & RTC_TIMR_MIN_Msk) >> RTC_TIMR_MIN_Pos;
		*pul_minute = (ul_temp >> BCD_SHIFT) * BCD_FACTOR +  (ul_temp & BCD_MASK);
  4016f8:	f3c4 3102 	ubfx	r1, r4, #12, #3
  4016fc:	eb01 0181 	add.w	r1, r1, r1, lsl #2
  401700:	f3c4 2003 	ubfx	r0, r4, #8, #4
  401704:	eb00 0141 	add.w	r1, r0, r1, lsl #1
  401708:	6011      	str	r1, [r2, #0]
	}

	/* Second */
	if (pul_second) {
  40170a:	b143      	cbz	r3, 40171e <rtc_get_time+0x56>
		ul_temp = (ul_time & RTC_TIMR_SEC_Msk) >> RTC_TIMR_SEC_Pos;
		*pul_second = (ul_temp >> BCD_SHIFT) * BCD_FACTOR + (ul_temp & BCD_MASK);
  40170c:	f3c4 1202 	ubfx	r2, r4, #4, #3
  401710:	eb02 0282 	add.w	r2, r2, r2, lsl #2
  401714:	f004 040f 	and.w	r4, r4, #15
  401718:	eb04 0442 	add.w	r4, r4, r2, lsl #1
  40171c:	601c      	str	r4, [r3, #0]
	}
}
  40171e:	bc30      	pop	{r4, r5}
  401720:	4770      	bx	lr

00401722 <rtc_get_date>:
 * \param pul_day Current day.
 * \param pul_week Current day in current week.
 */
void rtc_get_date(Rtc *p_rtc, uint32_t *pul_year, uint32_t *pul_month,
		uint32_t *pul_day, uint32_t *pul_week)
{
  401722:	b4f0      	push	{r4, r5, r6, r7}
  401724:	9e04      	ldr	r6, [sp, #16]
	uint32_t ul_date;
	uint32_t ul_cent;
	uint32_t ul_temp;

	/* Get the current date (multiple reads are necessary to insure a stable value). */
	ul_date = p_rtc->RTC_CALR;
  401726:	68c5      	ldr	r5, [r0, #12]
	while (ul_date != p_rtc->RTC_CALR) {
  401728:	68c4      	ldr	r4, [r0, #12]
  40172a:	42a5      	cmp	r5, r4
  40172c:	d003      	beq.n	401736 <rtc_get_date+0x14>
		ul_date = p_rtc->RTC_CALR;
  40172e:	68c5      	ldr	r5, [r0, #12]
	while (ul_date != p_rtc->RTC_CALR) {
  401730:	68c4      	ldr	r4, [r0, #12]
  401732:	42ac      	cmp	r4, r5
  401734:	d1fb      	bne.n	40172e <rtc_get_date+0xc>
	}

	/* Retrieve year */
	if (pul_year) {
  401736:	b199      	cbz	r1, 401760 <rtc_get_date+0x3e>
		ul_temp = (ul_date & RTC_CALR_CENT_Msk) >> RTC_CALR_CENT_Pos;
		ul_cent = (ul_temp >> BCD_SHIFT) * BCD_FACTOR + (ul_temp & BCD_MASK);
		ul_temp = (ul_date & RTC_CALR_YEAR_Msk) >> RTC_CALR_YEAR_Pos;
		*pul_year = (ul_cent * BCD_FACTOR * BCD_FACTOR) +
				(ul_temp >> BCD_SHIFT) * BCD_FACTOR + (ul_temp & BCD_MASK);
  401738:	f3c4 3003 	ubfx	r0, r4, #12, #4
  40173c:	eb00 0080 	add.w	r0, r0, r0, lsl #2
  401740:	f3c4 2703 	ubfx	r7, r4, #8, #4
  401744:	eb07 0740 	add.w	r7, r7, r0, lsl #1
		ul_cent = (ul_temp >> BCD_SHIFT) * BCD_FACTOR + (ul_temp & BCD_MASK);
  401748:	f3c4 1002 	ubfx	r0, r4, #4, #3
  40174c:	eb00 0580 	add.w	r5, r0, r0, lsl #2
  401750:	f004 000f 	and.w	r0, r4, #15
  401754:	eb00 0045 	add.w	r0, r0, r5, lsl #1
				(ul_temp >> BCD_SHIFT) * BCD_FACTOR + (ul_temp & BCD_MASK);
  401758:	2564      	movs	r5, #100	; 0x64
  40175a:	fb05 7000 	mla	r0, r5, r0, r7
		*pul_year = (ul_cent * BCD_FACTOR * BCD_FACTOR) +
  40175e:	6008      	str	r0, [r1, #0]
	}

	/* Retrieve month */
	if (pul_month) {
  401760:	b142      	cbz	r2, 401774 <rtc_get_date+0x52>
		ul_temp = (ul_date & RTC_CALR_MONTH_Msk) >> RTC_CALR_MONTH_Pos;
		*pul_month = (ul_temp >> BCD_SHIFT) * BCD_FACTOR + (ul_temp & BCD_MASK);
  401762:	f3c4 5000 	ubfx	r0, r4, #20, #1
  401766:	0081      	lsls	r1, r0, #2
  401768:	4408      	add	r0, r1
  40176a:	f3c4 4103 	ubfx	r1, r4, #16, #4
  40176e:	eb01 0140 	add.w	r1, r1, r0, lsl #1
  401772:	6011      	str	r1, [r2, #0]
	}

	/* Retrieve day */
	if (pul_day) {
  401774:	b143      	cbz	r3, 401788 <rtc_get_date+0x66>
		ul_temp = (ul_date & RTC_CALR_DATE_Msk) >> RTC_CALR_DATE_Pos;
		*pul_day = (ul_temp >> BCD_SHIFT) * BCD_FACTOR + (ul_temp & BCD_MASK);
  401776:	f3c4 7201 	ubfx	r2, r4, #28, #2
  40177a:	eb02 0282 	add.w	r2, r2, r2, lsl #2
  40177e:	f3c4 6103 	ubfx	r1, r4, #24, #4
  401782:	eb01 0242 	add.w	r2, r1, r2, lsl #1
  401786:	601a      	str	r2, [r3, #0]
	}

	/* Retrieve week */
	if (pul_week) {
  401788:	b116      	cbz	r6, 401790 <rtc_get_date+0x6e>
		*pul_week = ((ul_date & RTC_CALR_DAY_Msk) >> RTC_CALR_DAY_Pos);
  40178a:	f3c4 5442 	ubfx	r4, r4, #21, #3
  40178e:	6034      	str	r4, [r6, #0]
	}
}
  401790:	bcf0      	pop	{r4, r5, r6, r7}
  401792:	4770      	bx	lr

00401794 <xdmac_configure_transfer>:
  401794:	eb00 1181 	add.w	r1, r0, r1, lsl #6
  401798:	6dcb      	ldr	r3, [r1, #92]	; 0x5c
	Assert(xdmac);
	Assert(channel_num < XDMACCHID_NUMBER);
	Assert(cfg);
	
	xdmac_channel_get_interrupt_status( xdmac, channel_num);
	xdmac_channel_set_source_addr(xdmac, channel_num, cfg->mbr_sa);
  40179a:	6853      	ldr	r3, [r2, #4]
 */
static inline void xdmac_channel_set_source_addr(Xdmac *xdmac, uint32_t channel_num, uint32_t src_addr)
{
	Assert(xdmac);
	Assert(channel_num < XDMACCHID_NUMBER);
	xdmac->XDMAC_CHID[channel_num].XDMAC_CSA = src_addr;
  40179c:	660b      	str	r3, [r1, #96]	; 0x60
	xdmac_channel_set_destination_addr(xdmac, channel_num, cfg->mbr_da);
  40179e:	6893      	ldr	r3, [r2, #8]
 */
static inline void xdmac_channel_set_destination_addr(Xdmac *xdmac, uint32_t channel_num, uint32_t dst_addr)
{
	Assert(xdmac);
	Assert(channel_num < XDMACCHID_NUMBER);
	xdmac->XDMAC_CHID[channel_num].XDMAC_CDA = dst_addr;
  4017a0:	664b      	str	r3, [r1, #100]	; 0x64
 */
static inline void xdmac_channel_set_microblock_control(Xdmac *xdmac, uint32_t channel_num, uint32_t ublen)
{
	Assert(xdmac);
	Assert(channel_num < XDMACCHID_NUMBER);
	xdmac->XDMAC_CHID[channel_num].XDMAC_CUBC = XDMAC_CUBC_UBLEN(ublen);
  4017a2:	6813      	ldr	r3, [r2, #0]
  4017a4:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
  4017a8:	670b      	str	r3, [r1, #112]	; 0x70
 */
static inline void xdmac_channel_set_block_control(Xdmac *xdmac, uint32_t channel_num, uint32_t blen)
{
	Assert(xdmac);
	Assert(channel_num < XDMACCHID_NUMBER);
	xdmac->XDMAC_CHID[channel_num].XDMAC_CBC = XDMAC_CBC_BLEN(blen);
  4017aa:	6913      	ldr	r3, [r2, #16]
  4017ac:	f3c3 030b 	ubfx	r3, r3, #0, #12
  4017b0:	674b      	str	r3, [r1, #116]	; 0x74
	xdmac_channel_set_microblock_control(xdmac, channel_num, cfg->mbr_ubc);
	xdmac_channel_set_block_control(xdmac, channel_num, cfg->mbr_bc);
	xdmac_channel_set_datastride_mempattern(xdmac, channel_num, cfg->mbr_ds);
  4017b2:	6953      	ldr	r3, [r2, #20]
 */
static inline void xdmac_channel_set_datastride_mempattern(Xdmac *xdmac, uint32_t channel_num, uint32_t dds_msp)
{
	Assert(xdmac);
	Assert(channel_num < XDMACCHID_NUMBER);
	xdmac->XDMAC_CHID[channel_num].XDMAC_CDS_MSP = dds_msp;
  4017b4:	67cb      	str	r3, [r1, #124]	; 0x7c
static inline void xdmac_channel_set_source_microblock_stride(Xdmac *xdmac,
		uint32_t channel_num, uint32_t subs)
{
	Assert(xdmac);
	Assert(channel_num < XDMACCHID_NUMBER);
	xdmac->XDMAC_CHID[channel_num].XDMAC_CSUS = XDMAC_CSUS_SUBS(subs);
  4017b6:	6993      	ldr	r3, [r2, #24]
  4017b8:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
  4017bc:	f8c1 3080 	str.w	r3, [r1, #128]	; 0x80
static inline void xdmac_channel_set_destination_microblock_stride(Xdmac *xdmac,
		uint32_t channel_num, uint32_t dubs)
{
	Assert(xdmac);
	Assert(channel_num < XDMACCHID_NUMBER);
	xdmac->XDMAC_CHID[channel_num].XDMAC_CDUS = XDMAC_CDUS_DUBS(dubs);
  4017c0:	69d3      	ldr	r3, [r2, #28]
  4017c2:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
  4017c6:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
	xdmac_channel_set_source_microblock_stride(xdmac, channel_num, cfg->mbr_sus);
	xdmac_channel_set_destination_microblock_stride(xdmac, channel_num, cfg->mbr_dus);
	xdmac_channel_set_config(xdmac, channel_num, cfg->mbr_cfg );
  4017ca:	68d3      	ldr	r3, [r2, #12]
	xdmac->XDMAC_CHID[channel_num].XDMAC_CC = config;
  4017cc:	678b      	str	r3, [r1, #120]	; 0x78
  4017ce:	4770      	bx	lr

004017d0 <disk_initialize>:
	/* USB disk with multiple LUNs */
	if (drv > LUN_ID_USB + Lun_usb_get_lun()) {
		return STA_NOINIT;
	}
#else
	if (drv > MAX_LUN) {
  4017d0:	2801      	cmp	r0, #1
  4017d2:	d901      	bls.n	4017d8 <disk_initialize+0x8>
		/* At least one of the LUN should be defined */
		return STA_NOINIT;
  4017d4:	2001      	movs	r0, #1
  4017d6:	4770      	bx	lr
{
  4017d8:	b510      	push	{r4, lr}
  4017da:	4604      	mov	r4, r0
	}
#endif
	/* Check LUN ready (USB disk report CTRL_BUSY then CTRL_GOOD) */
	for (i = 0; i < 2; i ++) {
		mem_status = mem_test_unit_ready(drv);
  4017dc:	4b0a      	ldr	r3, [pc, #40]	; (401808 <disk_initialize+0x38>)
  4017de:	4798      	blx	r3
		if (CTRL_BUSY != mem_status) {
  4017e0:	2803      	cmp	r0, #3
  4017e2:	d106      	bne.n	4017f2 <disk_initialize+0x22>
		mem_status = mem_test_unit_ready(drv);
  4017e4:	4620      	mov	r0, r4
  4017e6:	4b08      	ldr	r3, [pc, #32]	; (401808 <disk_initialize+0x38>)
  4017e8:	4798      	blx	r3
		if (CTRL_BUSY != mem_status) {
  4017ea:	2803      	cmp	r0, #3
  4017ec:	d101      	bne.n	4017f2 <disk_initialize+0x22>
			break;
		}
	}
	if (mem_status != CTRL_GOOD) {
		return STA_NOINIT;
  4017ee:	2001      	movs	r0, #1
  4017f0:	bd10      	pop	{r4, pc}
	if (mem_status != CTRL_GOOD) {
  4017f2:	b938      	cbnz	r0, 401804 <disk_initialize+0x34>
	}

	/* Check Write Protection Status */
	if (mem_wr_protect(drv)) {
  4017f4:	4620      	mov	r0, r4
  4017f6:	4b05      	ldr	r3, [pc, #20]	; (40180c <disk_initialize+0x3c>)
  4017f8:	4798      	blx	r3
  4017fa:	2800      	cmp	r0, #0
		return STA_PROTECT;
	}

	/* The memory should already be initialized */
	return 0;
  4017fc:	bf14      	ite	ne
  4017fe:	2004      	movne	r0, #4
  401800:	2000      	moveq	r0, #0
  401802:	bd10      	pop	{r4, pc}
		return STA_NOINIT;
  401804:	2001      	movs	r0, #1
}
  401806:	bd10      	pop	{r4, pc}
  401808:	00401015 	.word	0x00401015
  40180c:	00401045 	.word	0x00401045

00401810 <disk_status>:
 *
 * \return 0 or disk status in combination of DSTATUS bits
 *         (STA_NOINIT, STA_NODISK, STA_PROTECT).
 */
DSTATUS disk_status(BYTE drv)
{
  401810:	b508      	push	{r3, lr}
	switch (mem_test_unit_ready(drv)) {
  401812:	4b05      	ldr	r3, [pc, #20]	; (401828 <disk_status+0x18>)
  401814:	4798      	blx	r3
  401816:	b120      	cbz	r0, 401822 <disk_status+0x12>
	case CTRL_GOOD:
		return 0;
	case CTRL_NO_PRESENT:
		return STA_NOINIT | STA_NODISK;
	default:
		return STA_NOINIT;
  401818:	2802      	cmp	r0, #2
  40181a:	bf0c      	ite	eq
  40181c:	2003      	moveq	r0, #3
  40181e:	2001      	movne	r0, #1
  401820:	bd08      	pop	{r3, pc}
		return 0;
  401822:	2000      	movs	r0, #0
	}
}
  401824:	bd08      	pop	{r3, pc}
  401826:	bf00      	nop
  401828:	00401015 	.word	0x00401015

0040182c <disk_read>:
 * \param count Number of sectors to read (1..255).
 *
 * \return RES_OK for success, otherwise DRESULT error code.
 */
DRESULT disk_read(BYTE drv, BYTE *buff, DWORD sector, BYTE count)
{
  40182c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  401830:	b083      	sub	sp, #12
  401832:	4680      	mov	r8, r0
  401834:	460d      	mov	r5, r1
  401836:	4614      	mov	r4, r2
  401838:	461f      	mov	r7, r3
#if ACCESS_MEM_TO_RAM
	uint8_t uc_sector_size = mem_sector_size(drv);
  40183a:	4b15      	ldr	r3, [pc, #84]	; (401890 <disk_read+0x64>)
  40183c:	4798      	blx	r3
	uint32_t i;
	uint32_t ul_last_sector_num;

	if (uc_sector_size == 0) {
  40183e:	b918      	cbnz	r0, 401848 <disk_read+0x1c>
		return RES_ERROR;
  401840:	2001      	movs	r0, #1
	return RES_OK;

#else
	return RES_ERROR;
#endif
}
  401842:	b003      	add	sp, #12
  401844:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  401848:	4606      	mov	r6, r0
	mem_read_capacity(drv, &ul_last_sector_num);
  40184a:	a901      	add	r1, sp, #4
  40184c:	4640      	mov	r0, r8
  40184e:	4b11      	ldr	r3, [pc, #68]	; (401894 <disk_read+0x68>)
  401850:	4798      	blx	r3
			(ul_last_sector_num + 1) * uc_sector_size) {
  401852:	46b1      	mov	r9, r6
	if ((sector + count * uc_sector_size) >
  401854:	fb06 4207 	mla	r2, r6, r7, r4
			(ul_last_sector_num + 1) * uc_sector_size) {
  401858:	9b01      	ldr	r3, [sp, #4]
  40185a:	fb03 6306 	mla	r3, r3, r6, r6
	if ((sector + count * uc_sector_size) >
  40185e:	429a      	cmp	r2, r3
  401860:	d901      	bls.n	401866 <disk_read+0x3a>
		return RES_PARERR;
  401862:	2004      	movs	r0, #4
  401864:	e7ed      	b.n	401842 <disk_read+0x16>
	for (i = 0; i < count; i++) {
  401866:	46ba      	mov	sl, r7
  401868:	b177      	cbz	r7, 401888 <disk_read+0x5c>
  40186a:	0276      	lsls	r6, r6, #9
  40186c:	2700      	movs	r7, #0
		if (memory_2_ram(drv, sector + uc_sector_size * i,
  40186e:	f8df b028 	ldr.w	fp, [pc, #40]	; 401898 <disk_read+0x6c>
  401872:	462a      	mov	r2, r5
  401874:	4621      	mov	r1, r4
  401876:	4640      	mov	r0, r8
  401878:	47d8      	blx	fp
  40187a:	b938      	cbnz	r0, 40188c <disk_read+0x60>
	for (i = 0; i < count; i++) {
  40187c:	3701      	adds	r7, #1
  40187e:	444c      	add	r4, r9
  401880:	4435      	add	r5, r6
  401882:	4557      	cmp	r7, sl
  401884:	d1f5      	bne.n	401872 <disk_read+0x46>
  401886:	e7dc      	b.n	401842 <disk_read+0x16>
	return RES_OK;
  401888:	2000      	movs	r0, #0
  40188a:	e7da      	b.n	401842 <disk_read+0x16>
			return RES_ERROR;
  40188c:	2001      	movs	r0, #1
  40188e:	e7d8      	b.n	401842 <disk_read+0x16>
  401890:	0040103d 	.word	0x0040103d
  401894:	00401029 	.word	0x00401029
  401898:	00401059 	.word	0x00401059

0040189c <disk_write>:
 *
 * \return RES_OK for success, otherwise DRESULT error code.
 */
#if _READONLY == 0
DRESULT disk_write(BYTE drv, BYTE const *buff, DWORD sector, BYTE count)
{
  40189c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  4018a0:	b083      	sub	sp, #12
  4018a2:	4680      	mov	r8, r0
  4018a4:	460d      	mov	r5, r1
  4018a6:	4614      	mov	r4, r2
  4018a8:	461f      	mov	r7, r3
#if ACCESS_MEM_TO_RAM
	uint8_t uc_sector_size = mem_sector_size(drv);
  4018aa:	4b15      	ldr	r3, [pc, #84]	; (401900 <disk_write+0x64>)
  4018ac:	4798      	blx	r3
	uint32_t i;
	uint32_t ul_last_sector_num;

	if (uc_sector_size == 0) {
  4018ae:	b918      	cbnz	r0, 4018b8 <disk_write+0x1c>
		return RES_ERROR;
  4018b0:	2001      	movs	r0, #1
	return RES_OK;

#else
	return RES_ERROR;
#endif
}
  4018b2:	b003      	add	sp, #12
  4018b4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  4018b8:	4606      	mov	r6, r0
	mem_read_capacity(drv, &ul_last_sector_num);
  4018ba:	a901      	add	r1, sp, #4
  4018bc:	4640      	mov	r0, r8
  4018be:	4b11      	ldr	r3, [pc, #68]	; (401904 <disk_write+0x68>)
  4018c0:	4798      	blx	r3
			(ul_last_sector_num + 1) * uc_sector_size) {
  4018c2:	46b1      	mov	r9, r6
	if ((sector + count * uc_sector_size) >
  4018c4:	fb06 4207 	mla	r2, r6, r7, r4
			(ul_last_sector_num + 1) * uc_sector_size) {
  4018c8:	9b01      	ldr	r3, [sp, #4]
  4018ca:	fb03 6306 	mla	r3, r3, r6, r6
	if ((sector + count * uc_sector_size) >
  4018ce:	429a      	cmp	r2, r3
  4018d0:	d901      	bls.n	4018d6 <disk_write+0x3a>
		return RES_PARERR;
  4018d2:	2004      	movs	r0, #4
  4018d4:	e7ed      	b.n	4018b2 <disk_write+0x16>
	for (i = 0; i < count; i++) {
  4018d6:	46ba      	mov	sl, r7
  4018d8:	b177      	cbz	r7, 4018f8 <disk_write+0x5c>
  4018da:	0276      	lsls	r6, r6, #9
  4018dc:	2700      	movs	r7, #0
		if (ram_2_memory(drv, sector + uc_sector_size * i,
  4018de:	f8df b028 	ldr.w	fp, [pc, #40]	; 401908 <disk_write+0x6c>
  4018e2:	462a      	mov	r2, r5
  4018e4:	4621      	mov	r1, r4
  4018e6:	4640      	mov	r0, r8
  4018e8:	47d8      	blx	fp
  4018ea:	b938      	cbnz	r0, 4018fc <disk_write+0x60>
	for (i = 0; i < count; i++) {
  4018ec:	3701      	adds	r7, #1
  4018ee:	444c      	add	r4, r9
  4018f0:	4435      	add	r5, r6
  4018f2:	4557      	cmp	r7, sl
  4018f4:	d1f5      	bne.n	4018e2 <disk_write+0x46>
  4018f6:	e7dc      	b.n	4018b2 <disk_write+0x16>
	return RES_OK;
  4018f8:	2000      	movs	r0, #0
  4018fa:	e7da      	b.n	4018b2 <disk_write+0x16>
			return RES_ERROR;
  4018fc:	2001      	movs	r0, #1
  4018fe:	e7d8      	b.n	4018b2 <disk_write+0x16>
  401900:	0040103d 	.word	0x0040103d
  401904:	00401029 	.word	0x00401029
  401908:	00401071 	.word	0x00401071

0040190c <disk_ioctl>:
 * \param buff Buffer to send/receive control data.
 *
 * \return RES_OK for success, otherwise DRESULT error code.
 */
DRESULT disk_ioctl(BYTE drv, BYTE ctrl, void *buff)
{
  40190c:	b510      	push	{r4, lr}
  40190e:	b082      	sub	sp, #8
  401910:	4614      	mov	r4, r2
	DRESULT res = RES_PARERR;

	switch (ctrl) {
  401912:	2903      	cmp	r1, #3
  401914:	d825      	bhi.n	401962 <disk_ioctl+0x56>
  401916:	e8df f001 	tbb	[pc, r1]
  40191a:	071d      	.short	0x071d
  40191c:	020f      	.short	0x020f
	case GET_BLOCK_SIZE:
		*(DWORD *)buff = 1;
  40191e:	2301      	movs	r3, #1
  401920:	6013      	str	r3, [r2, #0]
		res = RES_OK;
  401922:	2000      	movs	r0, #0
	default:
		res = RES_PARERR;
	}

	return res;
}
  401924:	b002      	add	sp, #8
  401926:	bd10      	pop	{r4, pc}
		mem_read_capacity(drv, &ul_last_sector_num);
  401928:	a901      	add	r1, sp, #4
  40192a:	4b11      	ldr	r3, [pc, #68]	; (401970 <disk_ioctl+0x64>)
  40192c:	4798      	blx	r3
		*(DWORD *)buff = ul_last_sector_num + 1;
  40192e:	9b01      	ldr	r3, [sp, #4]
  401930:	3301      	adds	r3, #1
  401932:	6023      	str	r3, [r4, #0]
		res = RES_OK;
  401934:	2000      	movs	r0, #0
	break;
  401936:	e7f5      	b.n	401924 <disk_ioctl+0x18>
		uint8_t uc_sector_size = mem_sector_size(drv);
  401938:	4b0e      	ldr	r3, [pc, #56]	; (401974 <disk_ioctl+0x68>)
  40193a:	4798      	blx	r3
		if ((uc_sector_size != SECTOR_SIZE_512) &&
  40193c:	2808      	cmp	r0, #8
  40193e:	d812      	bhi.n	401966 <disk_ioctl+0x5a>
  401940:	f44f 738b 	mov.w	r3, #278	; 0x116
  401944:	fa23 f000 	lsr.w	r0, r3, r0
				(uc_sector_size != SECTOR_SIZE_2048) &&
  401948:	f010 0f01 	tst.w	r0, #1
  40194c:	d00d      	beq.n	40196a <disk_ioctl+0x5e>
		*(U8 *)buff = uc_sector_size * SECTOR_SIZE_DEFAULT;
  40194e:	2000      	movs	r0, #0
  401950:	7020      	strb	r0, [r4, #0]
	break;
  401952:	e7e7      	b.n	401924 <disk_ioctl+0x18>
		if (mem_test_unit_ready(drv) == CTRL_GOOD) {
  401954:	4b08      	ldr	r3, [pc, #32]	; (401978 <disk_ioctl+0x6c>)
  401956:	4798      	blx	r3
  401958:	2800      	cmp	r0, #0
			res = RES_NOTRDY;
  40195a:	bf0c      	ite	eq
  40195c:	2000      	moveq	r0, #0
  40195e:	2003      	movne	r0, #3
  401960:	e7e0      	b.n	401924 <disk_ioctl+0x18>
		res = RES_PARERR;
  401962:	2004      	movs	r0, #4
  401964:	e7de      	b.n	401924 <disk_ioctl+0x18>
			return RES_ERROR;
  401966:	2001      	movs	r0, #1
  401968:	e7dc      	b.n	401924 <disk_ioctl+0x18>
  40196a:	2001      	movs	r0, #1
  40196c:	e7da      	b.n	401924 <disk_ioctl+0x18>
  40196e:	bf00      	nop
  401970:	00401029 	.word	0x00401029
  401974:	0040103d 	.word	0x0040103d
  401978:	00401015 	.word	0x00401015

0040197c <get_fattime>:
 * bit4:0    Second (0..29)
 *
 * \return Current time.
 */
uint32_t get_fattime(void)
{
  40197c:	b530      	push	{r4, r5, lr}
  40197e:	b08b      	sub	sp, #44	; 0x2c
	uint32_t ul_time;
	uint32_t ul_hour, ul_minute, ul_second;
	uint32_t ul_year, ul_month, ul_day, ul_week;

	/* Retrieve date and time */
	rtc_get_time(RTC, &ul_hour, &ul_minute, &ul_second);
  401980:	4c11      	ldr	r4, [pc, #68]	; (4019c8 <get_fattime+0x4c>)
  401982:	ab07      	add	r3, sp, #28
  401984:	aa08      	add	r2, sp, #32
  401986:	a909      	add	r1, sp, #36	; 0x24
  401988:	4620      	mov	r0, r4
  40198a:	4d10      	ldr	r5, [pc, #64]	; (4019cc <get_fattime+0x50>)
  40198c:	47a8      	blx	r5
	rtc_get_date(RTC, &ul_year, &ul_month, &ul_day, &ul_week);
  40198e:	ab03      	add	r3, sp, #12
  401990:	9300      	str	r3, [sp, #0]
  401992:	ab04      	add	r3, sp, #16
  401994:	aa05      	add	r2, sp, #20
  401996:	a906      	add	r1, sp, #24
  401998:	4620      	mov	r0, r4
  40199a:	4c0d      	ldr	r4, [pc, #52]	; (4019d0 <get_fattime+0x54>)
  40199c:	47a0      	blx	r4

	ul_time = ((ul_year - 1980) << 25)
			| (ul_month << 21)
			| (ul_day << 16)
  40199e:	9b04      	ldr	r3, [sp, #16]
  4019a0:	041b      	lsls	r3, r3, #16
	ul_time = ((ul_year - 1980) << 25)
  4019a2:	9805      	ldr	r0, [sp, #20]
  4019a4:	ea43 5340 	orr.w	r3, r3, r0, lsl #21
  4019a8:	9809      	ldr	r0, [sp, #36]	; 0x24
  4019aa:	ea43 23c0 	orr.w	r3, r3, r0, lsl #11
  4019ae:	9808      	ldr	r0, [sp, #32]
  4019b0:	ea43 1340 	orr.w	r3, r3, r0, lsl #5
  4019b4:	9807      	ldr	r0, [sp, #28]
  4019b6:	ea43 0350 	orr.w	r3, r3, r0, lsr #1
  4019ba:	9806      	ldr	r0, [sp, #24]
  4019bc:	f2a0 70bc 	subw	r0, r0, #1980	; 0x7bc
			| (ul_hour << 11)
			| (ul_minute << 5)
			| ((ul_second >> 1) << 0);

	return ul_time;
}
  4019c0:	ea43 6040 	orr.w	r0, r3, r0, lsl #25
  4019c4:	b00b      	add	sp, #44	; 0x2c
  4019c6:	bd30      	pop	{r4, r5, pc}
  4019c8:	400e1860 	.word	0x400e1860
  4019cc:	004016c9 	.word	0x004016c9
  4019d0:	00401723 	.word	0x00401723

004019d4 <mem_cpy>:
		*(int*)d = *(int*)s;
		d += sizeof(int); s += sizeof(int);
		cnt -= sizeof(int);
	}
#endif
	while (cnt--)
  4019d4:	b13a      	cbz	r2, 4019e6 <mem_cpy+0x12>
  4019d6:	3801      	subs	r0, #1
  4019d8:	188a      	adds	r2, r1, r2
		*d++ = *s++;
  4019da:	f811 3b01 	ldrb.w	r3, [r1], #1
  4019de:	f800 3f01 	strb.w	r3, [r0, #1]!
	while (cnt--)
  4019e2:	4291      	cmp	r1, r2
  4019e4:	d1f9      	bne.n	4019da <mem_cpy+0x6>
  4019e6:	4770      	bx	lr

004019e8 <mem_set>:
/* Fill memory */
static
void mem_set (void* dst, int val, UINT cnt) {
	BYTE *d = (BYTE*)dst;

	while (cnt--)
  4019e8:	b122      	cbz	r2, 4019f4 <mem_set+0xc>
  4019ea:	1882      	adds	r2, r0, r2
		*d++ = (BYTE)val;
  4019ec:	f800 1b01 	strb.w	r1, [r0], #1
	while (cnt--)
  4019f0:	4282      	cmp	r2, r0
  4019f2:	d1fb      	bne.n	4019ec <mem_set+0x4>
  4019f4:	4770      	bx	lr

004019f6 <clust2sect>:
static DWORD clust2sect (	/* !=0: Sector number, 0: Failed - invalid cluster# */
	FATFS *fs,		/* File system object */
	DWORD clst		/* Cluster# to be converted */
)
{
	clst -= 2;
  4019f6:	3902      	subs	r1, #2
	if (clst >= (fs->n_fatent - 2)) return 0;		/* Invalid cluster# */
  4019f8:	6983      	ldr	r3, [r0, #24]
  4019fa:	3b02      	subs	r3, #2
  4019fc:	4299      	cmp	r1, r3
  4019fe:	d204      	bcs.n	401a0a <clust2sect+0x14>
	return clst * fs->csize + fs->database;
  401a00:	7883      	ldrb	r3, [r0, #2]
  401a02:	6a80      	ldr	r0, [r0, #40]	; 0x28
  401a04:	fb01 0003 	mla	r0, r1, r3, r0
  401a08:	4770      	bx	lr
	if (clst >= (fs->n_fatent - 2)) return 0;		/* Invalid cluster# */
  401a0a:	2000      	movs	r0, #0
}
  401a0c:	4770      	bx	lr

00401a0e <sum_sfn>:
#if _USE_LFN
static
BYTE sum_sfn (
	const BYTE *dir		/* Ptr to directory entry */
)
{
  401a0e:	4602      	mov	r2, r0
  401a10:	f100 010b 	add.w	r1, r0, #11
	BYTE sum = 0;
  401a14:	2000      	movs	r0, #0
	UINT n = 11;

	do sum = (sum >> 1) + (sum << 7) + *dir++; while (--n);
  401a16:	01c3      	lsls	r3, r0, #7
  401a18:	ea43 0350 	orr.w	r3, r3, r0, lsr #1
  401a1c:	f812 0b01 	ldrb.w	r0, [r2], #1
  401a20:	fa50 f383 	uxtab	r3, r0, r3
  401a24:	b2d8      	uxtb	r0, r3
  401a26:	428a      	cmp	r2, r1
  401a28:	d1f5      	bne.n	401a16 <sum_sfn+0x8>
	return sum;
}
  401a2a:	4770      	bx	lr

00401a2c <validate>:
FRESULT validate (	/* FR_OK(0): The object is valid, !=0: Invalid */
	FATFS *fs,		/* Pointer to the file system object */
	WORD id			/* Member id of the target object to be checked */
)
{
	if (!fs || !fs->fs_type || fs->id != id)
  401a2c:	b198      	cbz	r0, 401a56 <validate+0x2a>
{
  401a2e:	b508      	push	{r3, lr}
	if (!fs || !fs->fs_type || fs->id != id)
  401a30:	7802      	ldrb	r2, [r0, #0]
  401a32:	b90a      	cbnz	r2, 401a38 <validate+0xc>
		return FR_INVALID_OBJECT;
  401a34:	2009      	movs	r0, #9
  401a36:	bd08      	pop	{r3, pc}
	if (!fs || !fs->fs_type || fs->id != id)
  401a38:	88c2      	ldrh	r2, [r0, #6]
  401a3a:	428a      	cmp	r2, r1
  401a3c:	d001      	beq.n	401a42 <validate+0x16>
		return FR_INVALID_OBJECT;
  401a3e:	2009      	movs	r0, #9

	if (disk_status(fs->drv) & STA_NOINIT)
		return FR_NOT_READY;

	return FR_OK;
}
  401a40:	bd08      	pop	{r3, pc}
	if (disk_status(fs->drv) & STA_NOINIT)
  401a42:	7840      	ldrb	r0, [r0, #1]
  401a44:	4b05      	ldr	r3, [pc, #20]	; (401a5c <validate+0x30>)
  401a46:	4798      	blx	r3
  401a48:	f000 0001 	and.w	r0, r0, #1
	return FR_OK;
  401a4c:	2800      	cmp	r0, #0
  401a4e:	bf14      	ite	ne
  401a50:	2003      	movne	r0, #3
  401a52:	2000      	moveq	r0, #0
  401a54:	bd08      	pop	{r3, pc}
		return FR_INVALID_OBJECT;
  401a56:	2009      	movs	r0, #9
  401a58:	4770      	bx	lr
  401a5a:	bf00      	nop
  401a5c:	00401811 	.word	0x00401811

00401a60 <check_fs>:
{
  401a60:	b538      	push	{r3, r4, r5, lr}
  401a62:	4604      	mov	r4, r0
	if (disk_read(fs->drv, fs->win, sect, 1) != RES_OK)	/* Load boot record */
  401a64:	2301      	movs	r3, #1
  401a66:	460a      	mov	r2, r1
  401a68:	f100 0130 	add.w	r1, r0, #48	; 0x30
  401a6c:	7840      	ldrb	r0, [r0, #1]
  401a6e:	4d1d      	ldr	r5, [pc, #116]	; (401ae4 <check_fs+0x84>)
  401a70:	47a8      	blx	r5
  401a72:	b108      	cbz	r0, 401a78 <check_fs+0x18>
		return 3;
  401a74:	2003      	movs	r0, #3
  401a76:	bd38      	pop	{r3, r4, r5, pc}
	if (LD_WORD(&fs->win[BS_55AA]) != 0xAA55)		/* Check record signature (always placed at offset 510 even if the sector size is >512) */
  401a78:	f894 222f 	ldrb.w	r2, [r4, #559]	; 0x22f
  401a7c:	f894 322e 	ldrb.w	r3, [r4, #558]	; 0x22e
  401a80:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
  401a84:	b21b      	sxth	r3, r3
  401a86:	4a18      	ldr	r2, [pc, #96]	; (401ae8 <check_fs+0x88>)
  401a88:	4293      	cmp	r3, r2
  401a8a:	d001      	beq.n	401a90 <check_fs+0x30>
		return 2;
  401a8c:	2002      	movs	r0, #2
  401a8e:	bd38      	pop	{r3, r4, r5, pc}
	if ((LD_DWORD(&fs->win[BS_FilSysType]) & 0xFFFFFF) == 0x544146)	/* Check "FAT" string */
  401a90:	f894 2069 	ldrb.w	r2, [r4, #105]	; 0x69
  401a94:	f894 3068 	ldrb.w	r3, [r4, #104]	; 0x68
  401a98:	041b      	lsls	r3, r3, #16
  401a9a:	ea43 6302 	orr.w	r3, r3, r2, lsl #24
  401a9e:	f894 2066 	ldrb.w	r2, [r4, #102]	; 0x66
  401aa2:	4313      	orrs	r3, r2
  401aa4:	f894 2067 	ldrb.w	r2, [r4, #103]	; 0x67
  401aa8:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
  401aac:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
  401ab0:	4a0e      	ldr	r2, [pc, #56]	; (401aec <check_fs+0x8c>)
  401ab2:	4293      	cmp	r3, r2
  401ab4:	d013      	beq.n	401ade <check_fs+0x7e>
	if ((LD_DWORD(&fs->win[BS_FilSysType32]) & 0xFFFFFF) == 0x544146)
  401ab6:	f894 3085 	ldrb.w	r3, [r4, #133]	; 0x85
  401aba:	f894 0084 	ldrb.w	r0, [r4, #132]	; 0x84
  401abe:	0400      	lsls	r0, r0, #16
  401ac0:	ea40 6003 	orr.w	r0, r0, r3, lsl #24
  401ac4:	f894 3082 	ldrb.w	r3, [r4, #130]	; 0x82
  401ac8:	4318      	orrs	r0, r3
  401aca:	f894 3083 	ldrb.w	r3, [r4, #131]	; 0x83
  401ace:	ea40 2003 	orr.w	r0, r0, r3, lsl #8
  401ad2:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
		return 3;
  401ad6:	1a80      	subs	r0, r0, r2
  401ad8:	bf18      	it	ne
  401ada:	2001      	movne	r0, #1
  401adc:	bd38      	pop	{r3, r4, r5, pc}
		return 0;
  401ade:	2000      	movs	r0, #0
}
  401ae0:	bd38      	pop	{r3, r4, r5, pc}
  401ae2:	bf00      	nop
  401ae4:	0040182d 	.word	0x0040182d
  401ae8:	ffffaa55 	.word	0xffffaa55
  401aec:	00544146 	.word	0x00544146

00401af0 <chk_mounted>:
{
  401af0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	const TCHAR *p = *path;
  401af2:	6803      	ldr	r3, [r0, #0]
	vol = p[0] - '0';					/* Is there a drive number? */
  401af4:	781c      	ldrb	r4, [r3, #0]
  401af6:	3c30      	subs	r4, #48	; 0x30
	if (vol <= 9 && p[1] == ':') {		/* Found a drive number, get and strip it */
  401af8:	2c09      	cmp	r4, #9
  401afa:	d80a      	bhi.n	401b12 <chk_mounted+0x22>
  401afc:	785d      	ldrb	r5, [r3, #1]
  401afe:	2d3a      	cmp	r5, #58	; 0x3a
  401b00:	d001      	beq.n	401b06 <chk_mounted+0x16>
  401b02:	2400      	movs	r4, #0
  401b04:	e006      	b.n	401b14 <chk_mounted+0x24>
		p += 2; *path = p;				/* Return pointer to the path name */
  401b06:	3302      	adds	r3, #2
  401b08:	6003      	str	r3, [r0, #0]
	if (vol >= _VOLUMES) 				/* Is the drive number valid? */
  401b0a:	2c07      	cmp	r4, #7
  401b0c:	d902      	bls.n	401b14 <chk_mounted+0x24>
		return FR_INVALID_DRIVE;
  401b0e:	200b      	movs	r0, #11
  401b10:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  401b12:	2400      	movs	r4, #0
	*rfs = fs = FatFs[vol];				/* Return pointer to the corresponding file system object */
  401b14:	4bae      	ldr	r3, [pc, #696]	; (401dd0 <chk_mounted+0x2e0>)
  401b16:	f853 5024 	ldr.w	r5, [r3, r4, lsl #2]
  401b1a:	600d      	str	r5, [r1, #0]
	if (!fs) return FR_NOT_ENABLED;		/* Is the file system object available? */
  401b1c:	2d00      	cmp	r5, #0
  401b1e:	f000 813e 	beq.w	401d9e <chk_mounted+0x2ae>
  401b22:	4616      	mov	r6, r2
	if (fs->fs_type) {					/* If the logical drive has been mounted */
  401b24:	782b      	ldrb	r3, [r5, #0]
  401b26:	b17b      	cbz	r3, 401b48 <chk_mounted+0x58>
		stat = disk_status(fs->drv);
  401b28:	7868      	ldrb	r0, [r5, #1]
  401b2a:	4baa      	ldr	r3, [pc, #680]	; (401dd4 <chk_mounted+0x2e4>)
  401b2c:	4798      	blx	r3
		if (!(stat & STA_NOINIT)) {		/* and the physical drive is kept initialized (has not been changed), */
  401b2e:	f010 0f01 	tst.w	r0, #1
  401b32:	d109      	bne.n	401b48 <chk_mounted+0x58>
			if (!_FS_READONLY && chk_wp && (stat & STA_PROTECT))	/* Check write protection if needed */
  401b34:	2e00      	cmp	r6, #0
  401b36:	f000 8134 	beq.w	401da2 <chk_mounted+0x2b2>
  401b3a:	f000 0004 	and.w	r0, r0, #4
				return FR_WRITE_PROTECTED;
  401b3e:	2800      	cmp	r0, #0
  401b40:	bf0c      	ite	eq
  401b42:	2000      	moveq	r0, #0
  401b44:	200a      	movne	r0, #10
  401b46:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	fs->fs_type = 0;					/* Clear the file system object */
  401b48:	2300      	movs	r3, #0
  401b4a:	702b      	strb	r3, [r5, #0]
	fs->drv = LD2PD(vol);				/* Bind the logical drive and a physical drive */
  401b4c:	b2e0      	uxtb	r0, r4
  401b4e:	7068      	strb	r0, [r5, #1]
	stat = disk_initialize(fs->drv);	/* Initialize low level disk I/O layer */
  401b50:	4ba1      	ldr	r3, [pc, #644]	; (401dd8 <chk_mounted+0x2e8>)
  401b52:	4798      	blx	r3
	if (stat & STA_NOINIT)				/* Check if the initialization succeeded */
  401b54:	f010 0f01 	tst.w	r0, #1
  401b58:	d001      	beq.n	401b5e <chk_mounted+0x6e>
		return FR_NOT_READY;			/* Failed to initialize due to no media or hard error */
  401b5a:	2003      	movs	r0, #3
  401b5c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	if (!_FS_READONLY && chk_wp && (stat & STA_PROTECT))	/* Check disk write protection if needed */
  401b5e:	b126      	cbz	r6, 401b6a <chk_mounted+0x7a>
  401b60:	f010 0f04 	tst.w	r0, #4
  401b64:	d001      	beq.n	401b6a <chk_mounted+0x7a>
		return FR_WRITE_PROTECTED;
  401b66:	200a      	movs	r0, #10
  401b68:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	fmt = check_fs(fs, bsect = 0);		/* Load sector 0 and check if it is an FAT-VBR (in SFD) */
  401b6a:	2100      	movs	r1, #0
  401b6c:	4628      	mov	r0, r5
  401b6e:	4b9b      	ldr	r3, [pc, #620]	; (401ddc <chk_mounted+0x2ec>)
  401b70:	4798      	blx	r3
	if (fmt == 1) {						/* Not an FAT-VBR, the physical drive can be partitioned */
  401b72:	2801      	cmp	r0, #1
  401b74:	d006      	beq.n	401b84 <chk_mounted+0x94>
	fmt = check_fs(fs, bsect = 0);		/* Load sector 0 and check if it is an FAT-VBR (in SFD) */
  401b76:	2400      	movs	r4, #0
	if (fmt == 3) return FR_DISK_ERR;
  401b78:	2803      	cmp	r0, #3
  401b7a:	f000 8114 	beq.w	401da6 <chk_mounted+0x2b6>
	if (fmt) return FR_NO_FILESYSTEM;		/* No FAT volume is found */
  401b7e:	b1c8      	cbz	r0, 401bb4 <chk_mounted+0xc4>
  401b80:	200d      	movs	r0, #13
  401b82:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		if (tbl[4]) {						/* Is the partition existing? */
  401b84:	f895 31f2 	ldrb.w	r3, [r5, #498]	; 0x1f2
  401b88:	b90b      	cbnz	r3, 401b8e <chk_mounted+0x9e>
	if (fmt) return FR_NO_FILESYSTEM;		/* No FAT volume is found */
  401b8a:	200d      	movs	r0, #13
  401b8c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
			bsect = LD_DWORD(&tbl[8]);		/* Partition offset in LBA */
  401b8e:	f895 31f9 	ldrb.w	r3, [r5, #505]	; 0x1f9
  401b92:	f895 41f8 	ldrb.w	r4, [r5, #504]	; 0x1f8
  401b96:	0424      	lsls	r4, r4, #16
  401b98:	ea44 6403 	orr.w	r4, r4, r3, lsl #24
  401b9c:	f895 31f6 	ldrb.w	r3, [r5, #502]	; 0x1f6
  401ba0:	431c      	orrs	r4, r3
  401ba2:	f895 31f7 	ldrb.w	r3, [r5, #503]	; 0x1f7
  401ba6:	ea44 2403 	orr.w	r4, r4, r3, lsl #8
			fmt = check_fs(fs, bsect);		/* Check the partition */
  401baa:	4621      	mov	r1, r4
  401bac:	4628      	mov	r0, r5
  401bae:	4b8b      	ldr	r3, [pc, #556]	; (401ddc <chk_mounted+0x2ec>)
  401bb0:	4798      	blx	r3
  401bb2:	e7e1      	b.n	401b78 <chk_mounted+0x88>
	if (LD_WORD(fs->win+BPB_BytsPerSec) != SS(fs))		/* (BPB_BytsPerSec must be equal to the physical sector size) */
  401bb4:	f895 203c 	ldrb.w	r2, [r5, #60]	; 0x3c
  401bb8:	f895 303b 	ldrb.w	r3, [r5, #59]	; 0x3b
  401bbc:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
  401bc0:	b21b      	sxth	r3, r3
  401bc2:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
  401bc6:	d001      	beq.n	401bcc <chk_mounted+0xdc>
		return FR_NO_FILESYSTEM;
  401bc8:	200d      	movs	r0, #13
  401bca:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	fasize = LD_WORD(fs->win+BPB_FATSz16);				/* Number of sectors per FAT */
  401bcc:	f895 3047 	ldrb.w	r3, [r5, #71]	; 0x47
  401bd0:	f895 2046 	ldrb.w	r2, [r5, #70]	; 0x46
	if (!fasize) fasize = LD_DWORD(fs->win+BPB_FATSz32);
  401bd4:	ea52 2203 	orrs.w	r2, r2, r3, lsl #8
  401bd8:	d10d      	bne.n	401bf6 <chk_mounted+0x106>
  401bda:	f895 3057 	ldrb.w	r3, [r5, #87]	; 0x57
  401bde:	f895 2056 	ldrb.w	r2, [r5, #86]	; 0x56
  401be2:	0412      	lsls	r2, r2, #16
  401be4:	ea42 6203 	orr.w	r2, r2, r3, lsl #24
  401be8:	f895 3054 	ldrb.w	r3, [r5, #84]	; 0x54
  401bec:	431a      	orrs	r2, r3
  401bee:	f895 3055 	ldrb.w	r3, [r5, #85]	; 0x55
  401bf2:	ea42 2203 	orr.w	r2, r2, r3, lsl #8
	fs->fsize = fasize;
  401bf6:	61ea      	str	r2, [r5, #28]
	fs->n_fats = b = fs->win[BPB_NumFATs];				/* Number of FAT copies */
  401bf8:	f895 e040 	ldrb.w	lr, [r5, #64]	; 0x40
  401bfc:	f885 e003 	strb.w	lr, [r5, #3]
	if (b != 1 && b != 2) return FR_NO_FILESYSTEM;		/* (Must be 1 or 2) */
  401c00:	f10e 33ff 	add.w	r3, lr, #4294967295
  401c04:	b2db      	uxtb	r3, r3
  401c06:	2b01      	cmp	r3, #1
  401c08:	d901      	bls.n	401c0e <chk_mounted+0x11e>
  401c0a:	200d      	movs	r0, #13
  401c0c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	fs->csize = b = fs->win[BPB_SecPerClus];			/* Number of sectors per cluster */
  401c0e:	f895 603d 	ldrb.w	r6, [r5, #61]	; 0x3d
  401c12:	70ae      	strb	r6, [r5, #2]
	if (!b || (b & (b - 1))) return FR_NO_FILESYSTEM;	/* (Must be power of 2) */
  401c14:	2e00      	cmp	r6, #0
  401c16:	f000 80c8 	beq.w	401daa <chk_mounted+0x2ba>
  401c1a:	1e73      	subs	r3, r6, #1
  401c1c:	4233      	tst	r3, r6
  401c1e:	d001      	beq.n	401c24 <chk_mounted+0x134>
  401c20:	200d      	movs	r0, #13
  401c22:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	fs->n_rootdir = LD_WORD(fs->win+BPB_RootEntCnt);	/* Number of root directory entries */
  401c24:	f895 3042 	ldrb.w	r3, [r5, #66]	; 0x42
  401c28:	f895 1041 	ldrb.w	r1, [r5, #65]	; 0x41
  401c2c:	ea41 2103 	orr.w	r1, r1, r3, lsl #8
  401c30:	8129      	strh	r1, [r5, #8]
	if (fs->n_rootdir % (SS(fs) / SZ_DIR)) return FR_NO_FILESYSTEM;	/* (BPB_RootEntCnt must be sector aligned) */
  401c32:	f011 0f0f 	tst.w	r1, #15
  401c36:	f040 80ba 	bne.w	401dae <chk_mounted+0x2be>
	tsect = LD_WORD(fs->win+BPB_TotSec16);				/* Number of sectors on the volume */
  401c3a:	f895 0044 	ldrb.w	r0, [r5, #68]	; 0x44
  401c3e:	f895 3043 	ldrb.w	r3, [r5, #67]	; 0x43
	if (!tsect) tsect = LD_DWORD(fs->win+BPB_TotSec32);
  401c42:	ea53 2300 	orrs.w	r3, r3, r0, lsl #8
  401c46:	d10d      	bne.n	401c64 <chk_mounted+0x174>
  401c48:	f895 0053 	ldrb.w	r0, [r5, #83]	; 0x53
  401c4c:	f895 3052 	ldrb.w	r3, [r5, #82]	; 0x52
  401c50:	041b      	lsls	r3, r3, #16
  401c52:	ea43 6300 	orr.w	r3, r3, r0, lsl #24
  401c56:	f895 0050 	ldrb.w	r0, [r5, #80]	; 0x50
  401c5a:	4303      	orrs	r3, r0
  401c5c:	f895 0051 	ldrb.w	r0, [r5, #81]	; 0x51
  401c60:	ea43 2300 	orr.w	r3, r3, r0, lsl #8
	nrsv = LD_WORD(fs->win+BPB_RsvdSecCnt);				/* Number of reserved sectors */
  401c64:	f895 003f 	ldrb.w	r0, [r5, #63]	; 0x3f
  401c68:	f895 703e 	ldrb.w	r7, [r5, #62]	; 0x3e
	if (!nrsv) return FR_NO_FILESYSTEM;					/* (BPB_RsvdSecCnt must not be 0) */
  401c6c:	ea57 2700 	orrs.w	r7, r7, r0, lsl #8
  401c70:	f000 809f 	beq.w	401db2 <chk_mounted+0x2c2>
	fasize *= b;										/* Number of sectors for FAT area */
  401c74:	fb02 fe0e 	mul.w	lr, r2, lr
	sysect = nrsv + fasize + fs->n_rootdir / (SS(fs) / SZ_DIR);	/* RSV+FAT+DIR */
  401c78:	eb07 1011 	add.w	r0, r7, r1, lsr #4
  401c7c:	4470      	add	r0, lr
	if (tsect < sysect) return FR_NO_FILESYSTEM;		/* (Invalid volume size) */
  401c7e:	4283      	cmp	r3, r0
  401c80:	f0c0 8099 	bcc.w	401db6 <chk_mounted+0x2c6>
	nclst = (tsect - sysect) / fs->csize;				/* Number of clusters */
  401c84:	1a1b      	subs	r3, r3, r0
  401c86:	fbb3 f3f6 	udiv	r3, r3, r6
	if (!nclst) return FR_NO_FILESYSTEM;				/* (Invalid volume size) */
  401c8a:	2b00      	cmp	r3, #0
  401c8c:	f000 8095 	beq.w	401dba <chk_mounted+0x2ca>
	fmt = FS_FAT12;
  401c90:	f640 76f5 	movw	r6, #4085	; 0xff5
  401c94:	42b3      	cmp	r3, r6
  401c96:	bf8c      	ite	hi
  401c98:	2602      	movhi	r6, #2
  401c9a:	2601      	movls	r6, #1
	if (nclst >= MIN_FAT32) fmt = FS_FAT32;
  401c9c:	f64f 7cf5 	movw	ip, #65525	; 0xfff5
  401ca0:	4563      	cmp	r3, ip
  401ca2:	f200 80a5 	bhi.w	401df0 <chk_mounted+0x300>
	fs->n_fatent = nclst + 2;							/* Number of FAT entries */
  401ca6:	3302      	adds	r3, #2
  401ca8:	61ab      	str	r3, [r5, #24]
	fs->database = bsect + sysect;						/* Data start sector */
  401caa:	4420      	add	r0, r4
  401cac:	62a8      	str	r0, [r5, #40]	; 0x28
	fs->fatbase = bsect + nrsv; 						/* FAT start sector */
  401cae:	443c      	add	r4, r7
  401cb0:	622c      	str	r4, [r5, #32]
		if (!fs->n_rootdir)	return FR_NO_FILESYSTEM;	/* (BPB_RootEntCnt must not be 0) */
  401cb2:	2900      	cmp	r1, #0
  401cb4:	f000 8089 	beq.w	401dca <chk_mounted+0x2da>
		fs->dirbase = fs->fatbase + fasize;				/* Root directory start sector */
  401cb8:	4474      	add	r4, lr
  401cba:	626c      	str	r4, [r5, #36]	; 0x24
			fs->n_fatent * 2 : fs->n_fatent * 3 / 2 + (fs->n_fatent & 1);
  401cbc:	2e02      	cmp	r6, #2
  401cbe:	d10b      	bne.n	401cd8 <chk_mounted+0x1e8>
  401cc0:	005b      	lsls	r3, r3, #1
	if (fs->fsize < (szbfat + (SS(fs) - 1)) / SS(fs))	/* (BPB_FATSz must not be less than required) */
  401cc2:	f203 13ff 	addw	r3, r3, #511	; 0x1ff
  401cc6:	ebb2 2f53 	cmp.w	r2, r3, lsr #9
  401cca:	d37c      	bcc.n	401dc6 <chk_mounted+0x2d6>
	fs->free_clust = 0xFFFFFFFF;
  401ccc:	f04f 33ff 	mov.w	r3, #4294967295
  401cd0:	612b      	str	r3, [r5, #16]
	fs->last_clust = 0;
  401cd2:	2300      	movs	r3, #0
  401cd4:	60eb      	str	r3, [r5, #12]
  401cd6:	e051      	b.n	401d7c <chk_mounted+0x28c>
			fs->n_fatent * 2 : fs->n_fatent * 3 / 2 + (fs->n_fatent & 1);
  401cd8:	eb03 0143 	add.w	r1, r3, r3, lsl #1
  401cdc:	f003 0301 	and.w	r3, r3, #1
  401ce0:	eb03 0351 	add.w	r3, r3, r1, lsr #1
  401ce4:	e7ed      	b.n	401cc2 <chk_mounted+0x1d2>
			LD_WORD(fs->win+BS_55AA) == 0xAA55 &&
  401ce6:	f895 222f 	ldrb.w	r2, [r5, #559]	; 0x22f
  401cea:	f895 322e 	ldrb.w	r3, [r5, #558]	; 0x22e
  401cee:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
		if (disk_read(fs->drv, fs->win, fs->fsi_sector, 1) == RES_OK &&
  401cf2:	b21b      	sxth	r3, r3
  401cf4:	4a3a      	ldr	r2, [pc, #232]	; (401de0 <chk_mounted+0x2f0>)
  401cf6:	4293      	cmp	r3, r2
  401cf8:	d14b      	bne.n	401d92 <chk_mounted+0x2a2>
			LD_DWORD(fs->win+FSI_LeadSig) == 0x41615252 &&
  401cfa:	f895 2033 	ldrb.w	r2, [r5, #51]	; 0x33
  401cfe:	f895 3032 	ldrb.w	r3, [r5, #50]	; 0x32
  401d02:	041b      	lsls	r3, r3, #16
  401d04:	ea43 6302 	orr.w	r3, r3, r2, lsl #24
  401d08:	f895 2030 	ldrb.w	r2, [r5, #48]	; 0x30
  401d0c:	4313      	orrs	r3, r2
  401d0e:	f895 2031 	ldrb.w	r2, [r5, #49]	; 0x31
  401d12:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
			LD_WORD(fs->win+BS_55AA) == 0xAA55 &&
  401d16:	4a33      	ldr	r2, [pc, #204]	; (401de4 <chk_mounted+0x2f4>)
  401d18:	4293      	cmp	r3, r2
  401d1a:	d13c      	bne.n	401d96 <chk_mounted+0x2a6>
			LD_DWORD(fs->win+FSI_StrucSig) == 0x61417272) {
  401d1c:	f895 2217 	ldrb.w	r2, [r5, #535]	; 0x217
  401d20:	f895 3216 	ldrb.w	r3, [r5, #534]	; 0x216
  401d24:	041b      	lsls	r3, r3, #16
  401d26:	ea43 6302 	orr.w	r3, r3, r2, lsl #24
  401d2a:	f895 2214 	ldrb.w	r2, [r5, #532]	; 0x214
  401d2e:	4313      	orrs	r3, r2
  401d30:	f895 2215 	ldrb.w	r2, [r5, #533]	; 0x215
  401d34:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
			LD_DWORD(fs->win+FSI_LeadSig) == 0x41615252 &&
  401d38:	4a2b      	ldr	r2, [pc, #172]	; (401de8 <chk_mounted+0x2f8>)
  401d3a:	4293      	cmp	r3, r2
  401d3c:	d12d      	bne.n	401d9a <chk_mounted+0x2aa>
				fs->last_clust = LD_DWORD(fs->win+FSI_Nxt_Free);
  401d3e:	f895 221f 	ldrb.w	r2, [r5, #543]	; 0x21f
  401d42:	f895 321e 	ldrb.w	r3, [r5, #542]	; 0x21e
  401d46:	041b      	lsls	r3, r3, #16
  401d48:	ea43 6302 	orr.w	r3, r3, r2, lsl #24
  401d4c:	f895 221c 	ldrb.w	r2, [r5, #540]	; 0x21c
  401d50:	4313      	orrs	r3, r2
  401d52:	f895 221d 	ldrb.w	r2, [r5, #541]	; 0x21d
  401d56:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
  401d5a:	60eb      	str	r3, [r5, #12]
				fs->free_clust = LD_DWORD(fs->win+FSI_Free_Count);
  401d5c:	f895 221b 	ldrb.w	r2, [r5, #539]	; 0x21b
  401d60:	f895 321a 	ldrb.w	r3, [r5, #538]	; 0x21a
  401d64:	041b      	lsls	r3, r3, #16
  401d66:	ea43 6302 	orr.w	r3, r3, r2, lsl #24
  401d6a:	f895 2218 	ldrb.w	r2, [r5, #536]	; 0x218
  401d6e:	4313      	orrs	r3, r2
  401d70:	f895 2219 	ldrb.w	r2, [r5, #537]	; 0x219
  401d74:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
  401d78:	612b      	str	r3, [r5, #16]
  401d7a:	2603      	movs	r6, #3
	fs->fs_type = fmt;		/* FAT sub-type */
  401d7c:	702e      	strb	r6, [r5, #0]
	fs->id = ++Fsid;		/* File system mount ID */
  401d7e:	4a1b      	ldr	r2, [pc, #108]	; (401dec <chk_mounted+0x2fc>)
  401d80:	8813      	ldrh	r3, [r2, #0]
  401d82:	3301      	adds	r3, #1
  401d84:	b29b      	uxth	r3, r3
  401d86:	8013      	strh	r3, [r2, #0]
  401d88:	80eb      	strh	r3, [r5, #6]
	fs->winsect = 0;		/* Invalidate sector cache */
  401d8a:	2000      	movs	r0, #0
  401d8c:	62e8      	str	r0, [r5, #44]	; 0x2c
	fs->wflag = 0;
  401d8e:	7128      	strb	r0, [r5, #4]
	return FR_OK;
  401d90:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  401d92:	2603      	movs	r6, #3
  401d94:	e7f2      	b.n	401d7c <chk_mounted+0x28c>
  401d96:	2603      	movs	r6, #3
  401d98:	e7f0      	b.n	401d7c <chk_mounted+0x28c>
  401d9a:	2603      	movs	r6, #3
  401d9c:	e7ee      	b.n	401d7c <chk_mounted+0x28c>
	if (!fs) return FR_NOT_ENABLED;		/* Is the file system object available? */
  401d9e:	200c      	movs	r0, #12
  401da0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
			return FR_OK;				/* The file system object is valid */
  401da2:	2000      	movs	r0, #0
  401da4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	if (fmt == 3) return FR_DISK_ERR;
  401da6:	2001      	movs	r0, #1
  401da8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	if (!b || (b & (b - 1))) return FR_NO_FILESYSTEM;	/* (Must be power of 2) */
  401daa:	200d      	movs	r0, #13
  401dac:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	if (fs->n_rootdir % (SS(fs) / SZ_DIR)) return FR_NO_FILESYSTEM;	/* (BPB_RootEntCnt must be sector aligned) */
  401dae:	200d      	movs	r0, #13
  401db0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	if (!nrsv) return FR_NO_FILESYSTEM;					/* (BPB_RsvdSecCnt must not be 0) */
  401db2:	200d      	movs	r0, #13
  401db4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	if (tsect < sysect) return FR_NO_FILESYSTEM;		/* (Invalid volume size) */
  401db6:	200d      	movs	r0, #13
  401db8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	if (!nclst) return FR_NO_FILESYSTEM;				/* (Invalid volume size) */
  401dba:	200d      	movs	r0, #13
  401dbc:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		return FR_NO_FILESYSTEM;
  401dbe:	200d      	movs	r0, #13
  401dc0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		if (fs->n_rootdir) return FR_NO_FILESYSTEM;		/* (BPB_RootEntCnt must be 0) */
  401dc2:	200d      	movs	r0, #13
  401dc4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		return FR_NO_FILESYSTEM;
  401dc6:	200d      	movs	r0, #13
  401dc8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		if (!fs->n_rootdir)	return FR_NO_FILESYSTEM;	/* (BPB_RootEntCnt must not be 0) */
  401dca:	200d      	movs	r0, #13
  401dcc:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  401dce:	bf00      	nop
  401dd0:	20400a2c 	.word	0x20400a2c
  401dd4:	00401811 	.word	0x00401811
  401dd8:	004017d1 	.word	0x004017d1
  401ddc:	00401a61 	.word	0x00401a61
  401de0:	ffffaa55 	.word	0xffffaa55
  401de4:	41615252 	.word	0x41615252
  401de8:	61417272 	.word	0x61417272
  401dec:	20400a4c 	.word	0x20400a4c
	fs->n_fatent = nclst + 2;							/* Number of FAT entries */
  401df0:	3302      	adds	r3, #2
  401df2:	61ab      	str	r3, [r5, #24]
	fs->database = bsect + sysect;						/* Data start sector */
  401df4:	4420      	add	r0, r4
  401df6:	62a8      	str	r0, [r5, #40]	; 0x28
	fs->fatbase = bsect + nrsv; 						/* FAT start sector */
  401df8:	4427      	add	r7, r4
  401dfa:	622f      	str	r7, [r5, #32]
		if (fs->n_rootdir) return FR_NO_FILESYSTEM;		/* (BPB_RootEntCnt must be 0) */
  401dfc:	2900      	cmp	r1, #0
  401dfe:	d1e0      	bne.n	401dc2 <chk_mounted+0x2d2>
		fs->dirbase = LD_DWORD(fs->win+BPB_RootClus);	/* Root directory start cluster */
  401e00:	f895 005f 	ldrb.w	r0, [r5, #95]	; 0x5f
  401e04:	f895 105e 	ldrb.w	r1, [r5, #94]	; 0x5e
  401e08:	0409      	lsls	r1, r1, #16
  401e0a:	ea41 6100 	orr.w	r1, r1, r0, lsl #24
  401e0e:	f895 005c 	ldrb.w	r0, [r5, #92]	; 0x5c
  401e12:	4301      	orrs	r1, r0
  401e14:	f895 005d 	ldrb.w	r0, [r5, #93]	; 0x5d
  401e18:	ea41 2100 	orr.w	r1, r1, r0, lsl #8
  401e1c:	6269      	str	r1, [r5, #36]	; 0x24
		szbfat = fs->n_fatent * 4;						/* (Required FAT size) */
  401e1e:	009b      	lsls	r3, r3, #2
	if (fs->fsize < (szbfat + (SS(fs) - 1)) / SS(fs))	/* (BPB_FATSz must not be less than required) */
  401e20:	f203 13ff 	addw	r3, r3, #511	; 0x1ff
  401e24:	ebb2 2f53 	cmp.w	r2, r3, lsr #9
  401e28:	d3c9      	bcc.n	401dbe <chk_mounted+0x2ce>
	fs->free_clust = 0xFFFFFFFF;
  401e2a:	f04f 33ff 	mov.w	r3, #4294967295
  401e2e:	612b      	str	r3, [r5, #16]
	fs->last_clust = 0;
  401e30:	2300      	movs	r3, #0
  401e32:	60eb      	str	r3, [r5, #12]
	 	fs->fsi_flag = 0;
  401e34:	716b      	strb	r3, [r5, #5]
		fs->fsi_sector = bsect + LD_WORD(fs->win+BPB_FSInfo);
  401e36:	f895 3061 	ldrb.w	r3, [r5, #97]	; 0x61
  401e3a:	f895 2060 	ldrb.w	r2, [r5, #96]	; 0x60
  401e3e:	ea42 2203 	orr.w	r2, r2, r3, lsl #8
  401e42:	4422      	add	r2, r4
  401e44:	616a      	str	r2, [r5, #20]
		if (disk_read(fs->drv, fs->win, fs->fsi_sector, 1) == RES_OK &&
  401e46:	2301      	movs	r3, #1
  401e48:	f105 0130 	add.w	r1, r5, #48	; 0x30
  401e4c:	7868      	ldrb	r0, [r5, #1]
  401e4e:	4c03      	ldr	r4, [pc, #12]	; (401e5c <chk_mounted+0x36c>)
  401e50:	47a0      	blx	r4
  401e52:	2800      	cmp	r0, #0
  401e54:	f43f af47 	beq.w	401ce6 <chk_mounted+0x1f6>
  401e58:	2603      	movs	r6, #3
  401e5a:	e78f      	b.n	401d7c <chk_mounted+0x28c>
  401e5c:	0040182d 	.word	0x0040182d

00401e60 <move_window>:
{
  401e60:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
	wsect = fs->winsect;
  401e64:	6ac7      	ldr	r7, [r0, #44]	; 0x2c
	if (wsect != sector) {	/* Changed current window */
  401e66:	428f      	cmp	r7, r1
  401e68:	d035      	beq.n	401ed6 <move_window+0x76>
  401e6a:	460e      	mov	r6, r1
  401e6c:	4604      	mov	r4, r0
		if (fs->wflag) {	/* Write back dirty window if needed */
  401e6e:	7903      	ldrb	r3, [r0, #4]
  401e70:	b91b      	cbnz	r3, 401e7a <move_window+0x1a>
		if (sector) {
  401e72:	bb2e      	cbnz	r6, 401ec0 <move_window+0x60>
	return FR_OK;
  401e74:	2000      	movs	r0, #0
  401e76:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
			if (disk_write(fs->drv, fs->win, wsect, 1) != RES_OK)
  401e7a:	f100 0830 	add.w	r8, r0, #48	; 0x30
  401e7e:	2301      	movs	r3, #1
  401e80:	463a      	mov	r2, r7
  401e82:	4641      	mov	r1, r8
  401e84:	7840      	ldrb	r0, [r0, #1]
  401e86:	4d18      	ldr	r5, [pc, #96]	; (401ee8 <move_window+0x88>)
  401e88:	47a8      	blx	r5
  401e8a:	bb38      	cbnz	r0, 401edc <move_window+0x7c>
			fs->wflag = 0;
  401e8c:	2300      	movs	r3, #0
  401e8e:	7123      	strb	r3, [r4, #4]
			if (wsect < (fs->fatbase + fs->fsize)) {	/* In FAT area */
  401e90:	6a23      	ldr	r3, [r4, #32]
  401e92:	69e2      	ldr	r2, [r4, #28]
  401e94:	4413      	add	r3, r2
  401e96:	429f      	cmp	r7, r3
  401e98:	d2eb      	bcs.n	401e72 <move_window+0x12>
				for (nf = fs->n_fats; nf > 1; nf--) {	/* Reflect the change to all FAT copies */
  401e9a:	78e5      	ldrb	r5, [r4, #3]
  401e9c:	2d01      	cmp	r5, #1
  401e9e:	d9e8      	bls.n	401e72 <move_window+0x12>
					disk_write(fs->drv, fs->win, wsect, 1);
  401ea0:	f04f 0a01 	mov.w	sl, #1
  401ea4:	f8df 9040 	ldr.w	r9, [pc, #64]	; 401ee8 <move_window+0x88>
					wsect += fs->fsize;
  401ea8:	69e3      	ldr	r3, [r4, #28]
  401eaa:	441f      	add	r7, r3
					disk_write(fs->drv, fs->win, wsect, 1);
  401eac:	4653      	mov	r3, sl
  401eae:	463a      	mov	r2, r7
  401eb0:	4641      	mov	r1, r8
  401eb2:	7860      	ldrb	r0, [r4, #1]
  401eb4:	47c8      	blx	r9
				for (nf = fs->n_fats; nf > 1; nf--) {	/* Reflect the change to all FAT copies */
  401eb6:	3d01      	subs	r5, #1
  401eb8:	b2ed      	uxtb	r5, r5
  401eba:	2d01      	cmp	r5, #1
  401ebc:	d1f4      	bne.n	401ea8 <move_window+0x48>
  401ebe:	e7d8      	b.n	401e72 <move_window+0x12>
			if (disk_read(fs->drv, fs->win, sector, 1) != RES_OK)
  401ec0:	2301      	movs	r3, #1
  401ec2:	4632      	mov	r2, r6
  401ec4:	f104 0130 	add.w	r1, r4, #48	; 0x30
  401ec8:	7860      	ldrb	r0, [r4, #1]
  401eca:	4d08      	ldr	r5, [pc, #32]	; (401eec <move_window+0x8c>)
  401ecc:	47a8      	blx	r5
  401ece:	b940      	cbnz	r0, 401ee2 <move_window+0x82>
			fs->winsect = sector;
  401ed0:	62e6      	str	r6, [r4, #44]	; 0x2c
  401ed2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
	return FR_OK;
  401ed6:	2000      	movs	r0, #0
  401ed8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
				return FR_DISK_ERR;
  401edc:	2001      	movs	r0, #1
  401ede:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
				return FR_DISK_ERR;
  401ee2:	2001      	movs	r0, #1
}
  401ee4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
  401ee8:	0040189d 	.word	0x0040189d
  401eec:	0040182d 	.word	0x0040182d

00401ef0 <get_fat>:
	if (clst < 2 || clst >= fs->n_fatent)	/* Chack range */
  401ef0:	2901      	cmp	r1, #1
  401ef2:	d96a      	bls.n	401fca <get_fat+0xda>
{
  401ef4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	if (clst < 2 || clst >= fs->n_fatent)	/* Chack range */
  401ef6:	6983      	ldr	r3, [r0, #24]
  401ef8:	4299      	cmp	r1, r3
  401efa:	d268      	bcs.n	401fce <get_fat+0xde>
  401efc:	460c      	mov	r4, r1
  401efe:	4606      	mov	r6, r0
	switch (fs->fs_type) {
  401f00:	7803      	ldrb	r3, [r0, #0]
  401f02:	2b02      	cmp	r3, #2
  401f04:	d02f      	beq.n	401f66 <get_fat+0x76>
  401f06:	2b03      	cmp	r3, #3
  401f08:	d041      	beq.n	401f8e <get_fat+0x9e>
  401f0a:	2b01      	cmp	r3, #1
  401f0c:	d002      	beq.n	401f14 <get_fat+0x24>
	return 0xFFFFFFFF;	/* An error occurred at the disk I/O layer */
  401f0e:	f04f 30ff 	mov.w	r0, #4294967295
  401f12:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		bc = (UINT)clst; bc += bc / 2;
  401f14:	eb01 0751 	add.w	r7, r1, r1, lsr #1
		if (move_window(fs, fs->fatbase + (bc / SS(fs)))) break;
  401f18:	6a01      	ldr	r1, [r0, #32]
  401f1a:	eb01 2157 	add.w	r1, r1, r7, lsr #9
  401f1e:	4b2d      	ldr	r3, [pc, #180]	; (401fd4 <get_fat+0xe4>)
  401f20:	4798      	blx	r3
  401f22:	b110      	cbz	r0, 401f2a <get_fat+0x3a>
	return 0xFFFFFFFF;	/* An error occurred at the disk I/O layer */
  401f24:	f04f 30ff 	mov.w	r0, #4294967295
  401f28:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		wc = fs->win[bc % SS(fs)]; bc++;
  401f2a:	f3c7 0308 	ubfx	r3, r7, #0, #9
  401f2e:	4433      	add	r3, r6
  401f30:	f893 5030 	ldrb.w	r5, [r3, #48]	; 0x30
  401f34:	3701      	adds	r7, #1
		if (move_window(fs, fs->fatbase + (bc / SS(fs)))) break;
  401f36:	6a31      	ldr	r1, [r6, #32]
  401f38:	eb01 2157 	add.w	r1, r1, r7, lsr #9
  401f3c:	4630      	mov	r0, r6
  401f3e:	4b25      	ldr	r3, [pc, #148]	; (401fd4 <get_fat+0xe4>)
  401f40:	4798      	blx	r3
  401f42:	b110      	cbz	r0, 401f4a <get_fat+0x5a>
	return 0xFFFFFFFF;	/* An error occurred at the disk I/O layer */
  401f44:	f04f 30ff 	mov.w	r0, #4294967295
  401f48:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		wc |= fs->win[bc % SS(fs)] << 8;
  401f4a:	f3c7 0708 	ubfx	r7, r7, #0, #9
  401f4e:	19f0      	adds	r0, r6, r7
  401f50:	f890 0030 	ldrb.w	r0, [r0, #48]	; 0x30
  401f54:	ea45 2000 	orr.w	r0, r5, r0, lsl #8
		return (clst & 1) ? (wc >> 4) : (wc & 0xFFF);
  401f58:	f014 0f01 	tst.w	r4, #1
  401f5c:	bf14      	ite	ne
  401f5e:	0900      	lsrne	r0, r0, #4
  401f60:	f3c0 000b 	ubfxeq	r0, r0, #0, #12
  401f64:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 2)))) break;
  401f66:	6a01      	ldr	r1, [r0, #32]
  401f68:	eb01 2114 	add.w	r1, r1, r4, lsr #8
  401f6c:	4b19      	ldr	r3, [pc, #100]	; (401fd4 <get_fat+0xe4>)
  401f6e:	4798      	blx	r3
  401f70:	b110      	cbz	r0, 401f78 <get_fat+0x88>
	return 0xFFFFFFFF;	/* An error occurred at the disk I/O layer */
  401f72:	f04f 30ff 	mov.w	r0, #4294967295
  401f76:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		p = &fs->win[clst * 2 % SS(fs)];
  401f78:	0060      	lsls	r0, r4, #1
  401f7a:	f400 70ff 	and.w	r0, r0, #510	; 0x1fe
		return LD_WORD(p);
  401f7e:	4430      	add	r0, r6
  401f80:	f890 3031 	ldrb.w	r3, [r0, #49]	; 0x31
  401f84:	f890 0030 	ldrb.w	r0, [r0, #48]	; 0x30
  401f88:	ea40 2003 	orr.w	r0, r0, r3, lsl #8
  401f8c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 4)))) break;
  401f8e:	6a01      	ldr	r1, [r0, #32]
  401f90:	eb01 11d4 	add.w	r1, r1, r4, lsr #7
  401f94:	4b0f      	ldr	r3, [pc, #60]	; (401fd4 <get_fat+0xe4>)
  401f96:	4798      	blx	r3
  401f98:	b110      	cbz	r0, 401fa0 <get_fat+0xb0>
	return 0xFFFFFFFF;	/* An error occurred at the disk I/O layer */
  401f9a:	f04f 30ff 	mov.w	r0, #4294967295
}
  401f9e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		p = &fs->win[clst * 4 % SS(fs)];
  401fa0:	00a0      	lsls	r0, r4, #2
  401fa2:	f400 70fe 	and.w	r0, r0, #508	; 0x1fc
  401fa6:	f100 0230 	add.w	r2, r0, #48	; 0x30
  401faa:	4432      	add	r2, r6
		return LD_DWORD(p) & 0x0FFFFFFF;
  401fac:	78d1      	ldrb	r1, [r2, #3]
  401fae:	7893      	ldrb	r3, [r2, #2]
  401fb0:	041b      	lsls	r3, r3, #16
  401fb2:	ea43 6301 	orr.w	r3, r3, r1, lsl #24
  401fb6:	4430      	add	r0, r6
  401fb8:	f890 0030 	ldrb.w	r0, [r0, #48]	; 0x30
  401fbc:	4318      	orrs	r0, r3
  401fbe:	7853      	ldrb	r3, [r2, #1]
  401fc0:	ea40 2003 	orr.w	r0, r0, r3, lsl #8
  401fc4:	f020 4070 	bic.w	r0, r0, #4026531840	; 0xf0000000
  401fc8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		return 1;
  401fca:	2001      	movs	r0, #1
  401fcc:	4770      	bx	lr
  401fce:	2001      	movs	r0, #1
  401fd0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  401fd2:	bf00      	nop
  401fd4:	00401e61 	.word	0x00401e61

00401fd8 <dir_sdi>:
{
  401fd8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  401fda:	4605      	mov	r5, r0
  401fdc:	460c      	mov	r4, r1
	dj->index = idx;
  401fde:	80c1      	strh	r1, [r0, #6]
	clst = dj->sclust;
  401fe0:	6881      	ldr	r1, [r0, #8]
	if (clst == 1 || clst >= dj->fs->n_fatent)	/* Check start cluster range */
  401fe2:	2901      	cmp	r1, #1
  401fe4:	d03d      	beq.n	402062 <dir_sdi+0x8a>
  401fe6:	6803      	ldr	r3, [r0, #0]
  401fe8:	699a      	ldr	r2, [r3, #24]
  401fea:	4291      	cmp	r1, r2
  401fec:	d301      	bcc.n	401ff2 <dir_sdi+0x1a>
		return FR_INT_ERR;
  401fee:	2002      	movs	r0, #2
  401ff0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	if (!clst && dj->fs->fs_type == FS_FAT32)	/* Replace cluster# 0 with root cluster# if in FAT32 */
  401ff2:	b961      	cbnz	r1, 40200e <dir_sdi+0x36>
  401ff4:	781a      	ldrb	r2, [r3, #0]
  401ff6:	2a03      	cmp	r2, #3
  401ff8:	d006      	beq.n	402008 <dir_sdi+0x30>
		dj->clust = clst;
  401ffa:	2200      	movs	r2, #0
  401ffc:	60ea      	str	r2, [r5, #12]
		if (idx >= dj->fs->n_rootdir)		/* Index is out of range */
  401ffe:	891a      	ldrh	r2, [r3, #8]
  402000:	42a2      	cmp	r2, r4
  402002:	d821      	bhi.n	402048 <dir_sdi+0x70>
			return FR_INT_ERR;
  402004:	2002      	movs	r0, #2
  402006:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		clst = dj->fs->dirbase;
  402008:	6a59      	ldr	r1, [r3, #36]	; 0x24
	if (clst == 0) {	/* Static table (root-dir in FAT12/16) */
  40200a:	2900      	cmp	r1, #0
  40200c:	d0f5      	beq.n	401ffa <dir_sdi+0x22>
		ic = SS(dj->fs) / SZ_DIR * dj->fs->csize;	/* Entries per cluster */
  40200e:	789e      	ldrb	r6, [r3, #2]
  402010:	0136      	lsls	r6, r6, #4
		while (idx >= ic) {	/* Follow cluster chain */
  402012:	42b4      	cmp	r4, r6
  402014:	d310      	bcc.n	402038 <dir_sdi+0x60>
			clst = get_fat(dj->fs, clst);				/* Get next cluster */
  402016:	4f17      	ldr	r7, [pc, #92]	; (402074 <dir_sdi+0x9c>)
  402018:	6828      	ldr	r0, [r5, #0]
  40201a:	47b8      	blx	r7
  40201c:	4601      	mov	r1, r0
			if (clst == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error */
  40201e:	f1b0 3fff 	cmp.w	r0, #4294967295
  402022:	d020      	beq.n	402066 <dir_sdi+0x8e>
			if (clst < 2 || clst >= dj->fs->n_fatent)	/* Reached to end of table or int error */
  402024:	2801      	cmp	r0, #1
  402026:	d920      	bls.n	40206a <dir_sdi+0x92>
  402028:	682b      	ldr	r3, [r5, #0]
  40202a:	699b      	ldr	r3, [r3, #24]
  40202c:	4298      	cmp	r0, r3
  40202e:	d21e      	bcs.n	40206e <dir_sdi+0x96>
			idx -= ic;
  402030:	1ba4      	subs	r4, r4, r6
  402032:	b2a4      	uxth	r4, r4
		while (idx >= ic) {	/* Follow cluster chain */
  402034:	42a6      	cmp	r6, r4
  402036:	d9ef      	bls.n	402018 <dir_sdi+0x40>
		dj->clust = clst;
  402038:	60e9      	str	r1, [r5, #12]
		dj->sect = clust2sect(dj->fs, clst) + idx / (SS(dj->fs) / SZ_DIR);	/* Sector# */
  40203a:	6828      	ldr	r0, [r5, #0]
  40203c:	4b0e      	ldr	r3, [pc, #56]	; (402078 <dir_sdi+0xa0>)
  40203e:	4798      	blx	r3
  402040:	eb00 1014 	add.w	r0, r0, r4, lsr #4
  402044:	6128      	str	r0, [r5, #16]
  402046:	e003      	b.n	402050 <dir_sdi+0x78>
		dj->sect = dj->fs->dirbase + idx / (SS(dj->fs) / SZ_DIR);	/* Sector# */
  402048:	6a5b      	ldr	r3, [r3, #36]	; 0x24
  40204a:	eb03 1314 	add.w	r3, r3, r4, lsr #4
  40204e:	612b      	str	r3, [r5, #16]
	dj->dir = dj->fs->win + (idx % (SS(dj->fs) / SZ_DIR)) * SZ_DIR;	/* Ptr to the entry in the sector */
  402050:	682b      	ldr	r3, [r5, #0]
  402052:	3330      	adds	r3, #48	; 0x30
  402054:	f004 040f 	and.w	r4, r4, #15
  402058:	eb03 1444 	add.w	r4, r3, r4, lsl #5
  40205c:	616c      	str	r4, [r5, #20]
	return FR_OK;	/* Seek succeeded */
  40205e:	2000      	movs	r0, #0
  402060:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		return FR_INT_ERR;
  402062:	2002      	movs	r0, #2
  402064:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
			if (clst == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error */
  402066:	2001      	movs	r0, #1
  402068:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
				return FR_INT_ERR;
  40206a:	2002      	movs	r0, #2
  40206c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  40206e:	2002      	movs	r0, #2
}
  402070:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  402072:	bf00      	nop
  402074:	00401ef1 	.word	0x00401ef1
  402078:	004019f7 	.word	0x004019f7

0040207c <put_fat>:
{
  40207c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	if (clst < 2 || clst >= fs->n_fatent) {	/* Check range */
  402080:	2901      	cmp	r1, #1
  402082:	f240 808f 	bls.w	4021a4 <put_fat+0x128>
  402086:	6983      	ldr	r3, [r0, #24]
  402088:	4299      	cmp	r1, r3
  40208a:	d301      	bcc.n	402090 <put_fat+0x14>
		res = FR_INT_ERR;
  40208c:	2702      	movs	r7, #2
	return res;
  40208e:	e08a      	b.n	4021a6 <put_fat+0x12a>
  402090:	4615      	mov	r5, r2
  402092:	460c      	mov	r4, r1
  402094:	4606      	mov	r6, r0
		switch (fs->fs_type) {
  402096:	7803      	ldrb	r3, [r0, #0]
  402098:	2b02      	cmp	r3, #2
  40209a:	d04e      	beq.n	40213a <put_fat+0xbe>
  40209c:	2b03      	cmp	r3, #3
  40209e:	d05f      	beq.n	402160 <put_fat+0xe4>
  4020a0:	2b01      	cmp	r3, #1
  4020a2:	d003      	beq.n	4020ac <put_fat+0x30>
			res = FR_INT_ERR;
  4020a4:	2702      	movs	r7, #2
		fs->wflag = 1;
  4020a6:	2301      	movs	r3, #1
  4020a8:	7133      	strb	r3, [r6, #4]
  4020aa:	e07c      	b.n	4021a6 <put_fat+0x12a>
			bc = clst; bc += bc / 2;
  4020ac:	eb01 0851 	add.w	r8, r1, r1, lsr #1
			res = move_window(fs, fs->fatbase + (bc / SS(fs)));
  4020b0:	6a01      	ldr	r1, [r0, #32]
  4020b2:	eb01 2158 	add.w	r1, r1, r8, lsr #9
  4020b6:	4b3d      	ldr	r3, [pc, #244]	; (4021ac <put_fat+0x130>)
  4020b8:	4798      	blx	r3
			if (res != FR_OK) break;
  4020ba:	4607      	mov	r7, r0
  4020bc:	2800      	cmp	r0, #0
  4020be:	d1f2      	bne.n	4020a6 <put_fat+0x2a>
			p = &fs->win[bc % SS(fs)];
  4020c0:	f3c8 0308 	ubfx	r3, r8, #0, #9
			*p = (clst & 1) ? ((*p & 0x0F) | ((BYTE)val << 4)) : (BYTE)val;
  4020c4:	f014 0f01 	tst.w	r4, #1
  4020c8:	d01c      	beq.n	402104 <put_fat+0x88>
  4020ca:	4433      	add	r3, r6
  4020cc:	f893 2030 	ldrb.w	r2, [r3, #48]	; 0x30
  4020d0:	f002 020f 	and.w	r2, r2, #15
  4020d4:	ea42 1205 	orr.w	r2, r2, r5, lsl #4
  4020d8:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
			bc++;
  4020dc:	f108 0801 	add.w	r8, r8, #1
			fs->wflag = 1;
  4020e0:	2301      	movs	r3, #1
  4020e2:	7133      	strb	r3, [r6, #4]
			res = move_window(fs, fs->fatbase + (bc / SS(fs)));
  4020e4:	6a31      	ldr	r1, [r6, #32]
  4020e6:	eb01 2158 	add.w	r1, r1, r8, lsr #9
  4020ea:	4630      	mov	r0, r6
  4020ec:	4b2f      	ldr	r3, [pc, #188]	; (4021ac <put_fat+0x130>)
  4020ee:	4798      	blx	r3
			if (res != FR_OK) break;
  4020f0:	2800      	cmp	r0, #0
  4020f2:	d153      	bne.n	40219c <put_fat+0x120>
			p = &fs->win[bc % SS(fs)];
  4020f4:	f3c8 0808 	ubfx	r8, r8, #0, #9
			*p = (clst & 1) ? (BYTE)(val >> 4) : ((*p & 0xF0) | ((BYTE)(val >> 8) & 0x0F));
  4020f8:	f3c5 1207 	ubfx	r2, r5, #4, #8
  4020fc:	44b0      	add	r8, r6
  4020fe:	f888 2030 	strb.w	r2, [r8, #48]	; 0x30
			break;
  402102:	e7d0      	b.n	4020a6 <put_fat+0x2a>
			*p = (clst & 1) ? ((*p & 0x0F) | ((BYTE)val << 4)) : (BYTE)val;
  402104:	4433      	add	r3, r6
  402106:	f883 5030 	strb.w	r5, [r3, #48]	; 0x30
			bc++;
  40210a:	f108 0801 	add.w	r8, r8, #1
			fs->wflag = 1;
  40210e:	2301      	movs	r3, #1
  402110:	7133      	strb	r3, [r6, #4]
			res = move_window(fs, fs->fatbase + (bc / SS(fs)));
  402112:	6a31      	ldr	r1, [r6, #32]
  402114:	eb01 2158 	add.w	r1, r1, r8, lsr #9
  402118:	4630      	mov	r0, r6
  40211a:	4b24      	ldr	r3, [pc, #144]	; (4021ac <put_fat+0x130>)
  40211c:	4798      	blx	r3
			if (res != FR_OK) break;
  40211e:	2800      	cmp	r0, #0
  402120:	d13e      	bne.n	4021a0 <put_fat+0x124>
			p = &fs->win[bc % SS(fs)];
  402122:	f3c8 0808 	ubfx	r8, r8, #0, #9
			*p = (clst & 1) ? (BYTE)(val >> 4) : ((*p & 0xF0) | ((BYTE)(val >> 8) & 0x0F));
  402126:	eb06 0308 	add.w	r3, r6, r8
  40212a:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
  40212e:	f023 030f 	bic.w	r3, r3, #15
  402132:	f3c5 2203 	ubfx	r2, r5, #8, #4
  402136:	431a      	orrs	r2, r3
  402138:	e7e0      	b.n	4020fc <put_fat+0x80>
			res = move_window(fs, fs->fatbase + (clst / (SS(fs) / 2)));
  40213a:	6a01      	ldr	r1, [r0, #32]
  40213c:	eb01 2114 	add.w	r1, r1, r4, lsr #8
  402140:	4b1a      	ldr	r3, [pc, #104]	; (4021ac <put_fat+0x130>)
  402142:	4798      	blx	r3
			if (res != FR_OK) break;
  402144:	4607      	mov	r7, r0
  402146:	2800      	cmp	r0, #0
  402148:	d1ad      	bne.n	4020a6 <put_fat+0x2a>
			p = &fs->win[clst * 2 % SS(fs)];
  40214a:	0063      	lsls	r3, r4, #1
  40214c:	f403 73ff 	and.w	r3, r3, #510	; 0x1fe
			ST_WORD(p, (WORD)val);
  402150:	4433      	add	r3, r6
  402152:	f883 5030 	strb.w	r5, [r3, #48]	; 0x30
  402156:	f3c5 2207 	ubfx	r2, r5, #8, #8
  40215a:	f883 2031 	strb.w	r2, [r3, #49]	; 0x31
			break;
  40215e:	e7a2      	b.n	4020a6 <put_fat+0x2a>
			res = move_window(fs, fs->fatbase + (clst / (SS(fs) / 4)));
  402160:	6a01      	ldr	r1, [r0, #32]
  402162:	eb01 11d4 	add.w	r1, r1, r4, lsr #7
  402166:	4b11      	ldr	r3, [pc, #68]	; (4021ac <put_fat+0x130>)
  402168:	4798      	blx	r3
			if (res != FR_OK) break;
  40216a:	4607      	mov	r7, r0
  40216c:	2800      	cmp	r0, #0
  40216e:	d19a      	bne.n	4020a6 <put_fat+0x2a>
			p = &fs->win[clst * 4 % SS(fs)];
  402170:	00a1      	lsls	r1, r4, #2
  402172:	f401 71fe 	and.w	r1, r1, #508	; 0x1fc
  402176:	f101 0330 	add.w	r3, r1, #48	; 0x30
  40217a:	4433      	add	r3, r6
			val |= LD_DWORD(p) & 0xF0000000;
  40217c:	78da      	ldrb	r2, [r3, #3]
  40217e:	0612      	lsls	r2, r2, #24
  402180:	4431      	add	r1, r6
  402182:	f002 4270 	and.w	r2, r2, #4026531840	; 0xf0000000
  402186:	432a      	orrs	r2, r5
			ST_DWORD(p, val);
  402188:	f881 2030 	strb.w	r2, [r1, #48]	; 0x30
  40218c:	f3c2 2107 	ubfx	r1, r2, #8, #8
  402190:	7059      	strb	r1, [r3, #1]
  402192:	0c11      	lsrs	r1, r2, #16
  402194:	7099      	strb	r1, [r3, #2]
  402196:	0e12      	lsrs	r2, r2, #24
  402198:	70da      	strb	r2, [r3, #3]
			break;
  40219a:	e784      	b.n	4020a6 <put_fat+0x2a>
			res = move_window(fs, fs->fatbase + (bc / SS(fs)));
  40219c:	4607      	mov	r7, r0
  40219e:	e782      	b.n	4020a6 <put_fat+0x2a>
  4021a0:	4607      	mov	r7, r0
  4021a2:	e780      	b.n	4020a6 <put_fat+0x2a>
		res = FR_INT_ERR;
  4021a4:	2702      	movs	r7, #2
}
  4021a6:	4638      	mov	r0, r7
  4021a8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  4021ac:	00401e61 	.word	0x00401e61

004021b0 <create_chain>:
{
  4021b0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  4021b4:	4605      	mov	r5, r0
	if (clst == 0) {		/* Create a new chain */
  4021b6:	4688      	mov	r8, r1
  4021b8:	b941      	cbnz	r1, 4021cc <create_chain+0x1c>
		scl = fs->last_clust;			/* Get suggested start point */
  4021ba:	68c6      	ldr	r6, [r0, #12]
		if (!scl || scl >= fs->n_fatent) scl = 1;
  4021bc:	b186      	cbz	r6, 4021e0 <create_chain+0x30>
  4021be:	6983      	ldr	r3, [r0, #24]
  4021c0:	429e      	cmp	r6, r3
  4021c2:	bf28      	it	cs
  4021c4:	2601      	movcs	r6, #1
	ncl = scl;				/* Start cluster */
  4021c6:	4634      	mov	r4, r6
		cs = get_fat(fs, ncl);			/* Get the cluster status */
  4021c8:	4f27      	ldr	r7, [pc, #156]	; (402268 <create_chain+0xb8>)
  4021ca:	e017      	b.n	4021fc <create_chain+0x4c>
		cs = get_fat(fs, clst);			/* Check the cluster status */
  4021cc:	4b26      	ldr	r3, [pc, #152]	; (402268 <create_chain+0xb8>)
  4021ce:	4798      	blx	r3
  4021d0:	4603      	mov	r3, r0
		if (cs < 2) return 1;			/* It is an invalid cluster */
  4021d2:	2801      	cmp	r0, #1
  4021d4:	d93e      	bls.n	402254 <create_chain+0xa4>
		if (cs < fs->n_fatent) return cs;	/* It is already followed by next cluster */
  4021d6:	69aa      	ldr	r2, [r5, #24]
  4021d8:	4290      	cmp	r0, r2
  4021da:	d340      	bcc.n	40225e <create_chain+0xae>
		scl = clst;
  4021dc:	4646      	mov	r6, r8
  4021de:	e7f2      	b.n	4021c6 <create_chain+0x16>
		if (!scl || scl >= fs->n_fatent) scl = 1;
  4021e0:	2601      	movs	r6, #1
  4021e2:	e7f0      	b.n	4021c6 <create_chain+0x16>
		cs = get_fat(fs, ncl);			/* Get the cluster status */
  4021e4:	4621      	mov	r1, r4
  4021e6:	4628      	mov	r0, r5
  4021e8:	47b8      	blx	r7
		if (cs == 0) break;				/* Found a free cluster */
  4021ea:	4603      	mov	r3, r0
  4021ec:	b170      	cbz	r0, 40220c <create_chain+0x5c>
		if (cs == 0xFFFFFFFF || cs == 1)/* An error occurred */
  4021ee:	f1b0 3fff 	cmp.w	r0, #4294967295
  4021f2:	d034      	beq.n	40225e <create_chain+0xae>
  4021f4:	2801      	cmp	r0, #1
  4021f6:	d032      	beq.n	40225e <create_chain+0xae>
		if (ncl == scl) return 0;		/* No free cluster */
  4021f8:	42b4      	cmp	r4, r6
  4021fa:	d02f      	beq.n	40225c <create_chain+0xac>
		ncl++;							/* Next cluster */
  4021fc:	3401      	adds	r4, #1
		if (ncl >= fs->n_fatent) {		/* Wrap around */
  4021fe:	69ab      	ldr	r3, [r5, #24]
  402200:	429c      	cmp	r4, r3
  402202:	d3ef      	bcc.n	4021e4 <create_chain+0x34>
			if (ncl > scl) return 0;	/* No free cluster */
  402204:	2e01      	cmp	r6, #1
  402206:	d927      	bls.n	402258 <create_chain+0xa8>
			ncl = 2;
  402208:	2402      	movs	r4, #2
  40220a:	e7eb      	b.n	4021e4 <create_chain+0x34>
	res = put_fat(fs, ncl, 0x0FFFFFFF);	/* Mark the new cluster "last link" */
  40220c:	f06f 4270 	mvn.w	r2, #4026531840	; 0xf0000000
  402210:	4621      	mov	r1, r4
  402212:	4628      	mov	r0, r5
  402214:	4b15      	ldr	r3, [pc, #84]	; (40226c <create_chain+0xbc>)
  402216:	4798      	blx	r3
	if (res == FR_OK && clst != 0) {
  402218:	4603      	mov	r3, r0
  40221a:	b910      	cbnz	r0, 402222 <create_chain+0x72>
  40221c:	f1b8 0f00 	cmp.w	r8, #0
  402220:	d10b      	bne.n	40223a <create_chain+0x8a>
	if (res == FR_OK) {
  402222:	b98b      	cbnz	r3, 402248 <create_chain+0x98>
		fs->last_clust = ncl;			/* Update FSINFO */
  402224:	60ec      	str	r4, [r5, #12]
		if (fs->free_clust != 0xFFFFFFFF) {
  402226:	692b      	ldr	r3, [r5, #16]
  402228:	f1b3 3fff 	cmp.w	r3, #4294967295
  40222c:	d01a      	beq.n	402264 <create_chain+0xb4>
			fs->free_clust--;
  40222e:	3b01      	subs	r3, #1
  402230:	612b      	str	r3, [r5, #16]
			fs->fsi_flag = 1;
  402232:	2301      	movs	r3, #1
  402234:	716b      	strb	r3, [r5, #5]
  402236:	4623      	mov	r3, r4
  402238:	e011      	b.n	40225e <create_chain+0xae>
		res = put_fat(fs, clst, ncl);	/* Link it to the previous one if needed */
  40223a:	4622      	mov	r2, r4
  40223c:	4641      	mov	r1, r8
  40223e:	4628      	mov	r0, r5
  402240:	4b0a      	ldr	r3, [pc, #40]	; (40226c <create_chain+0xbc>)
  402242:	4798      	blx	r3
  402244:	4603      	mov	r3, r0
  402246:	e7ec      	b.n	402222 <create_chain+0x72>
		ncl = (res == FR_DISK_ERR) ? 0xFFFFFFFF : 1;
  402248:	2b01      	cmp	r3, #1
  40224a:	bf0c      	ite	eq
  40224c:	f04f 33ff 	moveq.w	r3, #4294967295
  402250:	2301      	movne	r3, #1
  402252:	e004      	b.n	40225e <create_chain+0xae>
		if (cs < 2) return 1;			/* It is an invalid cluster */
  402254:	2301      	movs	r3, #1
  402256:	e002      	b.n	40225e <create_chain+0xae>
			if (ncl > scl) return 0;	/* No free cluster */
  402258:	2300      	movs	r3, #0
  40225a:	e000      	b.n	40225e <create_chain+0xae>
		if (ncl == scl) return 0;		/* No free cluster */
  40225c:	2300      	movs	r3, #0
}
  40225e:	4618      	mov	r0, r3
  402260:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  402264:	4623      	mov	r3, r4
  402266:	e7fa      	b.n	40225e <create_chain+0xae>
  402268:	00401ef1 	.word	0x00401ef1
  40226c:	0040207d 	.word	0x0040207d

00402270 <remove_chain>:
	if (clst < 2 || clst >= fs->n_fatent) {	/* Check range */
  402270:	2901      	cmp	r1, #1
  402272:	d92e      	bls.n	4022d2 <remove_chain+0x62>
{
  402274:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
  402278:	4604      	mov	r4, r0
  40227a:	460e      	mov	r6, r1
	if (clst < 2 || clst >= fs->n_fatent) {	/* Check range */
  40227c:	6983      	ldr	r3, [r0, #24]
  40227e:	4299      	cmp	r1, r3
  402280:	d303      	bcc.n	40228a <remove_chain+0x1a>
		res = FR_INT_ERR;
  402282:	2202      	movs	r2, #2
}
  402284:	4610      	mov	r0, r2
  402286:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
			nxt = get_fat(fs, clst);			/* Get cluster status */
  40228a:	4f16      	ldr	r7, [pc, #88]	; (4022e4 <remove_chain+0x74>)
			res = put_fat(fs, clst, 0);			/* Mark the cluster "empty" */
  40228c:	f04f 0900 	mov.w	r9, #0
  402290:	f8df 8054 	ldr.w	r8, [pc, #84]	; 4022e8 <remove_chain+0x78>
  402294:	e003      	b.n	40229e <remove_chain+0x2e>
  402296:	462e      	mov	r6, r5
		while (clst < fs->n_fatent) {			/* Not a last link? */
  402298:	69a3      	ldr	r3, [r4, #24]
  40229a:	42ab      	cmp	r3, r5
  40229c:	d9f2      	bls.n	402284 <remove_chain+0x14>
			nxt = get_fat(fs, clst);			/* Get cluster status */
  40229e:	4631      	mov	r1, r6
  4022a0:	4620      	mov	r0, r4
  4022a2:	47b8      	blx	r7
			if (nxt == 0) break;				/* Empty cluster? */
  4022a4:	4605      	mov	r5, r0
  4022a6:	b1b8      	cbz	r0, 4022d8 <remove_chain+0x68>
			if (nxt == 1) { res = FR_INT_ERR; break; }	/* Internal error? */
  4022a8:	2801      	cmp	r0, #1
  4022aa:	d017      	beq.n	4022dc <remove_chain+0x6c>
			if (nxt == 0xFFFFFFFF) { res = FR_DISK_ERR; break; }	/* Disk error? */
  4022ac:	f1b0 3fff 	cmp.w	r0, #4294967295
  4022b0:	d016      	beq.n	4022e0 <remove_chain+0x70>
			res = put_fat(fs, clst, 0);			/* Mark the cluster "empty" */
  4022b2:	464a      	mov	r2, r9
  4022b4:	4631      	mov	r1, r6
  4022b6:	4620      	mov	r0, r4
  4022b8:	47c0      	blx	r8
			if (res != FR_OK) break;
  4022ba:	4602      	mov	r2, r0
  4022bc:	2800      	cmp	r0, #0
  4022be:	d1e1      	bne.n	402284 <remove_chain+0x14>
			if (fs->free_clust != 0xFFFFFFFF) {	/* Update FSInfo */
  4022c0:	6923      	ldr	r3, [r4, #16]
  4022c2:	f1b3 3fff 	cmp.w	r3, #4294967295
  4022c6:	d0e6      	beq.n	402296 <remove_chain+0x26>
				fs->free_clust++;
  4022c8:	3301      	adds	r3, #1
  4022ca:	6123      	str	r3, [r4, #16]
				fs->fsi_flag = 1;
  4022cc:	2301      	movs	r3, #1
  4022ce:	7163      	strb	r3, [r4, #5]
  4022d0:	e7e1      	b.n	402296 <remove_chain+0x26>
		res = FR_INT_ERR;
  4022d2:	2202      	movs	r2, #2
}
  4022d4:	4610      	mov	r0, r2
  4022d6:	4770      	bx	lr
  4022d8:	2200      	movs	r2, #0
  4022da:	e7d3      	b.n	402284 <remove_chain+0x14>
			if (nxt == 1) { res = FR_INT_ERR; break; }	/* Internal error? */
  4022dc:	2202      	movs	r2, #2
  4022de:	e7d1      	b.n	402284 <remove_chain+0x14>
			if (nxt == 0xFFFFFFFF) { res = FR_DISK_ERR; break; }	/* Disk error? */
  4022e0:	2201      	movs	r2, #1
  4022e2:	e7cf      	b.n	402284 <remove_chain+0x14>
  4022e4:	00401ef1 	.word	0x00401ef1
  4022e8:	0040207d 	.word	0x0040207d

004022ec <dir_next>:
{
  4022ec:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
	i = dj->index + 1;
  4022f0:	88c4      	ldrh	r4, [r0, #6]
  4022f2:	3401      	adds	r4, #1
  4022f4:	b2a4      	uxth	r4, r4
	if (!i || !dj->sect)	/* Report EOT when index has reached 65535 */
  4022f6:	b914      	cbnz	r4, 4022fe <dir_next+0x12>
		return FR_NO_FILE;
  4022f8:	2004      	movs	r0, #4
  4022fa:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
	if (!i || !dj->sect)	/* Report EOT when index has reached 65535 */
  4022fe:	6903      	ldr	r3, [r0, #16]
  402300:	b913      	cbnz	r3, 402308 <dir_next+0x1c>
		return FR_NO_FILE;
  402302:	2004      	movs	r0, #4
  402304:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
  402308:	460e      	mov	r6, r1
  40230a:	4605      	mov	r5, r0
	if (!(i % (SS(dj->fs) / SZ_DIR))) {	/* Sector changed? */
  40230c:	f014 070f 	ands.w	r7, r4, #15
  402310:	d110      	bne.n	402334 <dir_next+0x48>
		dj->sect++;					/* Next sector */
  402312:	3301      	adds	r3, #1
  402314:	6103      	str	r3, [r0, #16]
		if (dj->clust == 0) {	/* Static table */
  402316:	68c1      	ldr	r1, [r0, #12]
  402318:	b931      	cbnz	r1, 402328 <dir_next+0x3c>
			if (i >= dj->fs->n_rootdir)	/* Report EOT when end of table */
  40231a:	6803      	ldr	r3, [r0, #0]
  40231c:	891b      	ldrh	r3, [r3, #8]
  40231e:	42a3      	cmp	r3, r4
  402320:	d808      	bhi.n	402334 <dir_next+0x48>
				return FR_NO_FILE;
  402322:	2004      	movs	r0, #4
  402324:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
			if (((i / (SS(dj->fs) / SZ_DIR)) & (dj->fs->csize - 1)) == 0) {	/* Cluster changed? */
  402328:	6800      	ldr	r0, [r0, #0]
  40232a:	7883      	ldrb	r3, [r0, #2]
  40232c:	3b01      	subs	r3, #1
  40232e:	ea13 1314 	ands.w	r3, r3, r4, lsr #4
  402332:	d008      	beq.n	402346 <dir_next+0x5a>
	dj->index = i;
  402334:	80ec      	strh	r4, [r5, #6]
	dj->dir = dj->fs->win + (i % (SS(dj->fs) / SZ_DIR)) * SZ_DIR;
  402336:	682b      	ldr	r3, [r5, #0]
  402338:	3330      	adds	r3, #48	; 0x30
  40233a:	eb03 1347 	add.w	r3, r3, r7, lsl #5
  40233e:	616b      	str	r3, [r5, #20]
	return FR_OK;
  402340:	2000      	movs	r0, #0
  402342:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
				clst = get_fat(dj->fs, dj->clust);				/* Get next cluster */
  402346:	4b32      	ldr	r3, [pc, #200]	; (402410 <dir_next+0x124>)
  402348:	4798      	blx	r3
  40234a:	4680      	mov	r8, r0
				if (clst <= 1) return FR_INT_ERR;
  40234c:	2801      	cmp	r0, #1
  40234e:	d94d      	bls.n	4023ec <dir_next+0x100>
				if (clst == 0xFFFFFFFF) return FR_DISK_ERR;
  402350:	f1b0 3fff 	cmp.w	r0, #4294967295
  402354:	d04d      	beq.n	4023f2 <dir_next+0x106>
				if (clst >= dj->fs->n_fatent) {					/* When it reached end of dynamic table */
  402356:	6828      	ldr	r0, [r5, #0]
  402358:	6983      	ldr	r3, [r0, #24]
  40235a:	4598      	cmp	r8, r3
  40235c:	d33e      	bcc.n	4023dc <dir_next+0xf0>
					if (!stretch) return FR_NO_FILE;			/* When do not stretch, report EOT */
  40235e:	b916      	cbnz	r6, 402366 <dir_next+0x7a>
  402360:	2004      	movs	r0, #4
  402362:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
					clst = create_chain(dj->fs, dj->clust);		/* Stretch cluster chain */
  402366:	68e9      	ldr	r1, [r5, #12]
  402368:	4b2a      	ldr	r3, [pc, #168]	; (402414 <dir_next+0x128>)
  40236a:	4798      	blx	r3
					if (clst == 0) return FR_DENIED;			/* No free cluster */
  40236c:	4680      	mov	r8, r0
  40236e:	b910      	cbnz	r0, 402376 <dir_next+0x8a>
  402370:	2007      	movs	r0, #7
  402372:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
					if (clst == 1) return FR_INT_ERR;
  402376:	2801      	cmp	r0, #1
  402378:	d03e      	beq.n	4023f8 <dir_next+0x10c>
					if (clst == 0xFFFFFFFF) return FR_DISK_ERR;
  40237a:	f1b0 3fff 	cmp.w	r0, #4294967295
  40237e:	d03e      	beq.n	4023fe <dir_next+0x112>
					if (move_window(dj->fs, 0)) return FR_DISK_ERR;	/* Flush active window */
  402380:	2100      	movs	r1, #0
  402382:	6828      	ldr	r0, [r5, #0]
  402384:	4b24      	ldr	r3, [pc, #144]	; (402418 <dir_next+0x12c>)
  402386:	4798      	blx	r3
  402388:	2800      	cmp	r0, #0
  40238a:	d13b      	bne.n	402404 <dir_next+0x118>
					mem_set(dj->fs->win, 0, SS(dj->fs));			/* Clear window buffer */
  40238c:	6828      	ldr	r0, [r5, #0]
  40238e:	f44f 7200 	mov.w	r2, #512	; 0x200
  402392:	2100      	movs	r1, #0
  402394:	3030      	adds	r0, #48	; 0x30
  402396:	4b21      	ldr	r3, [pc, #132]	; (40241c <dir_next+0x130>)
  402398:	4798      	blx	r3
					dj->fs->winsect = clust2sect(dj->fs, clst);	/* Cluster start sector */
  40239a:	682e      	ldr	r6, [r5, #0]
  40239c:	4641      	mov	r1, r8
  40239e:	4630      	mov	r0, r6
  4023a0:	4b1f      	ldr	r3, [pc, #124]	; (402420 <dir_next+0x134>)
  4023a2:	4798      	blx	r3
  4023a4:	62f0      	str	r0, [r6, #44]	; 0x2c
					for (c = 0; c < dj->fs->csize; c++) {		/* Fill the new cluster with 0 */
  4023a6:	2600      	movs	r6, #0
						dj->fs->wflag = 1;
  4023a8:	f04f 0b01 	mov.w	fp, #1
						if (move_window(dj->fs, 0)) return FR_DISK_ERR;
  4023ac:	46b2      	mov	sl, r6
  4023ae:	f8df 9068 	ldr.w	r9, [pc, #104]	; 402418 <dir_next+0x12c>
					for (c = 0; c < dj->fs->csize; c++) {		/* Fill the new cluster with 0 */
  4023b2:	682b      	ldr	r3, [r5, #0]
  4023b4:	7899      	ldrb	r1, [r3, #2]
  4023b6:	b2f2      	uxtb	r2, r6
  4023b8:	4291      	cmp	r1, r2
  4023ba:	d90b      	bls.n	4023d4 <dir_next+0xe8>
						dj->fs->wflag = 1;
  4023bc:	f883 b004 	strb.w	fp, [r3, #4]
						if (move_window(dj->fs, 0)) return FR_DISK_ERR;
  4023c0:	4651      	mov	r1, sl
  4023c2:	6828      	ldr	r0, [r5, #0]
  4023c4:	47c8      	blx	r9
  4023c6:	3601      	adds	r6, #1
  4023c8:	b9f8      	cbnz	r0, 40240a <dir_next+0x11e>
						dj->fs->winsect++;
  4023ca:	682a      	ldr	r2, [r5, #0]
  4023cc:	6ad3      	ldr	r3, [r2, #44]	; 0x2c
  4023ce:	3301      	adds	r3, #1
  4023d0:	62d3      	str	r3, [r2, #44]	; 0x2c
  4023d2:	e7ee      	b.n	4023b2 <dir_next+0xc6>
					dj->fs->winsect -= c;						/* Rewind window address */
  4023d4:	4616      	mov	r6, r2
  4023d6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
  4023d8:	1b96      	subs	r6, r2, r6
  4023da:	62de      	str	r6, [r3, #44]	; 0x2c
				dj->clust = clst;				/* Initialize data for new cluster */
  4023dc:	f8c5 800c 	str.w	r8, [r5, #12]
				dj->sect = clust2sect(dj->fs, clst);
  4023e0:	4641      	mov	r1, r8
  4023e2:	6828      	ldr	r0, [r5, #0]
  4023e4:	4b0e      	ldr	r3, [pc, #56]	; (402420 <dir_next+0x134>)
  4023e6:	4798      	blx	r3
  4023e8:	6128      	str	r0, [r5, #16]
  4023ea:	e7a3      	b.n	402334 <dir_next+0x48>
				if (clst <= 1) return FR_INT_ERR;
  4023ec:	2002      	movs	r0, #2
  4023ee:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
				if (clst == 0xFFFFFFFF) return FR_DISK_ERR;
  4023f2:	2001      	movs	r0, #1
  4023f4:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
					if (clst == 1) return FR_INT_ERR;
  4023f8:	2002      	movs	r0, #2
  4023fa:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
					if (clst == 0xFFFFFFFF) return FR_DISK_ERR;
  4023fe:	2001      	movs	r0, #1
  402400:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
					if (move_window(dj->fs, 0)) return FR_DISK_ERR;	/* Flush active window */
  402404:	2001      	movs	r0, #1
  402406:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
						if (move_window(dj->fs, 0)) return FR_DISK_ERR;
  40240a:	2001      	movs	r0, #1
}
  40240c:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
  402410:	00401ef1 	.word	0x00401ef1
  402414:	004021b1 	.word	0x004021b1
  402418:	00401e61 	.word	0x00401e61
  40241c:	004019e9 	.word	0x004019e9
  402420:	004019f7 	.word	0x004019f7

00402424 <dir_find>:
{
  402424:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  402428:	b085      	sub	sp, #20
  40242a:	4605      	mov	r5, r0
	res = dir_sdi(dj, 0);			/* Rewind directory object */
  40242c:	2100      	movs	r1, #0
  40242e:	4b61      	ldr	r3, [pc, #388]	; (4025b4 <dir_find+0x190>)
  402430:	4798      	blx	r3
	if (res != FR_OK) return res;
  402432:	4680      	mov	r8, r0
  402434:	bb08      	cbnz	r0, 40247a <dir_find+0x56>
  402436:	f04f 0bff 	mov.w	fp, #255	; 0xff
  40243a:	46d9      	mov	r9, fp
		res = move_window(dj->fs, dj->sect);
  40243c:	4f5e      	ldr	r7, [pc, #376]	; (4025b8 <dir_find+0x194>)
			wc = ff_wtoupper(uc);		/* Convert it to upper case */
  40243e:	46da      	mov	sl, fp
  402440:	e094      	b.n	40256c <dir_find+0x148>
			if (a == AM_LFN) {			/* An LFN entry is found */
  402442:	2a0f      	cmp	r2, #15
  402444:	d01d      	beq.n	402482 <dir_find+0x5e>
				if (!ord && sum == sum_sfn(dir)) break;	/* LFN matched? */
  402446:	f1b9 0f00 	cmp.w	r9, #0
  40244a:	d104      	bne.n	402456 <dir_find+0x32>
  40244c:	4620      	mov	r0, r4
  40244e:	4b5b      	ldr	r3, [pc, #364]	; (4025bc <dir_find+0x198>)
  402450:	4798      	blx	r3
  402452:	4582      	cmp	sl, r0
  402454:	d011      	beq.n	40247a <dir_find+0x56>
				ord = 0xFF; dj->lfn_idx = 0xFFFF;	/* Reset LFN sequence */
  402456:	f64f 73ff 	movw	r3, #65535	; 0xffff
  40245a:	842b      	strh	r3, [r5, #32]
				if (!(dj->fn[NS] & NS_LOSS) && !mem_cmp(dir, dj->fn, 11)) break;	/* SFN matched? */
  40245c:	69ab      	ldr	r3, [r5, #24]
  40245e:	7ada      	ldrb	r2, [r3, #11]
  402460:	f012 0f01 	tst.w	r2, #1
  402464:	d179      	bne.n	40255a <dir_find+0x136>
  402466:	f104 000b 	add.w	r0, r4, #11
	while (cnt-- && (r = *d++ - *s++) == 0) ;
  40246a:	f814 1b01 	ldrb.w	r1, [r4], #1
  40246e:	f813 2b01 	ldrb.w	r2, [r3], #1
  402472:	4291      	cmp	r1, r2
  402474:	d16b      	bne.n	40254e <dir_find+0x12a>
  402476:	4284      	cmp	r4, r0
  402478:	d1f7      	bne.n	40246a <dir_find+0x46>
}
  40247a:	4640      	mov	r0, r8
  40247c:	b005      	add	sp, #20
  40247e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
				if (dj->lfn) {
  402482:	f8d5 801c 	ldr.w	r8, [r5, #28]
  402486:	f1b8 0f00 	cmp.w	r8, #0
  40248a:	d068      	beq.n	40255e <dir_find+0x13a>
					if (c & LLE) {		/* Is it start of LFN sequence? */
  40248c:	f016 0f40 	tst.w	r6, #64	; 0x40
  402490:	d00c      	beq.n	4024ac <dir_find+0x88>
						sum = dir[LDIR_Chksum];
  402492:	f894 a00d 	ldrb.w	sl, [r4, #13]
						c &= ~LLE; ord = c;	/* LFN start order */
  402496:	f006 06bf 	and.w	r6, r6, #191	; 0xbf
						dj->lfn_idx = dj->index;
  40249a:	88eb      	ldrh	r3, [r5, #6]
  40249c:	842b      	strh	r3, [r5, #32]
					ord = (c == ord && sum == dir[LDIR_Chksum] && cmp_lfn(dj->lfn, dir)) ? ord - 1 : 0xFF;
  40249e:	f894 b00d 	ldrb.w	fp, [r4, #13]
  4024a2:	45d3      	cmp	fp, sl
  4024a4:	d007      	beq.n	4024b6 <dir_find+0x92>
  4024a6:	f04f 09ff 	mov.w	r9, #255	; 0xff
  4024aa:	e058      	b.n	40255e <dir_find+0x13a>
  4024ac:	45b1      	cmp	r9, r6
  4024ae:	d0f6      	beq.n	40249e <dir_find+0x7a>
  4024b0:	f04f 09ff 	mov.w	r9, #255	; 0xff
  4024b4:	e053      	b.n	40255e <dir_find+0x13a>
	i = ((dir[LDIR_Ord] & ~LLE) - 1) * 13;	/* Get offset in the LFN buffer */
  4024b6:	f894 a000 	ldrb.w	sl, [r4]
  4024ba:	f02a 0a40 	bic.w	sl, sl, #64	; 0x40
  4024be:	f10a 3aff 	add.w	sl, sl, #4294967295
  4024c2:	eb0a 034a 	add.w	r3, sl, sl, lsl #1
  4024c6:	eb0a 0383 	add.w	r3, sl, r3, lsl #2
  4024ca:	f8df 90fc 	ldr.w	r9, [pc, #252]	; 4025c8 <dir_find+0x1a4>
  4024ce:	f109 0a0d 	add.w	sl, r9, #13
	s = 0; wc = 1;
  4024d2:	2001      	movs	r0, #1
			if (uc != 0xFFFF) return 0;	/* Check filler */
  4024d4:	9603      	str	r6, [sp, #12]
  4024d6:	f8cd b004 	str.w	fp, [sp, #4]
  4024da:	461e      	mov	r6, r3
  4024dc:	9502      	str	r5, [sp, #8]
  4024de:	e00f      	b.n	402500 <dir_find+0xdc>
			wc = ff_wtoupper(uc);		/* Convert it to upper case */
  4024e0:	4618      	mov	r0, r3
  4024e2:	4b37      	ldr	r3, [pc, #220]	; (4025c0 <dir_find+0x19c>)
  4024e4:	4798      	blx	r3
  4024e6:	4683      	mov	fp, r0
			if (i >= _MAX_LFN || wc != ff_wtoupper(lfnbuf[i++]))	/* Compare it */
  4024e8:	2efe      	cmp	r6, #254	; 0xfe
  4024ea:	d85a      	bhi.n	4025a2 <dir_find+0x17e>
  4024ec:	1c75      	adds	r5, r6, #1
  4024ee:	f838 0016 	ldrh.w	r0, [r8, r6, lsl #1]
  4024f2:	4b33      	ldr	r3, [pc, #204]	; (4025c0 <dir_find+0x19c>)
  4024f4:	4798      	blx	r3
  4024f6:	4583      	cmp	fp, r0
  4024f8:	d157      	bne.n	4025aa <dir_find+0x186>
  4024fa:	462e      	mov	r6, r5
	} while (++s < 13);				/* Repeat until all chars in the entry are checked */
  4024fc:	45d1      	cmp	r9, sl
  4024fe:	d013      	beq.n	402528 <dir_find+0x104>
		uc = LD_WORD(dir+LfnOfs[s]);	/* Pick an LFN character from the entry */
  402500:	f819 2b01 	ldrb.w	r2, [r9], #1
  402504:	18a3      	adds	r3, r4, r2
  402506:	7859      	ldrb	r1, [r3, #1]
  402508:	5ca3      	ldrb	r3, [r4, r2]
  40250a:	ea43 2301 	orr.w	r3, r3, r1, lsl #8
		if (wc) {	/* Last char has not been processed */
  40250e:	2800      	cmp	r0, #0
  402510:	d1e6      	bne.n	4024e0 <dir_find+0xbc>
			if (uc != 0xFFFF) return 0;	/* Check filler */
  402512:	f64f 72ff 	movw	r2, #65535	; 0xffff
  402516:	4293      	cmp	r3, r2
  402518:	d0f0      	beq.n	4024fc <dir_find+0xd8>
  40251a:	f8dd b004 	ldr.w	fp, [sp, #4]
  40251e:	9d02      	ldr	r5, [sp, #8]
				ord = 0xFF; dj->lfn_idx = 0xFFFF;	/* Reset LFN sequence */
  402520:	46da      	mov	sl, fp
					ord = (c == ord && sum == dir[LDIR_Chksum] && cmp_lfn(dj->lfn, dir)) ? ord - 1 : 0xFF;
  402522:	f04f 09ff 	mov.w	r9, #255	; 0xff
  402526:	e01a      	b.n	40255e <dir_find+0x13a>
  402528:	f8dd b004 	ldr.w	fp, [sp, #4]
  40252c:	4632      	mov	r2, r6
  40252e:	9e03      	ldr	r6, [sp, #12]
  402530:	9d02      	ldr	r5, [sp, #8]
	if ((dir[LDIR_Ord] & LLE) && wc && lfnbuf[i])	/* Last segment matched but different length */
  402532:	7823      	ldrb	r3, [r4, #0]
  402534:	f013 0f40 	tst.w	r3, #64	; 0x40
  402538:	d004      	beq.n	402544 <dir_find+0x120>
  40253a:	b118      	cbz	r0, 402544 <dir_find+0x120>
  40253c:	f838 3012 	ldrh.w	r3, [r8, r2, lsl #1]
  402540:	2b00      	cmp	r3, #0
  402542:	d1ed      	bne.n	402520 <dir_find+0xfc>
					ord = (c == ord && sum == dir[LDIR_Chksum] && cmp_lfn(dj->lfn, dir)) ? ord - 1 : 0xFF;
  402544:	3e01      	subs	r6, #1
  402546:	fa5f f986 	uxtb.w	r9, r6
  40254a:	46da      	mov	sl, fp
  40254c:	e007      	b.n	40255e <dir_find+0x13a>
				ord = 0xFF; dj->lfn_idx = 0xFFFF;	/* Reset LFN sequence */
  40254e:	f04f 09ff 	mov.w	r9, #255	; 0xff
  402552:	e004      	b.n	40255e <dir_find+0x13a>
			ord = 0xFF;
  402554:	f04f 09ff 	mov.w	r9, #255	; 0xff
  402558:	e001      	b.n	40255e <dir_find+0x13a>
				ord = 0xFF; dj->lfn_idx = 0xFFFF;	/* Reset LFN sequence */
  40255a:	f04f 09ff 	mov.w	r9, #255	; 0xff
		res = dir_next(dj, 0);		/* Next entry */
  40255e:	2100      	movs	r1, #0
  402560:	4628      	mov	r0, r5
  402562:	4b18      	ldr	r3, [pc, #96]	; (4025c4 <dir_find+0x1a0>)
  402564:	4798      	blx	r3
	} while (res == FR_OK);
  402566:	4680      	mov	r8, r0
  402568:	2800      	cmp	r0, #0
  40256a:	d186      	bne.n	40247a <dir_find+0x56>
		res = move_window(dj->fs, dj->sect);
  40256c:	6929      	ldr	r1, [r5, #16]
  40256e:	6828      	ldr	r0, [r5, #0]
  402570:	47b8      	blx	r7
		if (res != FR_OK) break;
  402572:	4680      	mov	r8, r0
  402574:	2800      	cmp	r0, #0
  402576:	d180      	bne.n	40247a <dir_find+0x56>
		dir = dj->dir;					/* Ptr to the directory entry of current index */
  402578:	696c      	ldr	r4, [r5, #20]
		c = dir[DIR_Name];
  40257a:	7826      	ldrb	r6, [r4, #0]
		if (c == 0) { res = FR_NO_FILE; break; }	/* Reached to end of table */
  40257c:	b176      	cbz	r6, 40259c <dir_find+0x178>
		a = dir[DIR_Attr] & AM_MASK;
  40257e:	7ae3      	ldrb	r3, [r4, #11]
  402580:	f003 023f 	and.w	r2, r3, #63	; 0x3f
		if (c == DDE || ((a & AM_VOL) && a != AM_LFN)) {	/* An entry without valid data */
  402584:	2ee5      	cmp	r6, #229	; 0xe5
  402586:	d0e5      	beq.n	402554 <dir_find+0x130>
  402588:	f013 0f08 	tst.w	r3, #8
  40258c:	f43f af59 	beq.w	402442 <dir_find+0x1e>
  402590:	2a0f      	cmp	r2, #15
  402592:	f43f af56 	beq.w	402442 <dir_find+0x1e>
			ord = 0xFF;
  402596:	f04f 09ff 	mov.w	r9, #255	; 0xff
  40259a:	e7e0      	b.n	40255e <dir_find+0x13a>
		if (c == 0) { res = FR_NO_FILE; break; }	/* Reached to end of table */
  40259c:	f04f 0804 	mov.w	r8, #4
  4025a0:	e76b      	b.n	40247a <dir_find+0x56>
  4025a2:	f8dd b004 	ldr.w	fp, [sp, #4]
  4025a6:	9d02      	ldr	r5, [sp, #8]
  4025a8:	e7ba      	b.n	402520 <dir_find+0xfc>
  4025aa:	f8dd b004 	ldr.w	fp, [sp, #4]
  4025ae:	9d02      	ldr	r5, [sp, #8]
  4025b0:	e7b6      	b.n	402520 <dir_find+0xfc>
  4025b2:	bf00      	nop
  4025b4:	00401fd9 	.word	0x00401fd9
  4025b8:	00401e61 	.word	0x00401e61
  4025bc:	00401a0f 	.word	0x00401a0f
  4025c0:	0040338d 	.word	0x0040338d
  4025c4:	004022ed 	.word	0x004022ed
  4025c8:	0040c3e0 	.word	0x0040c3e0

004025cc <dir_register>:
{
  4025cc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  4025d0:	b089      	sub	sp, #36	; 0x24
  4025d2:	4604      	mov	r4, r0
	fn = dj->fn; lfn = dj->lfn;
  4025d4:	6985      	ldr	r5, [r0, #24]
  4025d6:	f8d0 b01c 	ldr.w	fp, [r0, #28]
	mem_cpy(sn, fn, 12);
  4025da:	220c      	movs	r2, #12
  4025dc:	4629      	mov	r1, r5
  4025de:	a805      	add	r0, sp, #20
  4025e0:	4ba8      	ldr	r3, [pc, #672]	; (402884 <dir_register+0x2b8>)
  4025e2:	4798      	blx	r3
	if (sn[NS] & NS_LOSS) {			/* When LFN is out of 8.3 format, generate a numbered name */
  4025e4:	f89d 301f 	ldrb.w	r3, [sp, #31]
  4025e8:	f013 0f01 	tst.w	r3, #1
  4025ec:	d079      	beq.n	4026e2 <dir_register+0x116>
		fn[NS] = 0; dj->lfn = 0;			/* Find only SFN */
  4025ee:	2300      	movs	r3, #0
  4025f0:	72eb      	strb	r3, [r5, #11]
  4025f2:	61e3      	str	r3, [r4, #28]
	mem_cpy(dst, src, 11);
  4025f4:	220b      	movs	r2, #11
  4025f6:	a905      	add	r1, sp, #20
  4025f8:	4628      	mov	r0, r5
  4025fa:	4ba2      	ldr	r3, [pc, #648]	; (402884 <dir_register+0x2b8>)
  4025fc:	4798      	blx	r3
		for (n = 1; n < 100; n++) {
  4025fe:	2701      	movs	r7, #1
  402600:	463b      	mov	r3, r7
		dst[j++] = (i < 8) ? ns[i++] : ' ';
  402602:	f04f 0820 	mov.w	r8, #32
			res = dir_find(dj);				/* Check if the name collides with existing SFN */
  402606:	f8df 929c 	ldr.w	r9, [pc, #668]	; 4028a4 <dir_register+0x2d8>
	mem_cpy(dst, src, 11);
  40260a:	f8df a278 	ldr.w	sl, [pc, #632]	; 402884 <dir_register+0x2b8>
  40260e:	e032      	b.n	402676 <dir_register+0xaa>
		for (n = 1; n < 100; n++) {
  402610:	463b      	mov	r3, r7
  402612:	e030      	b.n	402676 <dir_register+0xaa>
	for (j = 0; j < i && dst[j] != ' '; j++) {
  402614:	4613      	mov	r3, r2
  402616:	e002      	b.n	40261e <dir_register+0x52>
  402618:	2300      	movs	r3, #0
  40261a:	e000      	b.n	40261e <dir_register+0x52>
  40261c:	4613      	mov	r3, r2
  40261e:	442b      	add	r3, r5
  402620:	e005      	b.n	40262e <dir_register+0x62>
		dst[j++] = (i < 8) ? ns[i++] : ' ';
  402622:	4641      	mov	r1, r8
  402624:	f803 1b01 	strb.w	r1, [r3], #1
	} while (j < 8);
  402628:	1b59      	subs	r1, r3, r5
  40262a:	2907      	cmp	r1, #7
  40262c:	d807      	bhi.n	40263e <dir_register+0x72>
		dst[j++] = (i < 8) ? ns[i++] : ' ';
  40262e:	2a07      	cmp	r2, #7
  402630:	d8f7      	bhi.n	402622 <dir_register+0x56>
  402632:	a908      	add	r1, sp, #32
  402634:	4411      	add	r1, r2
  402636:	f811 1c14 	ldrb.w	r1, [r1, #-20]
  40263a:	3201      	adds	r2, #1
  40263c:	e7f2      	b.n	402624 <dir_register+0x58>
			res = dir_find(dj);				/* Check if the name collides with existing SFN */
  40263e:	4620      	mov	r0, r4
  402640:	47c8      	blx	r9
			if (res != FR_OK) break;
  402642:	4606      	mov	r6, r0
  402644:	2800      	cmp	r0, #0
  402646:	d13e      	bne.n	4026c6 <dir_register+0xfa>
		for (n = 1; n < 100; n++) {
  402648:	3701      	adds	r7, #1
  40264a:	b2bf      	uxth	r7, r7
  40264c:	2f64      	cmp	r7, #100	; 0x64
  40264e:	d038      	beq.n	4026c2 <dir_register+0xf6>
	mem_cpy(dst, src, 11);
  402650:	220b      	movs	r2, #11
  402652:	a905      	add	r1, sp, #20
  402654:	4628      	mov	r0, r5
  402656:	47d0      	blx	sl
	if (seq > 5) {	/* On many collisions, generate a hash number instead of sequential number */
  402658:	2f05      	cmp	r7, #5
  40265a:	d9d9      	bls.n	402610 <dir_register+0x44>
  40265c:	463b      	mov	r3, r7
  40265e:	4659      	mov	r1, fp
		do seq = (seq >> 1) + (seq << 15) + (WORD)*lfn++; while (*lfn);
  402660:	03da      	lsls	r2, r3, #15
  402662:	ea42 0353 	orr.w	r3, r2, r3, lsr #1
  402666:	f831 2b02 	ldrh.w	r2, [r1], #2
  40266a:	fa12 f383 	uxtah	r3, r2, r3
  40266e:	b29b      	uxth	r3, r3
  402670:	880a      	ldrh	r2, [r1, #0]
  402672:	2a00      	cmp	r2, #0
  402674:	d1f4      	bne.n	402660 <dir_register+0x94>
  402676:	f10d 0613 	add.w	r6, sp, #19
		for (n = 1; n < 100; n++) {
  40267a:	2207      	movs	r2, #7
		c = (seq % 16) + '0';
  40267c:	f003 000f 	and.w	r0, r3, #15
  402680:	f100 0130 	add.w	r1, r0, #48	; 0x30
		if (c > '9') c += 7;
  402684:	2939      	cmp	r1, #57	; 0x39
  402686:	bf88      	it	hi
  402688:	f100 0137 	addhi.w	r1, r0, #55	; 0x37
		ns[i--] = c;
  40268c:	3a01      	subs	r2, #1
  40268e:	f806 1901 	strb.w	r1, [r6], #-1
		seq /= 16;
  402692:	f3c3 130f 	ubfx	r3, r3, #4, #16
	} while (seq);
  402696:	2b00      	cmp	r3, #0
  402698:	d1f0      	bne.n	40267c <dir_register+0xb0>
	ns[i] = '~';
  40269a:	217e      	movs	r1, #126	; 0x7e
  40269c:	ab08      	add	r3, sp, #32
  40269e:	4413      	add	r3, r2
  4026a0:	f803 1c14 	strb.w	r1, [r3, #-20]
	for (j = 0; j < i && dst[j] != ' '; j++) {
  4026a4:	2a00      	cmp	r2, #0
  4026a6:	d0b5      	beq.n	402614 <dir_register+0x48>
  4026a8:	782b      	ldrb	r3, [r5, #0]
  4026aa:	2b20      	cmp	r3, #32
  4026ac:	d0b4      	beq.n	402618 <dir_register+0x4c>
  4026ae:	4629      	mov	r1, r5
  4026b0:	2300      	movs	r3, #0
  4026b2:	3301      	adds	r3, #1
  4026b4:	429a      	cmp	r2, r3
  4026b6:	d0b1      	beq.n	40261c <dir_register+0x50>
  4026b8:	f811 0f01 	ldrb.w	r0, [r1, #1]!
  4026bc:	2820      	cmp	r0, #32
  4026be:	d1f8      	bne.n	4026b2 <dir_register+0xe6>
  4026c0:	e7ad      	b.n	40261e <dir_register+0x52>
		if (n == 100) return FR_DENIED;		/* Abort if too many collisions */
  4026c2:	2607      	movs	r6, #7
  4026c4:	e004      	b.n	4026d0 <dir_register+0x104>
  4026c6:	2f64      	cmp	r7, #100	; 0x64
  4026c8:	f000 80ac 	beq.w	402824 <dir_register+0x258>
		if (res != FR_NO_FILE) return res;	/* Abort if the result is other than 'not collided' */
  4026cc:	2804      	cmp	r0, #4
  4026ce:	d003      	beq.n	4026d8 <dir_register+0x10c>
}
  4026d0:	4630      	mov	r0, r6
  4026d2:	b009      	add	sp, #36	; 0x24
  4026d4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
		fn[NS] = sn[NS]; dj->lfn = lfn;
  4026d8:	f89d 301f 	ldrb.w	r3, [sp, #31]
  4026dc:	72eb      	strb	r3, [r5, #11]
  4026de:	f8c4 b01c 	str.w	fp, [r4, #28]
	if (sn[NS] & NS_LFN) {			/* When LFN is to be created, reserve an SFN + LFN entries. */
  4026e2:	f89d 301f 	ldrb.w	r3, [sp, #31]
  4026e6:	f013 0f02 	tst.w	r3, #2
  4026ea:	d014      	beq.n	402716 <dir_register+0x14a>
		for (ne = 0; lfn[ne]; ne++) ;
  4026ec:	f8bb 3000 	ldrh.w	r3, [fp]
  4026f0:	b17b      	cbz	r3, 402712 <dir_register+0x146>
  4026f2:	2300      	movs	r3, #0
  4026f4:	3301      	adds	r3, #1
  4026f6:	b29b      	uxth	r3, r3
  4026f8:	f83b 2013 	ldrh.w	r2, [fp, r3, lsl #1]
  4026fc:	2a00      	cmp	r2, #0
  4026fe:	d1f9      	bne.n	4026f4 <dir_register+0x128>
		ne = (ne + 25) / 13;
  402700:	3319      	adds	r3, #25
  402702:	4f61      	ldr	r7, [pc, #388]	; (402888 <dir_register+0x2bc>)
  402704:	fb87 2703 	smull	r2, r7, r7, r3
  402708:	17db      	asrs	r3, r3, #31
  40270a:	ebc3 07a7 	rsb	r7, r3, r7, asr #2
  40270e:	b2bf      	uxth	r7, r7
  402710:	e002      	b.n	402718 <dir_register+0x14c>
		for (ne = 0; lfn[ne]; ne++) ;
  402712:	2300      	movs	r3, #0
  402714:	e7f4      	b.n	402700 <dir_register+0x134>
		ne = 1;
  402716:	2701      	movs	r7, #1
	res = dir_sdi(dj, 0);
  402718:	2100      	movs	r1, #0
  40271a:	4620      	mov	r0, r4
  40271c:	4b5b      	ldr	r3, [pc, #364]	; (40288c <dir_register+0x2c0>)
  40271e:	4798      	blx	r3
	if (res != FR_OK) return res;
  402720:	4606      	mov	r6, r0
  402722:	2800      	cmp	r0, #0
  402724:	d1d4      	bne.n	4026d0 <dir_register+0x104>
  402726:	f04f 0a00 	mov.w	sl, #0
  40272a:	4655      	mov	r5, sl
		res = move_window(dj->fs, dj->sect);
  40272c:	f8df 8164 	ldr.w	r8, [pc, #356]	; 402894 <dir_register+0x2c8>
			n = 0;					/* Not a blank entry. Restart to search */
  402730:	46d3      	mov	fp, sl
		res = dir_next(dj, 1);		/* Next entry with table stretch */
  402732:	f8df 915c 	ldr.w	r9, [pc, #348]	; 402890 <dir_register+0x2c4>
  402736:	e00a      	b.n	40274e <dir_register+0x182>
			if (++n == ne) break;	/* A contiguous entry that required count is found */
  402738:	1c6b      	adds	r3, r5, #1
  40273a:	b29b      	uxth	r3, r3
  40273c:	429f      	cmp	r7, r3
  40273e:	d073      	beq.n	402828 <dir_register+0x25c>
  402740:	461d      	mov	r5, r3
		res = dir_next(dj, 1);		/* Next entry with table stretch */
  402742:	2101      	movs	r1, #1
  402744:	4620      	mov	r0, r4
  402746:	47c8      	blx	r9
	} while (res == FR_OK);
  402748:	4606      	mov	r6, r0
  40274a:	2800      	cmp	r0, #0
  40274c:	d1c0      	bne.n	4026d0 <dir_register+0x104>
		res = move_window(dj->fs, dj->sect);
  40274e:	6921      	ldr	r1, [r4, #16]
  402750:	6820      	ldr	r0, [r4, #0]
  402752:	47c0      	blx	r8
		if (res != FR_OK) break;
  402754:	4606      	mov	r6, r0
  402756:	2800      	cmp	r0, #0
  402758:	d1ba      	bne.n	4026d0 <dir_register+0x104>
		c = *dj->dir;				/* Check the entry status */
  40275a:	6963      	ldr	r3, [r4, #20]
  40275c:	781b      	ldrb	r3, [r3, #0]
		if (c == DDE || c == 0) {	/* Is it a blank entry? */
  40275e:	2be5      	cmp	r3, #229	; 0xe5
  402760:	d000      	beq.n	402764 <dir_register+0x198>
  402762:	b923      	cbnz	r3, 40276e <dir_register+0x1a2>
			if (n == 0) is = dj->index;	/* First index of the contiguous entry */
  402764:	2d00      	cmp	r5, #0
  402766:	d1e7      	bne.n	402738 <dir_register+0x16c>
  402768:	f8b4 a006 	ldrh.w	sl, [r4, #6]
  40276c:	e7e4      	b.n	402738 <dir_register+0x16c>
			n = 0;					/* Not a blank entry. Restart to search */
  40276e:	465d      	mov	r5, fp
  402770:	e7e7      	b.n	402742 <dir_register+0x176>
		if (wc != 0xFFFF) wc = lfnbuf[i++];	/* Get an effective char */
  402772:	4671      	mov	r1, lr
  402774:	e070      	b.n	402858 <dir_register+0x28c>
	if (wc == 0xFFFF || !lfnbuf[i]) ord |= LLE;	/* Bottom LFN part is the start of LFN sequence */
  402776:	f64f 72ff 	movw	r2, #65535	; 0xffff
  40277a:	4293      	cmp	r3, r2
  40277c:	d002      	beq.n	402784 <dir_register+0x1b8>
  40277e:	f839 3011 	ldrh.w	r3, [r9, r1, lsl #1]
  402782:	b90b      	cbnz	r3, 402788 <dir_register+0x1bc>
  402784:	f04b 0b40 	orr.w	fp, fp, #64	; 0x40
	dir[LDIR_Ord] = ord;			/* Set the LFN order */
  402788:	f880 b000 	strb.w	fp, [r0]
				dj->fs->wflag = 1;
  40278c:	6823      	ldr	r3, [r4, #0]
  40278e:	2201      	movs	r2, #1
  402790:	711a      	strb	r2, [r3, #4]
				res = dir_next(dj, 0);	/* Next entry */
  402792:	4639      	mov	r1, r7
  402794:	4620      	mov	r0, r4
  402796:	4b3e      	ldr	r3, [pc, #248]	; (402890 <dir_register+0x2c4>)
  402798:	4798      	blx	r3
			} while (res == FR_OK && --ne);
  40279a:	4606      	mov	r6, r0
  40279c:	2800      	cmp	r0, #0
  40279e:	d197      	bne.n	4026d0 <dir_register+0x104>
  4027a0:	3d01      	subs	r5, #1
  4027a2:	b2ad      	uxth	r5, r5
  4027a4:	b315      	cbz	r5, 4027ec <dir_register+0x220>
				res = move_window(dj->fs, dj->sect);
  4027a6:	6921      	ldr	r1, [r4, #16]
  4027a8:	6820      	ldr	r0, [r4, #0]
  4027aa:	4b3a      	ldr	r3, [pc, #232]	; (402894 <dir_register+0x2c8>)
  4027ac:	4798      	blx	r3
				if (res != FR_OK) break;
  4027ae:	4606      	mov	r6, r0
  4027b0:	2800      	cmp	r0, #0
  4027b2:	d18d      	bne.n	4026d0 <dir_register+0x104>
				fit_lfn(dj->lfn, dj->dir, (BYTE)ne, sum);
  4027b4:	f8d4 901c 	ldr.w	r9, [r4, #28]
  4027b8:	6960      	ldr	r0, [r4, #20]
  4027ba:	fa5f fb85 	uxtb.w	fp, r5
	dir[LDIR_Chksum] = sum;			/* Set check sum */
  4027be:	f89d 3000 	ldrb.w	r3, [sp]
  4027c2:	7343      	strb	r3, [r0, #13]
	dir[LDIR_Attr] = AM_LFN;		/* Set attribute. LFN entry */
  4027c4:	230f      	movs	r3, #15
  4027c6:	72c3      	strb	r3, [r0, #11]
	dir[LDIR_Type] = 0;
  4027c8:	7307      	strb	r7, [r0, #12]
	ST_WORD(dir+LDIR_FstClusLO, 0);
  4027ca:	7687      	strb	r7, [r0, #26]
  4027cc:	76c7      	strb	r7, [r0, #27]
	i = (ord - 1) * 13;				/* Get offset in the LFN buffer */
  4027ce:	f10b 31ff 	add.w	r1, fp, #4294967295
  4027d2:	eb01 0341 	add.w	r3, r1, r1, lsl #1
  4027d6:	eb01 0183 	add.w	r1, r1, r3, lsl #2
  4027da:	4a2f      	ldr	r2, [pc, #188]	; (402898 <dir_register+0x2cc>)
  4027dc:	f102 080d 	add.w	r8, r2, #13
	s = wc = 0;
  4027e0:	9b01      	ldr	r3, [sp, #4]
		if (wc != 0xFFFF) wc = lfnbuf[i++];	/* Get an effective char */
  4027e2:	f64f 76ff 	movw	r6, #65535	; 0xffff
		ST_WORD(dir+LfnOfs[s], wc);	/* Put it */
  4027e6:	f04f 0aff 	mov.w	sl, #255	; 0xff
  4027ea:	e038      	b.n	40285e <dir_register+0x292>
		res = move_window(dj->fs, dj->sect);
  4027ec:	6921      	ldr	r1, [r4, #16]
  4027ee:	6820      	ldr	r0, [r4, #0]
  4027f0:	4b28      	ldr	r3, [pc, #160]	; (402894 <dir_register+0x2c8>)
  4027f2:	4798      	blx	r3
		if (res == FR_OK) {
  4027f4:	4606      	mov	r6, r0
  4027f6:	2800      	cmp	r0, #0
  4027f8:	f47f af6a 	bne.w	4026d0 <dir_register+0x104>
			dir = dj->dir;
  4027fc:	6965      	ldr	r5, [r4, #20]
			mem_set(dir, 0, SZ_DIR);	/* Clean the entry */
  4027fe:	2220      	movs	r2, #32
  402800:	2100      	movs	r1, #0
  402802:	4628      	mov	r0, r5
  402804:	4b25      	ldr	r3, [pc, #148]	; (40289c <dir_register+0x2d0>)
  402806:	4798      	blx	r3
			mem_cpy(dir, dj->fn, 11);	/* Put SFN */
  402808:	220b      	movs	r2, #11
  40280a:	69a1      	ldr	r1, [r4, #24]
  40280c:	4628      	mov	r0, r5
  40280e:	4b1d      	ldr	r3, [pc, #116]	; (402884 <dir_register+0x2b8>)
  402810:	4798      	blx	r3
			dir[DIR_NTres] = *(dj->fn+NS) & (NS_BODY | NS_EXT);	/* Put NT flag */
  402812:	69a3      	ldr	r3, [r4, #24]
  402814:	7adb      	ldrb	r3, [r3, #11]
  402816:	f003 0318 	and.w	r3, r3, #24
  40281a:	732b      	strb	r3, [r5, #12]
			dj->fs->wflag = 1;
  40281c:	6823      	ldr	r3, [r4, #0]
  40281e:	2201      	movs	r2, #1
  402820:	711a      	strb	r2, [r3, #4]
  402822:	e755      	b.n	4026d0 <dir_register+0x104>
		if (n == 100) return FR_DENIED;		/* Abort if too many collisions */
  402824:	2607      	movs	r6, #7
  402826:	e753      	b.n	4026d0 <dir_register+0x104>
	if (res == FR_OK && ne > 1) {	/* Initialize LFN entry if needed */
  402828:	2b01      	cmp	r3, #1
  40282a:	d9df      	bls.n	4027ec <dir_register+0x220>
		res = dir_sdi(dj, is);
  40282c:	4651      	mov	r1, sl
  40282e:	4620      	mov	r0, r4
  402830:	4b16      	ldr	r3, [pc, #88]	; (40288c <dir_register+0x2c0>)
  402832:	4798      	blx	r3
		if (res == FR_OK) {
  402834:	4606      	mov	r6, r0
  402836:	2800      	cmp	r0, #0
  402838:	f47f af4a 	bne.w	4026d0 <dir_register+0x104>
			sum = sum_sfn(dj->fn);	/* Sum of the SFN tied to the LFN */
  40283c:	69a0      	ldr	r0, [r4, #24]
  40283e:	4b18      	ldr	r3, [pc, #96]	; (4028a0 <dir_register+0x2d4>)
  402840:	4798      	blx	r3
  402842:	9000      	str	r0, [sp, #0]
	dir[LDIR_Type] = 0;
  402844:	2700      	movs	r7, #0
	s = wc = 0;
  402846:	9701      	str	r7, [sp, #4]
  402848:	e7ad      	b.n	4027a6 <dir_register+0x1da>
		ST_WORD(dir+LfnOfs[s], wc);	/* Put it */
  40284a:	f892 e000 	ldrb.w	lr, [r2]
  40284e:	f800 a00e 	strb.w	sl, [r0, lr]
  402852:	4486      	add	lr, r0
  402854:	f88e a001 	strb.w	sl, [lr, #1]
  402858:	3201      	adds	r2, #1
	} while (++s < 13);
  40285a:	4542      	cmp	r2, r8
  40285c:	d08b      	beq.n	402776 <dir_register+0x1aa>
		if (wc != 0xFFFF) wc = lfnbuf[i++];	/* Get an effective char */
  40285e:	42b3      	cmp	r3, r6
  402860:	d0f3      	beq.n	40284a <dir_register+0x27e>
  402862:	f101 0e01 	add.w	lr, r1, #1
  402866:	f839 3011 	ldrh.w	r3, [r9, r1, lsl #1]
		ST_WORD(dir+LfnOfs[s], wc);	/* Put it */
  40286a:	7811      	ldrb	r1, [r2, #0]
  40286c:	5443      	strb	r3, [r0, r1]
  40286e:	4401      	add	r1, r0
  402870:	ea4f 2c13 	mov.w	ip, r3, lsr #8
  402874:	f881 c001 	strb.w	ip, [r1, #1]
		if (!wc) wc = 0xFFFF;		/* Padding chars following last char */
  402878:	2b00      	cmp	r3, #0
  40287a:	f47f af7a 	bne.w	402772 <dir_register+0x1a6>
		if (wc != 0xFFFF) wc = lfnbuf[i++];	/* Get an effective char */
  40287e:	4671      	mov	r1, lr
		if (!wc) wc = 0xFFFF;		/* Padding chars following last char */
  402880:	4633      	mov	r3, r6
  402882:	e7e9      	b.n	402858 <dir_register+0x28c>
  402884:	004019d5 	.word	0x004019d5
  402888:	4ec4ec4f 	.word	0x4ec4ec4f
  40288c:	00401fd9 	.word	0x00401fd9
  402890:	004022ed 	.word	0x004022ed
  402894:	00401e61 	.word	0x00401e61
  402898:	0040c3e0 	.word	0x0040c3e0
  40289c:	004019e9 	.word	0x004019e9
  4028a0:	00401a0f 	.word	0x00401a0f
  4028a4:	00402425 	.word	0x00402425

004028a8 <sync>:
{
  4028a8:	b570      	push	{r4, r5, r6, lr}
  4028aa:	4604      	mov	r4, r0
	res = move_window(fs, 0);
  4028ac:	2100      	movs	r1, #0
  4028ae:	4b2d      	ldr	r3, [pc, #180]	; (402964 <sync+0xbc>)
  4028b0:	4798      	blx	r3
	if (res == FR_OK) {
  4028b2:	4603      	mov	r3, r0
  4028b4:	b950      	cbnz	r0, 4028cc <sync+0x24>
		if (fs->fs_type == FS_FAT32 && fs->fsi_flag) {
  4028b6:	7823      	ldrb	r3, [r4, #0]
  4028b8:	2b03      	cmp	r3, #3
  4028ba:	d009      	beq.n	4028d0 <sync+0x28>
		if (disk_ioctl(fs->drv, CTRL_SYNC, 0) != RES_OK)
  4028bc:	2200      	movs	r2, #0
  4028be:	4611      	mov	r1, r2
  4028c0:	7860      	ldrb	r0, [r4, #1]
  4028c2:	4b29      	ldr	r3, [pc, #164]	; (402968 <sync+0xc0>)
  4028c4:	4798      	blx	r3
	res = move_window(fs, 0);
  4028c6:	1c03      	adds	r3, r0, #0
  4028c8:	bf18      	it	ne
  4028ca:	2301      	movne	r3, #1
}
  4028cc:	4618      	mov	r0, r3
  4028ce:	bd70      	pop	{r4, r5, r6, pc}
		if (fs->fs_type == FS_FAT32 && fs->fsi_flag) {
  4028d0:	7963      	ldrb	r3, [r4, #5]
  4028d2:	2b00      	cmp	r3, #0
  4028d4:	d0f2      	beq.n	4028bc <sync+0x14>
			fs->winsect = 0;
  4028d6:	2600      	movs	r6, #0
  4028d8:	62e6      	str	r6, [r4, #44]	; 0x2c
			mem_set(fs->win, 0, 512);
  4028da:	f104 0530 	add.w	r5, r4, #48	; 0x30
  4028de:	f44f 7200 	mov.w	r2, #512	; 0x200
  4028e2:	4631      	mov	r1, r6
  4028e4:	4628      	mov	r0, r5
  4028e6:	4b21      	ldr	r3, [pc, #132]	; (40296c <sync+0xc4>)
  4028e8:	4798      	blx	r3
			ST_WORD(fs->win+BS_55AA, 0xAA55);
  4028ea:	2355      	movs	r3, #85	; 0x55
  4028ec:	f884 322e 	strb.w	r3, [r4, #558]	; 0x22e
  4028f0:	23aa      	movs	r3, #170	; 0xaa
  4028f2:	f884 322f 	strb.w	r3, [r4, #559]	; 0x22f
			ST_DWORD(fs->win+FSI_LeadSig, 0x41615252);
  4028f6:	2352      	movs	r3, #82	; 0x52
  4028f8:	f884 3030 	strb.w	r3, [r4, #48]	; 0x30
  4028fc:	f884 3031 	strb.w	r3, [r4, #49]	; 0x31
  402900:	2361      	movs	r3, #97	; 0x61
  402902:	f884 3032 	strb.w	r3, [r4, #50]	; 0x32
  402906:	2241      	movs	r2, #65	; 0x41
  402908:	f884 2033 	strb.w	r2, [r4, #51]	; 0x33
			ST_DWORD(fs->win+FSI_StrucSig, 0x61417272);
  40290c:	2172      	movs	r1, #114	; 0x72
  40290e:	f884 1214 	strb.w	r1, [r4, #532]	; 0x214
  402912:	f884 1215 	strb.w	r1, [r4, #533]	; 0x215
  402916:	f884 2216 	strb.w	r2, [r4, #534]	; 0x216
  40291a:	f884 3217 	strb.w	r3, [r4, #535]	; 0x217
			ST_DWORD(fs->win+FSI_Free_Count, fs->free_clust);
  40291e:	6923      	ldr	r3, [r4, #16]
  402920:	f884 3218 	strb.w	r3, [r4, #536]	; 0x218
  402924:	f3c3 2207 	ubfx	r2, r3, #8, #8
  402928:	f884 2219 	strb.w	r2, [r4, #537]	; 0x219
  40292c:	0c1a      	lsrs	r2, r3, #16
  40292e:	f884 221a 	strb.w	r2, [r4, #538]	; 0x21a
  402932:	0e1b      	lsrs	r3, r3, #24
  402934:	f884 321b 	strb.w	r3, [r4, #539]	; 0x21b
			ST_DWORD(fs->win+FSI_Nxt_Free, fs->last_clust);
  402938:	68e3      	ldr	r3, [r4, #12]
  40293a:	f884 321c 	strb.w	r3, [r4, #540]	; 0x21c
  40293e:	f3c3 2207 	ubfx	r2, r3, #8, #8
  402942:	f884 221d 	strb.w	r2, [r4, #541]	; 0x21d
  402946:	0c1a      	lsrs	r2, r3, #16
  402948:	f884 221e 	strb.w	r2, [r4, #542]	; 0x21e
  40294c:	0e1b      	lsrs	r3, r3, #24
  40294e:	f884 321f 	strb.w	r3, [r4, #543]	; 0x21f
			disk_write(fs->drv, fs->win, fs->fsi_sector, 1);
  402952:	2301      	movs	r3, #1
  402954:	6962      	ldr	r2, [r4, #20]
  402956:	4629      	mov	r1, r5
  402958:	7860      	ldrb	r0, [r4, #1]
  40295a:	4d05      	ldr	r5, [pc, #20]	; (402970 <sync+0xc8>)
  40295c:	47a8      	blx	r5
			fs->fsi_flag = 0;
  40295e:	7166      	strb	r6, [r4, #5]
  402960:	e7ac      	b.n	4028bc <sync+0x14>
  402962:	bf00      	nop
  402964:	00401e61 	.word	0x00401e61
  402968:	0040190d 	.word	0x0040190d
  40296c:	004019e9 	.word	0x004019e9
  402970:	0040189d 	.word	0x0040189d

00402974 <follow_path>:
{
  402974:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  402978:	b083      	sub	sp, #12
  40297a:	4682      	mov	sl, r0
  40297c:	460d      	mov	r5, r1
	if (*path == '/' || *path == '\\')	/* Strip heading separator if exist */
  40297e:	780b      	ldrb	r3, [r1, #0]
  402980:	2b2f      	cmp	r3, #47	; 0x2f
  402982:	d00a      	beq.n	40299a <follow_path+0x26>
  402984:	2b5c      	cmp	r3, #92	; 0x5c
  402986:	d008      	beq.n	40299a <follow_path+0x26>
	dj->sclust = 0;						/* Start from the root dir */
  402988:	2300      	movs	r3, #0
  40298a:	f8ca 3008 	str.w	r3, [sl, #8]
	if ((UINT)*path < ' ') {			/* Nul path means the start directory itself */
  40298e:	782b      	ldrb	r3, [r5, #0]
  402990:	2b1f      	cmp	r3, #31
  402992:	d904      	bls.n	40299e <follow_path+0x2a>
		w = ff_convert(w, 1);			/* Convert ANSI/OEM to Unicode */
  402994:	f8df b2fc 	ldr.w	fp, [pc, #764]	; 402c94 <follow_path+0x320>
  402998:	e130      	b.n	402bfc <follow_path+0x288>
		path++;
  40299a:	3501      	adds	r5, #1
  40299c:	e7f4      	b.n	402988 <follow_path+0x14>
		res = dir_sdi(dj, 0);
  40299e:	2100      	movs	r1, #0
  4029a0:	4650      	mov	r0, sl
  4029a2:	4bb6      	ldr	r3, [pc, #728]	; (402c7c <follow_path+0x308>)
  4029a4:	4798      	blx	r3
  4029a6:	4603      	mov	r3, r0
		dj->dir = 0;
  4029a8:	2200      	movs	r2, #0
  4029aa:	f8ca 2014 	str.w	r2, [sl, #20]
  4029ae:	e15a      	b.n	402c66 <follow_path+0x2f2>
		if (w < 0x80 && chk_chr("\"*:<>\?|\x7F", w)) /* Reject illegal chars for LFN */
  4029b0:	2b00      	cmp	r3, #0
  4029b2:	f040 8152 	bne.w	402c5a <follow_path+0x2e6>
		lfn[di++] = w;					/* Store the Unicode char */
  4029b6:	f827 2f02 	strh.w	r2, [r7, #2]!
		w = p[si++];					/* Get a character */
  4029ba:	1c63      	adds	r3, r4, #1
  4029bc:	f816 0f01 	ldrb.w	r0, [r6, #1]!
		if (w < ' ' || w == '/' || w == '\\') break;	/* Break on end of segment */
  4029c0:	282f      	cmp	r0, #47	; 0x2f
  4029c2:	bf18      	it	ne
  4029c4:	281f      	cmpne	r0, #31
  4029c6:	d91b      	bls.n	402a00 <follow_path+0x8c>
  4029c8:	285c      	cmp	r0, #92	; 0x5c
  4029ca:	d019      	beq.n	402a00 <follow_path+0x8c>
		if (di >= _MAX_LFN)				/* Reject too long name */
  4029cc:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
  4029d0:	f000 8143 	beq.w	402c5a <follow_path+0x2e6>
		w = p[si++];					/* Get a character */
  4029d4:	461c      	mov	r4, r3
		w = ff_convert(w, 1);			/* Convert ANSI/OEM to Unicode */
  4029d6:	4641      	mov	r1, r8
  4029d8:	47d8      	blx	fp
		if (!w) return FR_INVALID_NAME;	/* Reject invalid code */
  4029da:	4602      	mov	r2, r0
  4029dc:	2800      	cmp	r0, #0
  4029de:	f000 813c 	beq.w	402c5a <follow_path+0x2e6>
		if (w < 0x80 && chk_chr("\"*:<>\?|\x7F", w)) /* Reject illegal chars for LFN */
  4029e2:	287f      	cmp	r0, #127	; 0x7f
  4029e4:	d8e7      	bhi.n	4029b6 <follow_path+0x42>
	while (*str && *str != chr) str++;
  4029e6:	2822      	cmp	r0, #34	; 0x22
  4029e8:	f000 813c 	beq.w	402c64 <follow_path+0x2f0>
  4029ec:	232a      	movs	r3, #42	; 0x2a
  4029ee:	49a4      	ldr	r1, [pc, #656]	; (402c80 <follow_path+0x30c>)
  4029f0:	b298      	uxth	r0, r3
  4029f2:	4290      	cmp	r0, r2
  4029f4:	d0dc      	beq.n	4029b0 <follow_path+0x3c>
  4029f6:	f811 3f01 	ldrb.w	r3, [r1, #1]!
  4029fa:	2b00      	cmp	r3, #0
  4029fc:	d1f8      	bne.n	4029f0 <follow_path+0x7c>
  4029fe:	e7da      	b.n	4029b6 <follow_path+0x42>
	*path = &p[si];						/* Return pointer to the next segment */
  402a00:	441d      	add	r5, r3
	cf = (w < ' ') ? NS_LAST : 0;		/* Set last segment flag if end of path */
  402a02:	2820      	cmp	r0, #32
  402a04:	bf34      	ite	cc
  402a06:	2604      	movcc	r6, #4
  402a08:	2600      	movcs	r6, #0
	while (di) {						/* Strip trailing spaces and dots */
  402a0a:	2c00      	cmp	r4, #0
  402a0c:	f000 812a 	beq.w	402c64 <follow_path+0x2f0>
		w = lfn[di-1];
  402a10:	f06f 4300 	mvn.w	r3, #2147483648	; 0x80000000
  402a14:	4423      	add	r3, r4
  402a16:	eb09 0243 	add.w	r2, r9, r3, lsl #1
  402a1a:	f839 3013 	ldrh.w	r3, [r9, r3, lsl #1]
		if (w != ' ' && w != '.') break;
  402a1e:	2b20      	cmp	r3, #32
  402a20:	d001      	beq.n	402a26 <follow_path+0xb2>
  402a22:	2b2e      	cmp	r3, #46	; 0x2e
  402a24:	d108      	bne.n	402a38 <follow_path+0xc4>
	while (di) {						/* Strip trailing spaces and dots */
  402a26:	3c01      	subs	r4, #1
  402a28:	f000 811c 	beq.w	402c64 <follow_path+0x2f0>
		w = lfn[di-1];
  402a2c:	f832 3d02 	ldrh.w	r3, [r2, #-2]!
		if (w != ' ' && w != '.') break;
  402a30:	2b20      	cmp	r3, #32
  402a32:	d0f8      	beq.n	402a26 <follow_path+0xb2>
  402a34:	2b2e      	cmp	r3, #46	; 0x2e
  402a36:	d0f6      	beq.n	402a26 <follow_path+0xb2>
	lfn[di] = 0;						/* LFN is created */
  402a38:	0067      	lsls	r7, r4, #1
  402a3a:	2300      	movs	r3, #0
  402a3c:	f829 3014 	strh.w	r3, [r9, r4, lsl #1]
	mem_set(dj->fn, ' ', 11);
  402a40:	220b      	movs	r2, #11
  402a42:	2120      	movs	r1, #32
  402a44:	f8da 0018 	ldr.w	r0, [sl, #24]
  402a48:	4b8e      	ldr	r3, [pc, #568]	; (402c84 <follow_path+0x310>)
  402a4a:	4798      	blx	r3
	for (si = 0; lfn[si] == ' ' || lfn[si] == '.'; si++) ;	/* Strip leading spaces and dots */
  402a4c:	f8b9 3000 	ldrh.w	r3, [r9]
  402a50:	2b20      	cmp	r3, #32
  402a52:	d001      	beq.n	402a58 <follow_path+0xe4>
  402a54:	2b2e      	cmp	r3, #46	; 0x2e
  402a56:	d11f      	bne.n	402a98 <follow_path+0x124>
  402a58:	4649      	mov	r1, r9
  402a5a:	2300      	movs	r3, #0
  402a5c:	3301      	adds	r3, #1
  402a5e:	f831 2f02 	ldrh.w	r2, [r1, #2]!
  402a62:	2a20      	cmp	r2, #32
  402a64:	d0fa      	beq.n	402a5c <follow_path+0xe8>
  402a66:	2a2e      	cmp	r2, #46	; 0x2e
  402a68:	d0f8      	beq.n	402a5c <follow_path+0xe8>
	if (si) cf |= NS_LOSS | NS_LFN;
  402a6a:	b10b      	cbz	r3, 402a70 <follow_path+0xfc>
  402a6c:	f046 0603 	orr.w	r6, r6, #3
	while (di && lfn[di - 1] != '.') di--;	/* Find extension (di<=si: no extension) */
  402a70:	3f02      	subs	r7, #2
  402a72:	eb09 0207 	add.w	r2, r9, r7
  402a76:	f839 1007 	ldrh.w	r1, [r9, r7]
  402a7a:	292e      	cmp	r1, #46	; 0x2e
  402a7c:	d005      	beq.n	402a8a <follow_path+0x116>
  402a7e:	3c01      	subs	r4, #1
  402a80:	d003      	beq.n	402a8a <follow_path+0x116>
  402a82:	f832 1d02 	ldrh.w	r1, [r2, #-2]!
  402a86:	292e      	cmp	r1, #46	; 0x2e
  402a88:	d1f9      	bne.n	402a7e <follow_path+0x10a>
		dj->fn[i++] = (BYTE)w;
  402a8a:	2208      	movs	r2, #8
  402a8c:	9200      	str	r2, [sp, #0]
  402a8e:	f04f 0800 	mov.w	r8, #0
  402a92:	f8cd 8004 	str.w	r8, [sp, #4]
  402a96:	e004      	b.n	402aa2 <follow_path+0x12e>
	for (si = 0; lfn[si] == ' ' || lfn[si] == '.'; si++) ;	/* Strip leading spaces and dots */
  402a98:	2300      	movs	r3, #0
  402a9a:	e7e9      	b.n	402a70 <follow_path+0xfc>
			cf |= NS_LOSS | NS_LFN; continue;
  402a9c:	f046 0603 	orr.w	r6, r6, #3
		w = lfn[si++];					/* Get an LFN char */
  402aa0:	463b      	mov	r3, r7
  402aa2:	1c5f      	adds	r7, r3, #1
  402aa4:	f839 0013 	ldrh.w	r0, [r9, r3, lsl #1]
		if (!w) break;					/* Break on end of the LFN */
  402aa8:	2800      	cmp	r0, #0
  402aaa:	d066      	beq.n	402b7a <follow_path+0x206>
		if (w == ' ' || (w == '.' && si != di)) {	/* Remove spaces and dots */
  402aac:	2820      	cmp	r0, #32
  402aae:	d0f5      	beq.n	402a9c <follow_path+0x128>
  402ab0:	282e      	cmp	r0, #46	; 0x2e
  402ab2:	d101      	bne.n	402ab8 <follow_path+0x144>
  402ab4:	42a7      	cmp	r7, r4
  402ab6:	d1f1      	bne.n	402a9c <follow_path+0x128>
		if (i >= ni || si == di) {		/* Extension or end of SFN */
  402ab8:	9b00      	ldr	r3, [sp, #0]
  402aba:	4598      	cmp	r8, r3
  402abc:	d218      	bcs.n	402af0 <follow_path+0x17c>
  402abe:	42a7      	cmp	r7, r4
  402ac0:	d016      	beq.n	402af0 <follow_path+0x17c>
		if (w >= 0x80) {				/* Non ASCII char */
  402ac2:	287f      	cmp	r0, #127	; 0x7f
  402ac4:	d831      	bhi.n	402b2a <follow_path+0x1b6>
	while (*str && *str != chr) str++;
  402ac6:	282b      	cmp	r0, #43	; 0x2b
  402ac8:	d03d      	beq.n	402b46 <follow_path+0x1d2>
  402aca:	232c      	movs	r3, #44	; 0x2c
  402acc:	496e      	ldr	r1, [pc, #440]	; (402c88 <follow_path+0x314>)
  402ace:	b29a      	uxth	r2, r3
  402ad0:	4282      	cmp	r2, r0
  402ad2:	d043      	beq.n	402b5c <follow_path+0x1e8>
  402ad4:	f811 3f01 	ldrb.w	r3, [r1, #1]!
  402ad8:	2b00      	cmp	r3, #0
  402ada:	d1f8      	bne.n	402ace <follow_path+0x15a>
				if (IsUpper(w)) {		/* ASCII large capital */
  402adc:	f1a0 0341 	sub.w	r3, r0, #65	; 0x41
  402ae0:	b29b      	uxth	r3, r3
  402ae2:	2b19      	cmp	r3, #25
  402ae4:	d83d      	bhi.n	402b62 <follow_path+0x1ee>
					b |= 2;
  402ae6:	9b01      	ldr	r3, [sp, #4]
  402ae8:	f043 0302 	orr.w	r3, r3, #2
  402aec:	9301      	str	r3, [sp, #4]
  402aee:	e02d      	b.n	402b4c <follow_path+0x1d8>
			if (ni == 11) {				/* Long extension */
  402af0:	9b00      	ldr	r3, [sp, #0]
  402af2:	2b0b      	cmp	r3, #11
  402af4:	d00f      	beq.n	402b16 <follow_path+0x1a2>
			if (si != di) cf |= NS_LOSS | NS_LFN;	/* Out of 8.3 format */
  402af6:	42a7      	cmp	r7, r4
  402af8:	bf18      	it	ne
  402afa:	f046 0603 	orrne.w	r6, r6, #3
			if (si > di) break;			/* No extension */
  402afe:	42a7      	cmp	r7, r4
  402b00:	d83b      	bhi.n	402b7a <follow_path+0x206>
			b <<= 2; continue;
  402b02:	9b01      	ldr	r3, [sp, #4]
  402b04:	009b      	lsls	r3, r3, #2
  402b06:	b2db      	uxtb	r3, r3
  402b08:	9301      	str	r3, [sp, #4]
  402b0a:	4623      	mov	r3, r4
			si = di; i = 8; ni = 11;	/* Enter extension section */
  402b0c:	220b      	movs	r2, #11
  402b0e:	9200      	str	r2, [sp, #0]
  402b10:	f04f 0808 	mov.w	r8, #8
  402b14:	e7c5      	b.n	402aa2 <follow_path+0x12e>
				cf |= NS_LOSS | NS_LFN; break;
  402b16:	f046 0603 	orr.w	r6, r6, #3
	if (dj->fn[0] == DDE) dj->fn[0] = NDDE;	/* If the first char collides with deleted mark, replace it with 0x05 */
  402b1a:	f8da 3018 	ldr.w	r3, [sl, #24]
  402b1e:	781a      	ldrb	r2, [r3, #0]
  402b20:	2ae5      	cmp	r2, #229	; 0xe5
  402b22:	d132      	bne.n	402b8a <follow_path+0x216>
  402b24:	2205      	movs	r2, #5
  402b26:	701a      	strb	r2, [r3, #0]
  402b28:	e02c      	b.n	402b84 <follow_path+0x210>
			w = ff_convert(w, 0);		/* Unicode -> OEM code */
  402b2a:	2100      	movs	r1, #0
  402b2c:	47d8      	blx	fp
			if (w) w = excvt[w - 0x80];	/* Convert extended char to upper (SBCS) */
  402b2e:	4603      	mov	r3, r0
  402b30:	2800      	cmp	r0, #0
  402b32:	f000 809f 	beq.w	402c74 <follow_path+0x300>
  402b36:	4a55      	ldr	r2, [pc, #340]	; (402c8c <follow_path+0x318>)
  402b38:	4413      	add	r3, r2
  402b3a:	f813 0c80 	ldrb.w	r0, [r3, #-128]
			cf |= NS_LFN;				/* Force create LFN entry */
  402b3e:	f046 0602 	orr.w	r6, r6, #2
			if (!w || chk_chr("+,;=[]", w)) {	/* Replace illegal chars for SFN */
  402b42:	2800      	cmp	r0, #0
  402b44:	d1bf      	bne.n	402ac6 <follow_path+0x152>
				w = '_'; cf |= NS_LOSS | NS_LFN;/* Lossy conversion */
  402b46:	f046 0603 	orr.w	r6, r6, #3
  402b4a:	205f      	movs	r0, #95	; 0x5f
		dj->fn[i++] = (BYTE)w;
  402b4c:	f8da 3018 	ldr.w	r3, [sl, #24]
  402b50:	f803 0008 	strb.w	r0, [r3, r8]
		w = lfn[si++];					/* Get an LFN char */
  402b54:	463b      	mov	r3, r7
		dj->fn[i++] = (BYTE)w;
  402b56:	f108 0801 	add.w	r8, r8, #1
  402b5a:	e7a2      	b.n	402aa2 <follow_path+0x12e>
			if (!w || chk_chr("+,;=[]", w)) {	/* Replace illegal chars for SFN */
  402b5c:	2b00      	cmp	r3, #0
  402b5e:	d1f2      	bne.n	402b46 <follow_path+0x1d2>
  402b60:	e7bc      	b.n	402adc <follow_path+0x168>
					if (IsLower(w)) {	/* ASCII small capital */
  402b62:	f1a0 0361 	sub.w	r3, r0, #97	; 0x61
  402b66:	b29b      	uxth	r3, r3
  402b68:	2b19      	cmp	r3, #25
  402b6a:	d8ef      	bhi.n	402b4c <follow_path+0x1d8>
						b |= 1; w -= 0x20;
  402b6c:	9b01      	ldr	r3, [sp, #4]
  402b6e:	f043 0301 	orr.w	r3, r3, #1
  402b72:	9301      	str	r3, [sp, #4]
  402b74:	3820      	subs	r0, #32
  402b76:	b280      	uxth	r0, r0
  402b78:	e7e8      	b.n	402b4c <follow_path+0x1d8>
	if (dj->fn[0] == DDE) dj->fn[0] = NDDE;	/* If the first char collides with deleted mark, replace it with 0x05 */
  402b7a:	f8da 3018 	ldr.w	r3, [sl, #24]
  402b7e:	781a      	ldrb	r2, [r3, #0]
  402b80:	2ae5      	cmp	r2, #229	; 0xe5
  402b82:	d0cf      	beq.n	402b24 <follow_path+0x1b0>
	if (ni == 8) b <<= 2;
  402b84:	9b00      	ldr	r3, [sp, #0]
  402b86:	2b08      	cmp	r3, #8
  402b88:	d052      	beq.n	402c30 <follow_path+0x2bc>
  402b8a:	9a01      	ldr	r2, [sp, #4]
  402b8c:	f002 030c 	and.w	r3, r2, #12
	if ((b & 0x0C) == 0x0C || (b & 0x03) == 0x03)	/* Create LFN entry when there are composite capitals */
  402b90:	2b0c      	cmp	r3, #12
  402b92:	d054      	beq.n	402c3e <follow_path+0x2ca>
  402b94:	f002 0203 	and.w	r2, r2, #3
  402b98:	2a03      	cmp	r2, #3
  402b9a:	d050      	beq.n	402c3e <follow_path+0x2ca>
	if (!(cf & NS_LFN)) {						/* When LFN is in 8.3 format without extended char, NT flags are created */
  402b9c:	f016 0f02 	tst.w	r6, #2
  402ba0:	d10b      	bne.n	402bba <follow_path+0x246>
		if ((b & 0x03) == 0x01) cf |= NS_EXT;	/* NT flag (Extension has only small capital) */
  402ba2:	9a01      	ldr	r2, [sp, #4]
  402ba4:	f002 0903 	and.w	r9, r2, #3
  402ba8:	f1b9 0f01 	cmp.w	r9, #1
  402bac:	bf08      	it	eq
  402bae:	f046 0610 	orreq.w	r6, r6, #16
		if ((b & 0x0C) == 0x04) cf |= NS_BODY;	/* NT flag (Filename has only small capital) */
  402bb2:	2b04      	cmp	r3, #4
  402bb4:	bf08      	it	eq
  402bb6:	f046 0608 	orreq.w	r6, r6, #8
	dj->fn[NS] = cf;	/* SFN is created */
  402bba:	f8da 3018 	ldr.w	r3, [sl, #24]
  402bbe:	72de      	strb	r6, [r3, #11]
			res = dir_find(dj);				/* Find it */
  402bc0:	4650      	mov	r0, sl
  402bc2:	4b33      	ldr	r3, [pc, #204]	; (402c90 <follow_path+0x31c>)
  402bc4:	4798      	blx	r3
			ns = *(dj->fn+NS);
  402bc6:	f8da 3018 	ldr.w	r3, [sl, #24]
  402bca:	7ada      	ldrb	r2, [r3, #11]
			if (res != FR_OK) {				/* Failed to find the object */
  402bcc:	4603      	mov	r3, r0
  402bce:	2800      	cmp	r0, #0
  402bd0:	d138      	bne.n	402c44 <follow_path+0x2d0>
			if (ns & NS_LAST) break;			/* Last segment match. Function completed. */
  402bd2:	f012 0f04 	tst.w	r2, #4
  402bd6:	d146      	bne.n	402c66 <follow_path+0x2f2>
			dir = dj->dir;						/* There is next segment. Follow the sub directory */
  402bd8:	f8da 3014 	ldr.w	r3, [sl, #20]
			if (!(dir[DIR_Attr] & AM_DIR)) {	/* Cannot follow because it is a file */
  402bdc:	7ada      	ldrb	r2, [r3, #11]
  402bde:	f012 0f10 	tst.w	r2, #16
  402be2:	d038      	beq.n	402c56 <follow_path+0x2e2>
			dj->sclust = LD_CLUST(dir);
  402be4:	7d59      	ldrb	r1, [r3, #21]
  402be6:	7d1a      	ldrb	r2, [r3, #20]
  402be8:	ea42 2201 	orr.w	r2, r2, r1, lsl #8
  402bec:	7ed9      	ldrb	r1, [r3, #27]
  402bee:	7e9b      	ldrb	r3, [r3, #26]
  402bf0:	ea43 2301 	orr.w	r3, r3, r1, lsl #8
  402bf4:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
  402bf8:	f8ca 3008 	str.w	r3, [sl, #8]
	for (p = *path; *p == '/' || *p == '\\'; p++) ;	/* Strip duplicated separator */
  402bfc:	782b      	ldrb	r3, [r5, #0]
  402bfe:	2b2f      	cmp	r3, #47	; 0x2f
  402c00:	d001      	beq.n	402c06 <follow_path+0x292>
  402c02:	2b5c      	cmp	r3, #92	; 0x5c
  402c04:	d105      	bne.n	402c12 <follow_path+0x29e>
  402c06:	f815 3f01 	ldrb.w	r3, [r5, #1]!
  402c0a:	2b2f      	cmp	r3, #47	; 0x2f
  402c0c:	d0fb      	beq.n	402c06 <follow_path+0x292>
  402c0e:	2b5c      	cmp	r3, #92	; 0x5c
  402c10:	d0f9      	beq.n	402c06 <follow_path+0x292>
	lfn = dj->lfn;
  402c12:	f8da 901c 	ldr.w	r9, [sl, #28]
		w = p[si++];					/* Get a character */
  402c16:	7828      	ldrb	r0, [r5, #0]
		if (w < ' ' || w == '/' || w == '\\') break;	/* Break on end of segment */
  402c18:	282f      	cmp	r0, #47	; 0x2f
  402c1a:	bf18      	it	ne
  402c1c:	281f      	cmpne	r0, #31
  402c1e:	d91e      	bls.n	402c5e <follow_path+0x2ea>
  402c20:	285c      	cmp	r0, #92	; 0x5c
  402c22:	d01c      	beq.n	402c5e <follow_path+0x2ea>
  402c24:	f1a9 0702 	sub.w	r7, r9, #2
  402c28:	462e      	mov	r6, r5
  402c2a:	2401      	movs	r4, #1
		w = ff_convert(w, 1);			/* Convert ANSI/OEM to Unicode */
  402c2c:	46a0      	mov	r8, r4
  402c2e:	e6d2      	b.n	4029d6 <follow_path+0x62>
	if (ni == 8) b <<= 2;
  402c30:	9b01      	ldr	r3, [sp, #4]
  402c32:	ea4f 0983 	mov.w	r9, r3, lsl #2
  402c36:	fa5f f389 	uxtb.w	r3, r9
  402c3a:	9301      	str	r3, [sp, #4]
  402c3c:	e7a5      	b.n	402b8a <follow_path+0x216>
		cf |= NS_LFN;
  402c3e:	f046 0602 	orr.w	r6, r6, #2
  402c42:	e7ab      	b.n	402b9c <follow_path+0x228>
				if (res != FR_NO_FILE) break;	/* Abort if any hard error occured */
  402c44:	2804      	cmp	r0, #4
  402c46:	d10e      	bne.n	402c66 <follow_path+0x2f2>
					if (!(ns & NS_LAST)) res = FR_NO_PATH;
  402c48:	f002 0204 	and.w	r2, r2, #4
  402c4c:	2a00      	cmp	r2, #0
  402c4e:	bf14      	ite	ne
  402c50:	4603      	movne	r3, r0
  402c52:	2305      	moveq	r3, #5
  402c54:	e007      	b.n	402c66 <follow_path+0x2f2>
				res = FR_NO_PATH; break;
  402c56:	2305      	movs	r3, #5
  402c58:	e005      	b.n	402c66 <follow_path+0x2f2>
					if (!(ns & NS_LAST)) res = FR_NO_PATH;
  402c5a:	2306      	movs	r3, #6
	return res;
  402c5c:	e003      	b.n	402c66 <follow_path+0x2f2>
	*path = &p[si];						/* Return pointer to the next segment */
  402c5e:	3501      	adds	r5, #1
	cf = (w < ' ') ? NS_LAST : 0;		/* Set last segment flag if end of path */
  402c60:	281f      	cmp	r0, #31
  402c62:	d804      	bhi.n	402c6e <follow_path+0x2fa>
  402c64:	2306      	movs	r3, #6
}
  402c66:	4618      	mov	r0, r3
  402c68:	b003      	add	sp, #12
  402c6a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
	si = di = 0;
  402c6e:	2400      	movs	r4, #0
	cf = (w < ' ') ? NS_LAST : 0;		/* Set last segment flag if end of path */
  402c70:	4626      	mov	r6, r4
  402c72:	e6ca      	b.n	402a0a <follow_path+0x96>
			cf |= NS_LFN;				/* Force create LFN entry */
  402c74:	f046 0602 	orr.w	r6, r6, #2
  402c78:	e765      	b.n	402b46 <follow_path+0x1d2>
  402c7a:	bf00      	nop
  402c7c:	00401fd9 	.word	0x00401fd9
  402c80:	0040c471 	.word	0x0040c471
  402c84:	004019e9 	.word	0x004019e9
  402c88:	0040c47d 	.word	0x0040c47d
  402c8c:	0040c3f0 	.word	0x0040c3f0
  402c90:	00402425 	.word	0x00402425
  402c94:	0040334d 	.word	0x0040334d

00402c98 <f_mount>:
)
{
	FATFS *rfs;


	if (vol >= _VOLUMES)		/* Check if the drive number is valid */
  402c98:	2807      	cmp	r0, #7
  402c9a:	d901      	bls.n	402ca0 <f_mount+0x8>
		return FR_INVALID_DRIVE;
  402c9c:	200b      	movs	r0, #11
#endif
	}
	FatFs[vol] = fs;			/* Register new fs object */

	return FR_OK;
}
  402c9e:	4770      	bx	lr
	rfs = FatFs[vol];			/* Get current fs object */
  402ca0:	4b06      	ldr	r3, [pc, #24]	; (402cbc <f_mount+0x24>)
  402ca2:	f853 3020 	ldr.w	r3, [r3, r0, lsl #2]
	if (rfs) {
  402ca6:	b10b      	cbz	r3, 402cac <f_mount+0x14>
		rfs->fs_type = 0;		/* Clear old fs object */
  402ca8:	2200      	movs	r2, #0
  402caa:	701a      	strb	r2, [r3, #0]
	if (fs) {
  402cac:	b109      	cbz	r1, 402cb2 <f_mount+0x1a>
		fs->fs_type = 0;		/* Clear new fs object */
  402cae:	2300      	movs	r3, #0
  402cb0:	700b      	strb	r3, [r1, #0]
	FatFs[vol] = fs;			/* Register new fs object */
  402cb2:	4b02      	ldr	r3, [pc, #8]	; (402cbc <f_mount+0x24>)
  402cb4:	f843 1020 	str.w	r1, [r3, r0, lsl #2]
	return FR_OK;
  402cb8:	2000      	movs	r0, #0
  402cba:	4770      	bx	lr
  402cbc:	20400a2c 	.word	0x20400a2c

00402cc0 <f_open>:
FRESULT f_open (
	FIL *fp,			/* Pointer to the blank file object */
	const TCHAR *path,	/* Pointer to the file name */
	BYTE mode			/* Access mode and file open mode flags */
)
{
  402cc0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  402cc4:	f5ad 7d0e 	sub.w	sp, sp, #568	; 0x238
  402cc8:	4605      	mov	r5, r0
  402cca:	9101      	str	r1, [sp, #4]
  402ccc:	4616      	mov	r6, r2
	DIR dj;
	BYTE *dir;
	DEF_NAMEBUF;


	fp->fs = 0;			/* Clear file object */
  402cce:	2300      	movs	r3, #0
  402cd0:	6003      	str	r3, [r0, #0]

#if !_FS_READONLY
	mode &= FA_READ | FA_WRITE | FA_CREATE_ALWAYS | FA_OPEN_ALWAYS | FA_CREATE_NEW;
  402cd2:	f002 071f 	and.w	r7, r2, #31
	res = chk_mounted(&path, &dj.fs, (BYTE)(mode & ~FA_READ));
  402cd6:	f002 021e 	and.w	r2, r2, #30
  402cda:	a985      	add	r1, sp, #532	; 0x214
  402cdc:	a801      	add	r0, sp, #4
  402cde:	4b58      	ldr	r3, [pc, #352]	; (402e40 <f_open+0x180>)
  402ce0:	4798      	blx	r3
#else
	mode &= FA_READ;
	res = chk_mounted(&path, &dj.fs, 0);
#endif
	INIT_BUF(dj);
  402ce2:	ab82      	add	r3, sp, #520	; 0x208
  402ce4:	938b      	str	r3, [sp, #556]	; 0x22c
  402ce6:	ab02      	add	r3, sp, #8
  402ce8:	938c      	str	r3, [sp, #560]	; 0x230
	if (res == FR_OK)
  402cea:	b168      	cbz	r0, 402d08 <f_open+0x48>
  402cec:	4603      	mov	r3, r0
		res = follow_path(&dj, path);	/* Follow the file path */
	dir = dj.dir;
  402cee:	9c8a      	ldr	r4, [sp, #552]	; 0x228
		else
			res = chk_lock(&dj, (mode & ~FA_READ) ? 1 : 0);
#endif
	}
	/* Create or Open a file */
	if (mode & (FA_CREATE_ALWAYS | FA_OPEN_ALWAYS | FA_CREATE_NEW)) {
  402cf0:	f016 0f1c 	tst.w	r6, #28
  402cf4:	d158      	bne.n	402da8 <f_open+0xe8>
				}
			}
		}
	}
	else {	/* Open an existing file */
		if (res == FR_OK) {						/* Follow succeeded */
  402cf6:	2b00      	cmp	r3, #0
  402cf8:	f040 8096 	bne.w	402e28 <f_open+0x168>
			if (dir[DIR_Attr] & AM_DIR) {		/* It is a directory */
  402cfc:	7ae3      	ldrb	r3, [r4, #11]
  402cfe:	f013 0f10 	tst.w	r3, #16
  402d02:	d062      	beq.n	402dca <f_open+0x10a>
				res = FR_NO_FILE;
  402d04:	2304      	movs	r3, #4
  402d06:	e08f      	b.n	402e28 <f_open+0x168>
		res = follow_path(&dj, path);	/* Follow the file path */
  402d08:	9901      	ldr	r1, [sp, #4]
  402d0a:	a885      	add	r0, sp, #532	; 0x214
  402d0c:	4b4d      	ldr	r3, [pc, #308]	; (402e44 <f_open+0x184>)
  402d0e:	4798      	blx	r3
  402d10:	4603      	mov	r3, r0
	dir = dj.dir;
  402d12:	9c8a      	ldr	r4, [sp, #552]	; 0x228
		if (!dir)	/* Current dir itself */
  402d14:	b934      	cbnz	r4, 402d24 <f_open+0x64>
  402d16:	b928      	cbnz	r0, 402d24 <f_open+0x64>
	if (mode & (FA_CREATE_ALWAYS | FA_OPEN_ALWAYS | FA_CREATE_NEW)) {
  402d18:	f016 0f1c 	tst.w	r6, #28
  402d1c:	f040 8089 	bne.w	402e32 <f_open+0x172>
			res = FR_INVALID_NAME;
  402d20:	2306      	movs	r3, #6
  402d22:	e046      	b.n	402db2 <f_open+0xf2>
	if (mode & (FA_CREATE_ALWAYS | FA_OPEN_ALWAYS | FA_CREATE_NEW)) {
  402d24:	f016 0f1c 	tst.w	r6, #28
  402d28:	d0e5      	beq.n	402cf6 <f_open+0x36>
		if (res != FR_OK) {					/* No file, create new */
  402d2a:	2b00      	cmp	r3, #0
  402d2c:	d13c      	bne.n	402da8 <f_open+0xe8>
			if (dir[DIR_Attr] & (AM_RDO | AM_DIR)) {	/* Cannot overwrite it (R/O or DIR) */
  402d2e:	7ae3      	ldrb	r3, [r4, #11]
  402d30:	f013 0f11 	tst.w	r3, #17
  402d34:	d17f      	bne.n	402e36 <f_open+0x176>
				if (mode & FA_CREATE_NEW)	/* Cannot create as new file */
  402d36:	f016 0f04 	tst.w	r6, #4
  402d3a:	d17e      	bne.n	402e3a <f_open+0x17a>
		if (res == FR_OK && (mode & FA_CREATE_ALWAYS)) {	/* Truncate it if overwrite mode */
  402d3c:	f017 0f08 	tst.w	r7, #8
  402d40:	d050      	beq.n	402de4 <f_open+0x124>
			dw = get_fattime();					/* Created time */
  402d42:	4b41      	ldr	r3, [pc, #260]	; (402e48 <f_open+0x188>)
  402d44:	4798      	blx	r3
			ST_DWORD(dir+DIR_CrtTime, dw);
  402d46:	73a0      	strb	r0, [r4, #14]
  402d48:	f3c0 2307 	ubfx	r3, r0, #8, #8
  402d4c:	73e3      	strb	r3, [r4, #15]
  402d4e:	0c03      	lsrs	r3, r0, #16
  402d50:	7423      	strb	r3, [r4, #16]
  402d52:	0e00      	lsrs	r0, r0, #24
  402d54:	7460      	strb	r0, [r4, #17]
			dir[DIR_Attr] = 0;					/* Reset attribute */
  402d56:	2300      	movs	r3, #0
  402d58:	72e3      	strb	r3, [r4, #11]
			ST_DWORD(dir+DIR_FileSize, 0);		/* size = 0 */
  402d5a:	7723      	strb	r3, [r4, #28]
  402d5c:	7763      	strb	r3, [r4, #29]
  402d5e:	77a3      	strb	r3, [r4, #30]
  402d60:	77e3      	strb	r3, [r4, #31]
			cl = LD_CLUST(dir);					/* Get start cluster */
  402d62:	7d62      	ldrb	r2, [r4, #21]
  402d64:	7d26      	ldrb	r6, [r4, #20]
  402d66:	ea46 2602 	orr.w	r6, r6, r2, lsl #8
  402d6a:	7ee1      	ldrb	r1, [r4, #27]
  402d6c:	7ea2      	ldrb	r2, [r4, #26]
  402d6e:	ea42 2201 	orr.w	r2, r2, r1, lsl #8
			ST_CLUST(dir, 0);					/* cluster = 0 */
  402d72:	76a3      	strb	r3, [r4, #26]
  402d74:	76e3      	strb	r3, [r4, #27]
  402d76:	7523      	strb	r3, [r4, #20]
  402d78:	7563      	strb	r3, [r4, #21]
			dj.fs->wflag = 1;
  402d7a:	9885      	ldr	r0, [sp, #532]	; 0x214
  402d7c:	2301      	movs	r3, #1
  402d7e:	7103      	strb	r3, [r0, #4]
			if (cl) {							/* Remove the cluster chain if exist */
  402d80:	ea52 4606 	orrs.w	r6, r2, r6, lsl #16
  402d84:	d02c      	beq.n	402de0 <f_open+0x120>
				dw = dj.fs->winsect;
  402d86:	f8d0 802c 	ldr.w	r8, [r0, #44]	; 0x2c
				res = remove_chain(dj.fs, cl);
  402d8a:	4631      	mov	r1, r6
  402d8c:	4b2f      	ldr	r3, [pc, #188]	; (402e4c <f_open+0x18c>)
  402d8e:	4798      	blx	r3
				if (res == FR_OK) {
  402d90:	4603      	mov	r3, r0
  402d92:	2800      	cmp	r0, #0
  402d94:	d148      	bne.n	402e28 <f_open+0x168>
					dj.fs->last_clust = cl - 1;	/* Reuse the cluster hole */
  402d96:	9885      	ldr	r0, [sp, #532]	; 0x214
  402d98:	3e01      	subs	r6, #1
  402d9a:	60c6      	str	r6, [r0, #12]
					res = move_window(dj.fs, dw);
  402d9c:	4641      	mov	r1, r8
  402d9e:	4b2c      	ldr	r3, [pc, #176]	; (402e50 <f_open+0x190>)
  402da0:	4798      	blx	r3
				if ((mode & FA_WRITE) && (dir[DIR_Attr] & AM_RDO)) /* R/O violation */
					res = FR_DENIED;
			}
		}
	}
	if (res == FR_OK) {
  402da2:	4603      	mov	r3, r0
  402da4:	b1e0      	cbz	r0, 402de0 <f_open+0x120>
  402da6:	e03f      	b.n	402e28 <f_open+0x168>
			if (res == FR_NO_FILE)			/* There is no file to open, create a new entry */
  402da8:	2b04      	cmp	r3, #4
  402daa:	d004      	beq.n	402db6 <f_open+0xf6>
			mode |= FA_CREATE_ALWAYS;		/* File is created */
  402dac:	f047 0708 	orr.w	r7, r7, #8
			dir = dj.dir;					/* New entry */
  402db0:	9c8a      	ldr	r4, [sp, #552]	; 0x228
		}
	}
#endif
	FREE_BUF();

	if (res == FR_OK) {
  402db2:	b1db      	cbz	r3, 402dec <f_open+0x12c>
  402db4:	e038      	b.n	402e28 <f_open+0x168>
				res = dir_register(&dj);
  402db6:	a885      	add	r0, sp, #532	; 0x214
  402db8:	4b26      	ldr	r3, [pc, #152]	; (402e54 <f_open+0x194>)
  402dba:	4798      	blx	r3
			mode |= FA_CREATE_ALWAYS;		/* File is created */
  402dbc:	f047 0708 	orr.w	r7, r7, #8
			dir = dj.dir;					/* New entry */
  402dc0:	9c8a      	ldr	r4, [sp, #552]	; 0x228
		if (res == FR_OK && (mode & FA_CREATE_ALWAYS)) {	/* Truncate it if overwrite mode */
  402dc2:	4603      	mov	r3, r0
  402dc4:	2800      	cmp	r0, #0
  402dc6:	d0b9      	beq.n	402d3c <f_open+0x7c>
  402dc8:	e02e      	b.n	402e28 <f_open+0x168>
				if ((mode & FA_WRITE) && (dir[DIR_Attr] & AM_RDO)) /* R/O violation */
  402dca:	f016 0f02 	tst.w	r6, #2
  402dce:	d004      	beq.n	402dda <f_open+0x11a>
  402dd0:	f013 0f01 	tst.w	r3, #1
  402dd4:	d001      	beq.n	402dda <f_open+0x11a>
					res = FR_DENIED;
  402dd6:	2307      	movs	r3, #7
		fp->cltbl = 0;						/* Normal seek mode */
#endif
		fp->fs = dj.fs; fp->id = dj.fs->id;	/* Validate file object */
	}

	LEAVE_FF(dj.fs, res);
  402dd8:	e026      	b.n	402e28 <f_open+0x168>
		if (mode & FA_CREATE_ALWAYS)			/* Set file change flag if created or overwritten */
  402dda:	f016 0f08 	tst.w	r6, #8
  402dde:	d001      	beq.n	402de4 <f_open+0x124>
			mode |= FA__WRITTEN;
  402de0:	f047 0720 	orr.w	r7, r7, #32
		fp->dir_sect = dj.fs->winsect;			/* Pointer to the directory entry */
  402de4:	9b85      	ldr	r3, [sp, #532]	; 0x214
  402de6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
  402de8:	61eb      	str	r3, [r5, #28]
		fp->dir_ptr = dir;
  402dea:	622c      	str	r4, [r5, #32]
		fp->flag = mode;					/* File access mode */
  402dec:	71af      	strb	r7, [r5, #6]
		fp->sclust = LD_CLUST(dir);			/* File start cluster */
  402dee:	7d62      	ldrb	r2, [r4, #21]
  402df0:	7d23      	ldrb	r3, [r4, #20]
  402df2:	ea43 2202 	orr.w	r2, r3, r2, lsl #8
  402df6:	7ee1      	ldrb	r1, [r4, #27]
  402df8:	7ea3      	ldrb	r3, [r4, #26]
  402dfa:	ea43 2301 	orr.w	r3, r3, r1, lsl #8
  402dfe:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
  402e02:	612b      	str	r3, [r5, #16]
		fp->fsize = LD_DWORD(dir+DIR_FileSize);	/* File size */
  402e04:	7fe2      	ldrb	r2, [r4, #31]
  402e06:	7fa3      	ldrb	r3, [r4, #30]
  402e08:	041b      	lsls	r3, r3, #16
  402e0a:	ea43 6302 	orr.w	r3, r3, r2, lsl #24
  402e0e:	7f22      	ldrb	r2, [r4, #28]
  402e10:	4313      	orrs	r3, r2
  402e12:	7f62      	ldrb	r2, [r4, #29]
  402e14:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
  402e18:	60eb      	str	r3, [r5, #12]
		fp->fptr = 0;						/* File pointer */
  402e1a:	2300      	movs	r3, #0
  402e1c:	60ab      	str	r3, [r5, #8]
		fp->dsect = 0;
  402e1e:	61ab      	str	r3, [r5, #24]
		fp->fs = dj.fs; fp->id = dj.fs->id;	/* Validate file object */
  402e20:	9a85      	ldr	r2, [sp, #532]	; 0x214
  402e22:	602a      	str	r2, [r5, #0]
  402e24:	88d2      	ldrh	r2, [r2, #6]
  402e26:	80aa      	strh	r2, [r5, #4]
}
  402e28:	4618      	mov	r0, r3
  402e2a:	f50d 7d0e 	add.w	sp, sp, #568	; 0x238
  402e2e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
			res = FR_INVALID_NAME;
  402e32:	2306      	movs	r3, #6
  402e34:	e7ba      	b.n	402dac <f_open+0xec>
				res = FR_DENIED;
  402e36:	2307      	movs	r3, #7
  402e38:	e7f6      	b.n	402e28 <f_open+0x168>
					res = FR_EXIST;
  402e3a:	2308      	movs	r3, #8
  402e3c:	e7f4      	b.n	402e28 <f_open+0x168>
  402e3e:	bf00      	nop
  402e40:	00401af1 	.word	0x00401af1
  402e44:	00402975 	.word	0x00402975
  402e48:	0040197d 	.word	0x0040197d
  402e4c:	00402271 	.word	0x00402271
  402e50:	00401e61 	.word	0x00401e61
  402e54:	004025cd 	.word	0x004025cd

00402e58 <f_read>:
	FIL *fp, 		/* Pointer to the file object */
	void *buff,		/* Pointer to data buffer */
	UINT btr,		/* Number of bytes to read */
	UINT *br		/* Pointer to number of bytes read */
)
{
  402e58:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  402e5c:	b083      	sub	sp, #12
  402e5e:	4604      	mov	r4, r0
  402e60:	4689      	mov	r9, r1
  402e62:	4615      	mov	r5, r2
  402e64:	4698      	mov	r8, r3
	DWORD clst, sect, remain;
	UINT rcnt, cc;
	BYTE csect, *rbuff = buff;


	*br = 0;	/* Initialize byte counter */
  402e66:	2300      	movs	r3, #0
  402e68:	f8c8 3000 	str.w	r3, [r8]

	res = validate(fp->fs, fp->id);				/* Check validity */
  402e6c:	8881      	ldrh	r1, [r0, #4]
  402e6e:	6800      	ldr	r0, [r0, #0]
  402e70:	4b58      	ldr	r3, [pc, #352]	; (402fd4 <f_read+0x17c>)
  402e72:	4798      	blx	r3
	if (res != FR_OK) LEAVE_FF(fp->fs, res);
  402e74:	9001      	str	r0, [sp, #4]
  402e76:	2800      	cmp	r0, #0
  402e78:	f040 80a8 	bne.w	402fcc <f_read+0x174>
	if (fp->flag & FA__ERROR)					/* Aborted file? */
  402e7c:	79a3      	ldrb	r3, [r4, #6]
  402e7e:	f013 0f80 	tst.w	r3, #128	; 0x80
  402e82:	f040 80a1 	bne.w	402fc8 <f_read+0x170>
		LEAVE_FF(fp->fs, FR_INT_ERR);
	if (!(fp->flag & FA_READ)) 					/* Check access mode */
  402e86:	f013 0f01 	tst.w	r3, #1
  402e8a:	d102      	bne.n	402e92 <f_read+0x3a>
		LEAVE_FF(fp->fs, FR_DENIED);
  402e8c:	2307      	movs	r3, #7
  402e8e:	9301      	str	r3, [sp, #4]
  402e90:	e09c      	b.n	402fcc <f_read+0x174>
	remain = fp->fsize - fp->fptr;
  402e92:	68e6      	ldr	r6, [r4, #12]
  402e94:	68a3      	ldr	r3, [r4, #8]
  402e96:	1af6      	subs	r6, r6, r3
  402e98:	42ae      	cmp	r6, r5
  402e9a:	bf28      	it	cs
  402e9c:	462e      	movcs	r6, r5
	if (btr > remain) btr = (UINT)remain;		/* Truncate btr by remaining bytes */

	for ( ;  btr;								/* Repeat until all data read */
  402e9e:	2e00      	cmp	r6, #0
  402ea0:	d14c      	bne.n	402f3c <f_read+0xe4>
  402ea2:	e093      	b.n	402fcc <f_read+0x174>
#if _USE_FASTSEEK
					if (fp->cltbl)
						clst = clmt_clust(fp, fp->fptr);	/* Get cluster# from the CLMT */
					else
#endif
						clst = get_fat(fp->fs, fp->clust);	/* Follow cluster chain on the FAT */
  402ea4:	6961      	ldr	r1, [r4, #20]
  402ea6:	4b4c      	ldr	r3, [pc, #304]	; (402fd8 <f_read+0x180>)
  402ea8:	4798      	blx	r3
  402eaa:	e057      	b.n	402f5c <f_read+0x104>
				}
				if (clst < 2) ABORT(fp->fs, FR_INT_ERR);
  402eac:	79a3      	ldrb	r3, [r4, #6]
  402eae:	f063 037f 	orn	r3, r3, #127	; 0x7f
  402eb2:	71a3      	strb	r3, [r4, #6]
  402eb4:	2302      	movs	r3, #2
  402eb6:	9301      	str	r3, [sp, #4]
  402eb8:	e088      	b.n	402fcc <f_read+0x174>
				if (clst == 0xFFFFFFFF) ABORT(fp->fs, FR_DISK_ERR);
  402eba:	79a3      	ldrb	r3, [r4, #6]
  402ebc:	f063 037f 	orn	r3, r3, #127	; 0x7f
  402ec0:	71a3      	strb	r3, [r4, #6]
  402ec2:	2301      	movs	r3, #1
  402ec4:	9301      	str	r3, [sp, #4]
  402ec6:	e081      	b.n	402fcc <f_read+0x174>
				fp->clust = clst;				/* Update current cluster */
			}
			sect = clust2sect(fp->fs, fp->clust);	/* Get current sector */
			if (!sect) ABORT(fp->fs, FR_INT_ERR);
  402ec8:	79a3      	ldrb	r3, [r4, #6]
  402eca:	f063 037f 	orn	r3, r3, #127	; 0x7f
  402ece:	71a3      	strb	r3, [r4, #6]
  402ed0:	2302      	movs	r3, #2
  402ed2:	9301      	str	r3, [sp, #4]
  402ed4:	e07a      	b.n	402fcc <f_read+0x174>
			cc = btr / SS(fp->fs);				/* When remaining bytes >= sector size, */
			if (cc) {							/* Read maximum contiguous sectors directly */
				if (csect + cc > fp->fs->csize)	/* Clip at cluster boundary */
					cc = fp->fs->csize - csect;
				if (disk_read(fp->fs->drv, rbuff, sect, (BYTE)cc) != RES_OK)
					ABORT(fp->fs, FR_DISK_ERR);
  402ed6:	79a3      	ldrb	r3, [r4, #6]
  402ed8:	f063 037f 	orn	r3, r3, #127	; 0x7f
  402edc:	71a3      	strb	r3, [r4, #6]
  402ede:	2301      	movs	r3, #1
  402ee0:	9301      	str	r3, [sp, #4]
  402ee2:	e073      	b.n	402fcc <f_read+0x174>
#if !_FS_READONLY && _FS_MINIMIZE <= 2			/* Replace one of the read sectors with cached data if it contains a dirty sector */
#if _FS_TINY
				if (fp->fs->wflag && fp->fs->winsect - sect < cc)
					mem_cpy(rbuff + ((fp->fs->winsect - sect) * SS(fp->fs)), fp->fs->win, SS(fp->fs));
  402ee4:	f44f 7200 	mov.w	r2, #512	; 0x200
  402ee8:	3130      	adds	r1, #48	; 0x30
  402eea:	eb09 2040 	add.w	r0, r9, r0, lsl #9
  402eee:	4b3b      	ldr	r3, [pc, #236]	; (402fdc <f_read+0x184>)
  402ef0:	4798      	blx	r3
  402ef2:	e05f      	b.n	402fb4 <f_read+0x15c>
#endif
				if (disk_read(fp->fs->drv, fp->buf, sect, 1) != RES_OK)	/* Fill sector cache */
					ABORT(fp->fs, FR_DISK_ERR);
			}
#endif
			fp->dsect = sect;
  402ef4:	61a5      	str	r5, [r4, #24]
		}
		rcnt = SS(fp->fs) - (fp->fptr % SS(fp->fs));	/* Get partial sector data from sector buffer */
  402ef6:	68a5      	ldr	r5, [r4, #8]
  402ef8:	f3c5 0508 	ubfx	r5, r5, #0, #9
  402efc:	f5c5 7500 	rsb	r5, r5, #512	; 0x200
  402f00:	42b5      	cmp	r5, r6
  402f02:	bf28      	it	cs
  402f04:	4635      	movcs	r5, r6
		if (rcnt > btr) rcnt = btr;
#if _FS_TINY
		if (move_window(fp->fs, fp->dsect))		/* Move sector window */
  402f06:	69a1      	ldr	r1, [r4, #24]
  402f08:	6820      	ldr	r0, [r4, #0]
  402f0a:	4b35      	ldr	r3, [pc, #212]	; (402fe0 <f_read+0x188>)
  402f0c:	4798      	blx	r3
  402f0e:	2800      	cmp	r0, #0
  402f10:	d153      	bne.n	402fba <f_read+0x162>
			ABORT(fp->fs, FR_DISK_ERR);
		mem_cpy(rbuff, &fp->fs->win[fp->fptr % SS(fp->fs)], rcnt);	/* Pick partial sector */
  402f12:	68a1      	ldr	r1, [r4, #8]
  402f14:	f3c1 0108 	ubfx	r1, r1, #0, #9
  402f18:	3130      	adds	r1, #48	; 0x30
  402f1a:	6823      	ldr	r3, [r4, #0]
  402f1c:	462a      	mov	r2, r5
  402f1e:	4419      	add	r1, r3
  402f20:	4648      	mov	r0, r9
  402f22:	4b2e      	ldr	r3, [pc, #184]	; (402fdc <f_read+0x184>)
  402f24:	4798      	blx	r3
		rbuff += rcnt, fp->fptr += rcnt, *br += rcnt, btr -= rcnt) {
  402f26:	44a9      	add	r9, r5
  402f28:	68a3      	ldr	r3, [r4, #8]
  402f2a:	442b      	add	r3, r5
  402f2c:	60a3      	str	r3, [r4, #8]
  402f2e:	f8d8 3000 	ldr.w	r3, [r8]
  402f32:	442b      	add	r3, r5
  402f34:	f8c8 3000 	str.w	r3, [r8]
	for ( ;  btr;								/* Repeat until all data read */
  402f38:	1b76      	subs	r6, r6, r5
  402f3a:	d047      	beq.n	402fcc <f_read+0x174>
		if ((fp->fptr % SS(fp->fs)) == 0) {		/* On the sector boundary? */
  402f3c:	68a2      	ldr	r2, [r4, #8]
  402f3e:	f3c2 0308 	ubfx	r3, r2, #0, #9
  402f42:	2b00      	cmp	r3, #0
  402f44:	d1d7      	bne.n	402ef6 <f_read+0x9e>
			csect = (BYTE)(fp->fptr / SS(fp->fs) & (fp->fs->csize - 1));	/* Sector offset in the cluster */
  402f46:	6820      	ldr	r0, [r4, #0]
  402f48:	7883      	ldrb	r3, [r0, #2]
  402f4a:	3b01      	subs	r3, #1
  402f4c:	ea03 2352 	and.w	r3, r3, r2, lsr #9
			if (!csect) {						/* On the cluster boundary? */
  402f50:	f013 07ff 	ands.w	r7, r3, #255	; 0xff
  402f54:	d108      	bne.n	402f68 <f_read+0x110>
				if (fp->fptr == 0) {			/* On the top of the file? */
  402f56:	2a00      	cmp	r2, #0
  402f58:	d1a4      	bne.n	402ea4 <f_read+0x4c>
					clst = fp->sclust;			/* Follow from the origin */
  402f5a:	6920      	ldr	r0, [r4, #16]
				if (clst < 2) ABORT(fp->fs, FR_INT_ERR);
  402f5c:	2801      	cmp	r0, #1
  402f5e:	d9a5      	bls.n	402eac <f_read+0x54>
				if (clst == 0xFFFFFFFF) ABORT(fp->fs, FR_DISK_ERR);
  402f60:	f1b0 3fff 	cmp.w	r0, #4294967295
  402f64:	d0a9      	beq.n	402eba <f_read+0x62>
				fp->clust = clst;				/* Update current cluster */
  402f66:	6160      	str	r0, [r4, #20]
			sect = clust2sect(fp->fs, fp->clust);	/* Get current sector */
  402f68:	f8d4 a000 	ldr.w	sl, [r4]
  402f6c:	6961      	ldr	r1, [r4, #20]
  402f6e:	4650      	mov	r0, sl
  402f70:	4b1c      	ldr	r3, [pc, #112]	; (402fe4 <f_read+0x18c>)
  402f72:	4798      	blx	r3
			if (!sect) ABORT(fp->fs, FR_INT_ERR);
  402f74:	4605      	mov	r5, r0
  402f76:	2800      	cmp	r0, #0
  402f78:	d0a6      	beq.n	402ec8 <f_read+0x70>
			sect += csect;
  402f7a:	443d      	add	r5, r7
			if (cc) {							/* Read maximum contiguous sectors directly */
  402f7c:	ea5f 2b56 	movs.w	fp, r6, lsr #9
  402f80:	d0b8      	beq.n	402ef4 <f_read+0x9c>
				if (csect + cc > fp->fs->csize)	/* Clip at cluster boundary */
  402f82:	f89a 3002 	ldrb.w	r3, [sl, #2]
  402f86:	eb07 020b 	add.w	r2, r7, fp
  402f8a:	429a      	cmp	r2, r3
					cc = fp->fs->csize - csect;
  402f8c:	bf88      	it	hi
  402f8e:	eba3 0b07 	subhi.w	fp, r3, r7
				if (disk_read(fp->fs->drv, rbuff, sect, (BYTE)cc) != RES_OK)
  402f92:	fa5f f38b 	uxtb.w	r3, fp
  402f96:	462a      	mov	r2, r5
  402f98:	4649      	mov	r1, r9
  402f9a:	f89a 0001 	ldrb.w	r0, [sl, #1]
  402f9e:	4f12      	ldr	r7, [pc, #72]	; (402fe8 <f_read+0x190>)
  402fa0:	47b8      	blx	r7
  402fa2:	2800      	cmp	r0, #0
  402fa4:	d197      	bne.n	402ed6 <f_read+0x7e>
				if (fp->fs->wflag && fp->fs->winsect - sect < cc)
  402fa6:	6821      	ldr	r1, [r4, #0]
  402fa8:	790b      	ldrb	r3, [r1, #4]
  402faa:	b11b      	cbz	r3, 402fb4 <f_read+0x15c>
  402fac:	6ac8      	ldr	r0, [r1, #44]	; 0x2c
  402fae:	1b40      	subs	r0, r0, r5
  402fb0:	4583      	cmp	fp, r0
  402fb2:	d897      	bhi.n	402ee4 <f_read+0x8c>
				rcnt = SS(fp->fs) * cc;			/* Number of bytes transferred */
  402fb4:	ea4f 254b 	mov.w	r5, fp, lsl #9
				continue;
  402fb8:	e7b5      	b.n	402f26 <f_read+0xce>
			ABORT(fp->fs, FR_DISK_ERR);
  402fba:	79a3      	ldrb	r3, [r4, #6]
  402fbc:	f063 037f 	orn	r3, r3, #127	; 0x7f
  402fc0:	71a3      	strb	r3, [r4, #6]
  402fc2:	2301      	movs	r3, #1
  402fc4:	9301      	str	r3, [sp, #4]
  402fc6:	e001      	b.n	402fcc <f_read+0x174>
		LEAVE_FF(fp->fs, FR_INT_ERR);
  402fc8:	2302      	movs	r3, #2
  402fca:	9301      	str	r3, [sp, #4]
		mem_cpy(rbuff, &fp->buf[fp->fptr % SS(fp->fs)], rcnt);	/* Pick partial sector */
#endif
	}

	LEAVE_FF(fp->fs, FR_OK);
}
  402fcc:	9801      	ldr	r0, [sp, #4]
  402fce:	b003      	add	sp, #12
  402fd0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  402fd4:	00401a2d 	.word	0x00401a2d
  402fd8:	00401ef1 	.word	0x00401ef1
  402fdc:	004019d5 	.word	0x004019d5
  402fe0:	00401e61 	.word	0x00401e61
  402fe4:	004019f7 	.word	0x004019f7
  402fe8:	0040182d 	.word	0x0040182d

00402fec <f_write>:
	FIL *fp,			/* Pointer to the file object */
	const void *buff,	/* Pointer to the data to be written */
	UINT btw,			/* Number of bytes to write */
	UINT *bw			/* Pointer to number of bytes written */
)
{
  402fec:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  402ff0:	b083      	sub	sp, #12
  402ff2:	4604      	mov	r4, r0
  402ff4:	4689      	mov	r9, r1
  402ff6:	4616      	mov	r6, r2
  402ff8:	4698      	mov	r8, r3
	UINT wcnt, cc;
	const BYTE *wbuff = buff;
	BYTE csect;


	*bw = 0;	/* Initialize byte counter */
  402ffa:	2300      	movs	r3, #0
  402ffc:	f8c8 3000 	str.w	r3, [r8]

	res = validate(fp->fs, fp->id);			/* Check validity */
  403000:	8881      	ldrh	r1, [r0, #4]
  403002:	6800      	ldr	r0, [r0, #0]
  403004:	4b75      	ldr	r3, [pc, #468]	; (4031dc <f_write+0x1f0>)
  403006:	4798      	blx	r3
	if (res != FR_OK) LEAVE_FF(fp->fs, res);
  403008:	9001      	str	r0, [sp, #4]
  40300a:	2800      	cmp	r0, #0
  40300c:	f040 80e2 	bne.w	4031d4 <f_write+0x1e8>
	if (fp->flag & FA__ERROR)				/* Aborted file? */
  403010:	79a3      	ldrb	r3, [r4, #6]
  403012:	f013 0f80 	tst.w	r3, #128	; 0x80
  403016:	f040 80db 	bne.w	4031d0 <f_write+0x1e4>
		LEAVE_FF(fp->fs, FR_INT_ERR);
	if (!(fp->flag & FA_WRITE))				/* Check access mode */
  40301a:	f013 0f02 	tst.w	r3, #2
  40301e:	d102      	bne.n	403026 <f_write+0x3a>
		LEAVE_FF(fp->fs, FR_DENIED);
  403020:	2307      	movs	r3, #7
  403022:	9301      	str	r3, [sp, #4]
  403024:	e0d6      	b.n	4031d4 <f_write+0x1e8>
	if ((DWORD)(fp->fsize + btw) < fp->fsize) btw = 0;	/* File size cannot reach 4GB */
  403026:	68e3      	ldr	r3, [r4, #12]
  403028:	42f3      	cmn	r3, r6
  40302a:	d20e      	bcs.n	40304a <f_write+0x5e>

	for ( ;  btw;							/* Repeat until all data written */
  40302c:	2e00      	cmp	r6, #0
  40302e:	d174      	bne.n	40311a <f_write+0x12e>
  403030:	e00b      	b.n	40304a <f_write+0x5e>
			csect = (BYTE)(fp->fptr / SS(fp->fs) & (fp->fs->csize - 1));	/* Sector offset in the cluster */
			if (!csect) {					/* On the cluster boundary? */
				if (fp->fptr == 0) {		/* On the top of the file? */
					clst = fp->sclust;		/* Follow from the origin */
					if (clst == 0)			/* When no cluster is allocated, */
						fp->sclust = clst = create_chain(fp->fs, 0);	/* Create a new cluster chain */
  403032:	2100      	movs	r1, #0
  403034:	4b6a      	ldr	r3, [pc, #424]	; (4031e0 <f_write+0x1f4>)
  403036:	4798      	blx	r3
  403038:	4603      	mov	r3, r0
  40303a:	6120      	str	r0, [r4, #16]
  40303c:	e003      	b.n	403046 <f_write+0x5a>
#if _USE_FASTSEEK
					if (fp->cltbl)
						clst = clmt_clust(fp, fp->fptr);	/* Get cluster# from the CLMT */
					else
#endif
						clst = create_chain(fp->fs, fp->clust);	/* Follow or stretch cluster chain on the FAT */
  40303e:	6961      	ldr	r1, [r4, #20]
  403040:	4b67      	ldr	r3, [pc, #412]	; (4031e0 <f_write+0x1f4>)
  403042:	4798      	blx	r3
  403044:	4603      	mov	r3, r0
				}
				if (clst == 0) break;		/* Could not allocate a new cluster (disk full) */
  403046:	2b00      	cmp	r3, #0
  403048:	d17a      	bne.n	403140 <f_write+0x154>
		mem_cpy(&fp->buf[fp->fptr % SS(fp->fs)], wbuff, wcnt);	/* Fit partial sector */
		fp->flag |= FA__DIRTY;
#endif
	}

	if (fp->fptr > fp->fsize) fp->fsize = fp->fptr;	/* Update file size if needed */
  40304a:	68a3      	ldr	r3, [r4, #8]
  40304c:	68e2      	ldr	r2, [r4, #12]
  40304e:	4293      	cmp	r3, r2
  403050:	bf88      	it	hi
  403052:	60e3      	strhi	r3, [r4, #12]
	fp->flag |= FA__WRITTEN;						/* Set file change flag */
  403054:	79a3      	ldrb	r3, [r4, #6]
  403056:	f043 0320 	orr.w	r3, r3, #32
  40305a:	71a3      	strb	r3, [r4, #6]

	LEAVE_FF(fp->fs, FR_OK);
  40305c:	e0ba      	b.n	4031d4 <f_write+0x1e8>
				if (clst == 1) ABORT(fp->fs, FR_INT_ERR);
  40305e:	79a3      	ldrb	r3, [r4, #6]
  403060:	f063 037f 	orn	r3, r3, #127	; 0x7f
  403064:	71a3      	strb	r3, [r4, #6]
  403066:	2302      	movs	r3, #2
  403068:	9301      	str	r3, [sp, #4]
  40306a:	e0b3      	b.n	4031d4 <f_write+0x1e8>
				if (clst == 0xFFFFFFFF) ABORT(fp->fs, FR_DISK_ERR);
  40306c:	79a3      	ldrb	r3, [r4, #6]
  40306e:	f063 037f 	orn	r3, r3, #127	; 0x7f
  403072:	71a3      	strb	r3, [r4, #6]
  403074:	2301      	movs	r3, #1
  403076:	9301      	str	r3, [sp, #4]
  403078:	e0ac      	b.n	4031d4 <f_write+0x1e8>
			if (fp->fs->winsect == fp->dsect && move_window(fp->fs, 0))	/* Write-back sector cache */
  40307a:	2100      	movs	r1, #0
  40307c:	4b59      	ldr	r3, [pc, #356]	; (4031e4 <f_write+0x1f8>)
  40307e:	4798      	blx	r3
  403080:	2800      	cmp	r0, #0
  403082:	d068      	beq.n	403156 <f_write+0x16a>
				ABORT(fp->fs, FR_DISK_ERR);
  403084:	79a3      	ldrb	r3, [r4, #6]
  403086:	f063 037f 	orn	r3, r3, #127	; 0x7f
  40308a:	71a3      	strb	r3, [r4, #6]
  40308c:	2301      	movs	r3, #1
  40308e:	9301      	str	r3, [sp, #4]
  403090:	e0a0      	b.n	4031d4 <f_write+0x1e8>
			if (!sect) ABORT(fp->fs, FR_INT_ERR);
  403092:	79a3      	ldrb	r3, [r4, #6]
  403094:	f063 037f 	orn	r3, r3, #127	; 0x7f
  403098:	71a3      	strb	r3, [r4, #6]
  40309a:	2302      	movs	r3, #2
  40309c:	9301      	str	r3, [sp, #4]
  40309e:	e099      	b.n	4031d4 <f_write+0x1e8>
					ABORT(fp->fs, FR_DISK_ERR);
  4030a0:	79a3      	ldrb	r3, [r4, #6]
  4030a2:	f063 037f 	orn	r3, r3, #127	; 0x7f
  4030a6:	71a3      	strb	r3, [r4, #6]
  4030a8:	2301      	movs	r3, #1
  4030aa:	9301      	str	r3, [sp, #4]
  4030ac:	e092      	b.n	4031d4 <f_write+0x1e8>
					mem_cpy(fp->fs->win, wbuff + ((fp->fs->winsect - sect) * SS(fp->fs)), SS(fp->fs));
  4030ae:	f44f 7200 	mov.w	r2, #512	; 0x200
  4030b2:	eb09 2141 	add.w	r1, r9, r1, lsl #9
  4030b6:	3030      	adds	r0, #48	; 0x30
  4030b8:	4b4b      	ldr	r3, [pc, #300]	; (4031e8 <f_write+0x1fc>)
  4030ba:	4798      	blx	r3
					fp->fs->wflag = 0;
  4030bc:	6823      	ldr	r3, [r4, #0]
  4030be:	2200      	movs	r2, #0
  4030c0:	711a      	strb	r2, [r3, #4]
  4030c2:	e06c      	b.n	40319e <f_write+0x1b2>
			if (fp->fptr >= fp->fsize) {	/* Avoid silly cache filling at growing edge */
  4030c4:	68a2      	ldr	r2, [r4, #8]
  4030c6:	68e3      	ldr	r3, [r4, #12]
  4030c8:	429a      	cmp	r2, r3
  4030ca:	d26b      	bcs.n	4031a4 <f_write+0x1b8>
			fp->dsect = sect;
  4030cc:	61a5      	str	r5, [r4, #24]
		wcnt = SS(fp->fs) - (fp->fptr % SS(fp->fs));/* Put partial sector into file I/O buffer */
  4030ce:	68a5      	ldr	r5, [r4, #8]
  4030d0:	f3c5 0508 	ubfx	r5, r5, #0, #9
  4030d4:	f5c5 7500 	rsb	r5, r5, #512	; 0x200
  4030d8:	42b5      	cmp	r5, r6
  4030da:	bf28      	it	cs
  4030dc:	4635      	movcs	r5, r6
		if (move_window(fp->fs, fp->dsect))	/* Move sector window */
  4030de:	69a1      	ldr	r1, [r4, #24]
  4030e0:	6820      	ldr	r0, [r4, #0]
  4030e2:	4b40      	ldr	r3, [pc, #256]	; (4031e4 <f_write+0x1f8>)
  4030e4:	4798      	blx	r3
  4030e6:	2800      	cmp	r0, #0
  4030e8:	d16b      	bne.n	4031c2 <f_write+0x1d6>
		mem_cpy(&fp->fs->win[fp->fptr % SS(fp->fs)], wbuff, wcnt);	/* Fit partial sector */
  4030ea:	68a0      	ldr	r0, [r4, #8]
  4030ec:	f3c0 0008 	ubfx	r0, r0, #0, #9
  4030f0:	3030      	adds	r0, #48	; 0x30
  4030f2:	6823      	ldr	r3, [r4, #0]
  4030f4:	462a      	mov	r2, r5
  4030f6:	4649      	mov	r1, r9
  4030f8:	4418      	add	r0, r3
  4030fa:	4b3b      	ldr	r3, [pc, #236]	; (4031e8 <f_write+0x1fc>)
  4030fc:	4798      	blx	r3
		fp->fs->wflag = 1;
  4030fe:	6823      	ldr	r3, [r4, #0]
  403100:	2201      	movs	r2, #1
  403102:	711a      	strb	r2, [r3, #4]
		wbuff += wcnt, fp->fptr += wcnt, *bw += wcnt, btw -= wcnt) {
  403104:	44a9      	add	r9, r5
  403106:	68a3      	ldr	r3, [r4, #8]
  403108:	442b      	add	r3, r5
  40310a:	60a3      	str	r3, [r4, #8]
  40310c:	f8d8 3000 	ldr.w	r3, [r8]
  403110:	442b      	add	r3, r5
  403112:	f8c8 3000 	str.w	r3, [r8]
	for ( ;  btw;							/* Repeat until all data written */
  403116:	1b76      	subs	r6, r6, r5
  403118:	d097      	beq.n	40304a <f_write+0x5e>
		if ((fp->fptr % SS(fp->fs)) == 0) {	/* On the sector boundary? */
  40311a:	68a2      	ldr	r2, [r4, #8]
  40311c:	f3c2 0308 	ubfx	r3, r2, #0, #9
  403120:	2b00      	cmp	r3, #0
  403122:	d1d4      	bne.n	4030ce <f_write+0xe2>
			csect = (BYTE)(fp->fptr / SS(fp->fs) & (fp->fs->csize - 1));	/* Sector offset in the cluster */
  403124:	6820      	ldr	r0, [r4, #0]
  403126:	7883      	ldrb	r3, [r0, #2]
  403128:	3b01      	subs	r3, #1
  40312a:	ea03 2352 	and.w	r3, r3, r2, lsr #9
			if (!csect) {					/* On the cluster boundary? */
  40312e:	f013 07ff 	ands.w	r7, r3, #255	; 0xff
  403132:	d10b      	bne.n	40314c <f_write+0x160>
				if (fp->fptr == 0) {		/* On the top of the file? */
  403134:	2a00      	cmp	r2, #0
  403136:	d182      	bne.n	40303e <f_write+0x52>
					clst = fp->sclust;		/* Follow from the origin */
  403138:	6923      	ldr	r3, [r4, #16]
					if (clst == 0)			/* When no cluster is allocated, */
  40313a:	2b00      	cmp	r3, #0
  40313c:	f43f af79 	beq.w	403032 <f_write+0x46>
				if (clst == 1) ABORT(fp->fs, FR_INT_ERR);
  403140:	2b01      	cmp	r3, #1
  403142:	d08c      	beq.n	40305e <f_write+0x72>
				if (clst == 0xFFFFFFFF) ABORT(fp->fs, FR_DISK_ERR);
  403144:	f1b3 3fff 	cmp.w	r3, #4294967295
  403148:	d090      	beq.n	40306c <f_write+0x80>
				fp->clust = clst;			/* Update current cluster */
  40314a:	6163      	str	r3, [r4, #20]
			if (fp->fs->winsect == fp->dsect && move_window(fp->fs, 0))	/* Write-back sector cache */
  40314c:	6820      	ldr	r0, [r4, #0]
  40314e:	6ac2      	ldr	r2, [r0, #44]	; 0x2c
  403150:	69a3      	ldr	r3, [r4, #24]
  403152:	429a      	cmp	r2, r3
  403154:	d091      	beq.n	40307a <f_write+0x8e>
			sect = clust2sect(fp->fs, fp->clust);	/* Get current sector */
  403156:	f8d4 a000 	ldr.w	sl, [r4]
  40315a:	6961      	ldr	r1, [r4, #20]
  40315c:	4650      	mov	r0, sl
  40315e:	4b23      	ldr	r3, [pc, #140]	; (4031ec <f_write+0x200>)
  403160:	4798      	blx	r3
			if (!sect) ABORT(fp->fs, FR_INT_ERR);
  403162:	4605      	mov	r5, r0
  403164:	2800      	cmp	r0, #0
  403166:	d094      	beq.n	403092 <f_write+0xa6>
			sect += csect;
  403168:	443d      	add	r5, r7
			if (cc) {						/* Write maximum contiguous sectors directly */
  40316a:	ea5f 2b56 	movs.w	fp, r6, lsr #9
  40316e:	d0a9      	beq.n	4030c4 <f_write+0xd8>
				if (csect + cc > fp->fs->csize)	/* Clip at cluster boundary */
  403170:	f89a 3002 	ldrb.w	r3, [sl, #2]
  403174:	eb07 020b 	add.w	r2, r7, fp
  403178:	429a      	cmp	r2, r3
					cc = fp->fs->csize - csect;
  40317a:	bf88      	it	hi
  40317c:	eba3 0b07 	subhi.w	fp, r3, r7
				if (disk_write(fp->fs->drv, wbuff, sect, (BYTE)cc) != RES_OK)
  403180:	fa5f f38b 	uxtb.w	r3, fp
  403184:	462a      	mov	r2, r5
  403186:	4649      	mov	r1, r9
  403188:	f89a 0001 	ldrb.w	r0, [sl, #1]
  40318c:	4f18      	ldr	r7, [pc, #96]	; (4031f0 <f_write+0x204>)
  40318e:	47b8      	blx	r7
  403190:	2800      	cmp	r0, #0
  403192:	d185      	bne.n	4030a0 <f_write+0xb4>
				if (fp->fs->winsect - sect < cc) {	/* Refill sector cache if it gets invalidated by the direct write */
  403194:	6820      	ldr	r0, [r4, #0]
  403196:	6ac1      	ldr	r1, [r0, #44]	; 0x2c
  403198:	1b49      	subs	r1, r1, r5
  40319a:	458b      	cmp	fp, r1
  40319c:	d887      	bhi.n	4030ae <f_write+0xc2>
				wcnt = SS(fp->fs) * cc;		/* Number of bytes transferred */
  40319e:	ea4f 254b 	mov.w	r5, fp, lsl #9
				continue;
  4031a2:	e7af      	b.n	403104 <f_write+0x118>
				if (move_window(fp->fs, 0)) ABORT(fp->fs, FR_DISK_ERR);
  4031a4:	2100      	movs	r1, #0
  4031a6:	4650      	mov	r0, sl
  4031a8:	4b0e      	ldr	r3, [pc, #56]	; (4031e4 <f_write+0x1f8>)
  4031aa:	4798      	blx	r3
  4031ac:	b910      	cbnz	r0, 4031b4 <f_write+0x1c8>
				fp->fs->winsect = sect;
  4031ae:	6823      	ldr	r3, [r4, #0]
  4031b0:	62dd      	str	r5, [r3, #44]	; 0x2c
  4031b2:	e78b      	b.n	4030cc <f_write+0xe0>
				if (move_window(fp->fs, 0)) ABORT(fp->fs, FR_DISK_ERR);
  4031b4:	79a3      	ldrb	r3, [r4, #6]
  4031b6:	f063 037f 	orn	r3, r3, #127	; 0x7f
  4031ba:	71a3      	strb	r3, [r4, #6]
  4031bc:	2301      	movs	r3, #1
  4031be:	9301      	str	r3, [sp, #4]
  4031c0:	e008      	b.n	4031d4 <f_write+0x1e8>
			ABORT(fp->fs, FR_DISK_ERR);
  4031c2:	79a3      	ldrb	r3, [r4, #6]
  4031c4:	f063 037f 	orn	r3, r3, #127	; 0x7f
  4031c8:	71a3      	strb	r3, [r4, #6]
  4031ca:	2301      	movs	r3, #1
  4031cc:	9301      	str	r3, [sp, #4]
  4031ce:	e001      	b.n	4031d4 <f_write+0x1e8>
		LEAVE_FF(fp->fs, FR_INT_ERR);
  4031d0:	2302      	movs	r3, #2
  4031d2:	9301      	str	r3, [sp, #4]
}
  4031d4:	9801      	ldr	r0, [sp, #4]
  4031d6:	b003      	add	sp, #12
  4031d8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  4031dc:	00401a2d 	.word	0x00401a2d
  4031e0:	004021b1 	.word	0x004021b1
  4031e4:	00401e61 	.word	0x00401e61
  4031e8:	004019d5 	.word	0x004019d5
  4031ec:	004019f7 	.word	0x004019f7
  4031f0:	0040189d 	.word	0x0040189d

004031f4 <f_sync>:
/*-----------------------------------------------------------------------*/

FRESULT f_sync (
	FIL *fp		/* Pointer to the file object */
)
{
  4031f4:	b538      	push	{r3, r4, r5, lr}
  4031f6:	4604      	mov	r4, r0
	FRESULT res;
	DWORD tim;
	BYTE *dir;


	res = validate(fp->fs, fp->id);		/* Check validity of the object */
  4031f8:	8881      	ldrh	r1, [r0, #4]
  4031fa:	6800      	ldr	r0, [r0, #0]
  4031fc:	4b1f      	ldr	r3, [pc, #124]	; (40327c <f_sync+0x88>)
  4031fe:	4798      	blx	r3
	if (res == FR_OK) {
  403200:	4603      	mov	r3, r0
  403202:	b918      	cbnz	r0, 40320c <f_sync+0x18>
		if (fp->flag & FA__WRITTEN) {	/* Has the file been written? */
  403204:	79a2      	ldrb	r2, [r4, #6]
  403206:	f012 0f20 	tst.w	r2, #32
  40320a:	d101      	bne.n	403210 <f_sync+0x1c>
			}
		}
	}

	LEAVE_FF(fp->fs, res);
}
  40320c:	4618      	mov	r0, r3
  40320e:	bd38      	pop	{r3, r4, r5, pc}
			res = move_window(fp->fs, fp->dir_sect);
  403210:	69e1      	ldr	r1, [r4, #28]
  403212:	6820      	ldr	r0, [r4, #0]
  403214:	4b1a      	ldr	r3, [pc, #104]	; (403280 <f_sync+0x8c>)
  403216:	4798      	blx	r3
			if (res == FR_OK) {
  403218:	4603      	mov	r3, r0
  40321a:	2800      	cmp	r0, #0
  40321c:	d1f6      	bne.n	40320c <f_sync+0x18>
				dir = fp->dir_ptr;
  40321e:	6a25      	ldr	r5, [r4, #32]
				dir[DIR_Attr] |= AM_ARC;					/* Set archive bit */
  403220:	7aeb      	ldrb	r3, [r5, #11]
  403222:	f043 0320 	orr.w	r3, r3, #32
  403226:	72eb      	strb	r3, [r5, #11]
				ST_DWORD(dir+DIR_FileSize, fp->fsize);		/* Update file size */
  403228:	68e3      	ldr	r3, [r4, #12]
  40322a:	772b      	strb	r3, [r5, #28]
  40322c:	89a3      	ldrh	r3, [r4, #12]
  40322e:	0a1b      	lsrs	r3, r3, #8
  403230:	776b      	strb	r3, [r5, #29]
  403232:	89e3      	ldrh	r3, [r4, #14]
  403234:	77ab      	strb	r3, [r5, #30]
  403236:	7be3      	ldrb	r3, [r4, #15]
  403238:	77eb      	strb	r3, [r5, #31]
				ST_CLUST(dir, fp->sclust);					/* Update start cluster */
  40323a:	6923      	ldr	r3, [r4, #16]
  40323c:	76ab      	strb	r3, [r5, #26]
  40323e:	8a23      	ldrh	r3, [r4, #16]
  403240:	0a1b      	lsrs	r3, r3, #8
  403242:	76eb      	strb	r3, [r5, #27]
  403244:	8a63      	ldrh	r3, [r4, #18]
  403246:	752b      	strb	r3, [r5, #20]
  403248:	8a63      	ldrh	r3, [r4, #18]
  40324a:	0a1b      	lsrs	r3, r3, #8
  40324c:	756b      	strb	r3, [r5, #21]
				tim = get_fattime();						/* Update updated time */
  40324e:	4b0d      	ldr	r3, [pc, #52]	; (403284 <f_sync+0x90>)
  403250:	4798      	blx	r3
				ST_DWORD(dir+DIR_WrtTime, tim);
  403252:	75a8      	strb	r0, [r5, #22]
  403254:	f3c0 2307 	ubfx	r3, r0, #8, #8
  403258:	75eb      	strb	r3, [r5, #23]
  40325a:	0c03      	lsrs	r3, r0, #16
  40325c:	762b      	strb	r3, [r5, #24]
  40325e:	0e00      	lsrs	r0, r0, #24
  403260:	7668      	strb	r0, [r5, #25]
				fp->flag &= ~FA__WRITTEN;
  403262:	79a3      	ldrb	r3, [r4, #6]
  403264:	f023 0320 	bic.w	r3, r3, #32
  403268:	71a3      	strb	r3, [r4, #6]
				fp->fs->wflag = 1;
  40326a:	6823      	ldr	r3, [r4, #0]
  40326c:	2201      	movs	r2, #1
  40326e:	711a      	strb	r2, [r3, #4]
				res = sync(fp->fs);
  403270:	6820      	ldr	r0, [r4, #0]
  403272:	4b05      	ldr	r3, [pc, #20]	; (403288 <f_sync+0x94>)
  403274:	4798      	blx	r3
  403276:	4603      	mov	r3, r0
  403278:	e7c8      	b.n	40320c <f_sync+0x18>
  40327a:	bf00      	nop
  40327c:	00401a2d 	.word	0x00401a2d
  403280:	00401e61 	.word	0x00401e61
  403284:	0040197d 	.word	0x0040197d
  403288:	004028a9 	.word	0x004028a9

0040328c <f_close>:
/*-----------------------------------------------------------------------*/

FRESULT f_close (
	FIL *fp		/* Pointer to the file object to be closed */
)
{
  40328c:	b510      	push	{r4, lr}
  40328e:	4604      	mov	r4, r0
	res = validate(fs, fp->id);
	if (res == FR_OK) fp->fs = 0;	/* Discard file object */
	LEAVE_FF(fs, res);

#else
	res = f_sync(fp);		/* Flush cached data */
  403290:	4b03      	ldr	r3, [pc, #12]	; (4032a0 <f_close+0x14>)
  403292:	4798      	blx	r3
#else
		res = dec_lock(fp->lockid);
#endif
	}
#endif
	if (res == FR_OK) fp->fs = 0;	/* Discard file object */
  403294:	4603      	mov	r3, r0
  403296:	b908      	cbnz	r0, 40329c <f_close+0x10>
  403298:	2200      	movs	r2, #0
  40329a:	6022      	str	r2, [r4, #0]
	return res;
#endif
}
  40329c:	4618      	mov	r0, r3
  40329e:	bd10      	pop	{r4, pc}
  4032a0:	004031f5 	.word	0x004031f5

004032a4 <f_gets>:
TCHAR* f_gets (
	TCHAR* buff,	/* Pointer to the string buffer to read */
	int len,		/* Size of string buffer (characters) */
	FIL* fil		/* Pointer to the file object */
)
{
  4032a4:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
  4032a8:	b083      	sub	sp, #12
  4032aa:	4681      	mov	r9, r0
  4032ac:	4690      	mov	r8, r2
	int n = 0;
	TCHAR c, *p = buff;
  4032ae:	4605      	mov	r5, r0
	int n = 0;
  4032b0:	2400      	movs	r4, #0
	BYTE s[2];
	UINT rc;


	while (n < len - 1) {			/* Read bytes until buffer gets filled */
  4032b2:	1e4e      	subs	r6, r1, #1
		f_read(fil, s, 1, &rc);
  4032b4:	4f0d      	ldr	r7, [pc, #52]	; (4032ec <f_gets+0x48>)
	while (n < len - 1) {			/* Read bytes until buffer gets filled */
  4032b6:	42b4      	cmp	r4, r6
  4032b8:	da0e      	bge.n	4032d8 <f_gets+0x34>
		f_read(fil, s, 1, &rc);
  4032ba:	466b      	mov	r3, sp
  4032bc:	2201      	movs	r2, #1
  4032be:	a901      	add	r1, sp, #4
  4032c0:	4640      	mov	r0, r8
  4032c2:	47b8      	blx	r7
		if (rc != 1) break;			/* Break on EOF or error */
  4032c4:	9b00      	ldr	r3, [sp, #0]
  4032c6:	2b01      	cmp	r3, #1
  4032c8:	d106      	bne.n	4032d8 <f_gets+0x34>
		c = s[0];
  4032ca:	f89d 3004 	ldrb.w	r3, [sp, #4]
		}
#endif
#if _USE_STRFUNC >= 2
		if (c == '\r') continue;	/* Strip '\r' */
#endif
		*p++ = c;
  4032ce:	f805 3b01 	strb.w	r3, [r5], #1
		n++;
  4032d2:	3401      	adds	r4, #1
		if (c == '\n') break;		/* Break on EOL */
  4032d4:	2b0a      	cmp	r3, #10
  4032d6:	d1ee      	bne.n	4032b6 <f_gets+0x12>
	}
	*p = 0;
  4032d8:	2300      	movs	r3, #0
  4032da:	702b      	strb	r3, [r5, #0]
	return n ? buff : 0;			/* When no data read (eof or error), return with error. */
  4032dc:	429c      	cmp	r4, r3
}
  4032de:	bf14      	ite	ne
  4032e0:	4648      	movne	r0, r9
  4032e2:	4618      	moveq	r0, r3
  4032e4:	b003      	add	sp, #12
  4032e6:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
  4032ea:	bf00      	nop
  4032ec:	00402e59 	.word	0x00402e59

004032f0 <f_putc>:
/*-----------------------------------------------------------------------*/
int f_putc (
	TCHAR c,	/* A character to be output */
	FIL* fil	/* Pointer to the file object */
)
{
  4032f0:	b510      	push	{r4, lr}
  4032f2:	b082      	sub	sp, #8
  4032f4:	460c      	mov	r4, r1
			s[2] = (BYTE)(0x80 | (c & 0x3F));
			btw = 3;
		}
	}
#else				/* Write the character without conversion */
	s[0] = (BYTE)c;
  4032f6:	f88d 0000 	strb.w	r0, [sp]
	btw = 1;
#endif
	f_write(fil, s, btw, &bw);		/* Write the char to the file */
  4032fa:	ab01      	add	r3, sp, #4
  4032fc:	2201      	movs	r2, #1
  4032fe:	4669      	mov	r1, sp
  403300:	4620      	mov	r0, r4
  403302:	4c05      	ldr	r4, [pc, #20]	; (403318 <f_putc+0x28>)
  403304:	47a0      	blx	r4
	return (bw == btw) ? 1 : EOF;	/* Return the result */
  403306:	9b01      	ldr	r3, [sp, #4]
  403308:	2b01      	cmp	r3, #1
}
  40330a:	bf0c      	ite	eq
  40330c:	2001      	moveq	r0, #1
  40330e:	f04f 30ff 	movne.w	r0, #4294967295
  403312:	b002      	add	sp, #8
  403314:	bd10      	pop	{r4, pc}
  403316:	bf00      	nop
  403318:	00402fed 	.word	0x00402fed

0040331c <f_puts>:
/*-----------------------------------------------------------------------*/
int f_puts (
	const TCHAR* str,	/* Pointer to the string to be output */
	FIL* fil			/* Pointer to the file object */
)
{
  40331c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	int n;


	for (n = 0; *str; str++, n++) {
  40331e:	7803      	ldrb	r3, [r0, #0]
  403320:	b17b      	cbz	r3, 403342 <f_puts+0x26>
  403322:	460e      	mov	r6, r1
  403324:	4605      	mov	r5, r0
  403326:	1c44      	adds	r4, r0, #1
		if (f_putc(*str, fil) == EOF) return EOF;
  403328:	4f07      	ldr	r7, [pc, #28]	; (403348 <f_puts+0x2c>)
  40332a:	4631      	mov	r1, r6
  40332c:	4618      	mov	r0, r3
  40332e:	47b8      	blx	r7
  403330:	f1b0 3fff 	cmp.w	r0, #4294967295
  403334:	d006      	beq.n	403344 <f_puts+0x28>
  403336:	1b60      	subs	r0, r4, r5
	for (n = 0; *str; str++, n++) {
  403338:	f814 3b01 	ldrb.w	r3, [r4], #1
  40333c:	2b00      	cmp	r3, #0
  40333e:	d1f4      	bne.n	40332a <f_puts+0xe>
  403340:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  403342:	2000      	movs	r0, #0
	}
	return n;
}
  403344:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  403346:	bf00      	nop
  403348:	004032f1 	.word	0x004032f1

0040334c <ff_convert>:
)
{
	WCHAR c;


	if (src < 0x80) {	/* ASCII */
  40334c:	287f      	cmp	r0, #127	; 0x7f
  40334e:	d919      	bls.n	403384 <ff_convert+0x38>
		c = src;

	} else {
		if (dir) {		/* OEMCP to Unicode */
  403350:	b971      	cbnz	r1, 403370 <ff_convert+0x24>
			c = (src >= 0x100) ? 0 : Tbl[src - 0x80];

		} else {		/* Unicode to OEMCP */
			for (c = 0; c < 0x80; c++) {
				if (src == Tbl[c]) break;
  403352:	28c7      	cmp	r0, #199	; 0xc7
  403354:	d013      	beq.n	40337e <ff_convert+0x32>
  403356:	4a0c      	ldr	r2, [pc, #48]	; (403388 <ff_convert+0x3c>)
			for (c = 0; c < 0x80; c++) {
  403358:	2301      	movs	r3, #1
				if (src == Tbl[c]) break;
  40335a:	f832 1f02 	ldrh.w	r1, [r2, #2]!
  40335e:	4281      	cmp	r1, r0
  403360:	d003      	beq.n	40336a <ff_convert+0x1e>
			for (c = 0; c < 0x80; c++) {
  403362:	3301      	adds	r3, #1
  403364:	b29b      	uxth	r3, r3
  403366:	2b80      	cmp	r3, #128	; 0x80
  403368:	d1f7      	bne.n	40335a <ff_convert+0xe>
			}
			c = (c + 0x80) & 0xFF;
  40336a:	3380      	adds	r3, #128	; 0x80
  40336c:	b2d8      	uxtb	r0, r3
  40336e:	4770      	bx	lr
			c = (src >= 0x100) ? 0 : Tbl[src - 0x80];
  403370:	28ff      	cmp	r0, #255	; 0xff
  403372:	d806      	bhi.n	403382 <ff_convert+0x36>
  403374:	3880      	subs	r0, #128	; 0x80
  403376:	4b04      	ldr	r3, [pc, #16]	; (403388 <ff_convert+0x3c>)
  403378:	f833 0010 	ldrh.w	r0, [r3, r0, lsl #1]
  40337c:	4770      	bx	lr
				if (src == Tbl[c]) break;
  40337e:	2300      	movs	r3, #0
  403380:	e7f3      	b.n	40336a <ff_convert+0x1e>
			c = (src >= 0x100) ? 0 : Tbl[src - 0x80];
  403382:	2000      	movs	r0, #0
		}
	}

	return c;
}
  403384:	4770      	bx	lr
  403386:	bf00      	nop
  403388:	0040c484 	.word	0x0040c484

0040338c <ff_wtoupper>:
	static const WCHAR tbl_lower[] = { 0x61, 0x62, 0x63, 0x64, 0x65, 0x66, 0x67, 0x68, 0x69, 0x6A, 0x6B, 0x6C, 0x6D, 0x6E, 0x6F, 0x70, 0x71, 0x72, 0x73, 0x74, 0x75, 0x76, 0x77, 0x78, 0x79, 0x7A, 0xA1, 0x00A2, 0x00A3, 0x00A5, 0x00AC, 0x00AF, 0xE0, 0xE1, 0xE2, 0xE3, 0xE4, 0xE5, 0xE6, 0xE7, 0xE8, 0xE9, 0xEA, 0xEB, 0xEC, 0xED, 0xEE, 0xEF, 0xF0, 0xF1, 0xF2, 0xF3, 0xF4, 0xF5, 0xF6, 0xF8, 0xF9, 0xFA, 0xFB, 0xFC, 0xFD, 0xFE, 0x0FF, 0x101, 0x103, 0x105, 0x107, 0x109, 0x10B, 0x10D, 0x10F, 0x111, 0x113, 0x115, 0x117, 0x119, 0x11B, 0x11D, 0x11F, 0x121, 0x123, 0x125, 0x127, 0x129, 0x12B, 0x12D, 0x12F, 0x131, 0x133, 0x135, 0x137, 0x13A, 0x13C, 0x13E, 0x140, 0x142, 0x144, 0x146, 0x148, 0x14B, 0x14D, 0x14F, 0x151, 0x153, 0x155, 0x157, 0x159, 0x15B, 0x15D, 0x15F, 0x161, 0x163, 0x165, 0x167, 0x169, 0x16B, 0x16D, 0x16F, 0x171, 0x173, 0x175, 0x177, 0x17A, 0x17C, 0x17E, 0x192, 0x3B1, 0x3B2, 0x3B3, 0x3B4, 0x3B5, 0x3B6, 0x3B7, 0x3B8, 0x3B9, 0x3BA, 0x3BB, 0x3BC, 0x3BD, 0x3BE, 0x3BF, 0x3C0, 0x3C1, 0x3C3, 0x3C4, 0x3C5, 0x3C6, 0x3C7, 0x3C8, 0x3C9, 0x3CA, 0x430, 0x431, 0x432, 0x433, 0x434, 0x435, 0x436, 0x437, 0x438, 0x439, 0x43A, 0x43B, 0x43C, 0x43D, 0x43E, 0x43F, 0x440, 0x441, 0x442, 0x443, 0x444, 0x445, 0x446, 0x447, 0x448, 0x449, 0x44A, 0x44B, 0x44C, 0x44D, 0x44E, 0x44F, 0x451, 0x452, 0x453, 0x454, 0x455, 0x456, 0x457, 0x458, 0x459, 0x45A, 0x45B, 0x45C, 0x45E, 0x45F, 0x2170, 0x2171, 0x2172, 0x2173, 0x2174, 0x2175, 0x2176, 0x2177, 0x2178, 0x2179, 0x217A, 0x217B, 0x217C, 0x217D, 0x217E, 0x217F, 0xFF41, 0xFF42, 0xFF43, 0xFF44, 0xFF45, 0xFF46, 0xFF47, 0xFF48, 0xFF49, 0xFF4A, 0xFF4B, 0xFF4C, 0xFF4D, 0xFF4E, 0xFF4F, 0xFF50, 0xFF51, 0xFF52, 0xFF53, 0xFF54, 0xFF55, 0xFF56, 0xFF57, 0xFF58, 0xFF59, 0xFF5A, 0 };
	static const WCHAR tbl_upper[] = { 0x41, 0x42, 0x43, 0x44, 0x45, 0x46, 0x47, 0x48, 0x49, 0x4A, 0x4B, 0x4C, 0x4D, 0x4E, 0x4F, 0x50, 0x51, 0x52, 0x53, 0x54, 0x55, 0x56, 0x57, 0x58, 0x59, 0x5A, 0x21, 0xFFE0, 0xFFE1, 0xFFE5, 0xFFE2, 0xFFE3, 0xC0, 0xC1, 0xC2, 0xC3, 0xC4, 0xC5, 0xC6, 0xC7, 0xC8, 0xC9, 0xCA, 0xCB, 0xCC, 0xCD, 0xCE, 0xCF, 0xD0, 0xD1, 0xD2, 0xD3, 0xD4, 0xD5, 0xD6, 0xD8, 0xD9, 0xDA, 0xDB, 0xDC, 0xDD, 0xDE, 0x178, 0x100, 0x102, 0x104, 0x106, 0x108, 0x10A, 0x10C, 0x10E, 0x110, 0x112, 0x114, 0x116, 0x118, 0x11A, 0x11C, 0x11E, 0x120, 0x122, 0x124, 0x126, 0x128, 0x12A, 0x12C, 0x12E, 0x130, 0x132, 0x134, 0x136, 0x139, 0x13B, 0x13D, 0x13F, 0x141, 0x143, 0x145, 0x147, 0x14A, 0x14C, 0x14E, 0x150, 0x152, 0x154, 0x156, 0x158, 0x15A, 0x15C, 0x15E, 0x160, 0x162, 0x164, 0x166, 0x168, 0x16A, 0x16C, 0x16E, 0x170, 0x172, 0x174, 0x176, 0x179, 0x17B, 0x17D, 0x191, 0x391, 0x392, 0x393, 0x394, 0x395, 0x396, 0x397, 0x398, 0x399, 0x39A, 0x39B, 0x39C, 0x39D, 0x39E, 0x39F, 0x3A0, 0x3A1, 0x3A3, 0x3A4, 0x3A5, 0x3A6, 0x3A7, 0x3A8, 0x3A9, 0x3AA, 0x410, 0x411, 0x412, 0x413, 0x414, 0x415, 0x416, 0x417, 0x418, 0x419, 0x41A, 0x41B, 0x41C, 0x41D, 0x41E, 0x41F, 0x420, 0x421, 0x422, 0x423, 0x424, 0x425, 0x426, 0x427, 0x428, 0x429, 0x42A, 0x42B, 0x42C, 0x42D, 0x42E, 0x42F, 0x401, 0x402, 0x403, 0x404, 0x405, 0x406, 0x407, 0x408, 0x409, 0x40A, 0x40B, 0x40C, 0x40E, 0x40F, 0x2160, 0x2161, 0x2162, 0x2163, 0x2164, 0x2165, 0x2166, 0x2167, 0x2168, 0x2169, 0x216A, 0x216B, 0x216C, 0x216D, 0x216E, 0x216F, 0xFF21, 0xFF22, 0xFF23, 0xFF24, 0xFF25, 0xFF26, 0xFF27, 0xFF28, 0xFF29, 0xFF2A, 0xFF2B, 0xFF2C, 0xFF2D, 0xFF2E, 0xFF2F, 0xFF30, 0xFF31, 0xFF32, 0xFF33, 0xFF34, 0xFF35, 0xFF36, 0xFF37, 0xFF38, 0xFF39, 0xFF3A, 0 };
	int i;


	for (i = 0; tbl_lower[i] && chr != tbl_lower[i]; i++) ;
  40338c:	2861      	cmp	r0, #97	; 0x61
  40338e:	d00e      	beq.n	4033ae <ff_wtoupper+0x22>
  403390:	4908      	ldr	r1, [pc, #32]	; (4033b4 <ff_wtoupper+0x28>)
  403392:	2200      	movs	r2, #0
  403394:	3201      	adds	r2, #1
  403396:	f831 3f02 	ldrh.w	r3, [r1, #2]!
  40339a:	4283      	cmp	r3, r0
  40339c:	d001      	beq.n	4033a2 <ff_wtoupper+0x16>
  40339e:	2b00      	cmp	r3, #0
  4033a0:	d1f8      	bne.n	403394 <ff_wtoupper+0x8>

	return tbl_lower[i] ? tbl_upper[i] : chr;
  4033a2:	b11b      	cbz	r3, 4033ac <ff_wtoupper+0x20>
  4033a4:	4b04      	ldr	r3, [pc, #16]	; (4033b8 <ff_wtoupper+0x2c>)
  4033a6:	f833 0012 	ldrh.w	r0, [r3, r2, lsl #1]
}
  4033aa:	4770      	bx	lr
  4033ac:	4770      	bx	lr
	for (i = 0; tbl_lower[i] && chr != tbl_lower[i]; i++) ;
  4033ae:	2200      	movs	r2, #0
  4033b0:	e7f8      	b.n	4033a4 <ff_wtoupper+0x18>
  4033b2:	bf00      	nop
  4033b4:	0040c584 	.word	0x0040c584
  4033b8:	0040c764 	.word	0x0040c764

004033bc <vListInitialise>:
void vListInitialise( List_t * const pxList )
{
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
  4033bc:	f100 0308 	add.w	r3, r0, #8
  4033c0:	6043      	str	r3, [r0, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
  4033c2:	f04f 32ff 	mov.w	r2, #4294967295
  4033c6:	6082      	str	r2, [r0, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
  4033c8:	60c3      	str	r3, [r0, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
  4033ca:	6103      	str	r3, [r0, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
  4033cc:	2300      	movs	r3, #0
  4033ce:	6003      	str	r3, [r0, #0]
  4033d0:	4770      	bx	lr

004033d2 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pvContainer = NULL;
  4033d2:	2300      	movs	r3, #0
  4033d4:	6103      	str	r3, [r0, #16]
  4033d6:	4770      	bx	lr

004033d8 <vListInsertEnd>:
}
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
ListItem_t * const pxIndex = pxList->pxIndex;
  4033d8:	6843      	ldr	r3, [r0, #4]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
  4033da:	604b      	str	r3, [r1, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
  4033dc:	689a      	ldr	r2, [r3, #8]
  4033de:	608a      	str	r2, [r1, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
  4033e0:	689a      	ldr	r2, [r3, #8]
  4033e2:	6051      	str	r1, [r2, #4]
	pxIndex->pxPrevious = pxNewListItem;
  4033e4:	6099      	str	r1, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pvContainer = ( void * ) pxList;
  4033e6:	6108      	str	r0, [r1, #16]

	( pxList->uxNumberOfItems )++;
  4033e8:	6803      	ldr	r3, [r0, #0]
  4033ea:	3301      	adds	r3, #1
  4033ec:	6003      	str	r3, [r0, #0]
  4033ee:	4770      	bx	lr

004033f0 <vListInsert>:
}
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
  4033f0:	b430      	push	{r4, r5}
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
  4033f2:	680d      	ldr	r5, [r1, #0]
	new list item should be placed after it.  This ensures that TCB's which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
  4033f4:	f1b5 3fff 	cmp.w	r5, #4294967295
  4033f8:	d002      	beq.n	403400 <vListInsert+0x10>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
  4033fa:	f100 0208 	add.w	r2, r0, #8
  4033fe:	e002      	b.n	403406 <vListInsert+0x16>
		pxIterator = pxList->xListEnd.pxPrevious;
  403400:	6902      	ldr	r2, [r0, #16]
  403402:	e004      	b.n	40340e <vListInsert+0x1e>
		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
  403404:	461a      	mov	r2, r3
  403406:	6853      	ldr	r3, [r2, #4]
  403408:	681c      	ldr	r4, [r3, #0]
  40340a:	42a5      	cmp	r5, r4
  40340c:	d2fa      	bcs.n	403404 <vListInsert+0x14>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
  40340e:	6853      	ldr	r3, [r2, #4]
  403410:	604b      	str	r3, [r1, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
  403412:	6099      	str	r1, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
  403414:	608a      	str	r2, [r1, #8]
	pxIterator->pxNext = pxNewListItem;
  403416:	6051      	str	r1, [r2, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pvContainer = ( void * ) pxList;
  403418:	6108      	str	r0, [r1, #16]

	( pxList->uxNumberOfItems )++;
  40341a:	6803      	ldr	r3, [r0, #0]
  40341c:	3301      	adds	r3, #1
  40341e:	6003      	str	r3, [r0, #0]
}
  403420:	bc30      	pop	{r4, r5}
  403422:	4770      	bx	lr

00403424 <uxListRemove>:

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = ( List_t * ) pxItemToRemove->pvContainer;
  403424:	6903      	ldr	r3, [r0, #16]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
  403426:	6842      	ldr	r2, [r0, #4]
  403428:	6881      	ldr	r1, [r0, #8]
  40342a:	6091      	str	r1, [r2, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
  40342c:	6882      	ldr	r2, [r0, #8]
  40342e:	6841      	ldr	r1, [r0, #4]
  403430:	6051      	str	r1, [r2, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
  403432:	685a      	ldr	r2, [r3, #4]
  403434:	4290      	cmp	r0, r2
  403436:	d005      	beq.n	403444 <uxListRemove+0x20>
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pvContainer = NULL;
  403438:	2200      	movs	r2, #0
  40343a:	6102      	str	r2, [r0, #16]
	( pxList->uxNumberOfItems )--;
  40343c:	6818      	ldr	r0, [r3, #0]
  40343e:	3801      	subs	r0, #1
  403440:	6018      	str	r0, [r3, #0]

	return pxList->uxNumberOfItems;
}
  403442:	4770      	bx	lr
		pxList->pxIndex = pxItemToRemove->pxPrevious;
  403444:	6882      	ldr	r2, [r0, #8]
  403446:	605a      	str	r2, [r3, #4]
  403448:	e7f6      	b.n	403438 <uxListRemove+0x14>
	...

0040344c <prvTaskExitError>:
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
  40344c:	4b0d      	ldr	r3, [pc, #52]	; (403484 <prvTaskExitError+0x38>)
  40344e:	681b      	ldr	r3, [r3, #0]
  403450:	f1b3 3fff 	cmp.w	r3, #4294967295
  403454:	d00a      	beq.n	40346c <prvTaskExitError+0x20>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
  403456:	f04f 0380 	mov.w	r3, #128	; 0x80
  40345a:	b672      	cpsid	i
  40345c:	f383 8811 	msr	BASEPRI, r3
  403460:	f3bf 8f6f 	isb	sy
  403464:	f3bf 8f4f 	dsb	sy
  403468:	b662      	cpsie	i
  40346a:	e7fe      	b.n	40346a <prvTaskExitError+0x1e>
  40346c:	f04f 0380 	mov.w	r3, #128	; 0x80
  403470:	b672      	cpsid	i
  403472:	f383 8811 	msr	BASEPRI, r3
  403476:	f3bf 8f6f 	isb	sy
  40347a:	f3bf 8f4f 	dsb	sy
  40347e:	b662      	cpsie	i
  403480:	e7fe      	b.n	403480 <prvTaskExitError+0x34>
  403482:	bf00      	nop
  403484:	20400030 	.word	0x20400030

00403488 <prvPortStartFirstTask>:
}
/*-----------------------------------------------------------*/

static void prvPortStartFirstTask( void )
{
	__asm volatile(
  403488:	4806      	ldr	r0, [pc, #24]	; (4034a4 <prvPortStartFirstTask+0x1c>)
  40348a:	6800      	ldr	r0, [r0, #0]
  40348c:	6800      	ldr	r0, [r0, #0]
  40348e:	f380 8808 	msr	MSP, r0
  403492:	b662      	cpsie	i
  403494:	b661      	cpsie	f
  403496:	f3bf 8f4f 	dsb	sy
  40349a:	f3bf 8f6f 	isb	sy
  40349e:	df00      	svc	0
  4034a0:	bf00      	nop
  4034a2:	0000      	.short	0x0000
  4034a4:	e000ed08 	.word	0xe000ed08

004034a8 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
  4034a8:	f8df 000c 	ldr.w	r0, [pc, #12]	; 4034b8 <vPortEnableVFP+0x10>
  4034ac:	6801      	ldr	r1, [r0, #0]
  4034ae:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
  4034b2:	6001      	str	r1, [r0, #0]
  4034b4:	4770      	bx	lr
  4034b6:	0000      	.short	0x0000
  4034b8:	e000ed88 	.word	0xe000ed88

004034bc <pxPortInitialiseStack>:
	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
  4034bc:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
  4034c0:	f840 3c04 	str.w	r3, [r0, #-4]
	*pxTopOfStack = ( StackType_t ) pxCode;	/* PC */
  4034c4:	f840 1c08 	str.w	r1, [r0, #-8]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
  4034c8:	4b05      	ldr	r3, [pc, #20]	; (4034e0 <pxPortInitialiseStack+0x24>)
  4034ca:	f840 3c0c 	str.w	r3, [r0, #-12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
  4034ce:	f840 2c20 	str.w	r2, [r0, #-32]
	*pxTopOfStack = portINITIAL_EXEC_RETURN;
  4034d2:	f06f 0302 	mvn.w	r3, #2
  4034d6:	f840 3c24 	str.w	r3, [r0, #-36]
}
  4034da:	3844      	subs	r0, #68	; 0x44
  4034dc:	4770      	bx	lr
  4034de:	bf00      	nop
  4034e0:	0040344d 	.word	0x0040344d

004034e4 <SVC_Handler>:
	__asm volatile (
  4034e4:	4b06      	ldr	r3, [pc, #24]	; (403500 <pxCurrentTCBConst2>)
  4034e6:	6819      	ldr	r1, [r3, #0]
  4034e8:	6808      	ldr	r0, [r1, #0]
  4034ea:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  4034ee:	f380 8809 	msr	PSP, r0
  4034f2:	f3bf 8f6f 	isb	sy
  4034f6:	f04f 0000 	mov.w	r0, #0
  4034fa:	f380 8811 	msr	BASEPRI, r0
  4034fe:	4770      	bx	lr

00403500 <pxCurrentTCBConst2>:
  403500:	2040c25c 	.word	0x2040c25c
  403504:	4770      	bx	lr
  403506:	bf00      	nop

00403508 <vPortEnterCritical>:
  403508:	f04f 0380 	mov.w	r3, #128	; 0x80
  40350c:	b672      	cpsid	i
  40350e:	f383 8811 	msr	BASEPRI, r3
  403512:	f3bf 8f6f 	isb	sy
  403516:	f3bf 8f4f 	dsb	sy
  40351a:	b662      	cpsie	i
	uxCriticalNesting++;
  40351c:	4a0b      	ldr	r2, [pc, #44]	; (40354c <vPortEnterCritical+0x44>)
  40351e:	6813      	ldr	r3, [r2, #0]
  403520:	3301      	adds	r3, #1
  403522:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 1 )
  403524:	2b01      	cmp	r3, #1
  403526:	d10f      	bne.n	403548 <vPortEnterCritical+0x40>
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
  403528:	4b09      	ldr	r3, [pc, #36]	; (403550 <vPortEnterCritical+0x48>)
  40352a:	681b      	ldr	r3, [r3, #0]
  40352c:	f013 0fff 	tst.w	r3, #255	; 0xff
  403530:	d00a      	beq.n	403548 <vPortEnterCritical+0x40>
  403532:	f04f 0380 	mov.w	r3, #128	; 0x80
  403536:	b672      	cpsid	i
  403538:	f383 8811 	msr	BASEPRI, r3
  40353c:	f3bf 8f6f 	isb	sy
  403540:	f3bf 8f4f 	dsb	sy
  403544:	b662      	cpsie	i
  403546:	e7fe      	b.n	403546 <vPortEnterCritical+0x3e>
  403548:	4770      	bx	lr
  40354a:	bf00      	nop
  40354c:	20400030 	.word	0x20400030
  403550:	e000ed04 	.word	0xe000ed04

00403554 <vPortExitCritical>:
	configASSERT( uxCriticalNesting );
  403554:	4b0a      	ldr	r3, [pc, #40]	; (403580 <vPortExitCritical+0x2c>)
  403556:	681b      	ldr	r3, [r3, #0]
  403558:	b953      	cbnz	r3, 403570 <vPortExitCritical+0x1c>
  40355a:	f04f 0380 	mov.w	r3, #128	; 0x80
  40355e:	b672      	cpsid	i
  403560:	f383 8811 	msr	BASEPRI, r3
  403564:	f3bf 8f6f 	isb	sy
  403568:	f3bf 8f4f 	dsb	sy
  40356c:	b662      	cpsie	i
  40356e:	e7fe      	b.n	40356e <vPortExitCritical+0x1a>
	uxCriticalNesting--;
  403570:	3b01      	subs	r3, #1
  403572:	4a03      	ldr	r2, [pc, #12]	; (403580 <vPortExitCritical+0x2c>)
  403574:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
  403576:	b90b      	cbnz	r3, 40357c <vPortExitCritical+0x28>
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
  403578:	f383 8811 	msr	BASEPRI, r3
  40357c:	4770      	bx	lr
  40357e:	bf00      	nop
  403580:	20400030 	.word	0x20400030

00403584 <PendSV_Handler>:
	__asm volatile
  403584:	f3ef 8009 	mrs	r0, PSP
  403588:	f3bf 8f6f 	isb	sy
  40358c:	4b15      	ldr	r3, [pc, #84]	; (4035e4 <pxCurrentTCBConst>)
  40358e:	681a      	ldr	r2, [r3, #0]
  403590:	f01e 0f10 	tst.w	lr, #16
  403594:	bf08      	it	eq
  403596:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
  40359a:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  40359e:	6010      	str	r0, [r2, #0]
  4035a0:	f84d 3d04 	str.w	r3, [sp, #-4]!
  4035a4:	f04f 0080 	mov.w	r0, #128	; 0x80
  4035a8:	b672      	cpsid	i
  4035aa:	f380 8811 	msr	BASEPRI, r0
  4035ae:	f3bf 8f4f 	dsb	sy
  4035b2:	f3bf 8f6f 	isb	sy
  4035b6:	b662      	cpsie	i
  4035b8:	f001 f8aa 	bl	404710 <vTaskSwitchContext>
  4035bc:	f04f 0000 	mov.w	r0, #0
  4035c0:	f380 8811 	msr	BASEPRI, r0
  4035c4:	bc08      	pop	{r3}
  4035c6:	6819      	ldr	r1, [r3, #0]
  4035c8:	6808      	ldr	r0, [r1, #0]
  4035ca:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  4035ce:	f01e 0f10 	tst.w	lr, #16
  4035d2:	bf08      	it	eq
  4035d4:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
  4035d8:	f380 8809 	msr	PSP, r0
  4035dc:	f3bf 8f6f 	isb	sy
  4035e0:	4770      	bx	lr
  4035e2:	bf00      	nop

004035e4 <pxCurrentTCBConst>:
  4035e4:	2040c25c 	.word	0x2040c25c
  4035e8:	4770      	bx	lr
  4035ea:	bf00      	nop

004035ec <SysTick_Handler>:
{
  4035ec:	b508      	push	{r3, lr}
	__asm volatile
  4035ee:	f3ef 8311 	mrs	r3, BASEPRI
  4035f2:	f04f 0280 	mov.w	r2, #128	; 0x80
  4035f6:	b672      	cpsid	i
  4035f8:	f382 8811 	msr	BASEPRI, r2
  4035fc:	f3bf 8f6f 	isb	sy
  403600:	f3bf 8f4f 	dsb	sy
  403604:	b662      	cpsie	i
		if( xTaskIncrementTick() != pdFALSE )
  403606:	4b05      	ldr	r3, [pc, #20]	; (40361c <SysTick_Handler+0x30>)
  403608:	4798      	blx	r3
  40360a:	b118      	cbz	r0, 403614 <SysTick_Handler+0x28>
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
  40360c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
  403610:	4b03      	ldr	r3, [pc, #12]	; (403620 <SysTick_Handler+0x34>)
  403612:	601a      	str	r2, [r3, #0]
	__asm volatile
  403614:	2300      	movs	r3, #0
  403616:	f383 8811 	msr	BASEPRI, r3
  40361a:	bd08      	pop	{r3, pc}
  40361c:	0040437d 	.word	0x0040437d
  403620:	e000ed04 	.word	0xe000ed04

00403624 <vPortSetupTimerInterrupt>:
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
  403624:	4a03      	ldr	r2, [pc, #12]	; (403634 <vPortSetupTimerInterrupt+0x10>)
  403626:	4b04      	ldr	r3, [pc, #16]	; (403638 <vPortSetupTimerInterrupt+0x14>)
  403628:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
  40362a:	2207      	movs	r2, #7
  40362c:	3b04      	subs	r3, #4
  40362e:	601a      	str	r2, [r3, #0]
  403630:	4770      	bx	lr
  403632:	bf00      	nop
  403634:	000927bf 	.word	0x000927bf
  403638:	e000e014 	.word	0xe000e014

0040363c <xPortStartScheduler>:
{
  40363c:	b500      	push	{lr}
  40363e:	b083      	sub	sp, #12
		ulOriginalPriority = *pucFirstUserPriorityRegister;
  403640:	4b25      	ldr	r3, [pc, #148]	; (4036d8 <xPortStartScheduler+0x9c>)
  403642:	781a      	ldrb	r2, [r3, #0]
  403644:	b2d2      	uxtb	r2, r2
  403646:	9201      	str	r2, [sp, #4]
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
  403648:	22ff      	movs	r2, #255	; 0xff
  40364a:	701a      	strb	r2, [r3, #0]
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
  40364c:	781b      	ldrb	r3, [r3, #0]
  40364e:	b2db      	uxtb	r3, r3
  403650:	f88d 3003 	strb.w	r3, [sp, #3]
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
  403654:	f89d 3003 	ldrb.w	r3, [sp, #3]
  403658:	f003 0380 	and.w	r3, r3, #128	; 0x80
  40365c:	4a1f      	ldr	r2, [pc, #124]	; (4036dc <xPortStartScheduler+0xa0>)
  40365e:	7013      	strb	r3, [r2, #0]
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
  403660:	2207      	movs	r2, #7
  403662:	4b1f      	ldr	r3, [pc, #124]	; (4036e0 <xPortStartScheduler+0xa4>)
  403664:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
  403666:	f89d 3003 	ldrb.w	r3, [sp, #3]
  40366a:	f013 0f80 	tst.w	r3, #128	; 0x80
  40366e:	d010      	beq.n	403692 <xPortStartScheduler+0x56>
  403670:	2206      	movs	r2, #6
  403672:	e000      	b.n	403676 <xPortStartScheduler+0x3a>
  403674:	460a      	mov	r2, r1
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
  403676:	f89d 3003 	ldrb.w	r3, [sp, #3]
  40367a:	005b      	lsls	r3, r3, #1
  40367c:	b2db      	uxtb	r3, r3
  40367e:	f88d 3003 	strb.w	r3, [sp, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
  403682:	f89d 3003 	ldrb.w	r3, [sp, #3]
  403686:	1e51      	subs	r1, r2, #1
  403688:	f013 0f80 	tst.w	r3, #128	; 0x80
  40368c:	d1f2      	bne.n	403674 <xPortStartScheduler+0x38>
  40368e:	4b14      	ldr	r3, [pc, #80]	; (4036e0 <xPortStartScheduler+0xa4>)
  403690:	601a      	str	r2, [r3, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
  403692:	4a13      	ldr	r2, [pc, #76]	; (4036e0 <xPortStartScheduler+0xa4>)
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
  403694:	6813      	ldr	r3, [r2, #0]
  403696:	021b      	lsls	r3, r3, #8
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
  403698:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
  40369c:	6013      	str	r3, [r2, #0]
		*pucFirstUserPriorityRegister = ulOriginalPriority;
  40369e:	9b01      	ldr	r3, [sp, #4]
  4036a0:	b2db      	uxtb	r3, r3
  4036a2:	4a0d      	ldr	r2, [pc, #52]	; (4036d8 <xPortStartScheduler+0x9c>)
  4036a4:	7013      	strb	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
  4036a6:	4b0f      	ldr	r3, [pc, #60]	; (4036e4 <xPortStartScheduler+0xa8>)
  4036a8:	681a      	ldr	r2, [r3, #0]
  4036aa:	f442 0260 	orr.w	r2, r2, #14680064	; 0xe00000
  4036ae:	601a      	str	r2, [r3, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
  4036b0:	681a      	ldr	r2, [r3, #0]
  4036b2:	f042 4260 	orr.w	r2, r2, #3758096384	; 0xe0000000
  4036b6:	601a      	str	r2, [r3, #0]
	vPortSetupTimerInterrupt();
  4036b8:	4b0b      	ldr	r3, [pc, #44]	; (4036e8 <xPortStartScheduler+0xac>)
  4036ba:	4798      	blx	r3
	uxCriticalNesting = 0;
  4036bc:	2200      	movs	r2, #0
  4036be:	4b0b      	ldr	r3, [pc, #44]	; (4036ec <xPortStartScheduler+0xb0>)
  4036c0:	601a      	str	r2, [r3, #0]
	vPortEnableVFP();
  4036c2:	4b0b      	ldr	r3, [pc, #44]	; (4036f0 <xPortStartScheduler+0xb4>)
  4036c4:	4798      	blx	r3
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
  4036c6:	4a0b      	ldr	r2, [pc, #44]	; (4036f4 <xPortStartScheduler+0xb8>)
  4036c8:	6813      	ldr	r3, [r2, #0]
  4036ca:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
  4036ce:	6013      	str	r3, [r2, #0]
	prvPortStartFirstTask();
  4036d0:	4b09      	ldr	r3, [pc, #36]	; (4036f8 <xPortStartScheduler+0xbc>)
  4036d2:	4798      	blx	r3
	prvTaskExitError();
  4036d4:	4b09      	ldr	r3, [pc, #36]	; (4036fc <xPortStartScheduler+0xc0>)
  4036d6:	4798      	blx	r3
  4036d8:	e000e400 	.word	0xe000e400
  4036dc:	20400a4e 	.word	0x20400a4e
  4036e0:	20400a50 	.word	0x20400a50
  4036e4:	e000ed20 	.word	0xe000ed20
  4036e8:	00403625 	.word	0x00403625
  4036ec:	20400030 	.word	0x20400030
  4036f0:	004034a9 	.word	0x004034a9
  4036f4:	e000ef34 	.word	0xe000ef34
  4036f8:	00403489 	.word	0x00403489
  4036fc:	0040344d 	.word	0x0040344d

00403700 <vPortValidateInterruptPriority>:
	{
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) );
  403700:	f3ef 8305 	mrs	r3, IPSR

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
  403704:	2b0f      	cmp	r3, #15
  403706:	d911      	bls.n	40372c <vPortValidateInterruptPriority+0x2c>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
  403708:	4a12      	ldr	r2, [pc, #72]	; (403754 <vPortValidateInterruptPriority+0x54>)
  40370a:	5c9b      	ldrb	r3, [r3, r2]
  40370c:	b2db      	uxtb	r3, r3
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
  40370e:	4a12      	ldr	r2, [pc, #72]	; (403758 <vPortValidateInterruptPriority+0x58>)
  403710:	7812      	ldrb	r2, [r2, #0]
  403712:	429a      	cmp	r2, r3
  403714:	d90a      	bls.n	40372c <vPortValidateInterruptPriority+0x2c>
	__asm volatile
  403716:	f04f 0380 	mov.w	r3, #128	; 0x80
  40371a:	b672      	cpsid	i
  40371c:	f383 8811 	msr	BASEPRI, r3
  403720:	f3bf 8f6f 	isb	sy
  403724:	f3bf 8f4f 	dsb	sy
  403728:	b662      	cpsie	i
  40372a:	e7fe      	b.n	40372a <vPortValidateInterruptPriority+0x2a>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredicable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
  40372c:	4b0b      	ldr	r3, [pc, #44]	; (40375c <vPortValidateInterruptPriority+0x5c>)
  40372e:	681b      	ldr	r3, [r3, #0]
  403730:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
  403734:	4a0a      	ldr	r2, [pc, #40]	; (403760 <vPortValidateInterruptPriority+0x60>)
  403736:	6812      	ldr	r2, [r2, #0]
  403738:	4293      	cmp	r3, r2
  40373a:	d90a      	bls.n	403752 <vPortValidateInterruptPriority+0x52>
  40373c:	f04f 0380 	mov.w	r3, #128	; 0x80
  403740:	b672      	cpsid	i
  403742:	f383 8811 	msr	BASEPRI, r3
  403746:	f3bf 8f6f 	isb	sy
  40374a:	f3bf 8f4f 	dsb	sy
  40374e:	b662      	cpsie	i
  403750:	e7fe      	b.n	403750 <vPortValidateInterruptPriority+0x50>
  403752:	4770      	bx	lr
  403754:	e000e3f0 	.word	0xe000e3f0
  403758:	20400a4e 	.word	0x20400a4e
  40375c:	e000ed0c 	.word	0xe000ed0c
  403760:	20400a50 	.word	0x20400a50

00403764 <pvPortMalloc>:
static size_t xNextFreeByte = ( size_t ) 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
  403764:	b538      	push	{r3, r4, r5, lr}
  403766:	4604      	mov	r4, r0
void *pvReturn = NULL;
static uint8_t *pucAlignedHeap = NULL;

	/* Ensure that blocks are always aligned to the required number of bytes. */
	#if portBYTE_ALIGNMENT != 1
		if( xWantedSize & portBYTE_ALIGNMENT_MASK )
  403768:	f010 0f07 	tst.w	r0, #7
  40376c:	d002      	beq.n	403774 <pvPortMalloc+0x10>
		{
			/* Byte alignment required. */
			xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
  40376e:	f020 0407 	bic.w	r4, r0, #7
  403772:	3408      	adds	r4, #8
		}
	#endif

	vTaskSuspendAll();
  403774:	4b11      	ldr	r3, [pc, #68]	; (4037bc <pvPortMalloc+0x58>)
  403776:	4798      	blx	r3
	{
		if( pucAlignedHeap == NULL )
  403778:	4b11      	ldr	r3, [pc, #68]	; (4037c0 <pvPortMalloc+0x5c>)
  40377a:	681b      	ldr	r3, [r3, #0]
  40377c:	b193      	cbz	r3, 4037a4 <pvPortMalloc+0x40>
			/* Ensure the heap starts on a correctly aligned boundary. */
			pucAlignedHeap = ( uint8_t * ) ( ( ( portPOINTER_SIZE_TYPE ) &ucHeap[ portBYTE_ALIGNMENT ] ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) );
		}

		/* Check there is enough room left for the allocation. */
		if( ( ( xNextFreeByte + xWantedSize ) < configADJUSTED_HEAP_SIZE ) &&
  40377e:	4b11      	ldr	r3, [pc, #68]	; (4037c4 <pvPortMalloc+0x60>)
  403780:	681b      	ldr	r3, [r3, #0]
  403782:	441c      	add	r4, r3
  403784:	42a3      	cmp	r3, r4
  403786:	d213      	bcs.n	4037b0 <pvPortMalloc+0x4c>
  403788:	f24b 72f7 	movw	r2, #47095	; 0xb7f7
  40378c:	4294      	cmp	r4, r2
  40378e:	d80f      	bhi.n	4037b0 <pvPortMalloc+0x4c>
			( ( xNextFreeByte + xWantedSize ) > xNextFreeByte )	)/* Check for overflow. */
		{
			/* Return the next free byte then increment the index past this
			block. */
			pvReturn = pucAlignedHeap + xNextFreeByte;
  403790:	4a0b      	ldr	r2, [pc, #44]	; (4037c0 <pvPortMalloc+0x5c>)
  403792:	6815      	ldr	r5, [r2, #0]
  403794:	441d      	add	r5, r3
			xNextFreeByte += xWantedSize;
  403796:	4b0b      	ldr	r3, [pc, #44]	; (4037c4 <pvPortMalloc+0x60>)
  403798:	601c      	str	r4, [r3, #0]
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
  40379a:	4b0b      	ldr	r3, [pc, #44]	; (4037c8 <pvPortMalloc+0x64>)
  40379c:	4798      	blx	r3

	#if( configUSE_MALLOC_FAILED_HOOK == 1 )
	{
		if( pvReturn == NULL )
  40379e:	b14d      	cbz	r5, 4037b4 <pvPortMalloc+0x50>
		}
	}
	#endif

	return pvReturn;
}
  4037a0:	4628      	mov	r0, r5
  4037a2:	bd38      	pop	{r3, r4, r5, pc}
			pucAlignedHeap = ( uint8_t * ) ( ( ( portPOINTER_SIZE_TYPE ) &ucHeap[ portBYTE_ALIGNMENT ] ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) );
  4037a4:	4b09      	ldr	r3, [pc, #36]	; (4037cc <pvPortMalloc+0x68>)
  4037a6:	f023 0307 	bic.w	r3, r3, #7
  4037aa:	4a05      	ldr	r2, [pc, #20]	; (4037c0 <pvPortMalloc+0x5c>)
  4037ac:	6013      	str	r3, [r2, #0]
  4037ae:	e7e6      	b.n	40377e <pvPortMalloc+0x1a>
	( void ) xTaskResumeAll();
  4037b0:	4b05      	ldr	r3, [pc, #20]	; (4037c8 <pvPortMalloc+0x64>)
  4037b2:	4798      	blx	r3
			vApplicationMallocFailedHook();
  4037b4:	4b06      	ldr	r3, [pc, #24]	; (4037d0 <pvPortMalloc+0x6c>)
  4037b6:	4798      	blx	r3
  4037b8:	2500      	movs	r5, #0
	return pvReturn;
  4037ba:	e7f1      	b.n	4037a0 <pvPortMalloc+0x3c>
  4037bc:	00404361 	.word	0x00404361
  4037c0:	20400a54 	.word	0x20400a54
  4037c4:	2040c258 	.word	0x2040c258
  4037c8:	004044c9 	.word	0x004044c9
  4037cc:	20400a60 	.word	0x20400a60
  4037d0:	00408e17 	.word	0x00408e17

004037d4 <vPortFree>:
	heap_4.c for alternative implementations, and the memory management pages of
	http://www.FreeRTOS.org for more information. */
	( void ) pv;

	/* Force an assert as it is invalid to call this function. */
	configASSERT( pv == NULL );
  4037d4:	b150      	cbz	r0, 4037ec <vPortFree+0x18>
  4037d6:	f04f 0380 	mov.w	r3, #128	; 0x80
  4037da:	b672      	cpsid	i
  4037dc:	f383 8811 	msr	BASEPRI, r3
  4037e0:	f3bf 8f6f 	isb	sy
  4037e4:	f3bf 8f4f 	dsb	sy
  4037e8:	b662      	cpsie	i
  4037ea:	e7fe      	b.n	4037ea <vPortFree+0x16>
  4037ec:	4770      	bx	lr
	...

004037f0 <prvCopyDataToQueue>:

#endif /* configUSE_TRACE_FACILITY */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
  4037f0:	b538      	push	{r3, r4, r5, lr}
  4037f2:	4604      	mov	r4, r0
  4037f4:	4615      	mov	r5, r2
BaseType_t xReturn = pdFALSE;

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
  4037f6:	6c02      	ldr	r2, [r0, #64]	; 0x40
  4037f8:	b95a      	cbnz	r2, 403812 <prvCopyDataToQueue+0x22>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
  4037fa:	6803      	ldr	r3, [r0, #0]
  4037fc:	2b00      	cmp	r3, #0
  4037fe:	d12e      	bne.n	40385e <prvCopyDataToQueue+0x6e>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( ( void * ) pxQueue->pxMutexHolder );
  403800:	6840      	ldr	r0, [r0, #4]
  403802:	4b1b      	ldr	r3, [pc, #108]	; (403870 <prvCopyDataToQueue+0x80>)
  403804:	4798      	blx	r3
				pxQueue->pxMutexHolder = NULL;
  403806:	2300      	movs	r3, #0
  403808:	6063      	str	r3, [r4, #4]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	++( pxQueue->uxMessagesWaiting );
  40380a:	6ba3      	ldr	r3, [r4, #56]	; 0x38
  40380c:	3301      	adds	r3, #1
  40380e:	63a3      	str	r3, [r4, #56]	; 0x38

	return xReturn;
}
  403810:	bd38      	pop	{r3, r4, r5, pc}
	else if( xPosition == queueSEND_TO_BACK )
  403812:	b96d      	cbnz	r5, 403830 <prvCopyDataToQueue+0x40>
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0. */
  403814:	6880      	ldr	r0, [r0, #8]
  403816:	4b17      	ldr	r3, [pc, #92]	; (403874 <prvCopyDataToQueue+0x84>)
  403818:	4798      	blx	r3
		pxQueue->pcWriteTo += pxQueue->uxItemSize;
  40381a:	68a3      	ldr	r3, [r4, #8]
  40381c:	6c22      	ldr	r2, [r4, #64]	; 0x40
  40381e:	4413      	add	r3, r2
  403820:	60a3      	str	r3, [r4, #8]
		if( pxQueue->pcWriteTo >= pxQueue->pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
  403822:	6862      	ldr	r2, [r4, #4]
  403824:	4293      	cmp	r3, r2
  403826:	d31c      	bcc.n	403862 <prvCopyDataToQueue+0x72>
			pxQueue->pcWriteTo = pxQueue->pcHead;
  403828:	6823      	ldr	r3, [r4, #0]
  40382a:	60a3      	str	r3, [r4, #8]
BaseType_t xReturn = pdFALSE;
  40382c:	2000      	movs	r0, #0
  40382e:	e7ec      	b.n	40380a <prvCopyDataToQueue+0x1a>
		( void ) memcpy( ( void * ) pxQueue->u.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
  403830:	68c0      	ldr	r0, [r0, #12]
  403832:	4b10      	ldr	r3, [pc, #64]	; (403874 <prvCopyDataToQueue+0x84>)
  403834:	4798      	blx	r3
		pxQueue->u.pcReadFrom -= pxQueue->uxItemSize;
  403836:	6c23      	ldr	r3, [r4, #64]	; 0x40
  403838:	425b      	negs	r3, r3
  40383a:	68e2      	ldr	r2, [r4, #12]
  40383c:	441a      	add	r2, r3
  40383e:	60e2      	str	r2, [r4, #12]
		if( pxQueue->u.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
  403840:	6821      	ldr	r1, [r4, #0]
  403842:	428a      	cmp	r2, r1
  403844:	d202      	bcs.n	40384c <prvCopyDataToQueue+0x5c>
			pxQueue->u.pcReadFrom = ( pxQueue->pcTail - pxQueue->uxItemSize );
  403846:	6862      	ldr	r2, [r4, #4]
  403848:	4413      	add	r3, r2
  40384a:	60e3      	str	r3, [r4, #12]
		if( xPosition == queueOVERWRITE )
  40384c:	2d02      	cmp	r5, #2
  40384e:	d10a      	bne.n	403866 <prvCopyDataToQueue+0x76>
			if( pxQueue->uxMessagesWaiting > ( UBaseType_t ) 0 )
  403850:	6ba3      	ldr	r3, [r4, #56]	; 0x38
  403852:	b153      	cbz	r3, 40386a <prvCopyDataToQueue+0x7a>
				--( pxQueue->uxMessagesWaiting );
  403854:	6ba3      	ldr	r3, [r4, #56]	; 0x38
  403856:	3b01      	subs	r3, #1
  403858:	63a3      	str	r3, [r4, #56]	; 0x38
BaseType_t xReturn = pdFALSE;
  40385a:	2000      	movs	r0, #0
  40385c:	e7d5      	b.n	40380a <prvCopyDataToQueue+0x1a>
  40385e:	2000      	movs	r0, #0
  403860:	e7d3      	b.n	40380a <prvCopyDataToQueue+0x1a>
  403862:	2000      	movs	r0, #0
  403864:	e7d1      	b.n	40380a <prvCopyDataToQueue+0x1a>
  403866:	2000      	movs	r0, #0
  403868:	e7cf      	b.n	40380a <prvCopyDataToQueue+0x1a>
  40386a:	2000      	movs	r0, #0
  40386c:	e7cd      	b.n	40380a <prvCopyDataToQueue+0x1a>
  40386e:	bf00      	nop
  403870:	00404b11 	.word	0x00404b11
  403874:	0040942d 	.word	0x0040942d

00403878 <prvNotifyQueueSetContainer>:
/*-----------------------------------------------------------*/

#if ( configUSE_QUEUE_SETS == 1 )

	static BaseType_t prvNotifyQueueSetContainer( const Queue_t * const pxQueue, const BaseType_t xCopyPosition )
	{
  403878:	b530      	push	{r4, r5, lr}
  40387a:	b083      	sub	sp, #12
  40387c:	9001      	str	r0, [sp, #4]
	Queue_t *pxQueueSetContainer = pxQueue->pxQueueSetContainer;
  40387e:	6d44      	ldr	r4, [r0, #84]	; 0x54
	BaseType_t xReturn = pdFALSE;

		/* This function must be called form a critical section. */

		configASSERT( pxQueueSetContainer );
  403880:	b174      	cbz	r4, 4038a0 <prvNotifyQueueSetContainer+0x28>
		configASSERT( pxQueueSetContainer->uxMessagesWaiting < pxQueueSetContainer->uxLength );
  403882:	6ba2      	ldr	r2, [r4, #56]	; 0x38
  403884:	6be3      	ldr	r3, [r4, #60]	; 0x3c
  403886:	429a      	cmp	r2, r3
  403888:	d315      	bcc.n	4038b6 <prvNotifyQueueSetContainer+0x3e>
  40388a:	f04f 0380 	mov.w	r3, #128	; 0x80
  40388e:	b672      	cpsid	i
  403890:	f383 8811 	msr	BASEPRI, r3
  403894:	f3bf 8f6f 	isb	sy
  403898:	f3bf 8f4f 	dsb	sy
  40389c:	b662      	cpsie	i
  40389e:	e7fe      	b.n	40389e <prvNotifyQueueSetContainer+0x26>
  4038a0:	f04f 0380 	mov.w	r3, #128	; 0x80
  4038a4:	b672      	cpsid	i
  4038a6:	f383 8811 	msr	BASEPRI, r3
  4038aa:	f3bf 8f6f 	isb	sy
  4038ae:	f3bf 8f4f 	dsb	sy
  4038b2:	b662      	cpsie	i
  4038b4:	e7fe      	b.n	4038b4 <prvNotifyQueueSetContainer+0x3c>

		if( pxQueueSetContainer->uxMessagesWaiting < pxQueueSetContainer->uxLength )
  4038b6:	6ba2      	ldr	r2, [r4, #56]	; 0x38
  4038b8:	4293      	cmp	r3, r2
  4038ba:	d803      	bhi.n	4038c4 <prvNotifyQueueSetContainer+0x4c>
	BaseType_t xReturn = pdFALSE;
  4038bc:	2500      	movs	r5, #0
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
	}
  4038be:	4628      	mov	r0, r5
  4038c0:	b003      	add	sp, #12
  4038c2:	bd30      	pop	{r4, r5, pc}
  4038c4:	460a      	mov	r2, r1
			xReturn = prvCopyDataToQueue( pxQueueSetContainer, &pxQueue, xCopyPosition );
  4038c6:	a901      	add	r1, sp, #4
  4038c8:	4620      	mov	r0, r4
  4038ca:	4b0b      	ldr	r3, [pc, #44]	; (4038f8 <prvNotifyQueueSetContainer+0x80>)
  4038cc:	4798      	blx	r3
  4038ce:	4605      	mov	r5, r0
			if( pxQueueSetContainer->xTxLock == queueUNLOCKED )
  4038d0:	6ca3      	ldr	r3, [r4, #72]	; 0x48
  4038d2:	f1b3 3fff 	cmp.w	r3, #4294967295
  4038d6:	d10a      	bne.n	4038ee <prvNotifyQueueSetContainer+0x76>
				if( listLIST_IS_EMPTY( &( pxQueueSetContainer->xTasksWaitingToReceive ) ) == pdFALSE )
  4038d8:	6a63      	ldr	r3, [r4, #36]	; 0x24
  4038da:	2b00      	cmp	r3, #0
  4038dc:	d0ef      	beq.n	4038be <prvNotifyQueueSetContainer+0x46>
					if( xTaskRemoveFromEventList( &( pxQueueSetContainer->xTasksWaitingToReceive ) ) != pdFALSE )
  4038de:	f104 0024 	add.w	r0, r4, #36	; 0x24
  4038e2:	4b06      	ldr	r3, [pc, #24]	; (4038fc <prvNotifyQueueSetContainer+0x84>)
  4038e4:	4798      	blx	r3
  4038e6:	2800      	cmp	r0, #0
						xReturn = pdTRUE;
  4038e8:	bf18      	it	ne
  4038ea:	2501      	movne	r5, #1
  4038ec:	e7e7      	b.n	4038be <prvNotifyQueueSetContainer+0x46>
				( pxQueueSetContainer->xTxLock )++;
  4038ee:	6ca3      	ldr	r3, [r4, #72]	; 0x48
  4038f0:	3301      	adds	r3, #1
  4038f2:	64a3      	str	r3, [r4, #72]	; 0x48
  4038f4:	e7e3      	b.n	4038be <prvNotifyQueueSetContainer+0x46>
  4038f6:	bf00      	nop
  4038f8:	004037f1 	.word	0x004037f1
  4038fc:	004048e5 	.word	0x004048e5

00403900 <prvCopyDataFromQueue>:
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
  403900:	6c02      	ldr	r2, [r0, #64]	; 0x40
  403902:	b172      	cbz	r2, 403922 <prvCopyDataFromQueue+0x22>
{
  403904:	b510      	push	{r4, lr}
  403906:	4603      	mov	r3, r0
		pxQueue->u.pcReadFrom += pxQueue->uxItemSize;
  403908:	68c4      	ldr	r4, [r0, #12]
  40390a:	4414      	add	r4, r2
  40390c:	60c4      	str	r4, [r0, #12]
		if( pxQueue->u.pcReadFrom >= pxQueue->pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
  40390e:	6840      	ldr	r0, [r0, #4]
  403910:	4284      	cmp	r4, r0
  403912:	d301      	bcc.n	403918 <prvCopyDataFromQueue+0x18>
			pxQueue->u.pcReadFrom = pxQueue->pcHead;
  403914:	6818      	ldr	r0, [r3, #0]
  403916:	60d8      	str	r0, [r3, #12]
  403918:	4608      	mov	r0, r1
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0. */
  40391a:	68d9      	ldr	r1, [r3, #12]
  40391c:	4b01      	ldr	r3, [pc, #4]	; (403924 <prvCopyDataFromQueue+0x24>)
  40391e:	4798      	blx	r3
  403920:	bd10      	pop	{r4, pc}
  403922:	4770      	bx	lr
  403924:	0040942d 	.word	0x0040942d

00403928 <prvUnlockQueue>:
{
  403928:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  40392a:	4604      	mov	r4, r0
	taskENTER_CRITICAL();
  40392c:	4b22      	ldr	r3, [pc, #136]	; (4039b8 <prvUnlockQueue+0x90>)
  40392e:	4798      	blx	r3
		while( pxQueue->xTxLock > queueLOCKED_UNMODIFIED )
  403930:	6ca3      	ldr	r3, [r4, #72]	; 0x48
  403932:	2b00      	cmp	r3, #0
  403934:	dd1b      	ble.n	40396e <prvUnlockQueue+0x46>
					if( prvNotifyQueueSetContainer( pxQueue, queueSEND_TO_BACK ) == pdTRUE )
  403936:	4d21      	ldr	r5, [pc, #132]	; (4039bc <prvUnlockQueue+0x94>)
						vTaskMissedYield();
  403938:	4f21      	ldr	r7, [pc, #132]	; (4039c0 <prvUnlockQueue+0x98>)
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
  40393a:	4e22      	ldr	r6, [pc, #136]	; (4039c4 <prvUnlockQueue+0x9c>)
  40393c:	e00b      	b.n	403956 <prvUnlockQueue+0x2e>
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
  40393e:	6a63      	ldr	r3, [r4, #36]	; 0x24
  403940:	b1ab      	cbz	r3, 40396e <prvUnlockQueue+0x46>
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
  403942:	f104 0024 	add.w	r0, r4, #36	; 0x24
  403946:	47b0      	blx	r6
  403948:	b978      	cbnz	r0, 40396a <prvUnlockQueue+0x42>
			--( pxQueue->xTxLock );
  40394a:	6ca3      	ldr	r3, [r4, #72]	; 0x48
  40394c:	3b01      	subs	r3, #1
  40394e:	64a3      	str	r3, [r4, #72]	; 0x48
		while( pxQueue->xTxLock > queueLOCKED_UNMODIFIED )
  403950:	6ca3      	ldr	r3, [r4, #72]	; 0x48
  403952:	2b00      	cmp	r3, #0
  403954:	dd0b      	ble.n	40396e <prvUnlockQueue+0x46>
				if( pxQueue->pxQueueSetContainer != NULL )
  403956:	6d63      	ldr	r3, [r4, #84]	; 0x54
  403958:	2b00      	cmp	r3, #0
  40395a:	d0f0      	beq.n	40393e <prvUnlockQueue+0x16>
					if( prvNotifyQueueSetContainer( pxQueue, queueSEND_TO_BACK ) == pdTRUE )
  40395c:	2100      	movs	r1, #0
  40395e:	4620      	mov	r0, r4
  403960:	47a8      	blx	r5
  403962:	2801      	cmp	r0, #1
  403964:	d1f1      	bne.n	40394a <prvUnlockQueue+0x22>
						vTaskMissedYield();
  403966:	47b8      	blx	r7
  403968:	e7ef      	b.n	40394a <prvUnlockQueue+0x22>
							vTaskMissedYield();
  40396a:	47b8      	blx	r7
  40396c:	e7ed      	b.n	40394a <prvUnlockQueue+0x22>
		pxQueue->xTxLock = queueUNLOCKED;
  40396e:	f04f 33ff 	mov.w	r3, #4294967295
  403972:	64a3      	str	r3, [r4, #72]	; 0x48
	taskEXIT_CRITICAL();
  403974:	4b14      	ldr	r3, [pc, #80]	; (4039c8 <prvUnlockQueue+0xa0>)
  403976:	4798      	blx	r3
	taskENTER_CRITICAL();
  403978:	4b0f      	ldr	r3, [pc, #60]	; (4039b8 <prvUnlockQueue+0x90>)
  40397a:	4798      	blx	r3
		while( pxQueue->xRxLock > queueLOCKED_UNMODIFIED )
  40397c:	6c63      	ldr	r3, [r4, #68]	; 0x44
  40397e:	2b00      	cmp	r3, #0
  403980:	dd14      	ble.n	4039ac <prvUnlockQueue+0x84>
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
  403982:	6923      	ldr	r3, [r4, #16]
  403984:	b193      	cbz	r3, 4039ac <prvUnlockQueue+0x84>
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
  403986:	f104 0610 	add.w	r6, r4, #16
  40398a:	4d0e      	ldr	r5, [pc, #56]	; (4039c4 <prvUnlockQueue+0x9c>)
					vTaskMissedYield();
  40398c:	4f0c      	ldr	r7, [pc, #48]	; (4039c0 <prvUnlockQueue+0x98>)
  40398e:	e007      	b.n	4039a0 <prvUnlockQueue+0x78>
				--( pxQueue->xRxLock );
  403990:	6c63      	ldr	r3, [r4, #68]	; 0x44
  403992:	3b01      	subs	r3, #1
  403994:	6463      	str	r3, [r4, #68]	; 0x44
		while( pxQueue->xRxLock > queueLOCKED_UNMODIFIED )
  403996:	6c63      	ldr	r3, [r4, #68]	; 0x44
  403998:	2b00      	cmp	r3, #0
  40399a:	dd07      	ble.n	4039ac <prvUnlockQueue+0x84>
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
  40399c:	6923      	ldr	r3, [r4, #16]
  40399e:	b12b      	cbz	r3, 4039ac <prvUnlockQueue+0x84>
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
  4039a0:	4630      	mov	r0, r6
  4039a2:	47a8      	blx	r5
  4039a4:	2800      	cmp	r0, #0
  4039a6:	d0f3      	beq.n	403990 <prvUnlockQueue+0x68>
					vTaskMissedYield();
  4039a8:	47b8      	blx	r7
  4039aa:	e7f1      	b.n	403990 <prvUnlockQueue+0x68>
		pxQueue->xRxLock = queueUNLOCKED;
  4039ac:	f04f 33ff 	mov.w	r3, #4294967295
  4039b0:	6463      	str	r3, [r4, #68]	; 0x44
	taskEXIT_CRITICAL();
  4039b2:	4b05      	ldr	r3, [pc, #20]	; (4039c8 <prvUnlockQueue+0xa0>)
  4039b4:	4798      	blx	r3
  4039b6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  4039b8:	00403509 	.word	0x00403509
  4039bc:	00403879 	.word	0x00403879
  4039c0:	00404a41 	.word	0x00404a41
  4039c4:	004048e5 	.word	0x004048e5
  4039c8:	00403555 	.word	0x00403555

004039cc <xQueueGenericReset>:
{
  4039cc:	b538      	push	{r3, r4, r5, lr}
	configASSERT( pxQueue );
  4039ce:	b308      	cbz	r0, 403a14 <xQueueGenericReset+0x48>
  4039d0:	4604      	mov	r4, r0
  4039d2:	460d      	mov	r5, r1
	taskENTER_CRITICAL();
  4039d4:	4b1d      	ldr	r3, [pc, #116]	; (403a4c <xQueueGenericReset+0x80>)
  4039d6:	4798      	blx	r3
		pxQueue->pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize );
  4039d8:	6822      	ldr	r2, [r4, #0]
  4039da:	6c21      	ldr	r1, [r4, #64]	; 0x40
  4039dc:	6be3      	ldr	r3, [r4, #60]	; 0x3c
  4039de:	fb03 f301 	mul.w	r3, r3, r1
  4039e2:	18d0      	adds	r0, r2, r3
  4039e4:	6060      	str	r0, [r4, #4]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
  4039e6:	2000      	movs	r0, #0
  4039e8:	63a0      	str	r0, [r4, #56]	; 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
  4039ea:	60a2      	str	r2, [r4, #8]
		pxQueue->u.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - ( UBaseType_t ) 1U ) * pxQueue->uxItemSize );
  4039ec:	1a5b      	subs	r3, r3, r1
  4039ee:	4413      	add	r3, r2
  4039f0:	60e3      	str	r3, [r4, #12]
		pxQueue->xRxLock = queueUNLOCKED;
  4039f2:	f04f 33ff 	mov.w	r3, #4294967295
  4039f6:	6463      	str	r3, [r4, #68]	; 0x44
		pxQueue->xTxLock = queueUNLOCKED;
  4039f8:	64a3      	str	r3, [r4, #72]	; 0x48
		if( xNewQueue == pdFALSE )
  4039fa:	b9fd      	cbnz	r5, 403a3c <xQueueGenericReset+0x70>
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
  4039fc:	6923      	ldr	r3, [r4, #16]
  4039fe:	b12b      	cbz	r3, 403a0c <xQueueGenericReset+0x40>
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) == pdTRUE )
  403a00:	f104 0010 	add.w	r0, r4, #16
  403a04:	4b12      	ldr	r3, [pc, #72]	; (403a50 <xQueueGenericReset+0x84>)
  403a06:	4798      	blx	r3
  403a08:	2801      	cmp	r0, #1
  403a0a:	d00e      	beq.n	403a2a <xQueueGenericReset+0x5e>
	taskEXIT_CRITICAL();
  403a0c:	4b11      	ldr	r3, [pc, #68]	; (403a54 <xQueueGenericReset+0x88>)
  403a0e:	4798      	blx	r3
}
  403a10:	2001      	movs	r0, #1
  403a12:	bd38      	pop	{r3, r4, r5, pc}
  403a14:	f04f 0380 	mov.w	r3, #128	; 0x80
  403a18:	b672      	cpsid	i
  403a1a:	f383 8811 	msr	BASEPRI, r3
  403a1e:	f3bf 8f6f 	isb	sy
  403a22:	f3bf 8f4f 	dsb	sy
  403a26:	b662      	cpsie	i
  403a28:	e7fe      	b.n	403a28 <xQueueGenericReset+0x5c>
					queueYIELD_IF_USING_PREEMPTION();
  403a2a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
  403a2e:	4b0a      	ldr	r3, [pc, #40]	; (403a58 <xQueueGenericReset+0x8c>)
  403a30:	601a      	str	r2, [r3, #0]
  403a32:	f3bf 8f4f 	dsb	sy
  403a36:	f3bf 8f6f 	isb	sy
  403a3a:	e7e7      	b.n	403a0c <xQueueGenericReset+0x40>
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
  403a3c:	f104 0010 	add.w	r0, r4, #16
  403a40:	4d06      	ldr	r5, [pc, #24]	; (403a5c <xQueueGenericReset+0x90>)
  403a42:	47a8      	blx	r5
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
  403a44:	f104 0024 	add.w	r0, r4, #36	; 0x24
  403a48:	47a8      	blx	r5
  403a4a:	e7df      	b.n	403a0c <xQueueGenericReset+0x40>
  403a4c:	00403509 	.word	0x00403509
  403a50:	004048e5 	.word	0x004048e5
  403a54:	00403555 	.word	0x00403555
  403a58:	e000ed04 	.word	0xe000ed04
  403a5c:	004033bd 	.word	0x004033bd

00403a60 <xQueueGenericCreate>:
{
  403a60:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
  403a62:	b950      	cbnz	r0, 403a7a <xQueueGenericCreate+0x1a>
  403a64:	f04f 0380 	mov.w	r3, #128	; 0x80
  403a68:	b672      	cpsid	i
  403a6a:	f383 8811 	msr	BASEPRI, r3
  403a6e:	f3bf 8f6f 	isb	sy
  403a72:	f3bf 8f4f 	dsb	sy
  403a76:	b662      	cpsie	i
  403a78:	e7fe      	b.n	403a78 <xQueueGenericCreate+0x18>
  403a7a:	4606      	mov	r6, r0
  403a7c:	4617      	mov	r7, r2
  403a7e:	460d      	mov	r5, r1
	if( uxItemSize == ( UBaseType_t ) 0 )
  403a80:	b189      	cbz	r1, 403aa6 <xQueueGenericCreate+0x46>
		xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ) + ( size_t ) 1; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
  403a82:	fb01 f000 	mul.w	r0, r1, r0
	pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes );
  403a86:	3059      	adds	r0, #89	; 0x59
  403a88:	4b12      	ldr	r3, [pc, #72]	; (403ad4 <xQueueGenericCreate+0x74>)
  403a8a:	4798      	blx	r3
	if( pxNewQueue != NULL )
  403a8c:	4604      	mov	r4, r0
  403a8e:	b9e8      	cbnz	r0, 403acc <xQueueGenericCreate+0x6c>
  403a90:	f04f 0380 	mov.w	r3, #128	; 0x80
  403a94:	b672      	cpsid	i
  403a96:	f383 8811 	msr	BASEPRI, r3
  403a9a:	f3bf 8f6f 	isb	sy
  403a9e:	f3bf 8f4f 	dsb	sy
  403aa2:	b662      	cpsie	i
  403aa4:	e7fe      	b.n	403aa4 <xQueueGenericCreate+0x44>
	pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes );
  403aa6:	2058      	movs	r0, #88	; 0x58
  403aa8:	4b0a      	ldr	r3, [pc, #40]	; (403ad4 <xQueueGenericCreate+0x74>)
  403aaa:	4798      	blx	r3
	if( pxNewQueue != NULL )
  403aac:	4604      	mov	r4, r0
  403aae:	2800      	cmp	r0, #0
  403ab0:	d0ee      	beq.n	403a90 <xQueueGenericCreate+0x30>
			pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
  403ab2:	6020      	str	r0, [r4, #0]
		pxNewQueue->uxLength = uxQueueLength;
  403ab4:	63e6      	str	r6, [r4, #60]	; 0x3c
		pxNewQueue->uxItemSize = uxItemSize;
  403ab6:	6425      	str	r5, [r4, #64]	; 0x40
		( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
  403ab8:	2101      	movs	r1, #1
  403aba:	4620      	mov	r0, r4
  403abc:	4b06      	ldr	r3, [pc, #24]	; (403ad8 <xQueueGenericCreate+0x78>)
  403abe:	4798      	blx	r3
			pxNewQueue->ucQueueType = ucQueueType;
  403ac0:	f884 7050 	strb.w	r7, [r4, #80]	; 0x50
			pxNewQueue->pxQueueSetContainer = NULL;
  403ac4:	2300      	movs	r3, #0
  403ac6:	6563      	str	r3, [r4, #84]	; 0x54
}
  403ac8:	4620      	mov	r0, r4
  403aca:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
			pxNewQueue->pcHead = ( ( int8_t * ) pxNewQueue ) + sizeof( Queue_t );
  403acc:	f100 0358 	add.w	r3, r0, #88	; 0x58
  403ad0:	6003      	str	r3, [r0, #0]
  403ad2:	e7ef      	b.n	403ab4 <xQueueGenericCreate+0x54>
  403ad4:	00403765 	.word	0x00403765
  403ad8:	004039cd 	.word	0x004039cd

00403adc <xQueueGenericSend>:
{
  403adc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  403ae0:	b085      	sub	sp, #20
  403ae2:	9201      	str	r2, [sp, #4]
	configASSERT( pxQueue );
  403ae4:	b1b8      	cbz	r0, 403b16 <xQueueGenericSend+0x3a>
  403ae6:	4604      	mov	r4, r0
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
  403ae8:	b301      	cbz	r1, 403b2c <xQueueGenericSend+0x50>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
  403aea:	2b02      	cmp	r3, #2
  403aec:	d02c      	beq.n	403b48 <xQueueGenericSend+0x6c>
  403aee:	461d      	mov	r5, r3
  403af0:	4688      	mov	r8, r1
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
  403af2:	4b66      	ldr	r3, [pc, #408]	; (403c8c <xQueueGenericSend+0x1b0>)
  403af4:	4798      	blx	r3
  403af6:	2800      	cmp	r0, #0
  403af8:	d134      	bne.n	403b64 <xQueueGenericSend+0x88>
  403afa:	9b01      	ldr	r3, [sp, #4]
  403afc:	2b00      	cmp	r3, #0
  403afe:	d038      	beq.n	403b72 <xQueueGenericSend+0x96>
  403b00:	f04f 0380 	mov.w	r3, #128	; 0x80
  403b04:	b672      	cpsid	i
  403b06:	f383 8811 	msr	BASEPRI, r3
  403b0a:	f3bf 8f6f 	isb	sy
  403b0e:	f3bf 8f4f 	dsb	sy
  403b12:	b662      	cpsie	i
  403b14:	e7fe      	b.n	403b14 <xQueueGenericSend+0x38>
  403b16:	f04f 0380 	mov.w	r3, #128	; 0x80
  403b1a:	b672      	cpsid	i
  403b1c:	f383 8811 	msr	BASEPRI, r3
  403b20:	f3bf 8f6f 	isb	sy
  403b24:	f3bf 8f4f 	dsb	sy
  403b28:	b662      	cpsie	i
  403b2a:	e7fe      	b.n	403b2a <xQueueGenericSend+0x4e>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
  403b2c:	6c02      	ldr	r2, [r0, #64]	; 0x40
  403b2e:	2a00      	cmp	r2, #0
  403b30:	d0db      	beq.n	403aea <xQueueGenericSend+0xe>
  403b32:	f04f 0380 	mov.w	r3, #128	; 0x80
  403b36:	b672      	cpsid	i
  403b38:	f383 8811 	msr	BASEPRI, r3
  403b3c:	f3bf 8f6f 	isb	sy
  403b40:	f3bf 8f4f 	dsb	sy
  403b44:	b662      	cpsie	i
  403b46:	e7fe      	b.n	403b46 <xQueueGenericSend+0x6a>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
  403b48:	6be2      	ldr	r2, [r4, #60]	; 0x3c
  403b4a:	2a01      	cmp	r2, #1
  403b4c:	d0cf      	beq.n	403aee <xQueueGenericSend+0x12>
  403b4e:	f04f 0380 	mov.w	r3, #128	; 0x80
  403b52:	b672      	cpsid	i
  403b54:	f383 8811 	msr	BASEPRI, r3
  403b58:	f3bf 8f6f 	isb	sy
  403b5c:	f3bf 8f4f 	dsb	sy
  403b60:	b662      	cpsie	i
  403b62:	e7fe      	b.n	403b62 <xQueueGenericSend+0x86>
  403b64:	2700      	movs	r7, #0
		taskENTER_CRITICAL();
  403b66:	4e4a      	ldr	r6, [pc, #296]	; (403c90 <xQueueGenericSend+0x1b4>)
					vTaskSetTimeOutState( &xTimeOut );
  403b68:	f8df a150 	ldr.w	sl, [pc, #336]	; 403cbc <xQueueGenericSend+0x1e0>
					portYIELD_WITHIN_API();
  403b6c:	f8df 912c 	ldr.w	r9, [pc, #300]	; 403c9c <xQueueGenericSend+0x1c0>
  403b70:	e042      	b.n	403bf8 <xQueueGenericSend+0x11c>
  403b72:	2700      	movs	r7, #0
  403b74:	e7f7      	b.n	403b66 <xQueueGenericSend+0x8a>
				xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
  403b76:	462a      	mov	r2, r5
  403b78:	4641      	mov	r1, r8
  403b7a:	4620      	mov	r0, r4
  403b7c:	4b45      	ldr	r3, [pc, #276]	; (403c94 <xQueueGenericSend+0x1b8>)
  403b7e:	4798      	blx	r3
					if( pxQueue->pxQueueSetContainer != NULL )
  403b80:	6d63      	ldr	r3, [r4, #84]	; 0x54
  403b82:	b19b      	cbz	r3, 403bac <xQueueGenericSend+0xd0>
						if( prvNotifyQueueSetContainer( pxQueue, xCopyPosition ) == pdTRUE )
  403b84:	4629      	mov	r1, r5
  403b86:	4620      	mov	r0, r4
  403b88:	4b43      	ldr	r3, [pc, #268]	; (403c98 <xQueueGenericSend+0x1bc>)
  403b8a:	4798      	blx	r3
  403b8c:	2801      	cmp	r0, #1
  403b8e:	d107      	bne.n	403ba0 <xQueueGenericSend+0xc4>
							queueYIELD_IF_USING_PREEMPTION();
  403b90:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
  403b94:	4b41      	ldr	r3, [pc, #260]	; (403c9c <xQueueGenericSend+0x1c0>)
  403b96:	601a      	str	r2, [r3, #0]
  403b98:	f3bf 8f4f 	dsb	sy
  403b9c:	f3bf 8f6f 	isb	sy
				taskEXIT_CRITICAL();
  403ba0:	4b3f      	ldr	r3, [pc, #252]	; (403ca0 <xQueueGenericSend+0x1c4>)
  403ba2:	4798      	blx	r3
				return pdPASS;
  403ba4:	2001      	movs	r0, #1
}
  403ba6:	b005      	add	sp, #20
  403ba8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
						if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
  403bac:	6a63      	ldr	r3, [r4, #36]	; 0x24
  403bae:	b173      	cbz	r3, 403bce <xQueueGenericSend+0xf2>
							if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) == pdTRUE )
  403bb0:	f104 0024 	add.w	r0, r4, #36	; 0x24
  403bb4:	4b3b      	ldr	r3, [pc, #236]	; (403ca4 <xQueueGenericSend+0x1c8>)
  403bb6:	4798      	blx	r3
  403bb8:	2801      	cmp	r0, #1
  403bba:	d1f1      	bne.n	403ba0 <xQueueGenericSend+0xc4>
								queueYIELD_IF_USING_PREEMPTION();
  403bbc:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
  403bc0:	4b36      	ldr	r3, [pc, #216]	; (403c9c <xQueueGenericSend+0x1c0>)
  403bc2:	601a      	str	r2, [r3, #0]
  403bc4:	f3bf 8f4f 	dsb	sy
  403bc8:	f3bf 8f6f 	isb	sy
  403bcc:	e7e8      	b.n	403ba0 <xQueueGenericSend+0xc4>
						else if( xYieldRequired != pdFALSE )
  403bce:	2800      	cmp	r0, #0
  403bd0:	d0e6      	beq.n	403ba0 <xQueueGenericSend+0xc4>
							queueYIELD_IF_USING_PREEMPTION();
  403bd2:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
  403bd6:	4b31      	ldr	r3, [pc, #196]	; (403c9c <xQueueGenericSend+0x1c0>)
  403bd8:	601a      	str	r2, [r3, #0]
  403bda:	f3bf 8f4f 	dsb	sy
  403bde:	f3bf 8f6f 	isb	sy
  403be2:	e7dd      	b.n	403ba0 <xQueueGenericSend+0xc4>
					taskEXIT_CRITICAL();
  403be4:	4b2e      	ldr	r3, [pc, #184]	; (403ca0 <xQueueGenericSend+0x1c4>)
  403be6:	4798      	blx	r3
					return errQUEUE_FULL;
  403be8:	2000      	movs	r0, #0
  403bea:	e7dc      	b.n	403ba6 <xQueueGenericSend+0xca>
				prvUnlockQueue( pxQueue );
  403bec:	4620      	mov	r0, r4
  403bee:	4b2e      	ldr	r3, [pc, #184]	; (403ca8 <xQueueGenericSend+0x1cc>)
  403bf0:	4798      	blx	r3
				( void ) xTaskResumeAll();
  403bf2:	4b2e      	ldr	r3, [pc, #184]	; (403cac <xQueueGenericSend+0x1d0>)
  403bf4:	4798      	blx	r3
  403bf6:	2701      	movs	r7, #1
		taskENTER_CRITICAL();
  403bf8:	47b0      	blx	r6
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
  403bfa:	6ba2      	ldr	r2, [r4, #56]	; 0x38
  403bfc:	6be3      	ldr	r3, [r4, #60]	; 0x3c
  403bfe:	429a      	cmp	r2, r3
  403c00:	d3b9      	bcc.n	403b76 <xQueueGenericSend+0x9a>
  403c02:	2d02      	cmp	r5, #2
  403c04:	d0b7      	beq.n	403b76 <xQueueGenericSend+0x9a>
				if( xTicksToWait == ( TickType_t ) 0 )
  403c06:	9b01      	ldr	r3, [sp, #4]
  403c08:	2b00      	cmp	r3, #0
  403c0a:	d0eb      	beq.n	403be4 <xQueueGenericSend+0x108>
				else if( xEntryTimeSet == pdFALSE )
  403c0c:	b90f      	cbnz	r7, 403c12 <xQueueGenericSend+0x136>
					vTaskSetTimeOutState( &xTimeOut );
  403c0e:	a802      	add	r0, sp, #8
  403c10:	47d0      	blx	sl
		taskEXIT_CRITICAL();
  403c12:	4b23      	ldr	r3, [pc, #140]	; (403ca0 <xQueueGenericSend+0x1c4>)
  403c14:	4798      	blx	r3
		vTaskSuspendAll();
  403c16:	4b26      	ldr	r3, [pc, #152]	; (403cb0 <xQueueGenericSend+0x1d4>)
  403c18:	4798      	blx	r3
		prvLockQueue( pxQueue );
  403c1a:	47b0      	blx	r6
  403c1c:	6c63      	ldr	r3, [r4, #68]	; 0x44
  403c1e:	f1b3 3fff 	cmp.w	r3, #4294967295
  403c22:	d101      	bne.n	403c28 <xQueueGenericSend+0x14c>
  403c24:	2300      	movs	r3, #0
  403c26:	6463      	str	r3, [r4, #68]	; 0x44
  403c28:	6ca3      	ldr	r3, [r4, #72]	; 0x48
  403c2a:	f1b3 3fff 	cmp.w	r3, #4294967295
  403c2e:	d101      	bne.n	403c34 <xQueueGenericSend+0x158>
  403c30:	2300      	movs	r3, #0
  403c32:	64a3      	str	r3, [r4, #72]	; 0x48
  403c34:	4b1a      	ldr	r3, [pc, #104]	; (403ca0 <xQueueGenericSend+0x1c4>)
  403c36:	4798      	blx	r3
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
  403c38:	a901      	add	r1, sp, #4
  403c3a:	a802      	add	r0, sp, #8
  403c3c:	4b1d      	ldr	r3, [pc, #116]	; (403cb4 <xQueueGenericSend+0x1d8>)
  403c3e:	4798      	blx	r3
  403c40:	b9e0      	cbnz	r0, 403c7c <xQueueGenericSend+0x1a0>
	taskENTER_CRITICAL();
  403c42:	47b0      	blx	r6
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
  403c44:	f8d4 b038 	ldr.w	fp, [r4, #56]	; 0x38
  403c48:	6be7      	ldr	r7, [r4, #60]	; 0x3c
	taskEXIT_CRITICAL();
  403c4a:	4b15      	ldr	r3, [pc, #84]	; (403ca0 <xQueueGenericSend+0x1c4>)
  403c4c:	4798      	blx	r3
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
  403c4e:	45bb      	cmp	fp, r7
  403c50:	d1cc      	bne.n	403bec <xQueueGenericSend+0x110>
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
  403c52:	9901      	ldr	r1, [sp, #4]
  403c54:	f104 0010 	add.w	r0, r4, #16
  403c58:	4b17      	ldr	r3, [pc, #92]	; (403cb8 <xQueueGenericSend+0x1dc>)
  403c5a:	4798      	blx	r3
				prvUnlockQueue( pxQueue );
  403c5c:	4620      	mov	r0, r4
  403c5e:	4b12      	ldr	r3, [pc, #72]	; (403ca8 <xQueueGenericSend+0x1cc>)
  403c60:	4798      	blx	r3
				if( xTaskResumeAll() == pdFALSE )
  403c62:	4b12      	ldr	r3, [pc, #72]	; (403cac <xQueueGenericSend+0x1d0>)
  403c64:	4798      	blx	r3
  403c66:	2800      	cmp	r0, #0
  403c68:	d1c5      	bne.n	403bf6 <xQueueGenericSend+0x11a>
					portYIELD_WITHIN_API();
  403c6a:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
  403c6e:	f8c9 3000 	str.w	r3, [r9]
  403c72:	f3bf 8f4f 	dsb	sy
  403c76:	f3bf 8f6f 	isb	sy
  403c7a:	e7bc      	b.n	403bf6 <xQueueGenericSend+0x11a>
			prvUnlockQueue( pxQueue );
  403c7c:	4620      	mov	r0, r4
  403c7e:	4b0a      	ldr	r3, [pc, #40]	; (403ca8 <xQueueGenericSend+0x1cc>)
  403c80:	4798      	blx	r3
			( void ) xTaskResumeAll();
  403c82:	4b0a      	ldr	r3, [pc, #40]	; (403cac <xQueueGenericSend+0x1d0>)
  403c84:	4798      	blx	r3
			return errQUEUE_FULL;
  403c86:	2000      	movs	r0, #0
  403c88:	e78d      	b.n	403ba6 <xQueueGenericSend+0xca>
  403c8a:	bf00      	nop
  403c8c:	00404a4d 	.word	0x00404a4d
  403c90:	00403509 	.word	0x00403509
  403c94:	004037f1 	.word	0x004037f1
  403c98:	00403879 	.word	0x00403879
  403c9c:	e000ed04 	.word	0xe000ed04
  403ca0:	00403555 	.word	0x00403555
  403ca4:	004048e5 	.word	0x004048e5
  403ca8:	00403929 	.word	0x00403929
  403cac:	004044c9 	.word	0x004044c9
  403cb0:	00404361 	.word	0x00404361
  403cb4:	004049ad 	.word	0x004049ad
  403cb8:	004047e1 	.word	0x004047e1
  403cbc:	0040497d 	.word	0x0040497d

00403cc0 <xQueueGenericSendFromISR>:
	configASSERT( pxQueue );
  403cc0:	2800      	cmp	r0, #0
  403cc2:	d036      	beq.n	403d32 <xQueueGenericSendFromISR+0x72>
{
  403cc4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  403cc8:	4604      	mov	r4, r0
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
  403cca:	2900      	cmp	r1, #0
  403ccc:	d03c      	beq.n	403d48 <xQueueGenericSendFromISR+0x88>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
  403cce:	2b02      	cmp	r3, #2
  403cd0:	d048      	beq.n	403d64 <xQueueGenericSendFromISR+0xa4>
  403cd2:	461e      	mov	r6, r3
  403cd4:	4615      	mov	r5, r2
  403cd6:	4688      	mov	r8, r1
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
  403cd8:	4b35      	ldr	r3, [pc, #212]	; (403db0 <xQueueGenericSendFromISR+0xf0>)
  403cda:	4798      	blx	r3
	__asm volatile
  403cdc:	f3ef 8711 	mrs	r7, BASEPRI
  403ce0:	f04f 0380 	mov.w	r3, #128	; 0x80
  403ce4:	b672      	cpsid	i
  403ce6:	f383 8811 	msr	BASEPRI, r3
  403cea:	f3bf 8f6f 	isb	sy
  403cee:	f3bf 8f4f 	dsb	sy
  403cf2:	b662      	cpsie	i
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
  403cf4:	6ba2      	ldr	r2, [r4, #56]	; 0x38
  403cf6:	6be3      	ldr	r3, [r4, #60]	; 0x3c
  403cf8:	429a      	cmp	r2, r3
  403cfa:	d301      	bcc.n	403d00 <xQueueGenericSendFromISR+0x40>
  403cfc:	2e02      	cmp	r6, #2
  403cfe:	d14f      	bne.n	403da0 <xQueueGenericSendFromISR+0xe0>
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
  403d00:	4632      	mov	r2, r6
  403d02:	4641      	mov	r1, r8
  403d04:	4620      	mov	r0, r4
  403d06:	4b2b      	ldr	r3, [pc, #172]	; (403db4 <xQueueGenericSendFromISR+0xf4>)
  403d08:	4798      	blx	r3
			if( pxQueue->xTxLock == queueUNLOCKED )
  403d0a:	6ca3      	ldr	r3, [r4, #72]	; 0x48
  403d0c:	f1b3 3fff 	cmp.w	r3, #4294967295
  403d10:	d141      	bne.n	403d96 <xQueueGenericSendFromISR+0xd6>
					if( pxQueue->pxQueueSetContainer != NULL )
  403d12:	6d63      	ldr	r3, [r4, #84]	; 0x54
  403d14:	2b00      	cmp	r3, #0
  403d16:	d033      	beq.n	403d80 <xQueueGenericSendFromISR+0xc0>
						if( prvNotifyQueueSetContainer( pxQueue, xCopyPosition ) == pdTRUE )
  403d18:	4631      	mov	r1, r6
  403d1a:	4620      	mov	r0, r4
  403d1c:	4b26      	ldr	r3, [pc, #152]	; (403db8 <xQueueGenericSendFromISR+0xf8>)
  403d1e:	4798      	blx	r3
							if( pxHigherPriorityTaskWoken != NULL )
  403d20:	2d00      	cmp	r5, #0
  403d22:	d03f      	beq.n	403da4 <xQueueGenericSendFromISR+0xe4>
  403d24:	2801      	cmp	r0, #1
  403d26:	d13d      	bne.n	403da4 <xQueueGenericSendFromISR+0xe4>
								*pxHigherPriorityTaskWoken = pdTRUE;
  403d28:	6028      	str	r0, [r5, #0]
	__asm volatile
  403d2a:	f387 8811 	msr	BASEPRI, r7
}
  403d2e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	__asm volatile
  403d32:	f04f 0380 	mov.w	r3, #128	; 0x80
  403d36:	b672      	cpsid	i
  403d38:	f383 8811 	msr	BASEPRI, r3
  403d3c:	f3bf 8f6f 	isb	sy
  403d40:	f3bf 8f4f 	dsb	sy
  403d44:	b662      	cpsie	i
  403d46:	e7fe      	b.n	403d46 <xQueueGenericSendFromISR+0x86>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
  403d48:	6c00      	ldr	r0, [r0, #64]	; 0x40
  403d4a:	2800      	cmp	r0, #0
  403d4c:	d0bf      	beq.n	403cce <xQueueGenericSendFromISR+0xe>
  403d4e:	f04f 0380 	mov.w	r3, #128	; 0x80
  403d52:	b672      	cpsid	i
  403d54:	f383 8811 	msr	BASEPRI, r3
  403d58:	f3bf 8f6f 	isb	sy
  403d5c:	f3bf 8f4f 	dsb	sy
  403d60:	b662      	cpsie	i
  403d62:	e7fe      	b.n	403d62 <xQueueGenericSendFromISR+0xa2>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
  403d64:	6be0      	ldr	r0, [r4, #60]	; 0x3c
  403d66:	2801      	cmp	r0, #1
  403d68:	d0b3      	beq.n	403cd2 <xQueueGenericSendFromISR+0x12>
  403d6a:	f04f 0380 	mov.w	r3, #128	; 0x80
  403d6e:	b672      	cpsid	i
  403d70:	f383 8811 	msr	BASEPRI, r3
  403d74:	f3bf 8f6f 	isb	sy
  403d78:	f3bf 8f4f 	dsb	sy
  403d7c:	b662      	cpsie	i
  403d7e:	e7fe      	b.n	403d7e <xQueueGenericSendFromISR+0xbe>
						if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
  403d80:	6a63      	ldr	r3, [r4, #36]	; 0x24
  403d82:	b18b      	cbz	r3, 403da8 <xQueueGenericSendFromISR+0xe8>
							if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
  403d84:	f104 0024 	add.w	r0, r4, #36	; 0x24
  403d88:	4b0c      	ldr	r3, [pc, #48]	; (403dbc <xQueueGenericSendFromISR+0xfc>)
  403d8a:	4798      	blx	r3
								if( pxHigherPriorityTaskWoken != NULL )
  403d8c:	b175      	cbz	r5, 403dac <xQueueGenericSendFromISR+0xec>
  403d8e:	b168      	cbz	r0, 403dac <xQueueGenericSendFromISR+0xec>
									*pxHigherPriorityTaskWoken = pdTRUE;
  403d90:	2001      	movs	r0, #1
  403d92:	6028      	str	r0, [r5, #0]
  403d94:	e7c9      	b.n	403d2a <xQueueGenericSendFromISR+0x6a>
				++( pxQueue->xTxLock );
  403d96:	6ca3      	ldr	r3, [r4, #72]	; 0x48
  403d98:	3301      	adds	r3, #1
  403d9a:	64a3      	str	r3, [r4, #72]	; 0x48
			xReturn = pdPASS;
  403d9c:	2001      	movs	r0, #1
  403d9e:	e7c4      	b.n	403d2a <xQueueGenericSendFromISR+0x6a>
			xReturn = errQUEUE_FULL;
  403da0:	2000      	movs	r0, #0
  403da2:	e7c2      	b.n	403d2a <xQueueGenericSendFromISR+0x6a>
			xReturn = pdPASS;
  403da4:	2001      	movs	r0, #1
  403da6:	e7c0      	b.n	403d2a <xQueueGenericSendFromISR+0x6a>
  403da8:	2001      	movs	r0, #1
  403daa:	e7be      	b.n	403d2a <xQueueGenericSendFromISR+0x6a>
  403dac:	2001      	movs	r0, #1
  403dae:	e7bc      	b.n	403d2a <xQueueGenericSendFromISR+0x6a>
  403db0:	00403701 	.word	0x00403701
  403db4:	004037f1 	.word	0x004037f1
  403db8:	00403879 	.word	0x00403879
  403dbc:	004048e5 	.word	0x004048e5

00403dc0 <xQueueGenericReceive>:
{
  403dc0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
  403dc4:	b084      	sub	sp, #16
  403dc6:	9201      	str	r2, [sp, #4]
	configASSERT( pxQueue );
  403dc8:	b198      	cbz	r0, 403df2 <xQueueGenericReceive+0x32>
  403dca:	4604      	mov	r4, r0
	configASSERT( !( ( pvBuffer == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
  403dcc:	b1e1      	cbz	r1, 403e08 <xQueueGenericReceive+0x48>
  403dce:	4698      	mov	r8, r3
  403dd0:	460f      	mov	r7, r1
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
  403dd2:	4b61      	ldr	r3, [pc, #388]	; (403f58 <xQueueGenericReceive+0x198>)
  403dd4:	4798      	blx	r3
  403dd6:	bb28      	cbnz	r0, 403e24 <xQueueGenericReceive+0x64>
  403dd8:	9b01      	ldr	r3, [sp, #4]
  403dda:	b353      	cbz	r3, 403e32 <xQueueGenericReceive+0x72>
  403ddc:	f04f 0380 	mov.w	r3, #128	; 0x80
  403de0:	b672      	cpsid	i
  403de2:	f383 8811 	msr	BASEPRI, r3
  403de6:	f3bf 8f6f 	isb	sy
  403dea:	f3bf 8f4f 	dsb	sy
  403dee:	b662      	cpsie	i
  403df0:	e7fe      	b.n	403df0 <xQueueGenericReceive+0x30>
  403df2:	f04f 0380 	mov.w	r3, #128	; 0x80
  403df6:	b672      	cpsid	i
  403df8:	f383 8811 	msr	BASEPRI, r3
  403dfc:	f3bf 8f6f 	isb	sy
  403e00:	f3bf 8f4f 	dsb	sy
  403e04:	b662      	cpsie	i
  403e06:	e7fe      	b.n	403e06 <xQueueGenericReceive+0x46>
	configASSERT( !( ( pvBuffer == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
  403e08:	6c02      	ldr	r2, [r0, #64]	; 0x40
  403e0a:	2a00      	cmp	r2, #0
  403e0c:	d0df      	beq.n	403dce <xQueueGenericReceive+0xe>
  403e0e:	f04f 0380 	mov.w	r3, #128	; 0x80
  403e12:	b672      	cpsid	i
  403e14:	f383 8811 	msr	BASEPRI, r3
  403e18:	f3bf 8f6f 	isb	sy
  403e1c:	f3bf 8f4f 	dsb	sy
  403e20:	b662      	cpsie	i
  403e22:	e7fe      	b.n	403e22 <xQueueGenericReceive+0x62>
  403e24:	2600      	movs	r6, #0
		taskENTER_CRITICAL();
  403e26:	4d4d      	ldr	r5, [pc, #308]	; (403f5c <xQueueGenericReceive+0x19c>)
					vTaskSetTimeOutState( &xTimeOut );
  403e28:	f8df a160 	ldr.w	sl, [pc, #352]	; 403f8c <xQueueGenericReceive+0x1cc>
					portYIELD_WITHIN_API();
  403e2c:	f8df 913c 	ldr.w	r9, [pc, #316]	; 403f6c <xQueueGenericReceive+0x1ac>
  403e30:	e04b      	b.n	403eca <xQueueGenericReceive+0x10a>
  403e32:	2600      	movs	r6, #0
  403e34:	e7f7      	b.n	403e26 <xQueueGenericReceive+0x66>
				pcOriginalReadPosition = pxQueue->u.pcReadFrom;
  403e36:	68e5      	ldr	r5, [r4, #12]
				prvCopyDataFromQueue( pxQueue, pvBuffer );
  403e38:	4639      	mov	r1, r7
  403e3a:	4620      	mov	r0, r4
  403e3c:	4b48      	ldr	r3, [pc, #288]	; (403f60 <xQueueGenericReceive+0x1a0>)
  403e3e:	4798      	blx	r3
				if( xJustPeeking == pdFALSE )
  403e40:	f1b8 0f00 	cmp.w	r8, #0
  403e44:	d11d      	bne.n	403e82 <xQueueGenericReceive+0xc2>
					--( pxQueue->uxMessagesWaiting );
  403e46:	6ba3      	ldr	r3, [r4, #56]	; 0x38
  403e48:	3b01      	subs	r3, #1
  403e4a:	63a3      	str	r3, [r4, #56]	; 0x38
						if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
  403e4c:	6823      	ldr	r3, [r4, #0]
  403e4e:	b913      	cbnz	r3, 403e56 <xQueueGenericReceive+0x96>
							pxQueue->pxMutexHolder = ( int8_t * ) pvTaskIncrementMutexHeldCount(); /*lint !e961 Cast is not redundant as TaskHandle_t is a typedef. */
  403e50:	4b44      	ldr	r3, [pc, #272]	; (403f64 <xQueueGenericReceive+0x1a4>)
  403e52:	4798      	blx	r3
  403e54:	6060      	str	r0, [r4, #4]
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
  403e56:	6923      	ldr	r3, [r4, #16]
  403e58:	b16b      	cbz	r3, 403e76 <xQueueGenericReceive+0xb6>
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) == pdTRUE )
  403e5a:	f104 0010 	add.w	r0, r4, #16
  403e5e:	4b42      	ldr	r3, [pc, #264]	; (403f68 <xQueueGenericReceive+0x1a8>)
  403e60:	4798      	blx	r3
  403e62:	2801      	cmp	r0, #1
  403e64:	d107      	bne.n	403e76 <xQueueGenericReceive+0xb6>
							queueYIELD_IF_USING_PREEMPTION();
  403e66:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
  403e6a:	4b40      	ldr	r3, [pc, #256]	; (403f6c <xQueueGenericReceive+0x1ac>)
  403e6c:	601a      	str	r2, [r3, #0]
  403e6e:	f3bf 8f4f 	dsb	sy
  403e72:	f3bf 8f6f 	isb	sy
				taskEXIT_CRITICAL();
  403e76:	4b3e      	ldr	r3, [pc, #248]	; (403f70 <xQueueGenericReceive+0x1b0>)
  403e78:	4798      	blx	r3
				return pdPASS;
  403e7a:	2001      	movs	r0, #1
}
  403e7c:	b004      	add	sp, #16
  403e7e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
					pxQueue->u.pcReadFrom = pcOriginalReadPosition;
  403e82:	60e5      	str	r5, [r4, #12]
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
  403e84:	6a63      	ldr	r3, [r4, #36]	; 0x24
  403e86:	2b00      	cmp	r3, #0
  403e88:	d0f5      	beq.n	403e76 <xQueueGenericReceive+0xb6>
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
  403e8a:	f104 0024 	add.w	r0, r4, #36	; 0x24
  403e8e:	4b36      	ldr	r3, [pc, #216]	; (403f68 <xQueueGenericReceive+0x1a8>)
  403e90:	4798      	blx	r3
  403e92:	2800      	cmp	r0, #0
  403e94:	d0ef      	beq.n	403e76 <xQueueGenericReceive+0xb6>
							queueYIELD_IF_USING_PREEMPTION();
  403e96:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
  403e9a:	4b34      	ldr	r3, [pc, #208]	; (403f6c <xQueueGenericReceive+0x1ac>)
  403e9c:	601a      	str	r2, [r3, #0]
  403e9e:	f3bf 8f4f 	dsb	sy
  403ea2:	f3bf 8f6f 	isb	sy
  403ea6:	e7e6      	b.n	403e76 <xQueueGenericReceive+0xb6>
					taskEXIT_CRITICAL();
  403ea8:	4b31      	ldr	r3, [pc, #196]	; (403f70 <xQueueGenericReceive+0x1b0>)
  403eaa:	4798      	blx	r3
					return errQUEUE_EMPTY;
  403eac:	2000      	movs	r0, #0
  403eae:	e7e5      	b.n	403e7c <xQueueGenericReceive+0xbc>
						taskENTER_CRITICAL();
  403eb0:	47a8      	blx	r5
							vTaskPriorityInherit( ( void * ) pxQueue->pxMutexHolder );
  403eb2:	6860      	ldr	r0, [r4, #4]
  403eb4:	4b2f      	ldr	r3, [pc, #188]	; (403f74 <xQueueGenericReceive+0x1b4>)
  403eb6:	4798      	blx	r3
						taskEXIT_CRITICAL();
  403eb8:	4b2d      	ldr	r3, [pc, #180]	; (403f70 <xQueueGenericReceive+0x1b0>)
  403eba:	4798      	blx	r3
  403ebc:	e030      	b.n	403f20 <xQueueGenericReceive+0x160>
				prvUnlockQueue( pxQueue );
  403ebe:	4620      	mov	r0, r4
  403ec0:	4b2d      	ldr	r3, [pc, #180]	; (403f78 <xQueueGenericReceive+0x1b8>)
  403ec2:	4798      	blx	r3
				( void ) xTaskResumeAll();
  403ec4:	4b2d      	ldr	r3, [pc, #180]	; (403f7c <xQueueGenericReceive+0x1bc>)
  403ec6:	4798      	blx	r3
  403ec8:	2601      	movs	r6, #1
		taskENTER_CRITICAL();
  403eca:	47a8      	blx	r5
			if( pxQueue->uxMessagesWaiting > ( UBaseType_t ) 0 )
  403ecc:	6ba3      	ldr	r3, [r4, #56]	; 0x38
  403ece:	2b00      	cmp	r3, #0
  403ed0:	d1b1      	bne.n	403e36 <xQueueGenericReceive+0x76>
				if( xTicksToWait == ( TickType_t ) 0 )
  403ed2:	9b01      	ldr	r3, [sp, #4]
  403ed4:	2b00      	cmp	r3, #0
  403ed6:	d0e7      	beq.n	403ea8 <xQueueGenericReceive+0xe8>
				else if( xEntryTimeSet == pdFALSE )
  403ed8:	b90e      	cbnz	r6, 403ede <xQueueGenericReceive+0x11e>
					vTaskSetTimeOutState( &xTimeOut );
  403eda:	a802      	add	r0, sp, #8
  403edc:	47d0      	blx	sl
		taskEXIT_CRITICAL();
  403ede:	4b24      	ldr	r3, [pc, #144]	; (403f70 <xQueueGenericReceive+0x1b0>)
  403ee0:	4798      	blx	r3
		vTaskSuspendAll();
  403ee2:	4b27      	ldr	r3, [pc, #156]	; (403f80 <xQueueGenericReceive+0x1c0>)
  403ee4:	4798      	blx	r3
		prvLockQueue( pxQueue );
  403ee6:	47a8      	blx	r5
  403ee8:	6c63      	ldr	r3, [r4, #68]	; 0x44
  403eea:	f1b3 3fff 	cmp.w	r3, #4294967295
  403eee:	d101      	bne.n	403ef4 <xQueueGenericReceive+0x134>
  403ef0:	2300      	movs	r3, #0
  403ef2:	6463      	str	r3, [r4, #68]	; 0x44
  403ef4:	6ca3      	ldr	r3, [r4, #72]	; 0x48
  403ef6:	f1b3 3fff 	cmp.w	r3, #4294967295
  403efa:	d101      	bne.n	403f00 <xQueueGenericReceive+0x140>
  403efc:	2300      	movs	r3, #0
  403efe:	64a3      	str	r3, [r4, #72]	; 0x48
  403f00:	4b1b      	ldr	r3, [pc, #108]	; (403f70 <xQueueGenericReceive+0x1b0>)
  403f02:	4798      	blx	r3
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
  403f04:	a901      	add	r1, sp, #4
  403f06:	a802      	add	r0, sp, #8
  403f08:	4b1e      	ldr	r3, [pc, #120]	; (403f84 <xQueueGenericReceive+0x1c4>)
  403f0a:	4798      	blx	r3
  403f0c:	b9e8      	cbnz	r0, 403f4a <xQueueGenericReceive+0x18a>
	taskENTER_CRITICAL();
  403f0e:	47a8      	blx	r5
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
  403f10:	6ba6      	ldr	r6, [r4, #56]	; 0x38
	taskEXIT_CRITICAL();
  403f12:	4b17      	ldr	r3, [pc, #92]	; (403f70 <xQueueGenericReceive+0x1b0>)
  403f14:	4798      	blx	r3
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
  403f16:	2e00      	cmp	r6, #0
  403f18:	d1d1      	bne.n	403ebe <xQueueGenericReceive+0xfe>
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
  403f1a:	6823      	ldr	r3, [r4, #0]
  403f1c:	2b00      	cmp	r3, #0
  403f1e:	d0c7      	beq.n	403eb0 <xQueueGenericReceive+0xf0>
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
  403f20:	9901      	ldr	r1, [sp, #4]
  403f22:	f104 0024 	add.w	r0, r4, #36	; 0x24
  403f26:	4b18      	ldr	r3, [pc, #96]	; (403f88 <xQueueGenericReceive+0x1c8>)
  403f28:	4798      	blx	r3
				prvUnlockQueue( pxQueue );
  403f2a:	4620      	mov	r0, r4
  403f2c:	4b12      	ldr	r3, [pc, #72]	; (403f78 <xQueueGenericReceive+0x1b8>)
  403f2e:	4798      	blx	r3
				if( xTaskResumeAll() == pdFALSE )
  403f30:	4b12      	ldr	r3, [pc, #72]	; (403f7c <xQueueGenericReceive+0x1bc>)
  403f32:	4798      	blx	r3
  403f34:	2800      	cmp	r0, #0
  403f36:	d1c7      	bne.n	403ec8 <xQueueGenericReceive+0x108>
					portYIELD_WITHIN_API();
  403f38:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
  403f3c:	f8c9 3000 	str.w	r3, [r9]
  403f40:	f3bf 8f4f 	dsb	sy
  403f44:	f3bf 8f6f 	isb	sy
  403f48:	e7be      	b.n	403ec8 <xQueueGenericReceive+0x108>
			prvUnlockQueue( pxQueue );
  403f4a:	4620      	mov	r0, r4
  403f4c:	4b0a      	ldr	r3, [pc, #40]	; (403f78 <xQueueGenericReceive+0x1b8>)
  403f4e:	4798      	blx	r3
			( void ) xTaskResumeAll();
  403f50:	4b0a      	ldr	r3, [pc, #40]	; (403f7c <xQueueGenericReceive+0x1bc>)
  403f52:	4798      	blx	r3
			return errQUEUE_EMPTY;
  403f54:	2000      	movs	r0, #0
  403f56:	e791      	b.n	403e7c <xQueueGenericReceive+0xbc>
  403f58:	00404a4d 	.word	0x00404a4d
  403f5c:	00403509 	.word	0x00403509
  403f60:	00403901 	.word	0x00403901
  403f64:	00404bcd 	.word	0x00404bcd
  403f68:	004048e5 	.word	0x004048e5
  403f6c:	e000ed04 	.word	0xe000ed04
  403f70:	00403555 	.word	0x00403555
  403f74:	00404a6d 	.word	0x00404a6d
  403f78:	00403929 	.word	0x00403929
  403f7c:	004044c9 	.word	0x004044c9
  403f80:	00404361 	.word	0x00404361
  403f84:	004049ad 	.word	0x004049ad
  403f88:	004047e1 	.word	0x004047e1
  403f8c:	0040497d 	.word	0x0040497d

00403f90 <vQueueAddToRegistry>:
	{
  403f90:	b410      	push	{r4}
			if( xQueueRegistry[ ux ].pcQueueName == NULL )
  403f92:	4b0b      	ldr	r3, [pc, #44]	; (403fc0 <vQueueAddToRegistry+0x30>)
  403f94:	681b      	ldr	r3, [r3, #0]
  403f96:	b153      	cbz	r3, 403fae <vQueueAddToRegistry+0x1e>
  403f98:	2301      	movs	r3, #1
  403f9a:	4c09      	ldr	r4, [pc, #36]	; (403fc0 <vQueueAddToRegistry+0x30>)
  403f9c:	f854 2033 	ldr.w	r2, [r4, r3, lsl #3]
  403fa0:	b132      	cbz	r2, 403fb0 <vQueueAddToRegistry+0x20>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
  403fa2:	3301      	adds	r3, #1
  403fa4:	2b08      	cmp	r3, #8
  403fa6:	d1f9      	bne.n	403f9c <vQueueAddToRegistry+0xc>
	}
  403fa8:	f85d 4b04 	ldr.w	r4, [sp], #4
  403fac:	4770      	bx	lr
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
  403fae:	2300      	movs	r3, #0
				xQueueRegistry[ ux ].pcQueueName = pcQueueName;
  403fb0:	4a03      	ldr	r2, [pc, #12]	; (403fc0 <vQueueAddToRegistry+0x30>)
  403fb2:	f842 1033 	str.w	r1, [r2, r3, lsl #3]
				xQueueRegistry[ ux ].xHandle = xQueue;
  403fb6:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
  403fba:	6058      	str	r0, [r3, #4]
				break;
  403fbc:	e7f4      	b.n	403fa8 <vQueueAddToRegistry+0x18>
  403fbe:	bf00      	nop
  403fc0:	2040c9f8 	.word	0x2040c9f8

00403fc4 <vQueueWaitForMessageRestricted>:
	{
  403fc4:	b570      	push	{r4, r5, r6, lr}
  403fc6:	4604      	mov	r4, r0
  403fc8:	460d      	mov	r5, r1
  403fca:	4616      	mov	r6, r2
		prvLockQueue( pxQueue );
  403fcc:	4b0f      	ldr	r3, [pc, #60]	; (40400c <vQueueWaitForMessageRestricted+0x48>)
  403fce:	4798      	blx	r3
  403fd0:	6c63      	ldr	r3, [r4, #68]	; 0x44
  403fd2:	f1b3 3fff 	cmp.w	r3, #4294967295
  403fd6:	d00b      	beq.n	403ff0 <vQueueWaitForMessageRestricted+0x2c>
  403fd8:	6ca3      	ldr	r3, [r4, #72]	; 0x48
  403fda:	f1b3 3fff 	cmp.w	r3, #4294967295
  403fde:	d00a      	beq.n	403ff6 <vQueueWaitForMessageRestricted+0x32>
  403fe0:	4b0b      	ldr	r3, [pc, #44]	; (404010 <vQueueWaitForMessageRestricted+0x4c>)
  403fe2:	4798      	blx	r3
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
  403fe4:	6ba3      	ldr	r3, [r4, #56]	; 0x38
  403fe6:	b14b      	cbz	r3, 403ffc <vQueueWaitForMessageRestricted+0x38>
		prvUnlockQueue( pxQueue );
  403fe8:	4620      	mov	r0, r4
  403fea:	4b0a      	ldr	r3, [pc, #40]	; (404014 <vQueueWaitForMessageRestricted+0x50>)
  403fec:	4798      	blx	r3
  403fee:	bd70      	pop	{r4, r5, r6, pc}
		prvLockQueue( pxQueue );
  403ff0:	2300      	movs	r3, #0
  403ff2:	6463      	str	r3, [r4, #68]	; 0x44
  403ff4:	e7f0      	b.n	403fd8 <vQueueWaitForMessageRestricted+0x14>
  403ff6:	2300      	movs	r3, #0
  403ff8:	64a3      	str	r3, [r4, #72]	; 0x48
  403ffa:	e7f1      	b.n	403fe0 <vQueueWaitForMessageRestricted+0x1c>
			vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
  403ffc:	4632      	mov	r2, r6
  403ffe:	4629      	mov	r1, r5
  404000:	f104 0024 	add.w	r0, r4, #36	; 0x24
  404004:	4b04      	ldr	r3, [pc, #16]	; (404018 <vQueueWaitForMessageRestricted+0x54>)
  404006:	4798      	blx	r3
  404008:	e7ee      	b.n	403fe8 <vQueueWaitForMessageRestricted+0x24>
  40400a:	bf00      	nop
  40400c:	00403509 	.word	0x00403509
  404010:	00403555 	.word	0x00403555
  404014:	00403929 	.word	0x00403929
  404018:	00404865 	.word	0x00404865

0040401c <prvResetNextTaskUnblockTime>:

static void prvResetNextTaskUnblockTime( void )
{
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
  40401c:	4b08      	ldr	r3, [pc, #32]	; (404040 <prvResetNextTaskUnblockTime+0x24>)
  40401e:	681b      	ldr	r3, [r3, #0]
  404020:	681b      	ldr	r3, [r3, #0]
  404022:	b13b      	cbz	r3, 404034 <prvResetNextTaskUnblockTime+0x18>
	{
		/* The new current delayed list is not empty, get the value of
		the item at the head of the delayed list.  This is the time at
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
  404024:	4b06      	ldr	r3, [pc, #24]	; (404040 <prvResetNextTaskUnblockTime+0x24>)
  404026:	681b      	ldr	r3, [r3, #0]
  404028:	68db      	ldr	r3, [r3, #12]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xGenericListItem ) );
  40402a:	68db      	ldr	r3, [r3, #12]
  40402c:	685a      	ldr	r2, [r3, #4]
  40402e:	4b05      	ldr	r3, [pc, #20]	; (404044 <prvResetNextTaskUnblockTime+0x28>)
  404030:	601a      	str	r2, [r3, #0]
  404032:	4770      	bx	lr
		xNextTaskUnblockTime = portMAX_DELAY;
  404034:	f04f 32ff 	mov.w	r2, #4294967295
  404038:	4b02      	ldr	r3, [pc, #8]	; (404044 <prvResetNextTaskUnblockTime+0x28>)
  40403a:	601a      	str	r2, [r3, #0]
  40403c:	4770      	bx	lr
  40403e:	bf00      	nop
  404040:	2040c260 	.word	0x2040c260
  404044:	2040c30c 	.word	0x2040c30c

00404048 <prvAddCurrentTaskToDelayedList>:
{
  404048:	b510      	push	{r4, lr}
	listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xGenericListItem ), xTimeToWake );
  40404a:	4b0f      	ldr	r3, [pc, #60]	; (404088 <prvAddCurrentTaskToDelayedList+0x40>)
  40404c:	681b      	ldr	r3, [r3, #0]
  40404e:	6058      	str	r0, [r3, #4]
	if( xTimeToWake < xTickCount )
  404050:	4b0e      	ldr	r3, [pc, #56]	; (40408c <prvAddCurrentTaskToDelayedList+0x44>)
  404052:	681b      	ldr	r3, [r3, #0]
  404054:	4298      	cmp	r0, r3
  404056:	d30e      	bcc.n	404076 <prvAddCurrentTaskToDelayedList+0x2e>
  404058:	4604      	mov	r4, r0
		vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xGenericListItem ) );
  40405a:	4b0d      	ldr	r3, [pc, #52]	; (404090 <prvAddCurrentTaskToDelayedList+0x48>)
  40405c:	6818      	ldr	r0, [r3, #0]
  40405e:	4b0a      	ldr	r3, [pc, #40]	; (404088 <prvAddCurrentTaskToDelayedList+0x40>)
  404060:	6819      	ldr	r1, [r3, #0]
  404062:	3104      	adds	r1, #4
  404064:	4b0b      	ldr	r3, [pc, #44]	; (404094 <prvAddCurrentTaskToDelayedList+0x4c>)
  404066:	4798      	blx	r3
		if( xTimeToWake < xNextTaskUnblockTime )
  404068:	4b0b      	ldr	r3, [pc, #44]	; (404098 <prvAddCurrentTaskToDelayedList+0x50>)
  40406a:	681b      	ldr	r3, [r3, #0]
  40406c:	429c      	cmp	r4, r3
  40406e:	d201      	bcs.n	404074 <prvAddCurrentTaskToDelayedList+0x2c>
			xNextTaskUnblockTime = xTimeToWake;
  404070:	4b09      	ldr	r3, [pc, #36]	; (404098 <prvAddCurrentTaskToDelayedList+0x50>)
  404072:	601c      	str	r4, [r3, #0]
  404074:	bd10      	pop	{r4, pc}
		vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xGenericListItem ) );
  404076:	4b09      	ldr	r3, [pc, #36]	; (40409c <prvAddCurrentTaskToDelayedList+0x54>)
  404078:	6818      	ldr	r0, [r3, #0]
  40407a:	4b03      	ldr	r3, [pc, #12]	; (404088 <prvAddCurrentTaskToDelayedList+0x40>)
  40407c:	6819      	ldr	r1, [r3, #0]
  40407e:	3104      	adds	r1, #4
  404080:	4b04      	ldr	r3, [pc, #16]	; (404094 <prvAddCurrentTaskToDelayedList+0x4c>)
  404082:	4798      	blx	r3
  404084:	bd10      	pop	{r4, pc}
  404086:	bf00      	nop
  404088:	2040c25c 	.word	0x2040c25c
  40408c:	2040c354 	.word	0x2040c354
  404090:	2040c260 	.word	0x2040c260
  404094:	004033f1 	.word	0x004033f1
  404098:	2040c30c 	.word	0x2040c30c
  40409c:	2040c264 	.word	0x2040c264

004040a0 <xTaskGenericCreate>:
{
  4040a0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  4040a4:	b083      	sub	sp, #12
  4040a6:	9d0c      	ldr	r5, [sp, #48]	; 0x30
  4040a8:	f8dd a034 	ldr.w	sl, [sp, #52]	; 0x34
  4040ac:	9e0e      	ldr	r6, [sp, #56]	; 0x38
	configASSERT( pxTaskCode );
  4040ae:	b160      	cbz	r0, 4040ca <xTaskGenericCreate+0x2a>
	configASSERT( ( ( uxPriority & ( UBaseType_t ) ( ~portPRIVILEGE_BIT ) ) < ( UBaseType_t ) configMAX_PRIORITIES ) );
  4040b0:	2d04      	cmp	r5, #4
  4040b2:	d915      	bls.n	4040e0 <xTaskGenericCreate+0x40>
  4040b4:	f04f 0380 	mov.w	r3, #128	; 0x80
  4040b8:	b672      	cpsid	i
  4040ba:	f383 8811 	msr	BASEPRI, r3
  4040be:	f3bf 8f6f 	isb	sy
  4040c2:	f3bf 8f4f 	dsb	sy
  4040c6:	b662      	cpsie	i
  4040c8:	e7fe      	b.n	4040c8 <xTaskGenericCreate+0x28>
  4040ca:	f04f 0380 	mov.w	r3, #128	; 0x80
  4040ce:	b672      	cpsid	i
  4040d0:	f383 8811 	msr	BASEPRI, r3
  4040d4:	f3bf 8f6f 	isb	sy
  4040d8:	f3bf 8f4f 	dsb	sy
  4040dc:	b662      	cpsie	i
  4040de:	e7fe      	b.n	4040de <xTaskGenericCreate+0x3e>
  4040e0:	9001      	str	r0, [sp, #4]
  4040e2:	4698      	mov	r8, r3
  4040e4:	4691      	mov	r9, r2
  4040e6:	460f      	mov	r7, r1
		pxStack = ( StackType_t * ) pvPortMallocAligned( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ), puxStackBuffer ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
  4040e8:	b936      	cbnz	r6, 4040f8 <xTaskGenericCreate+0x58>
  4040ea:	0090      	lsls	r0, r2, #2
  4040ec:	4b62      	ldr	r3, [pc, #392]	; (404278 <xTaskGenericCreate+0x1d8>)
  4040ee:	4798      	blx	r3
		if( pxStack != NULL )
  4040f0:	4606      	mov	r6, r0
  4040f2:	2800      	cmp	r0, #0
  4040f4:	f000 809e 	beq.w	404234 <xTaskGenericCreate+0x194>
			pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) );
  4040f8:	2058      	movs	r0, #88	; 0x58
  4040fa:	4b5f      	ldr	r3, [pc, #380]	; (404278 <xTaskGenericCreate+0x1d8>)
  4040fc:	4798      	blx	r3
			if( pxNewTCB != NULL )
  4040fe:	4604      	mov	r4, r0
  404100:	2800      	cmp	r0, #0
  404102:	f000 8094 	beq.w	40422e <xTaskGenericCreate+0x18e>
				pxNewTCB->pxStack = pxStack;
  404106:	6306      	str	r6, [r0, #48]	; 0x30
			( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) usStackDepth * sizeof( StackType_t ) );
  404108:	ea4f 0289 	mov.w	r2, r9, lsl #2
  40410c:	21a5      	movs	r1, #165	; 0xa5
  40410e:	4630      	mov	r0, r6
  404110:	4b5a      	ldr	r3, [pc, #360]	; (40427c <xTaskGenericCreate+0x1dc>)
  404112:	4798      	blx	r3
			pxTopOfStack = pxNewTCB->pxStack + ( usStackDepth - ( uint16_t ) 1 );
  404114:	f06f 4640 	mvn.w	r6, #3221225472	; 0xc0000000
  404118:	444e      	add	r6, r9
  40411a:	6b23      	ldr	r3, [r4, #48]	; 0x30
  40411c:	eb03 0386 	add.w	r3, r3, r6, lsl #2
			pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type. */
  404120:	f023 0607 	bic.w	r6, r3, #7
		pxTCB->pcTaskName[ x ] = pcName[ x ];
  404124:	783b      	ldrb	r3, [r7, #0]
  404126:	f884 3034 	strb.w	r3, [r4, #52]	; 0x34
		if( pcName[ x ] == 0x00 )
  40412a:	783b      	ldrb	r3, [r7, #0]
  40412c:	2b00      	cmp	r3, #0
  40412e:	f040 8084 	bne.w	40423a <xTaskGenericCreate+0x19a>
	pxTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
  404132:	2700      	movs	r7, #0
  404134:	f884 703d 	strb.w	r7, [r4, #61]	; 0x3d
	pxTCB->uxPriority = uxPriority;
  404138:	62e5      	str	r5, [r4, #44]	; 0x2c
		pxTCB->uxBasePriority = uxPriority;
  40413a:	64a5      	str	r5, [r4, #72]	; 0x48
		pxTCB->uxMutexesHeld = 0;
  40413c:	64e7      	str	r7, [r4, #76]	; 0x4c
	vListInitialiseItem( &( pxTCB->xGenericListItem ) );
  40413e:	f104 0904 	add.w	r9, r4, #4
  404142:	4648      	mov	r0, r9
  404144:	f8df b184 	ldr.w	fp, [pc, #388]	; 4042cc <xTaskGenericCreate+0x22c>
  404148:	47d8      	blx	fp
	vListInitialiseItem( &( pxTCB->xEventListItem ) );
  40414a:	f104 0018 	add.w	r0, r4, #24
  40414e:	47d8      	blx	fp
	listSET_LIST_ITEM_OWNER( &( pxTCB->xGenericListItem ), pxTCB );
  404150:	6124      	str	r4, [r4, #16]
	listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
  404152:	f1c5 0305 	rsb	r3, r5, #5
  404156:	61a3      	str	r3, [r4, #24]
	listSET_LIST_ITEM_OWNER( &( pxTCB->xEventListItem ), pxTCB );
  404158:	6264      	str	r4, [r4, #36]	; 0x24
		pxTCB->ulNotifiedValue = 0;
  40415a:	6527      	str	r7, [r4, #80]	; 0x50
		pxTCB->eNotifyState = eNotWaitingNotification;
  40415c:	f884 7054 	strb.w	r7, [r4, #84]	; 0x54
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
  404160:	4642      	mov	r2, r8
  404162:	9901      	ldr	r1, [sp, #4]
  404164:	4630      	mov	r0, r6
  404166:	4b46      	ldr	r3, [pc, #280]	; (404280 <xTaskGenericCreate+0x1e0>)
  404168:	4798      	blx	r3
  40416a:	6020      	str	r0, [r4, #0]
		if( ( void * ) pxCreatedTask != NULL )
  40416c:	f1ba 0f00 	cmp.w	sl, #0
  404170:	d001      	beq.n	404176 <xTaskGenericCreate+0xd6>
			*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
  404172:	f8ca 4000 	str.w	r4, [sl]
		taskENTER_CRITICAL();
  404176:	4b43      	ldr	r3, [pc, #268]	; (404284 <xTaskGenericCreate+0x1e4>)
  404178:	4798      	blx	r3
			uxCurrentNumberOfTasks++;
  40417a:	4a43      	ldr	r2, [pc, #268]	; (404288 <xTaskGenericCreate+0x1e8>)
  40417c:	6813      	ldr	r3, [r2, #0]
  40417e:	3301      	adds	r3, #1
  404180:	6013      	str	r3, [r2, #0]
			if( pxCurrentTCB == NULL )
  404182:	4b42      	ldr	r3, [pc, #264]	; (40428c <xTaskGenericCreate+0x1ec>)
  404184:	681b      	ldr	r3, [r3, #0]
  404186:	2b00      	cmp	r3, #0
  404188:	d166      	bne.n	404258 <xTaskGenericCreate+0x1b8>
				pxCurrentTCB =  pxNewTCB;
  40418a:	4b40      	ldr	r3, [pc, #256]	; (40428c <xTaskGenericCreate+0x1ec>)
  40418c:	601c      	str	r4, [r3, #0]
				if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
  40418e:	6813      	ldr	r3, [r2, #0]
  404190:	2b01      	cmp	r3, #1
  404192:	d121      	bne.n	4041d8 <xTaskGenericCreate+0x138>
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
  404194:	4f3e      	ldr	r7, [pc, #248]	; (404290 <xTaskGenericCreate+0x1f0>)
  404196:	4638      	mov	r0, r7
  404198:	4e3e      	ldr	r6, [pc, #248]	; (404294 <xTaskGenericCreate+0x1f4>)
  40419a:	47b0      	blx	r6
  40419c:	f107 0014 	add.w	r0, r7, #20
  4041a0:	47b0      	blx	r6
  4041a2:	f107 0028 	add.w	r0, r7, #40	; 0x28
  4041a6:	47b0      	blx	r6
  4041a8:	f107 003c 	add.w	r0, r7, #60	; 0x3c
  4041ac:	47b0      	blx	r6
  4041ae:	f107 0050 	add.w	r0, r7, #80	; 0x50
  4041b2:	47b0      	blx	r6
	vListInitialise( &xDelayedTaskList1 );
  4041b4:	f8df 8118 	ldr.w	r8, [pc, #280]	; 4042d0 <xTaskGenericCreate+0x230>
  4041b8:	4640      	mov	r0, r8
  4041ba:	47b0      	blx	r6
	vListInitialise( &xDelayedTaskList2 );
  4041bc:	4f36      	ldr	r7, [pc, #216]	; (404298 <xTaskGenericCreate+0x1f8>)
  4041be:	4638      	mov	r0, r7
  4041c0:	47b0      	blx	r6
	vListInitialise( &xPendingReadyList );
  4041c2:	4836      	ldr	r0, [pc, #216]	; (40429c <xTaskGenericCreate+0x1fc>)
  4041c4:	47b0      	blx	r6
		vListInitialise( &xTasksWaitingTermination );
  4041c6:	4836      	ldr	r0, [pc, #216]	; (4042a0 <xTaskGenericCreate+0x200>)
  4041c8:	47b0      	blx	r6
		vListInitialise( &xSuspendedTaskList );
  4041ca:	4836      	ldr	r0, [pc, #216]	; (4042a4 <xTaskGenericCreate+0x204>)
  4041cc:	47b0      	blx	r6
	pxDelayedTaskList = &xDelayedTaskList1;
  4041ce:	4b36      	ldr	r3, [pc, #216]	; (4042a8 <xTaskGenericCreate+0x208>)
  4041d0:	f8c3 8000 	str.w	r8, [r3]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
  4041d4:	4b35      	ldr	r3, [pc, #212]	; (4042ac <xTaskGenericCreate+0x20c>)
  4041d6:	601f      	str	r7, [r3, #0]
			uxTaskNumber++;
  4041d8:	4a35      	ldr	r2, [pc, #212]	; (4042b0 <xTaskGenericCreate+0x210>)
  4041da:	6813      	ldr	r3, [r2, #0]
  4041dc:	3301      	adds	r3, #1
  4041de:	6013      	str	r3, [r2, #0]
				pxNewTCB->uxTCBNumber = uxTaskNumber;
  4041e0:	6423      	str	r3, [r4, #64]	; 0x40
			prvAddTaskToReadyList( pxNewTCB );
  4041e2:	6ae0      	ldr	r0, [r4, #44]	; 0x2c
  4041e4:	4a33      	ldr	r2, [pc, #204]	; (4042b4 <xTaskGenericCreate+0x214>)
  4041e6:	6811      	ldr	r1, [r2, #0]
  4041e8:	2301      	movs	r3, #1
  4041ea:	4083      	lsls	r3, r0
  4041ec:	430b      	orrs	r3, r1
  4041ee:	6013      	str	r3, [r2, #0]
  4041f0:	eb00 0080 	add.w	r0, r0, r0, lsl #2
  4041f4:	4649      	mov	r1, r9
  4041f6:	4b26      	ldr	r3, [pc, #152]	; (404290 <xTaskGenericCreate+0x1f0>)
  4041f8:	eb03 0080 	add.w	r0, r3, r0, lsl #2
  4041fc:	4b2e      	ldr	r3, [pc, #184]	; (4042b8 <xTaskGenericCreate+0x218>)
  4041fe:	4798      	blx	r3
		taskEXIT_CRITICAL();
  404200:	4b2e      	ldr	r3, [pc, #184]	; (4042bc <xTaskGenericCreate+0x21c>)
  404202:	4798      	blx	r3
		if( xSchedulerRunning != pdFALSE )
  404204:	4b2e      	ldr	r3, [pc, #184]	; (4042c0 <xTaskGenericCreate+0x220>)
  404206:	681b      	ldr	r3, [r3, #0]
  404208:	2b00      	cmp	r3, #0
  40420a:	d031      	beq.n	404270 <xTaskGenericCreate+0x1d0>
			if( pxCurrentTCB->uxPriority < uxPriority )
  40420c:	4b1f      	ldr	r3, [pc, #124]	; (40428c <xTaskGenericCreate+0x1ec>)
  40420e:	681b      	ldr	r3, [r3, #0]
  404210:	6adb      	ldr	r3, [r3, #44]	; 0x2c
  404212:	429d      	cmp	r5, r3
  404214:	d92e      	bls.n	404274 <xTaskGenericCreate+0x1d4>
				taskYIELD_IF_USING_PREEMPTION();
  404216:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
  40421a:	4b2a      	ldr	r3, [pc, #168]	; (4042c4 <xTaskGenericCreate+0x224>)
  40421c:	601a      	str	r2, [r3, #0]
  40421e:	f3bf 8f4f 	dsb	sy
  404222:	f3bf 8f6f 	isb	sy
			xReturn = pdPASS;
  404226:	2001      	movs	r0, #1
}
  404228:	b003      	add	sp, #12
  40422a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
				vPortFree( pxStack );
  40422e:	4630      	mov	r0, r6
  404230:	4b25      	ldr	r3, [pc, #148]	; (4042c8 <xTaskGenericCreate+0x228>)
  404232:	4798      	blx	r3
		xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
  404234:	f04f 30ff 	mov.w	r0, #4294967295
  404238:	e7f6      	b.n	404228 <xTaskGenericCreate+0x188>
  40423a:	463b      	mov	r3, r7
  40423c:	f104 0234 	add.w	r2, r4, #52	; 0x34
  404240:	3709      	adds	r7, #9
		pxTCB->pcTaskName[ x ] = pcName[ x ];
  404242:	7859      	ldrb	r1, [r3, #1]
  404244:	f802 1f01 	strb.w	r1, [r2, #1]!
		if( pcName[ x ] == 0x00 )
  404248:	f813 1f01 	ldrb.w	r1, [r3, #1]!
  40424c:	2900      	cmp	r1, #0
  40424e:	f43f af70 	beq.w	404132 <xTaskGenericCreate+0x92>
	for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
  404252:	42bb      	cmp	r3, r7
  404254:	d1f5      	bne.n	404242 <xTaskGenericCreate+0x1a2>
  404256:	e76c      	b.n	404132 <xTaskGenericCreate+0x92>
				if( xSchedulerRunning == pdFALSE )
  404258:	4b19      	ldr	r3, [pc, #100]	; (4042c0 <xTaskGenericCreate+0x220>)
  40425a:	681b      	ldr	r3, [r3, #0]
  40425c:	2b00      	cmp	r3, #0
  40425e:	d1bb      	bne.n	4041d8 <xTaskGenericCreate+0x138>
					if( pxCurrentTCB->uxPriority <= uxPriority )
  404260:	4b0a      	ldr	r3, [pc, #40]	; (40428c <xTaskGenericCreate+0x1ec>)
  404262:	681b      	ldr	r3, [r3, #0]
  404264:	6adb      	ldr	r3, [r3, #44]	; 0x2c
  404266:	429d      	cmp	r5, r3
  404268:	d3b6      	bcc.n	4041d8 <xTaskGenericCreate+0x138>
						pxCurrentTCB = pxNewTCB;
  40426a:	4b08      	ldr	r3, [pc, #32]	; (40428c <xTaskGenericCreate+0x1ec>)
  40426c:	601c      	str	r4, [r3, #0]
  40426e:	e7b3      	b.n	4041d8 <xTaskGenericCreate+0x138>
			xReturn = pdPASS;
  404270:	2001      	movs	r0, #1
  404272:	e7d9      	b.n	404228 <xTaskGenericCreate+0x188>
  404274:	2001      	movs	r0, #1
	return xReturn;
  404276:	e7d7      	b.n	404228 <xTaskGenericCreate+0x188>
  404278:	00403765 	.word	0x00403765
  40427c:	00409561 	.word	0x00409561
  404280:	004034bd 	.word	0x004034bd
  404284:	00403509 	.word	0x00403509
  404288:	2040c2cc 	.word	0x2040c2cc
  40428c:	2040c25c 	.word	0x2040c25c
  404290:	2040c268 	.word	0x2040c268
  404294:	004033bd 	.word	0x004033bd
  404298:	2040c2f8 	.word	0x2040c2f8
  40429c:	2040c314 	.word	0x2040c314
  4042a0:	2040c340 	.word	0x2040c340
  4042a4:	2040c32c 	.word	0x2040c32c
  4042a8:	2040c260 	.word	0x2040c260
  4042ac:	2040c264 	.word	0x2040c264
  4042b0:	2040c2d8 	.word	0x2040c2d8
  4042b4:	2040c2e0 	.word	0x2040c2e0
  4042b8:	004033d9 	.word	0x004033d9
  4042bc:	00403555 	.word	0x00403555
  4042c0:	2040c328 	.word	0x2040c328
  4042c4:	e000ed04 	.word	0xe000ed04
  4042c8:	004037d5 	.word	0x004037d5
  4042cc:	004033d3 	.word	0x004033d3
  4042d0:	2040c2e4 	.word	0x2040c2e4

004042d4 <vTaskStartScheduler>:
{
  4042d4:	b510      	push	{r4, lr}
  4042d6:	b084      	sub	sp, #16
		xReturn = xTaskCreate( prvIdleTask, "IDLE", tskIDLE_STACK_SIZE, ( void * ) NULL, ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), NULL );  /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */
  4042d8:	2300      	movs	r3, #0
  4042da:	9303      	str	r3, [sp, #12]
  4042dc:	9302      	str	r3, [sp, #8]
  4042de:	9301      	str	r3, [sp, #4]
  4042e0:	9300      	str	r3, [sp, #0]
  4042e2:	2282      	movs	r2, #130	; 0x82
  4042e4:	4916      	ldr	r1, [pc, #88]	; (404340 <vTaskStartScheduler+0x6c>)
  4042e6:	4817      	ldr	r0, [pc, #92]	; (404344 <vTaskStartScheduler+0x70>)
  4042e8:	4c17      	ldr	r4, [pc, #92]	; (404348 <vTaskStartScheduler+0x74>)
  4042ea:	47a0      	blx	r4
		if( xReturn == pdPASS )
  4042ec:	2801      	cmp	r0, #1
  4042ee:	d00b      	beq.n	404308 <vTaskStartScheduler+0x34>
		configASSERT( xReturn );
  4042f0:	bb20      	cbnz	r0, 40433c <vTaskStartScheduler+0x68>
  4042f2:	f04f 0380 	mov.w	r3, #128	; 0x80
  4042f6:	b672      	cpsid	i
  4042f8:	f383 8811 	msr	BASEPRI, r3
  4042fc:	f3bf 8f6f 	isb	sy
  404300:	f3bf 8f4f 	dsb	sy
  404304:	b662      	cpsie	i
  404306:	e7fe      	b.n	404306 <vTaskStartScheduler+0x32>
			xReturn = xTimerCreateTimerTask();
  404308:	4b10      	ldr	r3, [pc, #64]	; (40434c <vTaskStartScheduler+0x78>)
  40430a:	4798      	blx	r3
	if( xReturn == pdPASS )
  40430c:	2801      	cmp	r0, #1
  40430e:	d1ef      	bne.n	4042f0 <vTaskStartScheduler+0x1c>
  404310:	f04f 0380 	mov.w	r3, #128	; 0x80
  404314:	b672      	cpsid	i
  404316:	f383 8811 	msr	BASEPRI, r3
  40431a:	f3bf 8f6f 	isb	sy
  40431e:	f3bf 8f4f 	dsb	sy
  404322:	b662      	cpsie	i
		xNextTaskUnblockTime = portMAX_DELAY;
  404324:	f04f 32ff 	mov.w	r2, #4294967295
  404328:	4b09      	ldr	r3, [pc, #36]	; (404350 <vTaskStartScheduler+0x7c>)
  40432a:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
  40432c:	2201      	movs	r2, #1
  40432e:	4b09      	ldr	r3, [pc, #36]	; (404354 <vTaskStartScheduler+0x80>)
  404330:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) 0U;
  404332:	2200      	movs	r2, #0
  404334:	4b08      	ldr	r3, [pc, #32]	; (404358 <vTaskStartScheduler+0x84>)
  404336:	601a      	str	r2, [r3, #0]
		if( xPortStartScheduler() != pdFALSE )
  404338:	4b08      	ldr	r3, [pc, #32]	; (40435c <vTaskStartScheduler+0x88>)
  40433a:	4798      	blx	r3
}
  40433c:	b004      	add	sp, #16
  40433e:	bd10      	pop	{r4, pc}
  404340:	0040c944 	.word	0x0040c944
  404344:	00404679 	.word	0x00404679
  404348:	004040a1 	.word	0x004040a1
  40434c:	00404cb9 	.word	0x00404cb9
  404350:	2040c30c 	.word	0x2040c30c
  404354:	2040c328 	.word	0x2040c328
  404358:	2040c354 	.word	0x2040c354
  40435c:	0040363d 	.word	0x0040363d

00404360 <vTaskSuspendAll>:
	++uxSchedulerSuspended;
  404360:	4a02      	ldr	r2, [pc, #8]	; (40436c <vTaskSuspendAll+0xc>)
  404362:	6813      	ldr	r3, [r2, #0]
  404364:	3301      	adds	r3, #1
  404366:	6013      	str	r3, [r2, #0]
  404368:	4770      	bx	lr
  40436a:	bf00      	nop
  40436c:	2040c2d4 	.word	0x2040c2d4

00404370 <xTaskGetTickCount>:
		xTicks = xTickCount;
  404370:	4b01      	ldr	r3, [pc, #4]	; (404378 <xTaskGetTickCount+0x8>)
  404372:	6818      	ldr	r0, [r3, #0]
}
  404374:	4770      	bx	lr
  404376:	bf00      	nop
  404378:	2040c354 	.word	0x2040c354

0040437c <xTaskIncrementTick>:
{
  40437c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
  404380:	4b42      	ldr	r3, [pc, #264]	; (40448c <xTaskIncrementTick+0x110>)
  404382:	681b      	ldr	r3, [r3, #0]
  404384:	2b00      	cmp	r3, #0
  404386:	d178      	bne.n	40447a <xTaskIncrementTick+0xfe>
		++xTickCount;
  404388:	4b41      	ldr	r3, [pc, #260]	; (404490 <xTaskIncrementTick+0x114>)
  40438a:	681a      	ldr	r2, [r3, #0]
  40438c:	3201      	adds	r2, #1
  40438e:	601a      	str	r2, [r3, #0]
			const TickType_t xConstTickCount = xTickCount;
  404390:	681e      	ldr	r6, [r3, #0]
			if( xConstTickCount == ( TickType_t ) 0U )
  404392:	b9d6      	cbnz	r6, 4043ca <xTaskIncrementTick+0x4e>
				taskSWITCH_DELAYED_LISTS();
  404394:	4b3f      	ldr	r3, [pc, #252]	; (404494 <xTaskIncrementTick+0x118>)
  404396:	681b      	ldr	r3, [r3, #0]
  404398:	681b      	ldr	r3, [r3, #0]
  40439a:	b153      	cbz	r3, 4043b2 <xTaskIncrementTick+0x36>
  40439c:	f04f 0380 	mov.w	r3, #128	; 0x80
  4043a0:	b672      	cpsid	i
  4043a2:	f383 8811 	msr	BASEPRI, r3
  4043a6:	f3bf 8f6f 	isb	sy
  4043aa:	f3bf 8f4f 	dsb	sy
  4043ae:	b662      	cpsie	i
  4043b0:	e7fe      	b.n	4043b0 <xTaskIncrementTick+0x34>
  4043b2:	4a38      	ldr	r2, [pc, #224]	; (404494 <xTaskIncrementTick+0x118>)
  4043b4:	6811      	ldr	r1, [r2, #0]
  4043b6:	4b38      	ldr	r3, [pc, #224]	; (404498 <xTaskIncrementTick+0x11c>)
  4043b8:	6818      	ldr	r0, [r3, #0]
  4043ba:	6010      	str	r0, [r2, #0]
  4043bc:	6019      	str	r1, [r3, #0]
  4043be:	4a37      	ldr	r2, [pc, #220]	; (40449c <xTaskIncrementTick+0x120>)
  4043c0:	6813      	ldr	r3, [r2, #0]
  4043c2:	3301      	adds	r3, #1
  4043c4:	6013      	str	r3, [r2, #0]
  4043c6:	4b36      	ldr	r3, [pc, #216]	; (4044a0 <xTaskIncrementTick+0x124>)
  4043c8:	4798      	blx	r3
			if( xConstTickCount >= xNextTaskUnblockTime )
  4043ca:	4b36      	ldr	r3, [pc, #216]	; (4044a4 <xTaskIncrementTick+0x128>)
  4043cc:	681b      	ldr	r3, [r3, #0]
  4043ce:	429e      	cmp	r6, r3
  4043d0:	d218      	bcs.n	404404 <xTaskIncrementTick+0x88>
BaseType_t xSwitchRequired = pdFALSE;
  4043d2:	2400      	movs	r4, #0
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
  4043d4:	4b34      	ldr	r3, [pc, #208]	; (4044a8 <xTaskIncrementTick+0x12c>)
  4043d6:	681b      	ldr	r3, [r3, #0]
  4043d8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
  4043da:	eb03 0383 	add.w	r3, r3, r3, lsl #2
  4043de:	4a33      	ldr	r2, [pc, #204]	; (4044ac <xTaskIncrementTick+0x130>)
  4043e0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
				xSwitchRequired = pdTRUE;
  4043e4:	2b02      	cmp	r3, #2
  4043e6:	bf28      	it	cs
  4043e8:	2401      	movcs	r4, #1
			if( uxPendedTicks == ( UBaseType_t ) 0U )
  4043ea:	4b31      	ldr	r3, [pc, #196]	; (4044b0 <xTaskIncrementTick+0x134>)
  4043ec:	681b      	ldr	r3, [r3, #0]
  4043ee:	b90b      	cbnz	r3, 4043f4 <xTaskIncrementTick+0x78>
				vApplicationTickHook();
  4043f0:	4b30      	ldr	r3, [pc, #192]	; (4044b4 <xTaskIncrementTick+0x138>)
  4043f2:	4798      	blx	r3
		if( xYieldPending != pdFALSE )
  4043f4:	4b30      	ldr	r3, [pc, #192]	; (4044b8 <xTaskIncrementTick+0x13c>)
  4043f6:	681b      	ldr	r3, [r3, #0]
			xSwitchRequired = pdTRUE;
  4043f8:	2b00      	cmp	r3, #0
}
  4043fa:	bf0c      	ite	eq
  4043fc:	4620      	moveq	r0, r4
  4043fe:	2001      	movne	r0, #1
  404400:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
  404404:	2400      	movs	r4, #0
					if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
  404406:	f8df 908c 	ldr.w	r9, [pc, #140]	; 404494 <xTaskIncrementTick+0x118>
						( void ) uxListRemove( &( pxTCB->xGenericListItem ) );
  40440a:	f8df 80b8 	ldr.w	r8, [pc, #184]	; 4044c4 <xTaskIncrementTick+0x148>
						prvAddTaskToReadyList( pxTCB );
  40440e:	4f2b      	ldr	r7, [pc, #172]	; (4044bc <xTaskIncrementTick+0x140>)
  404410:	e01f      	b.n	404452 <xTaskIncrementTick+0xd6>
						xNextTaskUnblockTime = portMAX_DELAY;
  404412:	f04f 32ff 	mov.w	r2, #4294967295
  404416:	4b23      	ldr	r3, [pc, #140]	; (4044a4 <xTaskIncrementTick+0x128>)
  404418:	601a      	str	r2, [r3, #0]
						break;
  40441a:	e7db      	b.n	4043d4 <xTaskIncrementTick+0x58>
							xNextTaskUnblockTime = xItemValue;
  40441c:	4a21      	ldr	r2, [pc, #132]	; (4044a4 <xTaskIncrementTick+0x128>)
  40441e:	6013      	str	r3, [r2, #0]
							break;
  404420:	e7d8      	b.n	4043d4 <xTaskIncrementTick+0x58>
							( void ) uxListRemove( &( pxTCB->xEventListItem ) );
  404422:	f105 0018 	add.w	r0, r5, #24
  404426:	47c0      	blx	r8
						prvAddTaskToReadyList( pxTCB );
  404428:	6ae8      	ldr	r0, [r5, #44]	; 0x2c
  40442a:	683a      	ldr	r2, [r7, #0]
  40442c:	2301      	movs	r3, #1
  40442e:	4083      	lsls	r3, r0
  404430:	4313      	orrs	r3, r2
  404432:	603b      	str	r3, [r7, #0]
  404434:	eb00 0080 	add.w	r0, r0, r0, lsl #2
  404438:	4651      	mov	r1, sl
  40443a:	4b1c      	ldr	r3, [pc, #112]	; (4044ac <xTaskIncrementTick+0x130>)
  40443c:	eb03 0080 	add.w	r0, r3, r0, lsl #2
  404440:	4b1f      	ldr	r3, [pc, #124]	; (4044c0 <xTaskIncrementTick+0x144>)
  404442:	4798      	blx	r3
							if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
  404444:	4b18      	ldr	r3, [pc, #96]	; (4044a8 <xTaskIncrementTick+0x12c>)
  404446:	681b      	ldr	r3, [r3, #0]
  404448:	6aea      	ldr	r2, [r5, #44]	; 0x2c
  40444a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
								xSwitchRequired = pdTRUE;
  40444c:	429a      	cmp	r2, r3
  40444e:	bf28      	it	cs
  404450:	2401      	movcs	r4, #1
					if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
  404452:	f8d9 3000 	ldr.w	r3, [r9]
  404456:	681b      	ldr	r3, [r3, #0]
  404458:	2b00      	cmp	r3, #0
  40445a:	d0da      	beq.n	404412 <xTaskIncrementTick+0x96>
						pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
  40445c:	f8d9 3000 	ldr.w	r3, [r9]
  404460:	68db      	ldr	r3, [r3, #12]
  404462:	68dd      	ldr	r5, [r3, #12]
						xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xGenericListItem ) );
  404464:	686b      	ldr	r3, [r5, #4]
						if( xConstTickCount < xItemValue )
  404466:	429e      	cmp	r6, r3
  404468:	d3d8      	bcc.n	40441c <xTaskIncrementTick+0xa0>
						( void ) uxListRemove( &( pxTCB->xGenericListItem ) );
  40446a:	f105 0a04 	add.w	sl, r5, #4
  40446e:	4650      	mov	r0, sl
  404470:	47c0      	blx	r8
						if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
  404472:	6aab      	ldr	r3, [r5, #40]	; 0x28
  404474:	2b00      	cmp	r3, #0
  404476:	d1d4      	bne.n	404422 <xTaskIncrementTick+0xa6>
  404478:	e7d6      	b.n	404428 <xTaskIncrementTick+0xac>
		++uxPendedTicks;
  40447a:	4a0d      	ldr	r2, [pc, #52]	; (4044b0 <xTaskIncrementTick+0x134>)
  40447c:	6813      	ldr	r3, [r2, #0]
  40447e:	3301      	adds	r3, #1
  404480:	6013      	str	r3, [r2, #0]
			vApplicationTickHook();
  404482:	4b0c      	ldr	r3, [pc, #48]	; (4044b4 <xTaskIncrementTick+0x138>)
  404484:	4798      	blx	r3
BaseType_t xSwitchRequired = pdFALSE;
  404486:	2400      	movs	r4, #0
  404488:	e7b4      	b.n	4043f4 <xTaskIncrementTick+0x78>
  40448a:	bf00      	nop
  40448c:	2040c2d4 	.word	0x2040c2d4
  404490:	2040c354 	.word	0x2040c354
  404494:	2040c260 	.word	0x2040c260
  404498:	2040c264 	.word	0x2040c264
  40449c:	2040c310 	.word	0x2040c310
  4044a0:	0040401d 	.word	0x0040401d
  4044a4:	2040c30c 	.word	0x2040c30c
  4044a8:	2040c25c 	.word	0x2040c25c
  4044ac:	2040c268 	.word	0x2040c268
  4044b0:	2040c2d0 	.word	0x2040c2d0
  4044b4:	00408e15 	.word	0x00408e15
  4044b8:	2040c358 	.word	0x2040c358
  4044bc:	2040c2e0 	.word	0x2040c2e0
  4044c0:	004033d9 	.word	0x004033d9
  4044c4:	00403425 	.word	0x00403425

004044c8 <xTaskResumeAll>:
{
  4044c8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
	configASSERT( uxSchedulerSuspended );
  4044cc:	4b38      	ldr	r3, [pc, #224]	; (4045b0 <xTaskResumeAll+0xe8>)
  4044ce:	681b      	ldr	r3, [r3, #0]
  4044d0:	b953      	cbnz	r3, 4044e8 <xTaskResumeAll+0x20>
  4044d2:	f04f 0380 	mov.w	r3, #128	; 0x80
  4044d6:	b672      	cpsid	i
  4044d8:	f383 8811 	msr	BASEPRI, r3
  4044dc:	f3bf 8f6f 	isb	sy
  4044e0:	f3bf 8f4f 	dsb	sy
  4044e4:	b662      	cpsie	i
  4044e6:	e7fe      	b.n	4044e6 <xTaskResumeAll+0x1e>
	taskENTER_CRITICAL();
  4044e8:	4b32      	ldr	r3, [pc, #200]	; (4045b4 <xTaskResumeAll+0xec>)
  4044ea:	4798      	blx	r3
		--uxSchedulerSuspended;
  4044ec:	4b30      	ldr	r3, [pc, #192]	; (4045b0 <xTaskResumeAll+0xe8>)
  4044ee:	681a      	ldr	r2, [r3, #0]
  4044f0:	3a01      	subs	r2, #1
  4044f2:	601a      	str	r2, [r3, #0]
		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
  4044f4:	681b      	ldr	r3, [r3, #0]
  4044f6:	2b00      	cmp	r3, #0
  4044f8:	d155      	bne.n	4045a6 <xTaskResumeAll+0xde>
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
  4044fa:	4b2f      	ldr	r3, [pc, #188]	; (4045b8 <xTaskResumeAll+0xf0>)
  4044fc:	681b      	ldr	r3, [r3, #0]
  4044fe:	2b00      	cmp	r3, #0
  404500:	d132      	bne.n	404568 <xTaskResumeAll+0xa0>
BaseType_t xAlreadyYielded = pdFALSE;
  404502:	2400      	movs	r4, #0
	taskEXIT_CRITICAL();
  404504:	4b2d      	ldr	r3, [pc, #180]	; (4045bc <xTaskResumeAll+0xf4>)
  404506:	4798      	blx	r3
}
  404508:	4620      	mov	r0, r4
  40450a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
					pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) );
  40450e:	68fb      	ldr	r3, [r7, #12]
  404510:	68dc      	ldr	r4, [r3, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
  404512:	f104 0018 	add.w	r0, r4, #24
  404516:	47b0      	blx	r6
					( void ) uxListRemove( &( pxTCB->xGenericListItem ) );
  404518:	f104 0804 	add.w	r8, r4, #4
  40451c:	4640      	mov	r0, r8
  40451e:	47b0      	blx	r6
					prvAddTaskToReadyList( pxTCB );
  404520:	6ae0      	ldr	r0, [r4, #44]	; 0x2c
  404522:	682a      	ldr	r2, [r5, #0]
  404524:	2301      	movs	r3, #1
  404526:	4083      	lsls	r3, r0
  404528:	4313      	orrs	r3, r2
  40452a:	602b      	str	r3, [r5, #0]
  40452c:	eb00 0080 	add.w	r0, r0, r0, lsl #2
  404530:	4641      	mov	r1, r8
  404532:	eb09 0080 	add.w	r0, r9, r0, lsl #2
  404536:	4b22      	ldr	r3, [pc, #136]	; (4045c0 <xTaskResumeAll+0xf8>)
  404538:	4798      	blx	r3
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
  40453a:	4b22      	ldr	r3, [pc, #136]	; (4045c4 <xTaskResumeAll+0xfc>)
  40453c:	681b      	ldr	r3, [r3, #0]
  40453e:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
  404540:	6adb      	ldr	r3, [r3, #44]	; 0x2c
  404542:	429a      	cmp	r2, r3
  404544:	d20c      	bcs.n	404560 <xTaskResumeAll+0x98>
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
  404546:	683b      	ldr	r3, [r7, #0]
  404548:	2b00      	cmp	r3, #0
  40454a:	d1e0      	bne.n	40450e <xTaskResumeAll+0x46>
				if( uxPendedTicks > ( UBaseType_t ) 0U )
  40454c:	4b1e      	ldr	r3, [pc, #120]	; (4045c8 <xTaskResumeAll+0x100>)
  40454e:	681b      	ldr	r3, [r3, #0]
  404550:	b1db      	cbz	r3, 40458a <xTaskResumeAll+0xc2>
					while( uxPendedTicks > ( UBaseType_t ) 0U )
  404552:	4b1d      	ldr	r3, [pc, #116]	; (4045c8 <xTaskResumeAll+0x100>)
  404554:	681b      	ldr	r3, [r3, #0]
  404556:	b1c3      	cbz	r3, 40458a <xTaskResumeAll+0xc2>
						if( xTaskIncrementTick() != pdFALSE )
  404558:	4e1c      	ldr	r6, [pc, #112]	; (4045cc <xTaskResumeAll+0x104>)
							xYieldPending = pdTRUE;
  40455a:	4d1d      	ldr	r5, [pc, #116]	; (4045d0 <xTaskResumeAll+0x108>)
						--uxPendedTicks;
  40455c:	4c1a      	ldr	r4, [pc, #104]	; (4045c8 <xTaskResumeAll+0x100>)
  40455e:	e00e      	b.n	40457e <xTaskResumeAll+0xb6>
						xYieldPending = pdTRUE;
  404560:	2201      	movs	r2, #1
  404562:	4b1b      	ldr	r3, [pc, #108]	; (4045d0 <xTaskResumeAll+0x108>)
  404564:	601a      	str	r2, [r3, #0]
  404566:	e7ee      	b.n	404546 <xTaskResumeAll+0x7e>
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
  404568:	4f1a      	ldr	r7, [pc, #104]	; (4045d4 <xTaskResumeAll+0x10c>)
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
  40456a:	4e1b      	ldr	r6, [pc, #108]	; (4045d8 <xTaskResumeAll+0x110>)
					prvAddTaskToReadyList( pxTCB );
  40456c:	4d1b      	ldr	r5, [pc, #108]	; (4045dc <xTaskResumeAll+0x114>)
  40456e:	f8df 9074 	ldr.w	r9, [pc, #116]	; 4045e4 <xTaskResumeAll+0x11c>
  404572:	e7e8      	b.n	404546 <xTaskResumeAll+0x7e>
						--uxPendedTicks;
  404574:	6823      	ldr	r3, [r4, #0]
  404576:	3b01      	subs	r3, #1
  404578:	6023      	str	r3, [r4, #0]
					while( uxPendedTicks > ( UBaseType_t ) 0U )
  40457a:	6823      	ldr	r3, [r4, #0]
  40457c:	b12b      	cbz	r3, 40458a <xTaskResumeAll+0xc2>
						if( xTaskIncrementTick() != pdFALSE )
  40457e:	47b0      	blx	r6
  404580:	2800      	cmp	r0, #0
  404582:	d0f7      	beq.n	404574 <xTaskResumeAll+0xac>
							xYieldPending = pdTRUE;
  404584:	2301      	movs	r3, #1
  404586:	602b      	str	r3, [r5, #0]
  404588:	e7f4      	b.n	404574 <xTaskResumeAll+0xac>
				if( xYieldPending == pdTRUE )
  40458a:	4b11      	ldr	r3, [pc, #68]	; (4045d0 <xTaskResumeAll+0x108>)
  40458c:	681b      	ldr	r3, [r3, #0]
  40458e:	2b01      	cmp	r3, #1
  404590:	d10b      	bne.n	4045aa <xTaskResumeAll+0xe2>
					taskYIELD_IF_USING_PREEMPTION();
  404592:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
  404596:	4b12      	ldr	r3, [pc, #72]	; (4045e0 <xTaskResumeAll+0x118>)
  404598:	601a      	str	r2, [r3, #0]
  40459a:	f3bf 8f4f 	dsb	sy
  40459e:	f3bf 8f6f 	isb	sy
						xAlreadyYielded = pdTRUE;
  4045a2:	2401      	movs	r4, #1
  4045a4:	e7ae      	b.n	404504 <xTaskResumeAll+0x3c>
BaseType_t xAlreadyYielded = pdFALSE;
  4045a6:	2400      	movs	r4, #0
  4045a8:	e7ac      	b.n	404504 <xTaskResumeAll+0x3c>
  4045aa:	2400      	movs	r4, #0
  4045ac:	e7aa      	b.n	404504 <xTaskResumeAll+0x3c>
  4045ae:	bf00      	nop
  4045b0:	2040c2d4 	.word	0x2040c2d4
  4045b4:	00403509 	.word	0x00403509
  4045b8:	2040c2cc 	.word	0x2040c2cc
  4045bc:	00403555 	.word	0x00403555
  4045c0:	004033d9 	.word	0x004033d9
  4045c4:	2040c25c 	.word	0x2040c25c
  4045c8:	2040c2d0 	.word	0x2040c2d0
  4045cc:	0040437d 	.word	0x0040437d
  4045d0:	2040c358 	.word	0x2040c358
  4045d4:	2040c314 	.word	0x2040c314
  4045d8:	00403425 	.word	0x00403425
  4045dc:	2040c2e0 	.word	0x2040c2e0
  4045e0:	e000ed04 	.word	0xe000ed04
  4045e4:	2040c268 	.word	0x2040c268

004045e8 <vTaskDelay>:
	{
  4045e8:	b510      	push	{r4, lr}
		if( xTicksToDelay > ( TickType_t ) 0U )
  4045ea:	2800      	cmp	r0, #0
  4045ec:	d029      	beq.n	404642 <vTaskDelay+0x5a>
  4045ee:	4604      	mov	r4, r0
			configASSERT( uxSchedulerSuspended == 0 );
  4045f0:	4b18      	ldr	r3, [pc, #96]	; (404654 <vTaskDelay+0x6c>)
  4045f2:	681b      	ldr	r3, [r3, #0]
  4045f4:	b153      	cbz	r3, 40460c <vTaskDelay+0x24>
  4045f6:	f04f 0380 	mov.w	r3, #128	; 0x80
  4045fa:	b672      	cpsid	i
  4045fc:	f383 8811 	msr	BASEPRI, r3
  404600:	f3bf 8f6f 	isb	sy
  404604:	f3bf 8f4f 	dsb	sy
  404608:	b662      	cpsie	i
  40460a:	e7fe      	b.n	40460a <vTaskDelay+0x22>
			vTaskSuspendAll();
  40460c:	4b12      	ldr	r3, [pc, #72]	; (404658 <vTaskDelay+0x70>)
  40460e:	4798      	blx	r3
				xTimeToWake = xTickCount + xTicksToDelay;
  404610:	4b12      	ldr	r3, [pc, #72]	; (40465c <vTaskDelay+0x74>)
  404612:	681b      	ldr	r3, [r3, #0]
  404614:	441c      	add	r4, r3
				if( uxListRemove( &( pxCurrentTCB->xGenericListItem ) ) == ( UBaseType_t ) 0 )
  404616:	4b12      	ldr	r3, [pc, #72]	; (404660 <vTaskDelay+0x78>)
  404618:	6818      	ldr	r0, [r3, #0]
  40461a:	3004      	adds	r0, #4
  40461c:	4b11      	ldr	r3, [pc, #68]	; (404664 <vTaskDelay+0x7c>)
  40461e:	4798      	blx	r3
  404620:	b948      	cbnz	r0, 404636 <vTaskDelay+0x4e>
					portRESET_READY_PRIORITY( pxCurrentTCB->uxPriority, uxTopReadyPriority );
  404622:	4b0f      	ldr	r3, [pc, #60]	; (404660 <vTaskDelay+0x78>)
  404624:	681a      	ldr	r2, [r3, #0]
  404626:	4910      	ldr	r1, [pc, #64]	; (404668 <vTaskDelay+0x80>)
  404628:	680b      	ldr	r3, [r1, #0]
  40462a:	6ad0      	ldr	r0, [r2, #44]	; 0x2c
  40462c:	2201      	movs	r2, #1
  40462e:	4082      	lsls	r2, r0
  404630:	ea23 0302 	bic.w	r3, r3, r2
  404634:	600b      	str	r3, [r1, #0]
				prvAddCurrentTaskToDelayedList( xTimeToWake );
  404636:	4620      	mov	r0, r4
  404638:	4b0c      	ldr	r3, [pc, #48]	; (40466c <vTaskDelay+0x84>)
  40463a:	4798      	blx	r3
			xAlreadyYielded = xTaskResumeAll();
  40463c:	4b0c      	ldr	r3, [pc, #48]	; (404670 <vTaskDelay+0x88>)
  40463e:	4798      	blx	r3
		if( xAlreadyYielded == pdFALSE )
  404640:	b938      	cbnz	r0, 404652 <vTaskDelay+0x6a>
			portYIELD_WITHIN_API();
  404642:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
  404646:	4b0b      	ldr	r3, [pc, #44]	; (404674 <vTaskDelay+0x8c>)
  404648:	601a      	str	r2, [r3, #0]
  40464a:	f3bf 8f4f 	dsb	sy
  40464e:	f3bf 8f6f 	isb	sy
  404652:	bd10      	pop	{r4, pc}
  404654:	2040c2d4 	.word	0x2040c2d4
  404658:	00404361 	.word	0x00404361
  40465c:	2040c354 	.word	0x2040c354
  404660:	2040c25c 	.word	0x2040c25c
  404664:	00403425 	.word	0x00403425
  404668:	2040c2e0 	.word	0x2040c2e0
  40466c:	00404049 	.word	0x00404049
  404670:	004044c9 	.word	0x004044c9
  404674:	e000ed04 	.word	0xe000ed04

00404678 <prvIdleTask>:
{
  404678:	b580      	push	{r7, lr}
			vTaskSuspendAll();
  40467a:	f8df 8088 	ldr.w	r8, [pc, #136]	; 404704 <prvIdleTask+0x8c>
				xListIsEmpty = listLIST_IS_EMPTY( &xTasksWaitingTermination );
  40467e:	4e19      	ldr	r6, [pc, #100]	; (4046e4 <prvIdleTask+0x6c>)
				taskYIELD();
  404680:	f8df 9084 	ldr.w	r9, [pc, #132]	; 404708 <prvIdleTask+0x90>
  404684:	e02a      	b.n	4046dc <prvIdleTask+0x64>
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
  404686:	4b18      	ldr	r3, [pc, #96]	; (4046e8 <prvIdleTask+0x70>)
  404688:	681b      	ldr	r3, [r3, #0]
  40468a:	2b01      	cmp	r3, #1
  40468c:	d81e      	bhi.n	4046cc <prvIdleTask+0x54>
		while( uxTasksDeleted > ( UBaseType_t ) 0U )
  40468e:	682b      	ldr	r3, [r5, #0]
  404690:	2b00      	cmp	r3, #0
  404692:	d0f8      	beq.n	404686 <prvIdleTask+0xe>
			vTaskSuspendAll();
  404694:	47c0      	blx	r8
				xListIsEmpty = listLIST_IS_EMPTY( &xTasksWaitingTermination );
  404696:	6834      	ldr	r4, [r6, #0]
			( void ) xTaskResumeAll();
  404698:	47b8      	blx	r7
			if( xListIsEmpty == pdFALSE )
  40469a:	2c00      	cmp	r4, #0
  40469c:	d0f7      	beq.n	40468e <prvIdleTask+0x16>
				taskENTER_CRITICAL();
  40469e:	4b13      	ldr	r3, [pc, #76]	; (4046ec <prvIdleTask+0x74>)
  4046a0:	4798      	blx	r3
					pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) );
  4046a2:	68f3      	ldr	r3, [r6, #12]
  4046a4:	68dc      	ldr	r4, [r3, #12]
					( void ) uxListRemove( &( pxTCB->xGenericListItem ) );
  4046a6:	1d20      	adds	r0, r4, #4
  4046a8:	4b11      	ldr	r3, [pc, #68]	; (4046f0 <prvIdleTask+0x78>)
  4046aa:	4798      	blx	r3
					--uxCurrentNumberOfTasks;
  4046ac:	4a11      	ldr	r2, [pc, #68]	; (4046f4 <prvIdleTask+0x7c>)
  4046ae:	6813      	ldr	r3, [r2, #0]
  4046b0:	3b01      	subs	r3, #1
  4046b2:	6013      	str	r3, [r2, #0]
					--uxTasksDeleted;
  4046b4:	682b      	ldr	r3, [r5, #0]
  4046b6:	3b01      	subs	r3, #1
  4046b8:	602b      	str	r3, [r5, #0]
				taskEXIT_CRITICAL();
  4046ba:	4b0f      	ldr	r3, [pc, #60]	; (4046f8 <prvIdleTask+0x80>)
  4046bc:	4798      	blx	r3
			vPortFreeAligned( pxTCB->pxStack );
  4046be:	6b20      	ldr	r0, [r4, #48]	; 0x30
  4046c0:	f8df a048 	ldr.w	sl, [pc, #72]	; 40470c <prvIdleTask+0x94>
  4046c4:	47d0      	blx	sl
		vPortFree( pxTCB );
  4046c6:	4620      	mov	r0, r4
  4046c8:	47d0      	blx	sl
  4046ca:	e7e0      	b.n	40468e <prvIdleTask+0x16>
				taskYIELD();
  4046cc:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
  4046d0:	f8c9 3000 	str.w	r3, [r9]
  4046d4:	f3bf 8f4f 	dsb	sy
  4046d8:	f3bf 8f6f 	isb	sy
		while( uxTasksDeleted > ( UBaseType_t ) 0U )
  4046dc:	4d07      	ldr	r5, [pc, #28]	; (4046fc <prvIdleTask+0x84>)
			( void ) xTaskResumeAll();
  4046de:	4f08      	ldr	r7, [pc, #32]	; (404700 <prvIdleTask+0x88>)
  4046e0:	e7d5      	b.n	40468e <prvIdleTask+0x16>
  4046e2:	bf00      	nop
  4046e4:	2040c340 	.word	0x2040c340
  4046e8:	2040c268 	.word	0x2040c268
  4046ec:	00403509 	.word	0x00403509
  4046f0:	00403425 	.word	0x00403425
  4046f4:	2040c2cc 	.word	0x2040c2cc
  4046f8:	00403555 	.word	0x00403555
  4046fc:	2040c2dc 	.word	0x2040c2dc
  404700:	004044c9 	.word	0x004044c9
  404704:	00404361 	.word	0x00404361
  404708:	e000ed04 	.word	0xe000ed04
  40470c:	004037d5 	.word	0x004037d5

00404710 <vTaskSwitchContext>:
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
  404710:	4b2d      	ldr	r3, [pc, #180]	; (4047c8 <vTaskSwitchContext+0xb8>)
  404712:	681b      	ldr	r3, [r3, #0]
  404714:	2b00      	cmp	r3, #0
  404716:	d12c      	bne.n	404772 <vTaskSwitchContext+0x62>
{
  404718:	b510      	push	{r4, lr}
		xYieldPending = pdFALSE;
  40471a:	2200      	movs	r2, #0
  40471c:	4b2b      	ldr	r3, [pc, #172]	; (4047cc <vTaskSwitchContext+0xbc>)
  40471e:	601a      	str	r2, [r3, #0]
		taskCHECK_FOR_STACK_OVERFLOW();
  404720:	4b2b      	ldr	r3, [pc, #172]	; (4047d0 <vTaskSwitchContext+0xc0>)
  404722:	681b      	ldr	r3, [r3, #0]
  404724:	6b1b      	ldr	r3, [r3, #48]	; 0x30
  404726:	681a      	ldr	r2, [r3, #0]
  404728:	f1b2 3fa5 	cmp.w	r2, #2779096485	; 0xa5a5a5a5
  40472c:	d103      	bne.n	404736 <vTaskSwitchContext+0x26>
  40472e:	685a      	ldr	r2, [r3, #4]
  404730:	f1b2 3fa5 	cmp.w	r2, #2779096485	; 0xa5a5a5a5
  404734:	d021      	beq.n	40477a <vTaskSwitchContext+0x6a>
  404736:	4b26      	ldr	r3, [pc, #152]	; (4047d0 <vTaskSwitchContext+0xc0>)
  404738:	6818      	ldr	r0, [r3, #0]
  40473a:	6819      	ldr	r1, [r3, #0]
  40473c:	3134      	adds	r1, #52	; 0x34
  40473e:	4b25      	ldr	r3, [pc, #148]	; (4047d4 <vTaskSwitchContext+0xc4>)
  404740:	4798      	blx	r3
		taskSELECT_HIGHEST_PRIORITY_TASK();
  404742:	4b25      	ldr	r3, [pc, #148]	; (4047d8 <vTaskSwitchContext+0xc8>)
  404744:	681b      	ldr	r3, [r3, #0]
		__asm volatile ( "clz %0, %1" : "=r" ( ucReturn ) : "r" ( ulBitmap ) );
  404746:	fab3 f383 	clz	r3, r3
  40474a:	b2db      	uxtb	r3, r3
  40474c:	f1c3 031f 	rsb	r3, r3, #31
  404750:	eb03 0183 	add.w	r1, r3, r3, lsl #2
  404754:	4a21      	ldr	r2, [pc, #132]	; (4047dc <vTaskSwitchContext+0xcc>)
  404756:	f852 2021 	ldr.w	r2, [r2, r1, lsl #2]
  40475a:	b9ba      	cbnz	r2, 40478c <vTaskSwitchContext+0x7c>
	__asm volatile
  40475c:	f04f 0380 	mov.w	r3, #128	; 0x80
  404760:	b672      	cpsid	i
  404762:	f383 8811 	msr	BASEPRI, r3
  404766:	f3bf 8f6f 	isb	sy
  40476a:	f3bf 8f4f 	dsb	sy
  40476e:	b662      	cpsie	i
  404770:	e7fe      	b.n	404770 <vTaskSwitchContext+0x60>
		xYieldPending = pdTRUE;
  404772:	2201      	movs	r2, #1
  404774:	4b15      	ldr	r3, [pc, #84]	; (4047cc <vTaskSwitchContext+0xbc>)
  404776:	601a      	str	r2, [r3, #0]
  404778:	4770      	bx	lr
		taskCHECK_FOR_STACK_OVERFLOW();
  40477a:	689a      	ldr	r2, [r3, #8]
  40477c:	f1b2 3fa5 	cmp.w	r2, #2779096485	; 0xa5a5a5a5
  404780:	d1d9      	bne.n	404736 <vTaskSwitchContext+0x26>
  404782:	68db      	ldr	r3, [r3, #12]
  404784:	f1b3 3fa5 	cmp.w	r3, #2779096485	; 0xa5a5a5a5
  404788:	d1d5      	bne.n	404736 <vTaskSwitchContext+0x26>
  40478a:	e7da      	b.n	404742 <vTaskSwitchContext+0x32>
		taskSELECT_HIGHEST_PRIORITY_TASK();
  40478c:	4a13      	ldr	r2, [pc, #76]	; (4047dc <vTaskSwitchContext+0xcc>)
  40478e:	0099      	lsls	r1, r3, #2
  404790:	18c8      	adds	r0, r1, r3
  404792:	eb02 0080 	add.w	r0, r2, r0, lsl #2
  404796:	6844      	ldr	r4, [r0, #4]
  404798:	6864      	ldr	r4, [r4, #4]
  40479a:	6044      	str	r4, [r0, #4]
  40479c:	4419      	add	r1, r3
  40479e:	4602      	mov	r2, r0
  4047a0:	3208      	adds	r2, #8
  4047a2:	4294      	cmp	r4, r2
  4047a4:	d009      	beq.n	4047ba <vTaskSwitchContext+0xaa>
  4047a6:	eb03 0383 	add.w	r3, r3, r3, lsl #2
  4047aa:	4a0c      	ldr	r2, [pc, #48]	; (4047dc <vTaskSwitchContext+0xcc>)
  4047ac:	eb02 0383 	add.w	r3, r2, r3, lsl #2
  4047b0:	685b      	ldr	r3, [r3, #4]
  4047b2:	68da      	ldr	r2, [r3, #12]
  4047b4:	4b06      	ldr	r3, [pc, #24]	; (4047d0 <vTaskSwitchContext+0xc0>)
  4047b6:	601a      	str	r2, [r3, #0]
  4047b8:	bd10      	pop	{r4, pc}
  4047ba:	6860      	ldr	r0, [r4, #4]
  4047bc:	4a07      	ldr	r2, [pc, #28]	; (4047dc <vTaskSwitchContext+0xcc>)
  4047be:	eb02 0281 	add.w	r2, r2, r1, lsl #2
  4047c2:	6050      	str	r0, [r2, #4]
  4047c4:	e7ef      	b.n	4047a6 <vTaskSwitchContext+0x96>
  4047c6:	bf00      	nop
  4047c8:	2040c2d4 	.word	0x2040c2d4
  4047cc:	2040c358 	.word	0x2040c358
  4047d0:	2040c25c 	.word	0x2040c25c
  4047d4:	00408dfd 	.word	0x00408dfd
  4047d8:	2040c2e0 	.word	0x2040c2e0
  4047dc:	2040c268 	.word	0x2040c268

004047e0 <vTaskPlaceOnEventList>:
{
  4047e0:	b538      	push	{r3, r4, r5, lr}
	configASSERT( pxEventList );
  4047e2:	b1e0      	cbz	r0, 40481e <vTaskPlaceOnEventList+0x3e>
  4047e4:	460c      	mov	r4, r1
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
  4047e6:	4d17      	ldr	r5, [pc, #92]	; (404844 <vTaskPlaceOnEventList+0x64>)
  4047e8:	6829      	ldr	r1, [r5, #0]
  4047ea:	3118      	adds	r1, #24
  4047ec:	4b16      	ldr	r3, [pc, #88]	; (404848 <vTaskPlaceOnEventList+0x68>)
  4047ee:	4798      	blx	r3
	if( uxListRemove( &( pxCurrentTCB->xGenericListItem ) ) == ( UBaseType_t ) 0 )
  4047f0:	6828      	ldr	r0, [r5, #0]
  4047f2:	3004      	adds	r0, #4
  4047f4:	4b15      	ldr	r3, [pc, #84]	; (40484c <vTaskPlaceOnEventList+0x6c>)
  4047f6:	4798      	blx	r3
  4047f8:	b940      	cbnz	r0, 40480c <vTaskPlaceOnEventList+0x2c>
		portRESET_READY_PRIORITY( pxCurrentTCB->uxPriority, uxTopReadyPriority );
  4047fa:	682a      	ldr	r2, [r5, #0]
  4047fc:	4914      	ldr	r1, [pc, #80]	; (404850 <vTaskPlaceOnEventList+0x70>)
  4047fe:	680b      	ldr	r3, [r1, #0]
  404800:	6ad0      	ldr	r0, [r2, #44]	; 0x2c
  404802:	2201      	movs	r2, #1
  404804:	4082      	lsls	r2, r0
  404806:	ea23 0302 	bic.w	r3, r3, r2
  40480a:	600b      	str	r3, [r1, #0]
		if( xTicksToWait == portMAX_DELAY )
  40480c:	f1b4 3fff 	cmp.w	r4, #4294967295
  404810:	d010      	beq.n	404834 <vTaskPlaceOnEventList+0x54>
			xTimeToWake = xTickCount + xTicksToWait;
  404812:	4b10      	ldr	r3, [pc, #64]	; (404854 <vTaskPlaceOnEventList+0x74>)
  404814:	6818      	ldr	r0, [r3, #0]
			prvAddCurrentTaskToDelayedList( xTimeToWake );
  404816:	4420      	add	r0, r4
  404818:	4b0f      	ldr	r3, [pc, #60]	; (404858 <vTaskPlaceOnEventList+0x78>)
  40481a:	4798      	blx	r3
  40481c:	bd38      	pop	{r3, r4, r5, pc}
  40481e:	f04f 0380 	mov.w	r3, #128	; 0x80
  404822:	b672      	cpsid	i
  404824:	f383 8811 	msr	BASEPRI, r3
  404828:	f3bf 8f6f 	isb	sy
  40482c:	f3bf 8f4f 	dsb	sy
  404830:	b662      	cpsie	i
  404832:	e7fe      	b.n	404832 <vTaskPlaceOnEventList+0x52>
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xGenericListItem ) );
  404834:	4b03      	ldr	r3, [pc, #12]	; (404844 <vTaskPlaceOnEventList+0x64>)
  404836:	6819      	ldr	r1, [r3, #0]
  404838:	3104      	adds	r1, #4
  40483a:	4808      	ldr	r0, [pc, #32]	; (40485c <vTaskPlaceOnEventList+0x7c>)
  40483c:	4b08      	ldr	r3, [pc, #32]	; (404860 <vTaskPlaceOnEventList+0x80>)
  40483e:	4798      	blx	r3
  404840:	bd38      	pop	{r3, r4, r5, pc}
  404842:	bf00      	nop
  404844:	2040c25c 	.word	0x2040c25c
  404848:	004033f1 	.word	0x004033f1
  40484c:	00403425 	.word	0x00403425
  404850:	2040c2e0 	.word	0x2040c2e0
  404854:	2040c354 	.word	0x2040c354
  404858:	00404049 	.word	0x00404049
  40485c:	2040c32c 	.word	0x2040c32c
  404860:	004033d9 	.word	0x004033d9

00404864 <vTaskPlaceOnEventListRestricted>:
		configASSERT( pxEventList );
  404864:	b1e8      	cbz	r0, 4048a2 <vTaskPlaceOnEventListRestricted+0x3e>
	{
  404866:	b570      	push	{r4, r5, r6, lr}
  404868:	4615      	mov	r5, r2
  40486a:	460c      	mov	r4, r1
		vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
  40486c:	4e16      	ldr	r6, [pc, #88]	; (4048c8 <vTaskPlaceOnEventListRestricted+0x64>)
  40486e:	6831      	ldr	r1, [r6, #0]
  404870:	3118      	adds	r1, #24
  404872:	4b16      	ldr	r3, [pc, #88]	; (4048cc <vTaskPlaceOnEventListRestricted+0x68>)
  404874:	4798      	blx	r3
		if( uxListRemove( &( pxCurrentTCB->xGenericListItem ) ) == ( UBaseType_t ) 0 )
  404876:	6830      	ldr	r0, [r6, #0]
  404878:	3004      	adds	r0, #4
  40487a:	4b15      	ldr	r3, [pc, #84]	; (4048d0 <vTaskPlaceOnEventListRestricted+0x6c>)
  40487c:	4798      	blx	r3
  40487e:	b940      	cbnz	r0, 404892 <vTaskPlaceOnEventListRestricted+0x2e>
			portRESET_READY_PRIORITY( pxCurrentTCB->uxPriority, uxTopReadyPriority );
  404880:	6832      	ldr	r2, [r6, #0]
  404882:	4914      	ldr	r1, [pc, #80]	; (4048d4 <vTaskPlaceOnEventListRestricted+0x70>)
  404884:	680b      	ldr	r3, [r1, #0]
  404886:	6ad0      	ldr	r0, [r2, #44]	; 0x2c
  404888:	2201      	movs	r2, #1
  40488a:	4082      	lsls	r2, r0
  40488c:	ea23 0302 	bic.w	r3, r3, r2
  404890:	600b      	str	r3, [r1, #0]
			if( xWaitIndefinitely == pdTRUE )
  404892:	2d01      	cmp	r5, #1
  404894:	d010      	beq.n	4048b8 <vTaskPlaceOnEventListRestricted+0x54>
				xTimeToWake = xTickCount + xTicksToWait;
  404896:	4b10      	ldr	r3, [pc, #64]	; (4048d8 <vTaskPlaceOnEventListRestricted+0x74>)
  404898:	6818      	ldr	r0, [r3, #0]
				prvAddCurrentTaskToDelayedList( xTimeToWake );
  40489a:	4420      	add	r0, r4
  40489c:	4b0f      	ldr	r3, [pc, #60]	; (4048dc <vTaskPlaceOnEventListRestricted+0x78>)
  40489e:	4798      	blx	r3
  4048a0:	bd70      	pop	{r4, r5, r6, pc}
  4048a2:	f04f 0380 	mov.w	r3, #128	; 0x80
  4048a6:	b672      	cpsid	i
  4048a8:	f383 8811 	msr	BASEPRI, r3
  4048ac:	f3bf 8f6f 	isb	sy
  4048b0:	f3bf 8f4f 	dsb	sy
  4048b4:	b662      	cpsie	i
  4048b6:	e7fe      	b.n	4048b6 <vTaskPlaceOnEventListRestricted+0x52>
				vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xGenericListItem ) );
  4048b8:	4b03      	ldr	r3, [pc, #12]	; (4048c8 <vTaskPlaceOnEventListRestricted+0x64>)
  4048ba:	6819      	ldr	r1, [r3, #0]
  4048bc:	3104      	adds	r1, #4
  4048be:	4808      	ldr	r0, [pc, #32]	; (4048e0 <vTaskPlaceOnEventListRestricted+0x7c>)
  4048c0:	4b02      	ldr	r3, [pc, #8]	; (4048cc <vTaskPlaceOnEventListRestricted+0x68>)
  4048c2:	4798      	blx	r3
  4048c4:	bd70      	pop	{r4, r5, r6, pc}
  4048c6:	bf00      	nop
  4048c8:	2040c25c 	.word	0x2040c25c
  4048cc:	004033d9 	.word	0x004033d9
  4048d0:	00403425 	.word	0x00403425
  4048d4:	2040c2e0 	.word	0x2040c2e0
  4048d8:	2040c354 	.word	0x2040c354
  4048dc:	00404049 	.word	0x00404049
  4048e0:	2040c32c 	.word	0x2040c32c

004048e4 <xTaskRemoveFromEventList>:
{
  4048e4:	b538      	push	{r3, r4, r5, lr}
	pxUnblockedTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxEventList );
  4048e6:	68c3      	ldr	r3, [r0, #12]
  4048e8:	68dc      	ldr	r4, [r3, #12]
	configASSERT( pxUnblockedTCB );
  4048ea:	b324      	cbz	r4, 404936 <xTaskRemoveFromEventList+0x52>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
  4048ec:	f104 0518 	add.w	r5, r4, #24
  4048f0:	4628      	mov	r0, r5
  4048f2:	4b1a      	ldr	r3, [pc, #104]	; (40495c <xTaskRemoveFromEventList+0x78>)
  4048f4:	4798      	blx	r3
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
  4048f6:	4b1a      	ldr	r3, [pc, #104]	; (404960 <xTaskRemoveFromEventList+0x7c>)
  4048f8:	681b      	ldr	r3, [r3, #0]
  4048fa:	bb3b      	cbnz	r3, 40494c <xTaskRemoveFromEventList+0x68>
		( void ) uxListRemove( &( pxUnblockedTCB->xGenericListItem ) );
  4048fc:	1d25      	adds	r5, r4, #4
  4048fe:	4628      	mov	r0, r5
  404900:	4b16      	ldr	r3, [pc, #88]	; (40495c <xTaskRemoveFromEventList+0x78>)
  404902:	4798      	blx	r3
		prvAddTaskToReadyList( pxUnblockedTCB );
  404904:	6ae0      	ldr	r0, [r4, #44]	; 0x2c
  404906:	4a17      	ldr	r2, [pc, #92]	; (404964 <xTaskRemoveFromEventList+0x80>)
  404908:	6811      	ldr	r1, [r2, #0]
  40490a:	2301      	movs	r3, #1
  40490c:	4083      	lsls	r3, r0
  40490e:	430b      	orrs	r3, r1
  404910:	6013      	str	r3, [r2, #0]
  404912:	eb00 0080 	add.w	r0, r0, r0, lsl #2
  404916:	4629      	mov	r1, r5
  404918:	4b13      	ldr	r3, [pc, #76]	; (404968 <xTaskRemoveFromEventList+0x84>)
  40491a:	eb03 0080 	add.w	r0, r3, r0, lsl #2
  40491e:	4b13      	ldr	r3, [pc, #76]	; (40496c <xTaskRemoveFromEventList+0x88>)
  404920:	4798      	blx	r3
	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
  404922:	4b13      	ldr	r3, [pc, #76]	; (404970 <xTaskRemoveFromEventList+0x8c>)
  404924:	681b      	ldr	r3, [r3, #0]
  404926:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
  404928:	6adb      	ldr	r3, [r3, #44]	; 0x2c
  40492a:	429a      	cmp	r2, r3
  40492c:	d913      	bls.n	404956 <xTaskRemoveFromEventList+0x72>
		xYieldPending = pdTRUE;
  40492e:	2001      	movs	r0, #1
  404930:	4b10      	ldr	r3, [pc, #64]	; (404974 <xTaskRemoveFromEventList+0x90>)
  404932:	6018      	str	r0, [r3, #0]
  404934:	bd38      	pop	{r3, r4, r5, pc}
  404936:	f04f 0380 	mov.w	r3, #128	; 0x80
  40493a:	b672      	cpsid	i
  40493c:	f383 8811 	msr	BASEPRI, r3
  404940:	f3bf 8f6f 	isb	sy
  404944:	f3bf 8f4f 	dsb	sy
  404948:	b662      	cpsie	i
  40494a:	e7fe      	b.n	40494a <xTaskRemoveFromEventList+0x66>
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
  40494c:	4629      	mov	r1, r5
  40494e:	480a      	ldr	r0, [pc, #40]	; (404978 <xTaskRemoveFromEventList+0x94>)
  404950:	4b06      	ldr	r3, [pc, #24]	; (40496c <xTaskRemoveFromEventList+0x88>)
  404952:	4798      	blx	r3
  404954:	e7e5      	b.n	404922 <xTaskRemoveFromEventList+0x3e>
		xReturn = pdFALSE;
  404956:	2000      	movs	r0, #0
}
  404958:	bd38      	pop	{r3, r4, r5, pc}
  40495a:	bf00      	nop
  40495c:	00403425 	.word	0x00403425
  404960:	2040c2d4 	.word	0x2040c2d4
  404964:	2040c2e0 	.word	0x2040c2e0
  404968:	2040c268 	.word	0x2040c268
  40496c:	004033d9 	.word	0x004033d9
  404970:	2040c25c 	.word	0x2040c25c
  404974:	2040c358 	.word	0x2040c358
  404978:	2040c314 	.word	0x2040c314

0040497c <vTaskSetTimeOutState>:
	configASSERT( pxTimeOut );
  40497c:	b130      	cbz	r0, 40498c <vTaskSetTimeOutState+0x10>
	pxTimeOut->xOverflowCount = xNumOfOverflows;
  40497e:	4a09      	ldr	r2, [pc, #36]	; (4049a4 <vTaskSetTimeOutState+0x28>)
  404980:	6812      	ldr	r2, [r2, #0]
  404982:	6002      	str	r2, [r0, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
  404984:	4a08      	ldr	r2, [pc, #32]	; (4049a8 <vTaskSetTimeOutState+0x2c>)
  404986:	6812      	ldr	r2, [r2, #0]
  404988:	6042      	str	r2, [r0, #4]
  40498a:	4770      	bx	lr
  40498c:	f04f 0380 	mov.w	r3, #128	; 0x80
  404990:	b672      	cpsid	i
  404992:	f383 8811 	msr	BASEPRI, r3
  404996:	f3bf 8f6f 	isb	sy
  40499a:	f3bf 8f4f 	dsb	sy
  40499e:	b662      	cpsie	i
  4049a0:	e7fe      	b.n	4049a0 <vTaskSetTimeOutState+0x24>
  4049a2:	bf00      	nop
  4049a4:	2040c310 	.word	0x2040c310
  4049a8:	2040c354 	.word	0x2040c354

004049ac <xTaskCheckForTimeOut>:
{
  4049ac:	b538      	push	{r3, r4, r5, lr}
	configASSERT( pxTimeOut );
  4049ae:	b1c0      	cbz	r0, 4049e2 <xTaskCheckForTimeOut+0x36>
  4049b0:	4604      	mov	r4, r0
	configASSERT( pxTicksToWait );
  4049b2:	b309      	cbz	r1, 4049f8 <xTaskCheckForTimeOut+0x4c>
  4049b4:	460d      	mov	r5, r1
	taskENTER_CRITICAL();
  4049b6:	4b1d      	ldr	r3, [pc, #116]	; (404a2c <xTaskCheckForTimeOut+0x80>)
  4049b8:	4798      	blx	r3
		const TickType_t xConstTickCount = xTickCount;
  4049ba:	4b1d      	ldr	r3, [pc, #116]	; (404a30 <xTaskCheckForTimeOut+0x84>)
  4049bc:	681a      	ldr	r2, [r3, #0]
			if( *pxTicksToWait == portMAX_DELAY )
  4049be:	682b      	ldr	r3, [r5, #0]
  4049c0:	f1b3 3fff 	cmp.w	r3, #4294967295
  4049c4:	d02e      	beq.n	404a24 <xTaskCheckForTimeOut+0x78>
		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
  4049c6:	491b      	ldr	r1, [pc, #108]	; (404a34 <xTaskCheckForTimeOut+0x88>)
  4049c8:	6809      	ldr	r1, [r1, #0]
  4049ca:	6820      	ldr	r0, [r4, #0]
  4049cc:	4288      	cmp	r0, r1
  4049ce:	d002      	beq.n	4049d6 <xTaskCheckForTimeOut+0x2a>
  4049d0:	6861      	ldr	r1, [r4, #4]
  4049d2:	428a      	cmp	r2, r1
  4049d4:	d228      	bcs.n	404a28 <xTaskCheckForTimeOut+0x7c>
		else if( ( xConstTickCount - pxTimeOut->xTimeOnEntering ) < *pxTicksToWait )
  4049d6:	6861      	ldr	r1, [r4, #4]
  4049d8:	1a50      	subs	r0, r2, r1
  4049da:	4283      	cmp	r3, r0
  4049dc:	d817      	bhi.n	404a0e <xTaskCheckForTimeOut+0x62>
			xReturn = pdTRUE;
  4049de:	2401      	movs	r4, #1
  4049e0:	e01c      	b.n	404a1c <xTaskCheckForTimeOut+0x70>
  4049e2:	f04f 0380 	mov.w	r3, #128	; 0x80
  4049e6:	b672      	cpsid	i
  4049e8:	f383 8811 	msr	BASEPRI, r3
  4049ec:	f3bf 8f6f 	isb	sy
  4049f0:	f3bf 8f4f 	dsb	sy
  4049f4:	b662      	cpsie	i
  4049f6:	e7fe      	b.n	4049f6 <xTaskCheckForTimeOut+0x4a>
  4049f8:	f04f 0380 	mov.w	r3, #128	; 0x80
  4049fc:	b672      	cpsid	i
  4049fe:	f383 8811 	msr	BASEPRI, r3
  404a02:	f3bf 8f6f 	isb	sy
  404a06:	f3bf 8f4f 	dsb	sy
  404a0a:	b662      	cpsie	i
  404a0c:	e7fe      	b.n	404a0c <xTaskCheckForTimeOut+0x60>
			*pxTicksToWait -= ( xConstTickCount -  pxTimeOut->xTimeOnEntering );
  404a0e:	1a9b      	subs	r3, r3, r2
  404a10:	440b      	add	r3, r1
  404a12:	602b      	str	r3, [r5, #0]
			vTaskSetTimeOutState( pxTimeOut );
  404a14:	4620      	mov	r0, r4
  404a16:	4b08      	ldr	r3, [pc, #32]	; (404a38 <xTaskCheckForTimeOut+0x8c>)
  404a18:	4798      	blx	r3
			xReturn = pdFALSE;
  404a1a:	2400      	movs	r4, #0
	taskEXIT_CRITICAL();
  404a1c:	4b07      	ldr	r3, [pc, #28]	; (404a3c <xTaskCheckForTimeOut+0x90>)
  404a1e:	4798      	blx	r3
}
  404a20:	4620      	mov	r0, r4
  404a22:	bd38      	pop	{r3, r4, r5, pc}
				xReturn = pdFALSE;
  404a24:	2400      	movs	r4, #0
  404a26:	e7f9      	b.n	404a1c <xTaskCheckForTimeOut+0x70>
			xReturn = pdTRUE;
  404a28:	2401      	movs	r4, #1
  404a2a:	e7f7      	b.n	404a1c <xTaskCheckForTimeOut+0x70>
  404a2c:	00403509 	.word	0x00403509
  404a30:	2040c354 	.word	0x2040c354
  404a34:	2040c310 	.word	0x2040c310
  404a38:	0040497d 	.word	0x0040497d
  404a3c:	00403555 	.word	0x00403555

00404a40 <vTaskMissedYield>:
	xYieldPending = pdTRUE;
  404a40:	2201      	movs	r2, #1
  404a42:	4b01      	ldr	r3, [pc, #4]	; (404a48 <vTaskMissedYield+0x8>)
  404a44:	601a      	str	r2, [r3, #0]
  404a46:	4770      	bx	lr
  404a48:	2040c358 	.word	0x2040c358

00404a4c <xTaskGetSchedulerState>:

	BaseType_t xTaskGetSchedulerState( void )
	{
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
  404a4c:	4b05      	ldr	r3, [pc, #20]	; (404a64 <xTaskGetSchedulerState+0x18>)
  404a4e:	681b      	ldr	r3, [r3, #0]
  404a50:	b133      	cbz	r3, 404a60 <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
  404a52:	4b05      	ldr	r3, [pc, #20]	; (404a68 <xTaskGetSchedulerState+0x1c>)
  404a54:	681b      	ldr	r3, [r3, #0]
			{
				xReturn = taskSCHEDULER_RUNNING;
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
  404a56:	2b00      	cmp	r3, #0
  404a58:	bf0c      	ite	eq
  404a5a:	2002      	moveq	r0, #2
  404a5c:	2000      	movne	r0, #0
  404a5e:	4770      	bx	lr
			xReturn = taskSCHEDULER_NOT_STARTED;
  404a60:	2001      	movs	r0, #1
			}
		}

		return xReturn;
	}
  404a62:	4770      	bx	lr
  404a64:	2040c328 	.word	0x2040c328
  404a68:	2040c2d4 	.word	0x2040c2d4

00404a6c <vTaskPriorityInherit>:
	{
	TCB_t * const pxTCB = ( TCB_t * ) pxMutexHolder;

		/* If the mutex was given back by an interrupt while the queue was
		locked then the mutex holder might now be NULL. */
		if( pxMutexHolder != NULL )
  404a6c:	2800      	cmp	r0, #0
  404a6e:	d044      	beq.n	404afa <vTaskPriorityInherit+0x8e>
	{
  404a70:	b538      	push	{r3, r4, r5, lr}
  404a72:	4604      	mov	r4, r0
		{
			/* If the holder of the mutex has a priority below the priority of
			the task attempting to obtain the mutex then it will temporarily
			inherit the priority of the task attempting to obtain the mutex. */
			if( pxTCB->uxPriority < pxCurrentTCB->uxPriority )
  404a74:	6ac2      	ldr	r2, [r0, #44]	; 0x2c
  404a76:	4921      	ldr	r1, [pc, #132]	; (404afc <vTaskPriorityInherit+0x90>)
  404a78:	6809      	ldr	r1, [r1, #0]
  404a7a:	6ac9      	ldr	r1, [r1, #44]	; 0x2c
  404a7c:	428a      	cmp	r2, r1
  404a7e:	d214      	bcs.n	404aaa <vTaskPriorityInherit+0x3e>
			{
				/* Adjust the mutex holder state to account for its new
				priority.  Only reset the event list item value if the value is
				not	being used for anything else. */
				if( ( listGET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
  404a80:	6981      	ldr	r1, [r0, #24]
  404a82:	2900      	cmp	r1, #0
  404a84:	db05      	blt.n	404a92 <vTaskPriorityInherit+0x26>
				{
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxCurrentTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
  404a86:	491d      	ldr	r1, [pc, #116]	; (404afc <vTaskPriorityInherit+0x90>)
  404a88:	6809      	ldr	r1, [r1, #0]
  404a8a:	6ac9      	ldr	r1, [r1, #44]	; 0x2c
  404a8c:	f1c1 0105 	rsb	r1, r1, #5
  404a90:	6181      	str	r1, [r0, #24]
					mtCOVERAGE_TEST_MARKER();
				}

				/* If the task being modified is in the ready state it will need
				to be moved into a new list. */
				if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ pxTCB->uxPriority ] ), &( pxTCB->xGenericListItem ) ) != pdFALSE )
  404a92:	eb02 0282 	add.w	r2, r2, r2, lsl #2
  404a96:	491a      	ldr	r1, [pc, #104]	; (404b00 <vTaskPriorityInherit+0x94>)
  404a98:	eb01 0282 	add.w	r2, r1, r2, lsl #2
  404a9c:	6961      	ldr	r1, [r4, #20]
  404a9e:	4291      	cmp	r1, r2
  404aa0:	d004      	beq.n	404aac <vTaskPriorityInherit+0x40>
					prvAddTaskToReadyList( pxTCB );
				}
				else
				{
					/* Just inherit the priority. */
					pxTCB->uxPriority = pxCurrentTCB->uxPriority;
  404aa2:	4a16      	ldr	r2, [pc, #88]	; (404afc <vTaskPriorityInherit+0x90>)
  404aa4:	6812      	ldr	r2, [r2, #0]
  404aa6:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
  404aa8:	62e2      	str	r2, [r4, #44]	; 0x2c
  404aaa:	bd38      	pop	{r3, r4, r5, pc}
					if( uxListRemove( &( pxTCB->xGenericListItem ) ) == ( UBaseType_t ) 0 )
  404aac:	1d25      	adds	r5, r4, #4
  404aae:	4628      	mov	r0, r5
  404ab0:	4b14      	ldr	r3, [pc, #80]	; (404b04 <vTaskPriorityInherit+0x98>)
  404ab2:	4798      	blx	r3
  404ab4:	b970      	cbnz	r0, 404ad4 <vTaskPriorityInherit+0x68>
						taskRESET_READY_PRIORITY( pxTCB->uxPriority );
  404ab6:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
  404ab8:	eb03 0183 	add.w	r1, r3, r3, lsl #2
  404abc:	4a10      	ldr	r2, [pc, #64]	; (404b00 <vTaskPriorityInherit+0x94>)
  404abe:	f852 2021 	ldr.w	r2, [r2, r1, lsl #2]
  404ac2:	b93a      	cbnz	r2, 404ad4 <vTaskPriorityInherit+0x68>
  404ac4:	4810      	ldr	r0, [pc, #64]	; (404b08 <vTaskPriorityInherit+0x9c>)
  404ac6:	6802      	ldr	r2, [r0, #0]
  404ac8:	2101      	movs	r1, #1
  404aca:	fa01 f303 	lsl.w	r3, r1, r3
  404ace:	ea22 0303 	bic.w	r3, r2, r3
  404ad2:	6003      	str	r3, [r0, #0]
					pxTCB->uxPriority = pxCurrentTCB->uxPriority;
  404ad4:	4b09      	ldr	r3, [pc, #36]	; (404afc <vTaskPriorityInherit+0x90>)
  404ad6:	681b      	ldr	r3, [r3, #0]
  404ad8:	6ad8      	ldr	r0, [r3, #44]	; 0x2c
  404ada:	62e0      	str	r0, [r4, #44]	; 0x2c
					prvAddTaskToReadyList( pxTCB );
  404adc:	4a0a      	ldr	r2, [pc, #40]	; (404b08 <vTaskPriorityInherit+0x9c>)
  404ade:	6811      	ldr	r1, [r2, #0]
  404ae0:	2301      	movs	r3, #1
  404ae2:	4083      	lsls	r3, r0
  404ae4:	430b      	orrs	r3, r1
  404ae6:	6013      	str	r3, [r2, #0]
  404ae8:	eb00 0080 	add.w	r0, r0, r0, lsl #2
  404aec:	4629      	mov	r1, r5
  404aee:	4b04      	ldr	r3, [pc, #16]	; (404b00 <vTaskPriorityInherit+0x94>)
  404af0:	eb03 0080 	add.w	r0, r3, r0, lsl #2
  404af4:	4b05      	ldr	r3, [pc, #20]	; (404b0c <vTaskPriorityInherit+0xa0>)
  404af6:	4798      	blx	r3
  404af8:	bd38      	pop	{r3, r4, r5, pc}
  404afa:	4770      	bx	lr
  404afc:	2040c25c 	.word	0x2040c25c
  404b00:	2040c268 	.word	0x2040c268
  404b04:	00403425 	.word	0x00403425
  404b08:	2040c2e0 	.word	0x2040c2e0
  404b0c:	004033d9 	.word	0x004033d9

00404b10 <xTaskPriorityDisinherit>:
	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
	TCB_t * const pxTCB = ( TCB_t * ) pxMutexHolder;
	BaseType_t xReturn = pdFALSE;

		if( pxMutexHolder != NULL )
  404b10:	2800      	cmp	r0, #0
  404b12:	d04d      	beq.n	404bb0 <xTaskPriorityDisinherit+0xa0>
	{
  404b14:	b538      	push	{r3, r4, r5, lr}
  404b16:	4604      	mov	r4, r0
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
  404b18:	4a27      	ldr	r2, [pc, #156]	; (404bb8 <xTaskPriorityDisinherit+0xa8>)
  404b1a:	6812      	ldr	r2, [r2, #0]
  404b1c:	4290      	cmp	r0, r2
  404b1e:	d00a      	beq.n	404b36 <xTaskPriorityDisinherit+0x26>
  404b20:	f04f 0380 	mov.w	r3, #128	; 0x80
  404b24:	b672      	cpsid	i
  404b26:	f383 8811 	msr	BASEPRI, r3
  404b2a:	f3bf 8f6f 	isb	sy
  404b2e:	f3bf 8f4f 	dsb	sy
  404b32:	b662      	cpsie	i
  404b34:	e7fe      	b.n	404b34 <xTaskPriorityDisinherit+0x24>

			configASSERT( pxTCB->uxMutexesHeld );
  404b36:	6cc2      	ldr	r2, [r0, #76]	; 0x4c
  404b38:	b952      	cbnz	r2, 404b50 <xTaskPriorityDisinherit+0x40>
  404b3a:	f04f 0380 	mov.w	r3, #128	; 0x80
  404b3e:	b672      	cpsid	i
  404b40:	f383 8811 	msr	BASEPRI, r3
  404b44:	f3bf 8f6f 	isb	sy
  404b48:	f3bf 8f4f 	dsb	sy
  404b4c:	b662      	cpsie	i
  404b4e:	e7fe      	b.n	404b4e <xTaskPriorityDisinherit+0x3e>
			( pxTCB->uxMutexesHeld )--;
  404b50:	3a01      	subs	r2, #1
  404b52:	64c2      	str	r2, [r0, #76]	; 0x4c

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
  404b54:	6ac0      	ldr	r0, [r0, #44]	; 0x2c
  404b56:	6ca1      	ldr	r1, [r4, #72]	; 0x48
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
  404b58:	4288      	cmp	r0, r1
  404b5a:	d02b      	beq.n	404bb4 <xTaskPriorityDisinherit+0xa4>
  404b5c:	bb52      	cbnz	r2, 404bb4 <xTaskPriorityDisinherit+0xa4>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding	task then it must be the running state task.  Remove
					the	holding task from the ready	list. */
					if( uxListRemove( &( pxTCB->xGenericListItem ) ) == ( UBaseType_t ) 0 )
  404b5e:	1d25      	adds	r5, r4, #4
  404b60:	4628      	mov	r0, r5
  404b62:	4b16      	ldr	r3, [pc, #88]	; (404bbc <xTaskPriorityDisinherit+0xac>)
  404b64:	4798      	blx	r3
  404b66:	b968      	cbnz	r0, 404b84 <xTaskPriorityDisinherit+0x74>
					{
						taskRESET_READY_PRIORITY( pxTCB->uxPriority );
  404b68:	6ae1      	ldr	r1, [r4, #44]	; 0x2c
  404b6a:	eb01 0281 	add.w	r2, r1, r1, lsl #2
  404b6e:	4b14      	ldr	r3, [pc, #80]	; (404bc0 <xTaskPriorityDisinherit+0xb0>)
  404b70:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
  404b74:	b933      	cbnz	r3, 404b84 <xTaskPriorityDisinherit+0x74>
  404b76:	4813      	ldr	r0, [pc, #76]	; (404bc4 <xTaskPriorityDisinherit+0xb4>)
  404b78:	6803      	ldr	r3, [r0, #0]
  404b7a:	2201      	movs	r2, #1
  404b7c:	408a      	lsls	r2, r1
  404b7e:	ea23 0302 	bic.w	r3, r3, r2
  404b82:	6003      	str	r3, [r0, #0]
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
  404b84:	6ca0      	ldr	r0, [r4, #72]	; 0x48
  404b86:	62e0      	str	r0, [r4, #44]	; 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
  404b88:	f1c0 0305 	rsb	r3, r0, #5
  404b8c:	61a3      	str	r3, [r4, #24]
					prvAddTaskToReadyList( pxTCB );
  404b8e:	4a0d      	ldr	r2, [pc, #52]	; (404bc4 <xTaskPriorityDisinherit+0xb4>)
  404b90:	6811      	ldr	r1, [r2, #0]
  404b92:	2401      	movs	r4, #1
  404b94:	fa04 f300 	lsl.w	r3, r4, r0
  404b98:	430b      	orrs	r3, r1
  404b9a:	6013      	str	r3, [r2, #0]
  404b9c:	eb00 0080 	add.w	r0, r0, r0, lsl #2
  404ba0:	4629      	mov	r1, r5
  404ba2:	4b07      	ldr	r3, [pc, #28]	; (404bc0 <xTaskPriorityDisinherit+0xb0>)
  404ba4:	eb03 0080 	add.w	r0, r3, r0, lsl #2
  404ba8:	4b07      	ldr	r3, [pc, #28]	; (404bc8 <xTaskPriorityDisinherit+0xb8>)
  404baa:	4798      	blx	r3
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
  404bac:	4620      	mov	r0, r4
  404bae:	bd38      	pop	{r3, r4, r5, pc}
	BaseType_t xReturn = pdFALSE;
  404bb0:	2000      	movs	r0, #0
  404bb2:	4770      	bx	lr
  404bb4:	2000      	movs	r0, #0
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
	}
  404bb6:	bd38      	pop	{r3, r4, r5, pc}
  404bb8:	2040c25c 	.word	0x2040c25c
  404bbc:	00403425 	.word	0x00403425
  404bc0:	2040c268 	.word	0x2040c268
  404bc4:	2040c2e0 	.word	0x2040c2e0
  404bc8:	004033d9 	.word	0x004033d9

00404bcc <pvTaskIncrementMutexHeldCount>:

	void *pvTaskIncrementMutexHeldCount( void )
	{
		/* If xSemaphoreCreateMutex() is called before any tasks have been created
		then pxCurrentTCB will be NULL. */
		if( pxCurrentTCB != NULL )
  404bcc:	4b05      	ldr	r3, [pc, #20]	; (404be4 <pvTaskIncrementMutexHeldCount+0x18>)
  404bce:	681b      	ldr	r3, [r3, #0]
  404bd0:	b123      	cbz	r3, 404bdc <pvTaskIncrementMutexHeldCount+0x10>
		{
			( pxCurrentTCB->uxMutexesHeld )++;
  404bd2:	4b04      	ldr	r3, [pc, #16]	; (404be4 <pvTaskIncrementMutexHeldCount+0x18>)
  404bd4:	681a      	ldr	r2, [r3, #0]
  404bd6:	6cd3      	ldr	r3, [r2, #76]	; 0x4c
  404bd8:	3301      	adds	r3, #1
  404bda:	64d3      	str	r3, [r2, #76]	; 0x4c
		}

		return pxCurrentTCB;
  404bdc:	4b01      	ldr	r3, [pc, #4]	; (404be4 <pvTaskIncrementMutexHeldCount+0x18>)
  404bde:	6818      	ldr	r0, [r3, #0]
	}
  404be0:	4770      	bx	lr
  404be2:	bf00      	nop
  404be4:	2040c25c 	.word	0x2040c25c

00404be8 <prvInsertTimerInActiveList>:
	return xTimeNow;
}
/*-----------------------------------------------------------*/

static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer, const TickType_t xNextExpiryTime, const TickType_t xTimeNow, const TickType_t xCommandTime )
{
  404be8:	b508      	push	{r3, lr}
BaseType_t xProcessTimerNow = pdFALSE;

	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
  404bea:	6041      	str	r1, [r0, #4]
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
  404bec:	6100      	str	r0, [r0, #16]

	if( xNextExpiryTime <= xTimeNow )
  404bee:	4291      	cmp	r1, r2
  404bf0:	d80c      	bhi.n	404c0c <prvInsertTimerInActiveList+0x24>
	{
		/* Has the expiry time elapsed between the command to start/reset a
		timer was issued, and the time the command was processed? */
		if( ( xTimeNow - xCommandTime ) >= pxTimer->xTimerPeriodInTicks )
  404bf2:	1ad2      	subs	r2, r2, r3
  404bf4:	6983      	ldr	r3, [r0, #24]
  404bf6:	429a      	cmp	r2, r3
  404bf8:	d301      	bcc.n	404bfe <prvInsertTimerInActiveList+0x16>
		{
			/* The time between a command being issued and the command being
			processed actually exceeds the timers period.  */
			xProcessTimerNow = pdTRUE;
  404bfa:	2001      	movs	r0, #1
  404bfc:	bd08      	pop	{r3, pc}
		}
		else
		{
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
  404bfe:	1d01      	adds	r1, r0, #4
  404c00:	4b09      	ldr	r3, [pc, #36]	; (404c28 <prvInsertTimerInActiveList+0x40>)
  404c02:	6818      	ldr	r0, [r3, #0]
  404c04:	4b09      	ldr	r3, [pc, #36]	; (404c2c <prvInsertTimerInActiveList+0x44>)
  404c06:	4798      	blx	r3
BaseType_t xProcessTimerNow = pdFALSE;
  404c08:	2000      	movs	r0, #0
  404c0a:	bd08      	pop	{r3, pc}
		}
	}
	else
	{
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
  404c0c:	429a      	cmp	r2, r3
  404c0e:	d203      	bcs.n	404c18 <prvInsertTimerInActiveList+0x30>
  404c10:	4299      	cmp	r1, r3
  404c12:	d301      	bcc.n	404c18 <prvInsertTimerInActiveList+0x30>
		{
			/* If, since the command was issued, the tick count has overflowed
			but the expiry time has not, then the timer must have already passed
			its expiry time and should be processed immediately. */
			xProcessTimerNow = pdTRUE;
  404c14:	2001      	movs	r0, #1
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
		}
	}

	return xProcessTimerNow;
}
  404c16:	bd08      	pop	{r3, pc}
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
  404c18:	1d01      	adds	r1, r0, #4
  404c1a:	4b05      	ldr	r3, [pc, #20]	; (404c30 <prvInsertTimerInActiveList+0x48>)
  404c1c:	6818      	ldr	r0, [r3, #0]
  404c1e:	4b03      	ldr	r3, [pc, #12]	; (404c2c <prvInsertTimerInActiveList+0x44>)
  404c20:	4798      	blx	r3
BaseType_t xProcessTimerNow = pdFALSE;
  404c22:	2000      	movs	r0, #0
  404c24:	bd08      	pop	{r3, pc}
  404c26:	bf00      	nop
  404c28:	2040c360 	.word	0x2040c360
  404c2c:	004033f1 	.word	0x004033f1
  404c30:	2040c35c 	.word	0x2040c35c

00404c34 <prvCheckForValidListAndQueue>:
	pxOverflowTimerList = pxTemp;
}
/*-----------------------------------------------------------*/

static void prvCheckForValidListAndQueue( void )
{
  404c34:	b570      	push	{r4, r5, r6, lr}
	/* Check that the list from which active timers are referenced, and the
	queue used to communicate with the timer service, have been
	initialised. */
	taskENTER_CRITICAL();
  404c36:	4b15      	ldr	r3, [pc, #84]	; (404c8c <prvCheckForValidListAndQueue+0x58>)
  404c38:	4798      	blx	r3
	{
		if( xTimerQueue == NULL )
  404c3a:	4b15      	ldr	r3, [pc, #84]	; (404c90 <prvCheckForValidListAndQueue+0x5c>)
  404c3c:	681b      	ldr	r3, [r3, #0]
  404c3e:	b113      	cbz	r3, 404c46 <prvCheckForValidListAndQueue+0x12>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
  404c40:	4b14      	ldr	r3, [pc, #80]	; (404c94 <prvCheckForValidListAndQueue+0x60>)
  404c42:	4798      	blx	r3
  404c44:	bd70      	pop	{r4, r5, r6, pc}
			vListInitialise( &xActiveTimerList1 );
  404c46:	4d14      	ldr	r5, [pc, #80]	; (404c98 <prvCheckForValidListAndQueue+0x64>)
  404c48:	4628      	mov	r0, r5
  404c4a:	4e14      	ldr	r6, [pc, #80]	; (404c9c <prvCheckForValidListAndQueue+0x68>)
  404c4c:	47b0      	blx	r6
			vListInitialise( &xActiveTimerList2 );
  404c4e:	4c14      	ldr	r4, [pc, #80]	; (404ca0 <prvCheckForValidListAndQueue+0x6c>)
  404c50:	4620      	mov	r0, r4
  404c52:	47b0      	blx	r6
			pxCurrentTimerList = &xActiveTimerList1;
  404c54:	4b13      	ldr	r3, [pc, #76]	; (404ca4 <prvCheckForValidListAndQueue+0x70>)
  404c56:	601d      	str	r5, [r3, #0]
			pxOverflowTimerList = &xActiveTimerList2;
  404c58:	4b13      	ldr	r3, [pc, #76]	; (404ca8 <prvCheckForValidListAndQueue+0x74>)
  404c5a:	601c      	str	r4, [r3, #0]
			xTimerQueue = xQueueCreate( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, sizeof( DaemonTaskMessage_t ) );
  404c5c:	2200      	movs	r2, #0
  404c5e:	2110      	movs	r1, #16
  404c60:	2005      	movs	r0, #5
  404c62:	4b12      	ldr	r3, [pc, #72]	; (404cac <prvCheckForValidListAndQueue+0x78>)
  404c64:	4798      	blx	r3
  404c66:	4b0a      	ldr	r3, [pc, #40]	; (404c90 <prvCheckForValidListAndQueue+0x5c>)
  404c68:	6018      	str	r0, [r3, #0]
			configASSERT( xTimerQueue );
  404c6a:	b118      	cbz	r0, 404c74 <prvCheckForValidListAndQueue+0x40>
					vQueueAddToRegistry( xTimerQueue, "TmrQ" );
  404c6c:	4910      	ldr	r1, [pc, #64]	; (404cb0 <prvCheckForValidListAndQueue+0x7c>)
  404c6e:	4b11      	ldr	r3, [pc, #68]	; (404cb4 <prvCheckForValidListAndQueue+0x80>)
  404c70:	4798      	blx	r3
  404c72:	e7e5      	b.n	404c40 <prvCheckForValidListAndQueue+0xc>
  404c74:	f04f 0380 	mov.w	r3, #128	; 0x80
  404c78:	b672      	cpsid	i
  404c7a:	f383 8811 	msr	BASEPRI, r3
  404c7e:	f3bf 8f6f 	isb	sy
  404c82:	f3bf 8f4f 	dsb	sy
  404c86:	b662      	cpsie	i
  404c88:	e7fe      	b.n	404c88 <prvCheckForValidListAndQueue+0x54>
  404c8a:	bf00      	nop
  404c8c:	00403509 	.word	0x00403509
  404c90:	2040c390 	.word	0x2040c390
  404c94:	00403555 	.word	0x00403555
  404c98:	2040c364 	.word	0x2040c364
  404c9c:	004033bd 	.word	0x004033bd
  404ca0:	2040c378 	.word	0x2040c378
  404ca4:	2040c35c 	.word	0x2040c35c
  404ca8:	2040c360 	.word	0x2040c360
  404cac:	00403a61 	.word	0x00403a61
  404cb0:	0040c94c 	.word	0x0040c94c
  404cb4:	00403f91 	.word	0x00403f91

00404cb8 <xTimerCreateTimerTask>:
{
  404cb8:	b510      	push	{r4, lr}
  404cba:	b084      	sub	sp, #16
	prvCheckForValidListAndQueue();
  404cbc:	4b0f      	ldr	r3, [pc, #60]	; (404cfc <xTimerCreateTimerTask+0x44>)
  404cbe:	4798      	blx	r3
	if( xTimerQueue != NULL )
  404cc0:	4b0f      	ldr	r3, [pc, #60]	; (404d00 <xTimerCreateTimerTask+0x48>)
  404cc2:	681b      	ldr	r3, [r3, #0]
  404cc4:	b173      	cbz	r3, 404ce4 <xTimerCreateTimerTask+0x2c>
			xReturn = xTaskCreate( prvTimerTask, "Tmr Svc", ( uint16_t ) configTIMER_TASK_STACK_DEPTH, NULL, ( ( UBaseType_t ) configTIMER_TASK_PRIORITY ) | portPRIVILEGE_BIT, NULL);
  404cc6:	2300      	movs	r3, #0
  404cc8:	9303      	str	r3, [sp, #12]
  404cca:	9302      	str	r3, [sp, #8]
  404ccc:	9301      	str	r3, [sp, #4]
  404cce:	2204      	movs	r2, #4
  404cd0:	9200      	str	r2, [sp, #0]
  404cd2:	f44f 7282 	mov.w	r2, #260	; 0x104
  404cd6:	490b      	ldr	r1, [pc, #44]	; (404d04 <xTimerCreateTimerTask+0x4c>)
  404cd8:	480b      	ldr	r0, [pc, #44]	; (404d08 <xTimerCreateTimerTask+0x50>)
  404cda:	4c0c      	ldr	r4, [pc, #48]	; (404d0c <xTimerCreateTimerTask+0x54>)
  404cdc:	47a0      	blx	r4
	configASSERT( xReturn );
  404cde:	b108      	cbz	r0, 404ce4 <xTimerCreateTimerTask+0x2c>
}
  404ce0:	b004      	add	sp, #16
  404ce2:	bd10      	pop	{r4, pc}
  404ce4:	f04f 0380 	mov.w	r3, #128	; 0x80
  404ce8:	b672      	cpsid	i
  404cea:	f383 8811 	msr	BASEPRI, r3
  404cee:	f3bf 8f6f 	isb	sy
  404cf2:	f3bf 8f4f 	dsb	sy
  404cf6:	b662      	cpsie	i
  404cf8:	e7fe      	b.n	404cf8 <xTimerCreateTimerTask+0x40>
  404cfa:	bf00      	nop
  404cfc:	00404c35 	.word	0x00404c35
  404d00:	2040c390 	.word	0x2040c390
  404d04:	0040c954 	.word	0x0040c954
  404d08:	00404e39 	.word	0x00404e39
  404d0c:	004040a1 	.word	0x004040a1

00404d10 <xTimerGenericCommand>:
	configASSERT( xTimer );
  404d10:	b1d8      	cbz	r0, 404d4a <xTimerGenericCommand+0x3a>
{
  404d12:	b530      	push	{r4, r5, lr}
  404d14:	b085      	sub	sp, #20
  404d16:	4615      	mov	r5, r2
  404d18:	4604      	mov	r4, r0
	if( xTimerQueue != NULL )
  404d1a:	4a15      	ldr	r2, [pc, #84]	; (404d70 <xTimerGenericCommand+0x60>)
  404d1c:	6810      	ldr	r0, [r2, #0]
  404d1e:	b320      	cbz	r0, 404d6a <xTimerGenericCommand+0x5a>
  404d20:	461a      	mov	r2, r3
		xMessage.xMessageID = xCommandID;
  404d22:	9100      	str	r1, [sp, #0]
		xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
  404d24:	9501      	str	r5, [sp, #4]
		xMessage.u.xTimerParameters.pxTimer = ( Timer_t * ) xTimer;
  404d26:	9402      	str	r4, [sp, #8]
		if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
  404d28:	2905      	cmp	r1, #5
  404d2a:	dc19      	bgt.n	404d60 <xTimerGenericCommand+0x50>
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
  404d2c:	4b11      	ldr	r3, [pc, #68]	; (404d74 <xTimerGenericCommand+0x64>)
  404d2e:	4798      	blx	r3
  404d30:	2802      	cmp	r0, #2
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
  404d32:	f04f 0300 	mov.w	r3, #0
  404d36:	bf0c      	ite	eq
  404d38:	9a08      	ldreq	r2, [sp, #32]
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
  404d3a:	461a      	movne	r2, r3
  404d3c:	4669      	mov	r1, sp
  404d3e:	480c      	ldr	r0, [pc, #48]	; (404d70 <xTimerGenericCommand+0x60>)
  404d40:	6800      	ldr	r0, [r0, #0]
  404d42:	4c0d      	ldr	r4, [pc, #52]	; (404d78 <xTimerGenericCommand+0x68>)
  404d44:	47a0      	blx	r4
}
  404d46:	b005      	add	sp, #20
  404d48:	bd30      	pop	{r4, r5, pc}
  404d4a:	f04f 0380 	mov.w	r3, #128	; 0x80
  404d4e:	b672      	cpsid	i
  404d50:	f383 8811 	msr	BASEPRI, r3
  404d54:	f3bf 8f6f 	isb	sy
  404d58:	f3bf 8f4f 	dsb	sy
  404d5c:	b662      	cpsie	i
  404d5e:	e7fe      	b.n	404d5e <xTimerGenericCommand+0x4e>
			xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
  404d60:	2300      	movs	r3, #0
  404d62:	4669      	mov	r1, sp
  404d64:	4c05      	ldr	r4, [pc, #20]	; (404d7c <xTimerGenericCommand+0x6c>)
  404d66:	47a0      	blx	r4
  404d68:	e7ed      	b.n	404d46 <xTimerGenericCommand+0x36>
BaseType_t xReturn = pdFAIL;
  404d6a:	2000      	movs	r0, #0
	return xReturn;
  404d6c:	e7eb      	b.n	404d46 <xTimerGenericCommand+0x36>
  404d6e:	bf00      	nop
  404d70:	2040c390 	.word	0x2040c390
  404d74:	00404a4d 	.word	0x00404a4d
  404d78:	00403add 	.word	0x00403add
  404d7c:	00403cc1 	.word	0x00403cc1

00404d80 <prvSampleTimeNow>:
{
  404d80:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
  404d84:	b082      	sub	sp, #8
  404d86:	4680      	mov	r8, r0
	xTimeNow = xTaskGetTickCount();
  404d88:	4b24      	ldr	r3, [pc, #144]	; (404e1c <prvSampleTimeNow+0x9c>)
  404d8a:	4798      	blx	r3
  404d8c:	4607      	mov	r7, r0
	if( xTimeNow < xLastTime )
  404d8e:	4b24      	ldr	r3, [pc, #144]	; (404e20 <prvSampleTimeNow+0xa0>)
  404d90:	681b      	ldr	r3, [r3, #0]
  404d92:	4298      	cmp	r0, r3
  404d94:	d31b      	bcc.n	404dce <prvSampleTimeNow+0x4e>
		*pxTimerListsWereSwitched = pdFALSE;
  404d96:	2300      	movs	r3, #0
  404d98:	f8c8 3000 	str.w	r3, [r8]
	xLastTime = xTimeNow;
  404d9c:	4b20      	ldr	r3, [pc, #128]	; (404e20 <prvSampleTimeNow+0xa0>)
  404d9e:	601f      	str	r7, [r3, #0]
}
  404da0:	4638      	mov	r0, r7
  404da2:	b002      	add	sp, #8
  404da4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
  404da8:	2100      	movs	r1, #0
  404daa:	9100      	str	r1, [sp, #0]
  404dac:	460b      	mov	r3, r1
  404dae:	4652      	mov	r2, sl
  404db0:	4620      	mov	r0, r4
  404db2:	4c1c      	ldr	r4, [pc, #112]	; (404e24 <prvSampleTimeNow+0xa4>)
  404db4:	47a0      	blx	r4
				configASSERT( xResult );
  404db6:	b960      	cbnz	r0, 404dd2 <prvSampleTimeNow+0x52>
  404db8:	f04f 0380 	mov.w	r3, #128	; 0x80
  404dbc:	b672      	cpsid	i
  404dbe:	f383 8811 	msr	BASEPRI, r3
  404dc2:	f3bf 8f6f 	isb	sy
  404dc6:	f3bf 8f4f 	dsb	sy
  404dca:	b662      	cpsie	i
  404dcc:	e7fe      	b.n	404dcc <prvSampleTimeNow+0x4c>
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
  404dce:	4d16      	ldr	r5, [pc, #88]	; (404e28 <prvSampleTimeNow+0xa8>)
		( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
  404dd0:	4e16      	ldr	r6, [pc, #88]	; (404e2c <prvSampleTimeNow+0xac>)
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
  404dd2:	682b      	ldr	r3, [r5, #0]
  404dd4:	681a      	ldr	r2, [r3, #0]
  404dd6:	b1c2      	cbz	r2, 404e0a <prvSampleTimeNow+0x8a>
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
  404dd8:	68db      	ldr	r3, [r3, #12]
  404dda:	f8d3 a000 	ldr.w	sl, [r3]
		pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList );
  404dde:	68dc      	ldr	r4, [r3, #12]
		( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
  404de0:	f104 0904 	add.w	r9, r4, #4
  404de4:	4648      	mov	r0, r9
  404de6:	47b0      	blx	r6
		pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
  404de8:	6a63      	ldr	r3, [r4, #36]	; 0x24
  404dea:	4620      	mov	r0, r4
  404dec:	4798      	blx	r3
		if( pxTimer->uxAutoReload == ( UBaseType_t ) pdTRUE )
  404dee:	69e3      	ldr	r3, [r4, #28]
  404df0:	2b01      	cmp	r3, #1
  404df2:	d1ee      	bne.n	404dd2 <prvSampleTimeNow+0x52>
			xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
  404df4:	69a3      	ldr	r3, [r4, #24]
  404df6:	4453      	add	r3, sl
			if( xReloadTime > xNextExpireTime )
  404df8:	459a      	cmp	sl, r3
  404dfa:	d2d5      	bcs.n	404da8 <prvSampleTimeNow+0x28>
				listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
  404dfc:	6063      	str	r3, [r4, #4]
				listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
  404dfe:	6124      	str	r4, [r4, #16]
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
  404e00:	4649      	mov	r1, r9
  404e02:	6828      	ldr	r0, [r5, #0]
  404e04:	4b0a      	ldr	r3, [pc, #40]	; (404e30 <prvSampleTimeNow+0xb0>)
  404e06:	4798      	blx	r3
  404e08:	e7e3      	b.n	404dd2 <prvSampleTimeNow+0x52>
	pxCurrentTimerList = pxOverflowTimerList;
  404e0a:	4a0a      	ldr	r2, [pc, #40]	; (404e34 <prvSampleTimeNow+0xb4>)
  404e0c:	6810      	ldr	r0, [r2, #0]
  404e0e:	4906      	ldr	r1, [pc, #24]	; (404e28 <prvSampleTimeNow+0xa8>)
  404e10:	6008      	str	r0, [r1, #0]
	pxOverflowTimerList = pxTemp;
  404e12:	6013      	str	r3, [r2, #0]
		*pxTimerListsWereSwitched = pdTRUE;
  404e14:	2301      	movs	r3, #1
  404e16:	f8c8 3000 	str.w	r3, [r8]
  404e1a:	e7bf      	b.n	404d9c <prvSampleTimeNow+0x1c>
  404e1c:	00404371 	.word	0x00404371
  404e20:	2040c38c 	.word	0x2040c38c
  404e24:	00404d11 	.word	0x00404d11
  404e28:	2040c35c 	.word	0x2040c35c
  404e2c:	00403425 	.word	0x00403425
  404e30:	004033f1 	.word	0x004033f1
  404e34:	2040c360 	.word	0x2040c360

00404e38 <prvTimerTask>:
{
  404e38:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
  404e3c:	b088      	sub	sp, #32
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
  404e3e:	4e75      	ldr	r6, [pc, #468]	; (405014 <prvTimerTask+0x1dc>)
	vTaskSuspendAll();
  404e40:	4f75      	ldr	r7, [pc, #468]	; (405018 <prvTimerTask+0x1e0>)
					portYIELD_WITHIN_API();
  404e42:	f8df 91fc 	ldr.w	r9, [pc, #508]	; 405040 <prvTimerTask+0x208>
	( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
  404e46:	f8df 81fc 	ldr.w	r8, [pc, #508]	; 405044 <prvTimerTask+0x20c>
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
  404e4a:	6833      	ldr	r3, [r6, #0]
	if( *pxListWasEmpty == pdFALSE )
  404e4c:	681a      	ldr	r2, [r3, #0]
  404e4e:	2a00      	cmp	r2, #0
  404e50:	f000 80ce 	beq.w	404ff0 <prvTimerTask+0x1b8>
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
  404e54:	68db      	ldr	r3, [r3, #12]
  404e56:	681c      	ldr	r4, [r3, #0]
	vTaskSuspendAll();
  404e58:	47b8      	blx	r7
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
  404e5a:	a804      	add	r0, sp, #16
  404e5c:	4b6f      	ldr	r3, [pc, #444]	; (40501c <prvTimerTask+0x1e4>)
  404e5e:	4798      	blx	r3
  404e60:	4605      	mov	r5, r0
		if( xTimerListsWereSwitched == pdFALSE )
  404e62:	9b04      	ldr	r3, [sp, #16]
  404e64:	2b00      	cmp	r3, #0
  404e66:	d144      	bne.n	404ef2 <prvTimerTask+0xba>
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
  404e68:	42a0      	cmp	r0, r4
  404e6a:	d212      	bcs.n	404e92 <prvTimerTask+0x5a>
  404e6c:	2200      	movs	r2, #0
				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
  404e6e:	1b61      	subs	r1, r4, r5
  404e70:	4b6b      	ldr	r3, [pc, #428]	; (405020 <prvTimerTask+0x1e8>)
  404e72:	6818      	ldr	r0, [r3, #0]
  404e74:	4b6b      	ldr	r3, [pc, #428]	; (405024 <prvTimerTask+0x1ec>)
  404e76:	4798      	blx	r3
				if( xTaskResumeAll() == pdFALSE )
  404e78:	4b6b      	ldr	r3, [pc, #428]	; (405028 <prvTimerTask+0x1f0>)
  404e7a:	4798      	blx	r3
  404e7c:	2800      	cmp	r0, #0
  404e7e:	d13a      	bne.n	404ef6 <prvTimerTask+0xbe>
					portYIELD_WITHIN_API();
  404e80:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
  404e84:	f8c9 3000 	str.w	r3, [r9]
  404e88:	f3bf 8f4f 	dsb	sy
  404e8c:	f3bf 8f6f 	isb	sy
  404e90:	e031      	b.n	404ef6 <prvTimerTask+0xbe>
				( void ) xTaskResumeAll();
  404e92:	4b65      	ldr	r3, [pc, #404]	; (405028 <prvTimerTask+0x1f0>)
  404e94:	4798      	blx	r3
Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList );
  404e96:	6833      	ldr	r3, [r6, #0]
  404e98:	68db      	ldr	r3, [r3, #12]
  404e9a:	f8d3 a00c 	ldr.w	sl, [r3, #12]
	( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
  404e9e:	f10a 0004 	add.w	r0, sl, #4
  404ea2:	47c0      	blx	r8
	if( pxTimer->uxAutoReload == ( UBaseType_t ) pdTRUE )
  404ea4:	f8da 301c 	ldr.w	r3, [sl, #28]
  404ea8:	2b01      	cmp	r3, #1
  404eaa:	d004      	beq.n	404eb6 <prvTimerTask+0x7e>
	pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
  404eac:	f8da 3024 	ldr.w	r3, [sl, #36]	; 0x24
  404eb0:	4650      	mov	r0, sl
  404eb2:	4798      	blx	r3
  404eb4:	e01f      	b.n	404ef6 <prvTimerTask+0xbe>
		if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) == pdTRUE )
  404eb6:	f8da 1018 	ldr.w	r1, [sl, #24]
  404eba:	4623      	mov	r3, r4
  404ebc:	462a      	mov	r2, r5
  404ebe:	4421      	add	r1, r4
  404ec0:	4650      	mov	r0, sl
  404ec2:	4d5a      	ldr	r5, [pc, #360]	; (40502c <prvTimerTask+0x1f4>)
  404ec4:	47a8      	blx	r5
  404ec6:	2801      	cmp	r0, #1
  404ec8:	d1f0      	bne.n	404eac <prvTimerTask+0x74>
			xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
  404eca:	2100      	movs	r1, #0
  404ecc:	9100      	str	r1, [sp, #0]
  404ece:	460b      	mov	r3, r1
  404ed0:	4622      	mov	r2, r4
  404ed2:	4650      	mov	r0, sl
  404ed4:	4c56      	ldr	r4, [pc, #344]	; (405030 <prvTimerTask+0x1f8>)
  404ed6:	47a0      	blx	r4
			configASSERT( xResult );
  404ed8:	2800      	cmp	r0, #0
  404eda:	d1e7      	bne.n	404eac <prvTimerTask+0x74>
  404edc:	f04f 0380 	mov.w	r3, #128	; 0x80
  404ee0:	b672      	cpsid	i
  404ee2:	f383 8811 	msr	BASEPRI, r3
  404ee6:	f3bf 8f6f 	isb	sy
  404eea:	f3bf 8f4f 	dsb	sy
  404eee:	b662      	cpsie	i
  404ef0:	e7fe      	b.n	404ef0 <prvTimerTask+0xb8>
			( void ) xTaskResumeAll();
  404ef2:	4b4d      	ldr	r3, [pc, #308]	; (405028 <prvTimerTask+0x1f0>)
  404ef4:	4798      	blx	r3
	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
  404ef6:	4d4a      	ldr	r5, [pc, #296]	; (405020 <prvTimerTask+0x1e8>)
  404ef8:	4c4e      	ldr	r4, [pc, #312]	; (405034 <prvTimerTask+0x1fc>)
  404efa:	e006      	b.n	404f0a <prvTimerTask+0xd2>
				pxCallback->pxCallbackFunction( pxCallback->pvParameter1, pxCallback->ulParameter2 );
  404efc:	9907      	ldr	r1, [sp, #28]
  404efe:	9806      	ldr	r0, [sp, #24]
  404f00:	9b05      	ldr	r3, [sp, #20]
  404f02:	4798      	blx	r3
		if( xMessage.xMessageID >= ( BaseType_t ) 0 )
  404f04:	9b04      	ldr	r3, [sp, #16]
  404f06:	2b00      	cmp	r3, #0
  404f08:	da09      	bge.n	404f1e <prvTimerTask+0xe6>
	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
  404f0a:	2300      	movs	r3, #0
  404f0c:	461a      	mov	r2, r3
  404f0e:	a904      	add	r1, sp, #16
  404f10:	6828      	ldr	r0, [r5, #0]
  404f12:	47a0      	blx	r4
  404f14:	2800      	cmp	r0, #0
  404f16:	d098      	beq.n	404e4a <prvTimerTask+0x12>
			if( xMessage.xMessageID < ( BaseType_t ) 0 )
  404f18:	9b04      	ldr	r3, [sp, #16]
  404f1a:	2b00      	cmp	r3, #0
  404f1c:	dbee      	blt.n	404efc <prvTimerTask+0xc4>
			pxTimer = xMessage.u.xTimerParameters.pxTimer;
  404f1e:	f8dd a018 	ldr.w	sl, [sp, #24]
			if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE )
  404f22:	f8da 3014 	ldr.w	r3, [sl, #20]
  404f26:	b113      	cbz	r3, 404f2e <prvTimerTask+0xf6>
				( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
  404f28:	f10a 0004 	add.w	r0, sl, #4
  404f2c:	47c0      	blx	r8
			xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
  404f2e:	a803      	add	r0, sp, #12
  404f30:	4b3a      	ldr	r3, [pc, #232]	; (40501c <prvTimerTask+0x1e4>)
  404f32:	4798      	blx	r3
			switch( xMessage.xMessageID )
  404f34:	9b04      	ldr	r3, [sp, #16]
  404f36:	2b09      	cmp	r3, #9
  404f38:	d8e7      	bhi.n	404f0a <prvTimerTask+0xd2>
  404f3a:	a201      	add	r2, pc, #4	; (adr r2, 404f40 <prvTimerTask+0x108>)
  404f3c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
  404f40:	00404f69 	.word	0x00404f69
  404f44:	00404f69 	.word	0x00404f69
  404f48:	00404f69 	.word	0x00404f69
  404f4c:	00404f0b 	.word	0x00404f0b
  404f50:	00404fbd 	.word	0x00404fbd
  404f54:	00404fe9 	.word	0x00404fe9
  404f58:	00404f69 	.word	0x00404f69
  404f5c:	00404f69 	.word	0x00404f69
  404f60:	00404f0b 	.word	0x00404f0b
  404f64:	00404fbd 	.word	0x00404fbd
					if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) == pdTRUE )
  404f68:	9c05      	ldr	r4, [sp, #20]
  404f6a:	f8da 1018 	ldr.w	r1, [sl, #24]
  404f6e:	4623      	mov	r3, r4
  404f70:	4602      	mov	r2, r0
  404f72:	4421      	add	r1, r4
  404f74:	4650      	mov	r0, sl
  404f76:	4c2d      	ldr	r4, [pc, #180]	; (40502c <prvTimerTask+0x1f4>)
  404f78:	47a0      	blx	r4
  404f7a:	2801      	cmp	r0, #1
  404f7c:	d1bc      	bne.n	404ef8 <prvTimerTask+0xc0>
						pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
  404f7e:	f8da 3024 	ldr.w	r3, [sl, #36]	; 0x24
  404f82:	4650      	mov	r0, sl
  404f84:	4798      	blx	r3
						if( pxTimer->uxAutoReload == ( UBaseType_t ) pdTRUE )
  404f86:	f8da 301c 	ldr.w	r3, [sl, #28]
  404f8a:	2b01      	cmp	r3, #1
  404f8c:	d1b4      	bne.n	404ef8 <prvTimerTask+0xc0>
							xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
  404f8e:	f8da 2018 	ldr.w	r2, [sl, #24]
  404f92:	2100      	movs	r1, #0
  404f94:	9100      	str	r1, [sp, #0]
  404f96:	460b      	mov	r3, r1
  404f98:	9805      	ldr	r0, [sp, #20]
  404f9a:	4402      	add	r2, r0
  404f9c:	4650      	mov	r0, sl
  404f9e:	4c24      	ldr	r4, [pc, #144]	; (405030 <prvTimerTask+0x1f8>)
  404fa0:	47a0      	blx	r4
							configASSERT( xResult );
  404fa2:	2800      	cmp	r0, #0
  404fa4:	d1a8      	bne.n	404ef8 <prvTimerTask+0xc0>
  404fa6:	f04f 0380 	mov.w	r3, #128	; 0x80
  404faa:	b672      	cpsid	i
  404fac:	f383 8811 	msr	BASEPRI, r3
  404fb0:	f3bf 8f6f 	isb	sy
  404fb4:	f3bf 8f4f 	dsb	sy
  404fb8:	b662      	cpsie	i
  404fba:	e7fe      	b.n	404fba <prvTimerTask+0x182>
					pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
  404fbc:	9905      	ldr	r1, [sp, #20]
  404fbe:	f8ca 1018 	str.w	r1, [sl, #24]
					configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
  404fc2:	b131      	cbz	r1, 404fd2 <prvTimerTask+0x19a>
					( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
  404fc4:	4603      	mov	r3, r0
  404fc6:	4602      	mov	r2, r0
  404fc8:	4401      	add	r1, r0
  404fca:	4650      	mov	r0, sl
  404fcc:	4c17      	ldr	r4, [pc, #92]	; (40502c <prvTimerTask+0x1f4>)
  404fce:	47a0      	blx	r4
  404fd0:	e792      	b.n	404ef8 <prvTimerTask+0xc0>
  404fd2:	f04f 0380 	mov.w	r3, #128	; 0x80
  404fd6:	b672      	cpsid	i
  404fd8:	f383 8811 	msr	BASEPRI, r3
  404fdc:	f3bf 8f6f 	isb	sy
  404fe0:	f3bf 8f4f 	dsb	sy
  404fe4:	b662      	cpsie	i
  404fe6:	e7fe      	b.n	404fe6 <prvTimerTask+0x1ae>
					vPortFree( pxTimer );
  404fe8:	4650      	mov	r0, sl
  404fea:	4b13      	ldr	r3, [pc, #76]	; (405038 <prvTimerTask+0x200>)
  404fec:	4798      	blx	r3
  404fee:	e783      	b.n	404ef8 <prvTimerTask+0xc0>
	vTaskSuspendAll();
  404ff0:	47b8      	blx	r7
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
  404ff2:	a804      	add	r0, sp, #16
  404ff4:	4b09      	ldr	r3, [pc, #36]	; (40501c <prvTimerTask+0x1e4>)
  404ff6:	4798      	blx	r3
  404ff8:	4605      	mov	r5, r0
		if( xTimerListsWereSwitched == pdFALSE )
  404ffa:	9b04      	ldr	r3, [sp, #16]
  404ffc:	2b00      	cmp	r3, #0
  404ffe:	f47f af78 	bne.w	404ef2 <prvTimerTask+0xba>
					xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
  405002:	4b0e      	ldr	r3, [pc, #56]	; (40503c <prvTimerTask+0x204>)
  405004:	681b      	ldr	r3, [r3, #0]
  405006:	681a      	ldr	r2, [r3, #0]
  405008:	fab2 f282 	clz	r2, r2
  40500c:	0952      	lsrs	r2, r2, #5
  40500e:	2400      	movs	r4, #0
  405010:	e72d      	b.n	404e6e <prvTimerTask+0x36>
  405012:	bf00      	nop
  405014:	2040c35c 	.word	0x2040c35c
  405018:	00404361 	.word	0x00404361
  40501c:	00404d81 	.word	0x00404d81
  405020:	2040c390 	.word	0x2040c390
  405024:	00403fc5 	.word	0x00403fc5
  405028:	004044c9 	.word	0x004044c9
  40502c:	00404be9 	.word	0x00404be9
  405030:	00404d11 	.word	0x00404d11
  405034:	00403dc1 	.word	0x00403dc1
  405038:	004037d5 	.word	0x004037d5
  40503c:	2040c360 	.word	0x2040c360
  405040:	e000ed04 	.word	0xe000ed04
  405044:	00403425 	.word	0x00403425

00405048 <chip_isr>:

static tpfNmBspIsr gpfIsr;

static void chip_isr(uint32_t id, uint32_t mask)
{
	if ((id == CONF_WINC_SPI_INT_PIO_ID) && (mask == CONF_WINC_SPI_INT_MASK)) {
  405048:	2810      	cmp	r0, #16
  40504a:	d108      	bne.n	40505e <chip_isr+0x16>
  40504c:	f1b1 5f80 	cmp.w	r1, #268435456	; 0x10000000
  405050:	d105      	bne.n	40505e <chip_isr+0x16>
{
  405052:	b508      	push	{r3, lr}
		if (gpfIsr) {
  405054:	4b02      	ldr	r3, [pc, #8]	; (405060 <chip_isr+0x18>)
  405056:	681b      	ldr	r3, [r3, #0]
  405058:	b103      	cbz	r3, 40505c <chip_isr+0x14>
			gpfIsr();
  40505a:	4798      	blx	r3
  40505c:	bd08      	pop	{r3, pc}
  40505e:	4770      	bx	lr
  405060:	2040c394 	.word	0x2040c394

00405064 <nm_bsp_sleep>:
*	@param[IN]	u32TimeMsec
*				Time in milliseconds
*/
void nm_bsp_sleep(uint32 u32TimeMsec)
{
	while(u32TimeMsec--) {
  405064:	b150      	cbz	r0, 40507c <nm_bsp_sleep+0x18>
{
  405066:	b570      	push	{r4, r5, r6, lr}
  405068:	1e44      	subs	r4, r0, #1
		delay_ms(4);
  40506a:	4e05      	ldr	r6, [pc, #20]	; (405080 <nm_bsp_sleep+0x1c>)
  40506c:	4d05      	ldr	r5, [pc, #20]	; (405084 <nm_bsp_sleep+0x20>)
  40506e:	4630      	mov	r0, r6
  405070:	47a8      	blx	r5
	while(u32TimeMsec--) {
  405072:	3c01      	subs	r4, #1
  405074:	f1b4 3fff 	cmp.w	r4, #4294967295
  405078:	d1f9      	bne.n	40506e <nm_bsp_sleep+0xa>
  40507a:	bd70      	pop	{r4, r5, r6, pc}
  40507c:	4770      	bx	lr
  40507e:	bf00      	nop
  405080:	00031635 	.word	0x00031635
  405084:	20400001 	.word	0x20400001

00405088 <nm_bsp_reset>:
{
  405088:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
		base->PIO_CODR = arch_ioport_pin_to_mask(pin);
  40508c:	4f09      	ldr	r7, [pc, #36]	; (4050b4 <nm_bsp_reset+0x2c>)
  40508e:	f44f 3800 	mov.w	r8, #131072	; 0x20000
  405092:	f8c7 8034 	str.w	r8, [r7, #52]	; 0x34
  405096:	4d08      	ldr	r5, [pc, #32]	; (4050b8 <nm_bsp_reset+0x30>)
  405098:	2608      	movs	r6, #8
  40509a:	636e      	str	r6, [r5, #52]	; 0x34
	nm_bsp_sleep(100);
  40509c:	2064      	movs	r0, #100	; 0x64
  40509e:	4c07      	ldr	r4, [pc, #28]	; (4050bc <nm_bsp_reset+0x34>)
  4050a0:	47a0      	blx	r4
		base->PIO_SODR = arch_ioport_pin_to_mask(pin);
  4050a2:	f8c7 8030 	str.w	r8, [r7, #48]	; 0x30
	nm_bsp_sleep(100);
  4050a6:	2064      	movs	r0, #100	; 0x64
  4050a8:	47a0      	blx	r4
  4050aa:	632e      	str	r6, [r5, #48]	; 0x30
	nm_bsp_sleep(100);
  4050ac:	2064      	movs	r0, #100	; 0x64
  4050ae:	47a0      	blx	r4
  4050b0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  4050b4:	400e1200 	.word	0x400e1200
  4050b8:	400e1000 	.word	0x400e1000
  4050bc:	00405065 	.word	0x00405065

004050c0 <nm_bsp_init>:
{
  4050c0:	b510      	push	{r4, lr}
	gpfIsr = NULL;
  4050c2:	2200      	movs	r2, #0
  4050c4:	4b14      	ldr	r3, [pc, #80]	; (405118 <nm_bsp_init+0x58>)
  4050c6:	601a      	str	r2, [r3, #0]
 *
 * \param ul_id Id (number) of the peripheral clock.
 */
static inline void sysclk_enable_peripheral_clock(uint32_t ul_id)
{
	pmc_enable_periph_clk(ul_id);
  4050c8:	200a      	movs	r0, #10
  4050ca:	4c14      	ldr	r4, [pc, #80]	; (40511c <nm_bsp_init+0x5c>)
  4050cc:	47a0      	blx	r4
  4050ce:	200b      	movs	r0, #11
  4050d0:	47a0      	blx	r4
  4050d2:	200c      	movs	r0, #12
  4050d4:	47a0      	blx	r4
  4050d6:	2010      	movs	r0, #16
  4050d8:	47a0      	blx	r4
  4050da:	2011      	movs	r0, #17
  4050dc:	47a0      	blx	r4
		base->PIO_OER = arch_ioport_pin_to_mask(pin);
  4050de:	4b10      	ldr	r3, [pc, #64]	; (405120 <nm_bsp_init+0x60>)
  4050e0:	2208      	movs	r2, #8
  4050e2:	611a      	str	r2, [r3, #16]
	base->PIO_OWER = arch_ioport_pin_to_mask(pin);
  4050e4:	f8c3 20a0 	str.w	r2, [r3, #160]	; 0xa0
		base->PIO_SODR = arch_ioport_pin_to_mask(pin);
  4050e8:	631a      	str	r2, [r3, #48]	; 0x30
		base->PIO_OER = arch_ioport_pin_to_mask(pin);
  4050ea:	4a0e      	ldr	r2, [pc, #56]	; (405124 <nm_bsp_init+0x64>)
  4050ec:	f44f 3100 	mov.w	r1, #131072	; 0x20000
  4050f0:	6111      	str	r1, [r2, #16]
	base->PIO_OWER = arch_ioport_pin_to_mask(pin);
  4050f2:	f8c2 10a0 	str.w	r1, [r2, #160]	; 0xa0
		base->PIO_SODR = arch_ioport_pin_to_mask(pin);
  4050f6:	6311      	str	r1, [r2, #48]	; 0x30
		base->PIO_OER = arch_ioport_pin_to_mask(pin);
  4050f8:	2204      	movs	r2, #4
  4050fa:	611a      	str	r2, [r3, #16]
	base->PIO_OWER = arch_ioport_pin_to_mask(pin);
  4050fc:	f8c3 20a0 	str.w	r2, [r3, #160]	; 0xa0
		base->PIO_SODR = arch_ioport_pin_to_mask(pin);
  405100:	631a      	str	r2, [r3, #48]	; 0x30
    if (!(SysTick->CTRL & SysTick_CTRL_ENABLE_Msk && SysTick->CTRL & SysTick_CTRL_TICKINT_Msk)) {
  405102:	4b09      	ldr	r3, [pc, #36]	; (405128 <nm_bsp_init+0x68>)
  405104:	681b      	ldr	r3, [r3, #0]
  405106:	f013 0f01 	tst.w	r3, #1
  40510a:	d001      	beq.n	405110 <nm_bsp_init+0x50>
  40510c:	4b06      	ldr	r3, [pc, #24]	; (405128 <nm_bsp_init+0x68>)
  40510e:	681b      	ldr	r3, [r3, #0]
	nm_bsp_reset();
  405110:	4b06      	ldr	r3, [pc, #24]	; (40512c <nm_bsp_init+0x6c>)
  405112:	4798      	blx	r3
}
  405114:	2000      	movs	r0, #0
  405116:	bd10      	pop	{r4, pc}
  405118:	2040c394 	.word	0x2040c394
  40511c:	00408515 	.word	0x00408515
  405120:	400e1000 	.word	0x400e1000
  405124:	400e1200 	.word	0x400e1200
  405128:	e000e010 	.word	0xe000e010
  40512c:	00405089 	.word	0x00405089

00405130 <nm_bsp_register_isr>:
*	@brief	Register interrupt service routine
*	@param[IN]	pfIsr
*				Pointer to ISR handler
*/
void nm_bsp_register_isr(tpfNmBspIsr pfIsr)
{
  405130:	b530      	push	{r4, r5, lr}
  405132:	b083      	sub	sp, #12
	gpfIsr = pfIsr;
  405134:	4b14      	ldr	r3, [pc, #80]	; (405188 <nm_bsp_register_isr+0x58>)
  405136:	6018      	str	r0, [r3, #0]

	/* Configure PGIO pin for interrupt from SPI slave, used when slave has data to send. */
	pmc_enable_periph_clk(CONF_WINC_SPI_INT_PIO_ID);
  405138:	2010      	movs	r0, #16
  40513a:	4b14      	ldr	r3, [pc, #80]	; (40518c <nm_bsp_register_isr+0x5c>)
  40513c:	4798      	blx	r3
	pio_configure_pin(CONF_WINC_SPI_INT_PIN, PIO_TYPE_PIO_INPUT);
  40513e:	f04f 5120 	mov.w	r1, #671088640	; 0x28000000
  405142:	207c      	movs	r0, #124	; 0x7c
  405144:	4b12      	ldr	r3, [pc, #72]	; (405190 <nm_bsp_register_isr+0x60>)
  405146:	4798      	blx	r3
	pio_pull_up(CONF_WINC_SPI_INT_PIO, CONF_WINC_SPI_INT_MASK, PIO_PULLUP);
  405148:	4c12      	ldr	r4, [pc, #72]	; (405194 <nm_bsp_register_isr+0x64>)
  40514a:	2201      	movs	r2, #1
  40514c:	f04f 5180 	mov.w	r1, #268435456	; 0x10000000
  405150:	4620      	mov	r0, r4
  405152:	4b11      	ldr	r3, [pc, #68]	; (405198 <nm_bsp_register_isr+0x68>)
  405154:	4798      	blx	r3
	/*Interrupt on falling edge*/
	pio_handler_set(CONF_WINC_SPI_INT_PIO, CONF_WINC_SPI_INT_PIO_ID,
  405156:	4b11      	ldr	r3, [pc, #68]	; (40519c <nm_bsp_register_isr+0x6c>)
  405158:	9300      	str	r3, [sp, #0]
  40515a:	2351      	movs	r3, #81	; 0x51
  40515c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
  405160:	2110      	movs	r1, #16
  405162:	4620      	mov	r0, r4
  405164:	4d0e      	ldr	r5, [pc, #56]	; (4051a0 <nm_bsp_register_isr+0x70>)
  405166:	47a8      	blx	r5
	CONF_WINC_SPI_INT_MASK, PIO_PULLUP | PIO_IT_FALL_EDGE, chip_isr);
	pio_enable_interrupt(CONF_WINC_SPI_INT_PIO, CONF_WINC_SPI_INT_MASK);
  405168:	f04f 5180 	mov.w	r1, #268435456	; 0x10000000
  40516c:	4620      	mov	r0, r4
  40516e:	4b0d      	ldr	r3, [pc, #52]	; (4051a4 <nm_bsp_register_isr+0x74>)
  405170:	4798      	blx	r3
  NVIC->ISER[(uint32_t)((int32_t)IRQn) >> 5] = (uint32_t)(1 << ((uint32_t)((int32_t)IRQn) & (uint32_t)0x1F)); /* enable interrupt */
  405172:	f44f 3280 	mov.w	r2, #65536	; 0x10000
  405176:	4b0c      	ldr	r3, [pc, #48]	; (4051a8 <nm_bsp_register_isr+0x78>)
  405178:	601a      	str	r2, [r3, #0]
	NVIC_EnableIRQ((IRQn_Type) CONF_WINC_SPI_INT_PIO_ID);
	pio_handler_set_priority(CONF_WINC_SPI_INT_PIO, (IRQn_Type)CONF_WINC_SPI_INT_PIO_ID,
  40517a:	2200      	movs	r2, #0
  40517c:	2110      	movs	r1, #16
  40517e:	4620      	mov	r0, r4
  405180:	4b0a      	ldr	r3, [pc, #40]	; (4051ac <nm_bsp_register_isr+0x7c>)
  405182:	4798      	blx	r3
			CONF_WINC_SPI_INT_PRIORITY);
}
  405184:	b003      	add	sp, #12
  405186:	bd30      	pop	{r4, r5, pc}
  405188:	2040c394 	.word	0x2040c394
  40518c:	00408515 	.word	0x00408515
  405190:	0040811d 	.word	0x0040811d
  405194:	400e1400 	.word	0x400e1400
  405198:	00407fe1 	.word	0x00407fe1
  40519c:	00405049 	.word	0x00405049
  4051a0:	0040829d 	.word	0x0040829d
  4051a4:	0040810d 	.word	0x0040810d
  4051a8:	e000e100 	.word	0xe000e100
  4051ac:	00408371 	.word	0x00408371

004051b0 <nm_bsp_interrupt_ctrl>:
*	@brief	Enable/Disable interrupts
*	@param[IN]	u8Enable
*				'0' disable interrupts. '1' enable interrupts
*/
void nm_bsp_interrupt_ctrl(uint8 u8Enable)
{
  4051b0:	b508      	push	{r3, lr}
	if (u8Enable) {
  4051b2:	b928      	cbnz	r0, 4051c0 <nm_bsp_interrupt_ctrl+0x10>
		pio_enable_interrupt(CONF_WINC_SPI_INT_PIO, CONF_WINC_SPI_INT_MASK);
	}
	else {
		pio_disable_interrupt(CONF_WINC_SPI_INT_PIO, CONF_WINC_SPI_INT_MASK);
  4051b4:	f04f 5180 	mov.w	r1, #268435456	; 0x10000000
  4051b8:	4804      	ldr	r0, [pc, #16]	; (4051cc <nm_bsp_interrupt_ctrl+0x1c>)
  4051ba:	4b05      	ldr	r3, [pc, #20]	; (4051d0 <nm_bsp_interrupt_ctrl+0x20>)
  4051bc:	4798      	blx	r3
  4051be:	bd08      	pop	{r3, pc}
		pio_enable_interrupt(CONF_WINC_SPI_INT_PIO, CONF_WINC_SPI_INT_MASK);
  4051c0:	f04f 5180 	mov.w	r1, #268435456	; 0x10000000
  4051c4:	4801      	ldr	r0, [pc, #4]	; (4051cc <nm_bsp_interrupt_ctrl+0x1c>)
  4051c6:	4b03      	ldr	r3, [pc, #12]	; (4051d4 <nm_bsp_interrupt_ctrl+0x24>)
  4051c8:	4798      	blx	r3
  4051ca:	bd08      	pop	{r3, pc}
  4051cc:	400e1400 	.word	0x400e1400
  4051d0:	00408111 	.word	0x00408111
  4051d4:	0040810d 	.word	0x0040810d

004051d8 <nm_bus_init>:
 *	@fn		nm_bus_init
 *	@brief	Initialize the bus wrapper
 *	@return	M2M_SUCCESS in case of success and M2M_ERR_BUS_FAIL in case of failure
 */
sint8 nm_bus_init(void *pvinit)
{
  4051d8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
		base->PIO_PUDR = mask;
  4051da:	4c39      	ldr	r4, [pc, #228]	; (4052c0 <nm_bus_init+0xe8>)
  4051dc:	f44f 1180 	mov.w	r1, #1048576	; 0x100000
  4051e0:	6621      	str	r1, [r4, #96]	; 0x60
		base->PIO_PPDDR = mask;
  4051e2:	f8c4 1090 	str.w	r1, [r4, #144]	; 0x90
		base->PIO_MDDR = mask;
  4051e6:	6561      	str	r1, [r4, #84]	; 0x54
		base->PIO_IFDR = mask;
  4051e8:	6261      	str	r1, [r4, #36]	; 0x24
		base->PIO_IFSCDR = mask;
  4051ea:	f8c4 1080 	str.w	r1, [r4, #128]	; 0x80
		base->PIO_ABCDSR[0] |= mask;
  4051ee:	6f23      	ldr	r3, [r4, #112]	; 0x70
  4051f0:	430b      	orrs	r3, r1
  4051f2:	6723      	str	r3, [r4, #112]	; 0x70
		base->PIO_ABCDSR[1] &= ~mask;
  4051f4:	6f63      	ldr	r3, [r4, #116]	; 0x74
  4051f6:	f423 1380 	bic.w	r3, r3, #1048576	; 0x100000
  4051fa:	6763      	str	r3, [r4, #116]	; 0x74
		base->PIO_PUDR = mask;
  4051fc:	f44f 1200 	mov.w	r2, #2097152	; 0x200000
  405200:	6622      	str	r2, [r4, #96]	; 0x60
		base->PIO_PPDDR = mask;
  405202:	f8c4 2090 	str.w	r2, [r4, #144]	; 0x90
		base->PIO_MDDR = mask;
  405206:	6562      	str	r2, [r4, #84]	; 0x54
		base->PIO_IFDR = mask;
  405208:	6262      	str	r2, [r4, #36]	; 0x24
		base->PIO_IFSCDR = mask;
  40520a:	f8c4 2080 	str.w	r2, [r4, #128]	; 0x80
		base->PIO_ABCDSR[0] |= mask;
  40520e:	6f23      	ldr	r3, [r4, #112]	; 0x70
  405210:	4313      	orrs	r3, r2
  405212:	6723      	str	r3, [r4, #112]	; 0x70
		base->PIO_ABCDSR[1] &= ~mask;
  405214:	6f63      	ldr	r3, [r4, #116]	; 0x74
  405216:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
  40521a:	6763      	str	r3, [r4, #116]	; 0x74
		base->PIO_PUDR = mask;
  40521c:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
  405220:	6623      	str	r3, [r4, #96]	; 0x60
		base->PIO_PPDDR = mask;
  405222:	f8c4 3090 	str.w	r3, [r4, #144]	; 0x90
		base->PIO_MDDR = mask;
  405226:	6563      	str	r3, [r4, #84]	; 0x54
		base->PIO_IFDR = mask;
  405228:	6263      	str	r3, [r4, #36]	; 0x24
		base->PIO_IFSCDR = mask;
  40522a:	f8c4 3080 	str.w	r3, [r4, #128]	; 0x80
		base->PIO_ABCDSR[0] |= mask;
  40522e:	6f20      	ldr	r0, [r4, #112]	; 0x70
  405230:	4318      	orrs	r0, r3
  405232:	6720      	str	r0, [r4, #112]	; 0x70
		base->PIO_ABCDSR[1] &= ~mask;
  405234:	6f60      	ldr	r0, [r4, #116]	; 0x74
  405236:	f420 0080 	bic.w	r0, r0, #4194304	; 0x400000
  40523a:	6760      	str	r0, [r4, #116]	; 0x74
	arch_ioport_port_to_base(port)->PIO_PDR = mask;
  40523c:	6061      	str	r1, [r4, #4]
  40523e:	6062      	str	r2, [r4, #4]
  405240:	6063      	str	r3, [r4, #4]
  405242:	f04f 7600 	mov.w	r6, #33554432	; 0x2000000
  405246:	6066      	str	r6, [r4, #4]
	ioport_disable_pin(CONF_WINC_SPI_MOSI_GPIO);
	ioport_disable_pin(CONF_WINC_SPI_CLK_GPIO);
	ioport_disable_pin(CONF_WINC_SPI_CS_GPIO);
	
	/* disable CS control by peripheral */
	PIOD->PIO_PER = (1<<25);
  405248:	6026      	str	r6, [r4, #0]
	PIOD->PIO_OER = (1<<25);
  40524a:	6126      	str	r6, [r4, #16]
	SPI_DEASSERT_CS();
  40524c:	6326      	str	r6, [r4, #48]	; 0x30

	spi_enable_clock(CONF_WINC_SPI);
  40524e:	4d1d      	ldr	r5, [pc, #116]	; (4052c4 <nm_bus_init+0xec>)
  405250:	4628      	mov	r0, r5
  405252:	4b1d      	ldr	r3, [pc, #116]	; (4052c8 <nm_bus_init+0xf0>)
  405254:	4798      	blx	r3
 *
 * \param p_spi Pointer to an SPI instance.
 */
static inline void spi_disable(Spi *p_spi)
{
	p_spi->SPI_CR = SPI_CR_SPIDIS;
  405256:	2302      	movs	r3, #2
  405258:	602b      	str	r3, [r5, #0]
	p_spi->SPI_CR = SPI_CR_SWRST;
  40525a:	2380      	movs	r3, #128	; 0x80
  40525c:	602b      	str	r3, [r5, #0]
 *
 * \param p_spi Pointer to an SPI instance.
 */
static inline void spi_set_master_mode(Spi *p_spi)
{
	p_spi->SPI_MR |= SPI_MR_MSTR;
  40525e:	686b      	ldr	r3, [r5, #4]
  405260:	f043 0301 	orr.w	r3, r3, #1
  405264:	606b      	str	r3, [r5, #4]
 *
 * \param p_spi Pointer to an SPI instance.
 */
static inline void spi_disable_mode_fault_detect(Spi *p_spi)
{
	p_spi->SPI_MR |= SPI_MR_MODFDIS;
  405266:	686b      	ldr	r3, [r5, #4]
  405268:	f043 0310 	orr.w	r3, r3, #16
  40526c:	606b      	str	r3, [r5, #4]
	spi_disable(CONF_WINC_SPI);
	spi_reset(CONF_WINC_SPI);
	spi_set_master_mode(CONF_WINC_SPI);
	spi_disable_mode_fault_detect(CONF_WINC_SPI);
	spi_set_peripheral_chip_select_value(CONF_WINC_SPI, CONF_WINC_SPI_NPCS);
  40526e:	2101      	movs	r1, #1
  405270:	4628      	mov	r0, r5
  405272:	4b16      	ldr	r3, [pc, #88]	; (4052cc <nm_bus_init+0xf4>)
  405274:	4798      	blx	r3
	spi_set_clock_polarity(CONF_WINC_SPI,
  405276:	2200      	movs	r2, #0
  405278:	2101      	movs	r1, #1
  40527a:	4628      	mov	r0, r5
  40527c:	4b14      	ldr	r3, [pc, #80]	; (4052d0 <nm_bus_init+0xf8>)
  40527e:	4798      	blx	r3
			CONF_WINC_SPI_NPCS, CONF_WINC_SPI_POL);
	spi_set_clock_phase(CONF_WINC_SPI, CONF_WINC_SPI_NPCS, CONF_WINC_SPI_PHA);
  405280:	2201      	movs	r2, #1
  405282:	4611      	mov	r1, r2
  405284:	4628      	mov	r0, r5
  405286:	4b13      	ldr	r3, [pc, #76]	; (4052d4 <nm_bus_init+0xfc>)
  405288:	4798      	blx	r3
	spi_set_bits_per_transfer(CONF_WINC_SPI, CONF_WINC_SPI_NPCS, SPI_CSR_BITS_8_BIT);
  40528a:	2200      	movs	r2, #0
  40528c:	2101      	movs	r1, #1
  40528e:	4628      	mov	r0, r5
  405290:	4b11      	ldr	r3, [pc, #68]	; (4052d8 <nm_bus_init+0x100>)
  405292:	4798      	blx	r3
	spi_set_baudrate_div(CONF_WINC_SPI, CONF_WINC_SPI_NPCS,
			spi_calc_baudrate_div(CONF_WINC_SPI_CLOCK, sysclk_get_cpu_hz()));
  405294:	4911      	ldr	r1, [pc, #68]	; (4052dc <nm_bus_init+0x104>)
  405296:	4812      	ldr	r0, [pc, #72]	; (4052e0 <nm_bus_init+0x108>)
  405298:	4b12      	ldr	r3, [pc, #72]	; (4052e4 <nm_bus_init+0x10c>)
  40529a:	4798      	blx	r3
	spi_set_baudrate_div(CONF_WINC_SPI, CONF_WINC_SPI_NPCS,
  40529c:	b2c2      	uxtb	r2, r0
  40529e:	2101      	movs	r1, #1
  4052a0:	4628      	mov	r0, r5
  4052a2:	4b11      	ldr	r3, [pc, #68]	; (4052e8 <nm_bus_init+0x110>)
  4052a4:	4798      	blx	r3
	spi_set_transfer_delay(CONF_WINC_SPI, CONF_WINC_SPI_NPCS, CONF_WINC_SPI_DLYBS,
  4052a6:	2300      	movs	r3, #0
  4052a8:	461a      	mov	r2, r3
  4052aa:	2101      	movs	r1, #1
  4052ac:	4628      	mov	r0, r5
  4052ae:	4f0f      	ldr	r7, [pc, #60]	; (4052ec <nm_bus_init+0x114>)
  4052b0:	47b8      	blx	r7
	p_spi->SPI_CR = SPI_CR_SPIEN;
  4052b2:	2301      	movs	r3, #1
  4052b4:	602b      	str	r3, [r5, #0]
			CONF_WINC_SPI_DLYBCT);
	spi_enable(CONF_WINC_SPI);
	
	SPI_DEASSERT_CS();
  4052b6:	6326      	str	r6, [r4, #48]	; 0x30
	nm_bsp_reset();
  4052b8:	4b0d      	ldr	r3, [pc, #52]	; (4052f0 <nm_bus_init+0x118>)
  4052ba:	4798      	blx	r3
#endif
	return result;
}
  4052bc:	2000      	movs	r0, #0
  4052be:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  4052c0:	400e1400 	.word	0x400e1400
  4052c4:	40008000 	.word	0x40008000
  4052c8:	00408569 	.word	0x00408569
  4052cc:	00408595 	.word	0x00408595
  4052d0:	0040860f 	.word	0x0040860f
  4052d4:	0040862d 	.word	0x0040862d
  4052d8:	0040864b 	.word	0x0040864b
  4052dc:	11e1a300 	.word	0x11e1a300
  4052e0:	02dc6c00 	.word	0x02dc6c00
  4052e4:	0040865f 	.word	0x0040865f
  4052e8:	00408675 	.word	0x00408675
  4052ec:	0040869d 	.word	0x0040869d
  4052f0:	00405089 	.word	0x00405089

004052f4 <nm_bus_ioctl>:
 *					Arbitrary parameter depenging on IOCTL
 *	@return	M2M_SUCCESS in case of success and M2M_ERR_BUS_FAIL in case of failure
 *	@note	For SPI only, it's important to be able to send/receive at the same time
 */
sint8 nm_bus_ioctl(uint8 u8Cmd, void* pvParameter)
{
  4052f4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  4052f8:	b083      	sub	sp, #12
	sint8 s8Ret = 0;
	switch(u8Cmd)
  4052fa:	2803      	cmp	r0, #3
  4052fc:	d144      	bne.n	405388 <nm_bus_ioctl+0x94>
		}
		break;
#elif CONF_WINC_USE_SPI
		case NM_BUS_IOCTL_RW: {
			tstrNmSpiRw *pstrParam = (tstrNmSpiRw *)pvParameter;
			s8Ret = spi_rw(pstrParam->pu8InBuf, pstrParam->pu8OutBuf, pstrParam->u16Sz);
  4052fe:	680e      	ldr	r6, [r1, #0]
  405300:	684d      	ldr	r5, [r1, #4]
  405302:	890c      	ldrh	r4, [r1, #8]
	uint8 u8Dummy = 0;
  405304:	2300      	movs	r3, #0
  405306:	f88d 3004 	strb.w	r3, [sp, #4]
	uint16_t rxd_data = 0;
  40530a:	f8ad 3006 	strh.w	r3, [sp, #6]
	if (!pu8Mosi) {
  40530e:	b186      	cbz	r6, 405332 <nm_bus_ioctl+0x3e>
	else if(!pu8Miso) {
  405310:	2d00      	cmp	r5, #0
  405312:	d136      	bne.n	405382 <nm_bus_ioctl+0x8e>
		u8SkipMiso = 1;
  405314:	f04f 0801 	mov.w	r8, #1
	uint8 u8SkipMosi = 0, u8SkipMiso = 0;
  405318:	4699      	mov	r9, r3
		pu8Miso = &u8Dummy;
  40531a:	ad01      	add	r5, sp, #4
	SPI_ASSERT_CS();
  40531c:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
  405320:	4b20      	ldr	r3, [pc, #128]	; (4053a4 <nm_bus_ioctl+0xb0>)
  405322:	635a      	str	r2, [r3, #52]	; 0x34
	while (u16Sz) {
  405324:	b32c      	cbz	r4, 405372 <nm_bus_ioctl+0x7e>
		spi_write(CONF_WINC_SPI, txd_data, 0, 0);
  405326:	4f20      	ldr	r7, [pc, #128]	; (4053a8 <nm_bus_ioctl+0xb4>)
  405328:	f8df b094 	ldr.w	fp, [pc, #148]	; 4053c0 <nm_bus_ioctl+0xcc>
		spi_read(CONF_WINC_SPI, &rxd_data, &uc_pcs);
  40532c:	f8df a094 	ldr.w	sl, [pc, #148]	; 4053c4 <nm_bus_ioctl+0xd0>
  405330:	e006      	b.n	405340 <nm_bus_ioctl+0x4c>
	uint8 u8SkipMosi = 0, u8SkipMiso = 0;
  405332:	f04f 0800 	mov.w	r8, #0
		u8SkipMosi = 1;
  405336:	f04f 0901 	mov.w	r9, #1
		pu8Mosi = &u8Dummy;
  40533a:	ae01      	add	r6, sp, #4
  40533c:	e7ee      	b.n	40531c <nm_bus_ioctl+0x28>
	while (u16Sz) {
  40533e:	b1c4      	cbz	r4, 405372 <nm_bus_ioctl+0x7e>
		spi_write(CONF_WINC_SPI, txd_data, 0, 0);
  405340:	2300      	movs	r3, #0
  405342:	461a      	mov	r2, r3
  405344:	7831      	ldrb	r1, [r6, #0]
  405346:	4638      	mov	r0, r7
  405348:	47d8      	blx	fp
		spi_read(CONF_WINC_SPI, &rxd_data, &uc_pcs);
  40534a:	f10d 0205 	add.w	r2, sp, #5
  40534e:	f10d 0106 	add.w	r1, sp, #6
  405352:	4638      	mov	r0, r7
  405354:	47d0      	blx	sl
		*pu8Miso = rxd_data;
  405356:	f8bd 3006 	ldrh.w	r3, [sp, #6]
  40535a:	702b      	strb	r3, [r5, #0]
		u16Sz--;
  40535c:	3c01      	subs	r4, #1
  40535e:	b2a4      	uxth	r4, r4
		if (!u8SkipMiso)
  405360:	f1b8 0f00 	cmp.w	r8, #0
  405364:	d100      	bne.n	405368 <nm_bus_ioctl+0x74>
			pu8Miso++;
  405366:	3501      	adds	r5, #1
		if (!u8SkipMosi)
  405368:	f1b9 0f00 	cmp.w	r9, #0
  40536c:	d1e7      	bne.n	40533e <nm_bus_ioctl+0x4a>
			pu8Mosi++;
  40536e:	3601      	adds	r6, #1
  405370:	e7e5      	b.n	40533e <nm_bus_ioctl+0x4a>
	SPI_DEASSERT_CS();
  405372:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
  405376:	4b0b      	ldr	r3, [pc, #44]	; (4053a4 <nm_bus_ioctl+0xb0>)
  405378:	631a      	str	r2, [r3, #48]	; 0x30
	return M2M_SUCCESS;
  40537a:	2000      	movs	r0, #0
			M2M_ERR("Invalid IOCTL command!\n");
			break;
	}

	return s8Ret;
}
  40537c:	b003      	add	sp, #12
  40537e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
		return M2M_ERR_BUS_FAIL;
  405382:	f06f 0005 	mvn.w	r0, #5
		break;
  405386:	e7f9      	b.n	40537c <nm_bus_ioctl+0x88>
			M2M_ERR("Invalid IOCTL command!\n");
  405388:	f240 121f 	movw	r2, #287	; 0x11f
  40538c:	4907      	ldr	r1, [pc, #28]	; (4053ac <nm_bus_ioctl+0xb8>)
  40538e:	4808      	ldr	r0, [pc, #32]	; (4053b0 <nm_bus_ioctl+0xbc>)
  405390:	4c08      	ldr	r4, [pc, #32]	; (4053b4 <nm_bus_ioctl+0xc0>)
  405392:	47a0      	blx	r4
  405394:	4808      	ldr	r0, [pc, #32]	; (4053b8 <nm_bus_ioctl+0xc4>)
  405396:	47a0      	blx	r4
  405398:	4808      	ldr	r0, [pc, #32]	; (4053bc <nm_bus_ioctl+0xc8>)
  40539a:	47a0      	blx	r4
			s8Ret = -1;
  40539c:	f04f 30ff 	mov.w	r0, #4294967295
			break;
  4053a0:	e7ec      	b.n	40537c <nm_bus_ioctl+0x88>
  4053a2:	bf00      	nop
  4053a4:	400e1400 	.word	0x400e1400
  4053a8:	40008000 	.word	0x40008000
  4053ac:	0040c95c 	.word	0x0040c95c
  4053b0:	0040c96c 	.word	0x0040c96c
  4053b4:	00409405 	.word	0x00409405
  4053b8:	0040c980 	.word	0x0040c980
  4053bc:	0040d944 	.word	0x0040d944
  4053c0:	004085db 	.word	0x004085db
  4053c4:	004085ab 	.word	0x004085ab

004053c8 <nm_bus_deinit>:
	p_spi->SPI_CR = SPI_CR_SPIDIS;
  4053c8:	2202      	movs	r2, #2
  4053ca:	4b0e      	ldr	r3, [pc, #56]	; (405404 <nm_bus_deinit+0x3c>)
  4053cc:	601a      	str	r2, [r3, #0]
		base->PIO_ODR = arch_ioport_pin_to_mask(pin);
  4053ce:	f503 2359 	add.w	r3, r3, #888832	; 0xd9000
  4053d2:	f503 6380 	add.w	r3, r3, #1024	; 0x400
  4053d6:	f44f 1200 	mov.w	r2, #2097152	; 0x200000
  4053da:	615a      	str	r2, [r3, #20]
	base->PIO_OWER = arch_ioport_pin_to_mask(pin);
  4053dc:	f8c3 20a0 	str.w	r2, [r3, #160]	; 0xa0
		base->PIO_ODR = arch_ioport_pin_to_mask(pin);
  4053e0:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
  4053e4:	615a      	str	r2, [r3, #20]
	base->PIO_OWER = arch_ioport_pin_to_mask(pin);
  4053e6:	f8c3 20a0 	str.w	r2, [r3, #160]	; 0xa0
		base->PIO_ODR = arch_ioport_pin_to_mask(pin);
  4053ea:	f44f 0280 	mov.w	r2, #4194304	; 0x400000
  4053ee:	615a      	str	r2, [r3, #20]
	base->PIO_OWER = arch_ioport_pin_to_mask(pin);
  4053f0:	f8c3 20a0 	str.w	r2, [r3, #160]	; 0xa0
		base->PIO_ODR = arch_ioport_pin_to_mask(pin);
  4053f4:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
  4053f8:	615a      	str	r2, [r3, #20]
	base->PIO_OWER = arch_ioport_pin_to_mask(pin);
  4053fa:	f8c3 20a0 	str.w	r2, [r3, #160]	; 0xa0
	ioport_set_pin_dir(CONF_WINC_SPI_MOSI_GPIO, IOPORT_DIR_INPUT);
	ioport_set_pin_dir(CONF_WINC_SPI_MISO_GPIO, IOPORT_DIR_INPUT);
	ioport_set_pin_dir(CONF_WINC_SPI_CLK_GPIO, IOPORT_DIR_INPUT);
	ioport_set_pin_dir(CONF_WINC_SPI_CS_GPIO, IOPORT_DIR_INPUT);
	return M2M_SUCCESS;
}
  4053fe:	2000      	movs	r0, #0
  405400:	4770      	bx	lr
  405402:	bf00      	nop
  405404:	40008000 	.word	0x40008000

00405408 <m2m_memcpy>:
 */
#include "common/include/nm_common.h"

void m2m_memcpy(uint8* pDst,uint8* pSrc,uint32 sz)
{
	if(sz == 0) return;
  405408:	b13a      	cbz	r2, 40541a <m2m_memcpy+0x12>
  40540a:	3901      	subs	r1, #1
  40540c:	1882      	adds	r2, r0, r2
	do
	{
		*pDst = *pSrc;
  40540e:	f811 3f01 	ldrb.w	r3, [r1, #1]!
  405412:	f800 3b01 	strb.w	r3, [r0], #1
		pDst++;
		pSrc++;
	}while(--sz);
  405416:	4290      	cmp	r0, r2
  405418:	d1f9      	bne.n	40540e <m2m_memcpy+0x6>
  40541a:	4770      	bx	lr

0040541c <m2m_memset>:
	return cs;
}

void m2m_memset(uint8* pBuf,uint8 val,uint32 sz)
{
	if(sz == 0) return;
  40541c:	b122      	cbz	r2, 405428 <m2m_memset+0xc>
  40541e:	1882      	adds	r2, r0, r2
	do
	{
		*pBuf = val;
  405420:	f800 1b01 	strb.w	r1, [r0], #1
		pBuf++;
	}while(--sz);
  405424:	4290      	cmp	r0, r2
  405426:	d1fb      	bne.n	405420 <m2m_memset+0x4>
  405428:	4770      	bx	lr

0040542a <m2m_strlen>:
}

uint16 m2m_strlen(uint8 * pcStr)
{
	uint16	u16StrLen = 0;
	while(*pcStr)
  40542a:	7803      	ldrb	r3, [r0, #0]
  40542c:	b143      	cbz	r3, 405440 <m2m_strlen+0x16>
  40542e:	2300      	movs	r3, #0
	{
		u16StrLen ++;
  405430:	3301      	adds	r3, #1
  405432:	b29b      	uxth	r3, r3
	while(*pcStr)
  405434:	f810 2f01 	ldrb.w	r2, [r0, #1]!
  405438:	2a00      	cmp	r2, #0
  40543a:	d1f9      	bne.n	405430 <m2m_strlen+0x6>
		pcStr++;
	}
	return u16StrLen;
}
  40543c:	4618      	mov	r0, r3
  40543e:	4770      	bx	lr
	uint16	u16StrLen = 0;
  405440:	2300      	movs	r3, #0
  405442:	e7fb      	b.n	40543c <m2m_strlen+0x12>

00405444 <isr>:
tpfHifCallBack pfHifCb = NULL;
tpfHifCallBack pfCryptoCb = NULL;

static void isr(void)
{
	gu8Interrupt++;
  405444:	4a02      	ldr	r2, [pc, #8]	; (405450 <isr+0xc>)
  405446:	7813      	ldrb	r3, [r2, #0]
  405448:	3301      	adds	r3, #1
  40544a:	b2db      	uxtb	r3, r3
  40544c:	7013      	strb	r3, [r2, #0]
  40544e:	4770      	bx	lr
  405450:	2040c39b 	.word	0x2040c39b

00405454 <m2m_hif_cb>:
*	@author
*	@date
*	@version	1.0
*/
static void m2m_hif_cb(uint8 u8OpCode, uint16 u16DataSize, uint32 u32Addr)
{
  405454:	4770      	bx	lr
	...

00405458 <hif_set_rx_done>:
{
  405458:	b500      	push	{lr}
  40545a:	b083      	sub	sp, #12
	nm_bsp_interrupt_ctrl(1);
  40545c:	2001      	movs	r0, #1
  40545e:	4b0b      	ldr	r3, [pc, #44]	; (40548c <hif_set_rx_done+0x34>)
  405460:	4798      	blx	r3
	ret = nm_read_reg_with_ret(WIFI_HOST_RCV_CTRL_0,&reg);
  405462:	a901      	add	r1, sp, #4
  405464:	f241 0070 	movw	r0, #4208	; 0x1070
  405468:	4b09      	ldr	r3, [pc, #36]	; (405490 <hif_set_rx_done+0x38>)
  40546a:	4798      	blx	r3
	if(ret != M2M_SUCCESS)goto ERR1;
  40546c:	4603      	mov	r3, r0
  40546e:	b118      	cbz	r0, 405478 <hif_set_rx_done+0x20>
}
  405470:	4618      	mov	r0, r3
  405472:	b003      	add	sp, #12
  405474:	f85d fb04 	ldr.w	pc, [sp], #4
	reg |= (1<<1);
  405478:	9901      	ldr	r1, [sp, #4]
  40547a:	f041 0102 	orr.w	r1, r1, #2
  40547e:	9101      	str	r1, [sp, #4]
	ret = nm_write_reg(WIFI_HOST_RCV_CTRL_0,reg);
  405480:	f241 0070 	movw	r0, #4208	; 0x1070
  405484:	4b03      	ldr	r3, [pc, #12]	; (405494 <hif_set_rx_done+0x3c>)
  405486:	4798      	blx	r3
  405488:	4603      	mov	r3, r0
  40548a:	e7f1      	b.n	405470 <hif_set_rx_done+0x18>
  40548c:	004051b1 	.word	0x004051b1
  405490:	00406745 	.word	0x00406745
  405494:	00406751 	.word	0x00406751

00405498 <hif_chip_wake>:
*	@brief	To Wakeup the chip.
*    @return		The function shall return ZERO for successful operation and a negative value otherwise.
*/

sint8 hif_chip_wake(void)
{
  405498:	b508      	push	{r3, lr}
	sint8 ret = M2M_SUCCESS;
	if(gu8ChipSleep == 0)
  40549a:	4b12      	ldr	r3, [pc, #72]	; (4054e4 <hif_chip_wake+0x4c>)
  40549c:	781b      	ldrb	r3, [r3, #0]
  40549e:	b94b      	cbnz	r3, 4054b4 <hif_chip_wake+0x1c>
	{
		if((gu8ChipMode == M2M_PS_DEEP_AUTOMATIC)||(gu8ChipMode == M2M_PS_MANUAL))
  4054a0:	4b11      	ldr	r3, [pc, #68]	; (4054e8 <hif_chip_wake+0x50>)
  4054a2:	781b      	ldrb	r3, [r3, #0]
  4054a4:	b2db      	uxtb	r3, r3
  4054a6:	2b03      	cmp	r3, #3
  4054a8:	d00c      	beq.n	4054c4 <hif_chip_wake+0x2c>
  4054aa:	4b0f      	ldr	r3, [pc, #60]	; (4054e8 <hif_chip_wake+0x50>)
  4054ac:	781b      	ldrb	r3, [r3, #0]
  4054ae:	b2db      	uxtb	r3, r3
  4054b0:	2b04      	cmp	r3, #4
  4054b2:	d007      	beq.n	4054c4 <hif_chip_wake+0x2c>
		}
		else
		{
		}
	}
	gu8ChipSleep++;
  4054b4:	4a0b      	ldr	r2, [pc, #44]	; (4054e4 <hif_chip_wake+0x4c>)
  4054b6:	7813      	ldrb	r3, [r2, #0]
  4054b8:	3301      	adds	r3, #1
  4054ba:	b2db      	uxtb	r3, r3
  4054bc:	7013      	strb	r3, [r2, #0]
  4054be:	2300      	movs	r3, #0
ERR1:
	return ret;
}
  4054c0:	4618      	mov	r0, r3
  4054c2:	bd08      	pop	{r3, pc}
			ret = nm_clkless_wake();
  4054c4:	4b09      	ldr	r3, [pc, #36]	; (4054ec <hif_chip_wake+0x54>)
  4054c6:	4798      	blx	r3
			if(ret != M2M_SUCCESS)goto ERR1;
  4054c8:	4603      	mov	r3, r0
  4054ca:	2800      	cmp	r0, #0
  4054cc:	d1f8      	bne.n	4054c0 <hif_chip_wake+0x28>
			ret = nm_write_reg(WAKE_REG, WAKE_VALUE);
  4054ce:	f245 6178 	movw	r1, #22136	; 0x5678
  4054d2:	f241 0074 	movw	r0, #4212	; 0x1074
  4054d6:	4b06      	ldr	r3, [pc, #24]	; (4054f0 <hif_chip_wake+0x58>)
  4054d8:	4798      	blx	r3
			if(ret != M2M_SUCCESS)goto ERR1;
  4054da:	4603      	mov	r3, r0
  4054dc:	2800      	cmp	r0, #0
  4054de:	d0e9      	beq.n	4054b4 <hif_chip_wake+0x1c>
  4054e0:	e7ee      	b.n	4054c0 <hif_chip_wake+0x28>
  4054e2:	bf00      	nop
  4054e4:	2040c399 	.word	0x2040c399
  4054e8:	2040c398 	.word	0x2040c398
  4054ec:	004062b5 	.word	0x004062b5
  4054f0:	00406751 	.word	0x00406751

004054f4 <hif_chip_sleep>:

sint8 hif_chip_sleep(void)
{
	sint8 ret = M2M_SUCCESS;

	if(gu8ChipSleep >= 1)
  4054f4:	4b1e      	ldr	r3, [pc, #120]	; (405570 <hif_chip_sleep+0x7c>)
  4054f6:	781b      	ldrb	r3, [r3, #0]
  4054f8:	b123      	cbz	r3, 405504 <hif_chip_sleep+0x10>
	{
		gu8ChipSleep--;
  4054fa:	4a1d      	ldr	r2, [pc, #116]	; (405570 <hif_chip_sleep+0x7c>)
  4054fc:	7813      	ldrb	r3, [r2, #0]
  4054fe:	3b01      	subs	r3, #1
  405500:	b2db      	uxtb	r3, r3
  405502:	7013      	strb	r3, [r2, #0]
	}
	
	if(gu8ChipSleep == 0)
  405504:	4b1a      	ldr	r3, [pc, #104]	; (405570 <hif_chip_sleep+0x7c>)
  405506:	781b      	ldrb	r3, [r3, #0]
  405508:	2b00      	cmp	r3, #0
  40550a:	d12e      	bne.n	40556a <hif_chip_sleep+0x76>
	{
		if((gu8ChipMode == M2M_PS_DEEP_AUTOMATIC)||(gu8ChipMode == M2M_PS_MANUAL))
  40550c:	4b19      	ldr	r3, [pc, #100]	; (405574 <hif_chip_sleep+0x80>)
  40550e:	781b      	ldrb	r3, [r3, #0]
  405510:	b2db      	uxtb	r3, r3
  405512:	2b03      	cmp	r3, #3
  405514:	d006      	beq.n	405524 <hif_chip_sleep+0x30>
  405516:	4b17      	ldr	r3, [pc, #92]	; (405574 <hif_chip_sleep+0x80>)
  405518:	781b      	ldrb	r3, [r3, #0]
  40551a:	b2db      	uxtb	r3, r3
  40551c:	2b04      	cmp	r3, #4
  40551e:	d001      	beq.n	405524 <hif_chip_sleep+0x30>
	sint8 ret = M2M_SUCCESS;
  405520:	2300      	movs	r3, #0
  405522:	e023      	b.n	40556c <hif_chip_sleep+0x78>
{
  405524:	b500      	push	{lr}
  405526:	b083      	sub	sp, #12
		{
			uint32 reg = 0;
  405528:	2300      	movs	r3, #0
  40552a:	9301      	str	r3, [sp, #4]
			ret = nm_write_reg(WAKE_REG, SLEEP_VALUE);
  40552c:	f244 3121 	movw	r1, #17185	; 0x4321
  405530:	f241 0074 	movw	r0, #4212	; 0x1074
  405534:	4b10      	ldr	r3, [pc, #64]	; (405578 <hif_chip_sleep+0x84>)
  405536:	4798      	blx	r3
			if(ret != M2M_SUCCESS)goto ERR1;
  405538:	4603      	mov	r3, r0
  40553a:	b118      	cbz	r0, 405544 <hif_chip_sleep+0x50>
		{
		}
	}
ERR1:
	return ret;
}
  40553c:	4618      	mov	r0, r3
  40553e:	b003      	add	sp, #12
  405540:	f85d fb04 	ldr.w	pc, [sp], #4
			ret = nm_read_reg_with_ret(0x1, &reg);
  405544:	a901      	add	r1, sp, #4
  405546:	2001      	movs	r0, #1
  405548:	4b0c      	ldr	r3, [pc, #48]	; (40557c <hif_chip_sleep+0x88>)
  40554a:	4798      	blx	r3
			if(ret != M2M_SUCCESS)goto ERR1;
  40554c:	4603      	mov	r3, r0
  40554e:	2800      	cmp	r0, #0
  405550:	d1f4      	bne.n	40553c <hif_chip_sleep+0x48>
			if(reg&0x2)
  405552:	9901      	ldr	r1, [sp, #4]
  405554:	f011 0f02 	tst.w	r1, #2
  405558:	d0f0      	beq.n	40553c <hif_chip_sleep+0x48>
				reg &=~(1 << 1);
  40555a:	f021 0102 	bic.w	r1, r1, #2
  40555e:	9101      	str	r1, [sp, #4]
				ret = nm_write_reg(0x1, reg);
  405560:	2001      	movs	r0, #1
  405562:	4b05      	ldr	r3, [pc, #20]	; (405578 <hif_chip_sleep+0x84>)
  405564:	4798      	blx	r3
  405566:	4603      	mov	r3, r0
  405568:	e7e8      	b.n	40553c <hif_chip_sleep+0x48>
	sint8 ret = M2M_SUCCESS;
  40556a:	2300      	movs	r3, #0
}
  40556c:	4618      	mov	r0, r3
  40556e:	4770      	bx	lr
  405570:	2040c399 	.word	0x2040c399
  405574:	2040c398 	.word	0x2040c398
  405578:	00406751 	.word	0x00406751
  40557c:	00406745 	.word	0x00406745

00405580 <hif_send>:
*    @return		The function shall return ZERO for successful operation and a negative value otherwise.
*/

sint8 hif_send(uint8 u8Gid,uint8 u8Opcode,uint8 *pu8CtrlBuf,uint16 u16CtrlBufSize,
			   uint8 *pu8DataBuf,uint16 u16DataSize, uint16 u16DataOffset)
{
  405580:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  405584:	b087      	sub	sp, #28
  405586:	4607      	mov	r7, r0
  405588:	4688      	mov	r8, r1
  40558a:	4692      	mov	sl, r2
  40558c:	4699      	mov	r9, r3
  40558e:	9c10      	ldr	r4, [sp, #64]	; 0x40
  405590:	f8bd 6044 	ldrh.w	r6, [sp, #68]	; 0x44
  405594:	f8bd 5048 	ldrh.w	r5, [sp, #72]	; 0x48
	sint8		ret = M2M_ERR_SEND;
	volatile tstrHifHdr	strHif;

	strHif.u8Opcode		= u8Opcode&(~NBIT7);
  405598:	f001 037f 	and.w	r3, r1, #127	; 0x7f
  40559c:	f88d 3015 	strb.w	r3, [sp, #21]
	strHif.u8Gid		= u8Gid;
  4055a0:	f88d 0014 	strb.w	r0, [sp, #20]
	strHif.u16Length	= M2M_HIF_HDR_OFFSET;
  4055a4:	2308      	movs	r3, #8
  4055a6:	f8ad 3016 	strh.w	r3, [sp, #22]
	if(pu8DataBuf != NULL)
  4055aa:	2c00      	cmp	r4, #0
  4055ac:	f000 809f 	beq.w	4056ee <hif_send+0x16e>
	{
		strHif.u16Length += u16DataOffset + u16DataSize;
  4055b0:	f8bd 3016 	ldrh.w	r3, [sp, #22]
  4055b4:	fa16 f383 	uxtah	r3, r6, r3
  4055b8:	442b      	add	r3, r5
  4055ba:	b29b      	uxth	r3, r3
  4055bc:	f8ad 3016 	strh.w	r3, [sp, #22]
	}
	else
	{
		strHif.u16Length += u16CtrlBufSize;
	}
	ret = hif_chip_wake();
  4055c0:	4b5c      	ldr	r3, [pc, #368]	; (405734 <hif_send+0x1b4>)
  4055c2:	4798      	blx	r3
	if(ret == M2M_SUCCESS)
  4055c4:	4683      	mov	fp, r0
  4055c6:	2800      	cmp	r0, #0
  4055c8:	f040 80a2 	bne.w	405710 <hif_send+0x190>
	{
		volatile uint32 reg, dma_addr = 0;
  4055cc:	2300      	movs	r3, #0
  4055ce:	9303      	str	r3, [sp, #12]
		volatile uint16 cnt = 0;
  4055d0:	f8ad 3006 	strh.w	r3, [sp, #6]

		reg = 0UL;
  4055d4:	9302      	str	r3, [sp, #8]
		reg |= (uint32)u8Gid;
  4055d6:	9b02      	ldr	r3, [sp, #8]
  4055d8:	431f      	orrs	r7, r3
  4055da:	9702      	str	r7, [sp, #8]
		reg |= ((uint32)u8Opcode<<8);
  4055dc:	9b02      	ldr	r3, [sp, #8]
  4055de:	ea43 2308 	orr.w	r3, r3, r8, lsl #8
  4055e2:	9302      	str	r3, [sp, #8]
		reg |= ((uint32)strHif.u16Length<<16);
  4055e4:	f8bd 2016 	ldrh.w	r2, [sp, #22]
  4055e8:	9b02      	ldr	r3, [sp, #8]
  4055ea:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
  4055ee:	9302      	str	r3, [sp, #8]
		ret = nm_write_reg(NMI_STATE_REG,reg);
  4055f0:	9902      	ldr	r1, [sp, #8]
  4055f2:	f241 008c 	movw	r0, #4236	; 0x108c
  4055f6:	4b50      	ldr	r3, [pc, #320]	; (405738 <hif_send+0x1b8>)
  4055f8:	4798      	blx	r3
		if(M2M_SUCCESS != ret) goto ERR1;
  4055fa:	4683      	mov	fp, r0
  4055fc:	2800      	cmp	r0, #0
  4055fe:	f040 8091 	bne.w	405724 <hif_send+0x1a4>


		reg = 0;
  405602:	2300      	movs	r3, #0
  405604:	9302      	str	r3, [sp, #8]
		reg |= (1<<1);
  405606:	9b02      	ldr	r3, [sp, #8]
  405608:	f043 0302 	orr.w	r3, r3, #2
  40560c:	9302      	str	r3, [sp, #8]
		ret = nm_write_reg(WIFI_HOST_RCV_CTRL_2, reg);
  40560e:	9902      	ldr	r1, [sp, #8]
  405610:	f241 0078 	movw	r0, #4216	; 0x1078
  405614:	4b48      	ldr	r3, [pc, #288]	; (405738 <hif_send+0x1b8>)
  405616:	4798      	blx	r3
		if(M2M_SUCCESS != ret) goto ERR1;
  405618:	4683      	mov	fp, r0
  40561a:	2800      	cmp	r0, #0
  40561c:	f040 8082 	bne.w	405724 <hif_send+0x1a4>
		dma_addr = 0;
  405620:	2300      	movs	r3, #0
  405622:	9303      	str	r3, [sp, #12]

		//nm_bsp_interrupt_ctrl(0);

		for(cnt = 0; cnt < 1000; cnt ++)
  405624:	f8ad 3006 	strh.w	r3, [sp, #6]
  405628:	f8bd 3006 	ldrh.w	r3, [sp, #6]
  40562c:	b29b      	uxth	r3, r3
  40562e:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
  405632:	d216      	bcs.n	405662 <hif_send+0xe2>
		{
			ret = nm_read_reg_with_ret(WIFI_HOST_RCV_CTRL_2,(uint32 *)&reg);
  405634:	f241 0878 	movw	r8, #4216	; 0x1078
  405638:	4f40      	ldr	r7, [pc, #256]	; (40573c <hif_send+0x1bc>)
  40563a:	a902      	add	r1, sp, #8
  40563c:	4640      	mov	r0, r8
  40563e:	47b8      	blx	r7
			if(ret != M2M_SUCCESS) break;
  405640:	b978      	cbnz	r0, 405662 <hif_send+0xe2>
			if (!(reg & 0x2))
  405642:	9b02      	ldr	r3, [sp, #8]
  405644:	f013 0f02 	tst.w	r3, #2
  405648:	d059      	beq.n	4056fe <hif_send+0x17e>
		for(cnt = 0; cnt < 1000; cnt ++)
  40564a:	f8bd 3006 	ldrh.w	r3, [sp, #6]
  40564e:	3301      	adds	r3, #1
  405650:	b29b      	uxth	r3, r3
  405652:	f8ad 3006 	strh.w	r3, [sp, #6]
  405656:	f8bd 3006 	ldrh.w	r3, [sp, #6]
  40565a:	b29b      	uxth	r3, r3
  40565c:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
  405660:	d3eb      	bcc.n	40563a <hif_send+0xba>
				break;
			}
		}
		//nm_bsp_interrupt_ctrl(1);

		if (dma_addr != 0)
  405662:	9b03      	ldr	r3, [sp, #12]
  405664:	2b00      	cmp	r3, #0
  405666:	d061      	beq.n	40572c <hif_send+0x1ac>
		{
			volatile uint32	u32CurrAddr;
			u32CurrAddr = dma_addr;
  405668:	9b03      	ldr	r3, [sp, #12]
  40566a:	9304      	str	r3, [sp, #16]
			strHif.u16Length=NM_BSP_B_L_16(strHif.u16Length);
  40566c:	f8bd 3016 	ldrh.w	r3, [sp, #22]
  405670:	b29b      	uxth	r3, r3
  405672:	f8ad 3016 	strh.w	r3, [sp, #22]
			ret = nm_write_block(u32CurrAddr, (uint8*)&strHif, M2M_HIF_HDR_OFFSET);
  405676:	9804      	ldr	r0, [sp, #16]
  405678:	2208      	movs	r2, #8
  40567a:	a905      	add	r1, sp, #20
  40567c:	4b30      	ldr	r3, [pc, #192]	; (405740 <hif_send+0x1c0>)
  40567e:	4798      	blx	r3
		#ifdef CONF_WINC_USE_I2C
			nm_bsp_sleep(1);
		#endif
			if(M2M_SUCCESS != ret) goto ERR1;
  405680:	4683      	mov	fp, r0
  405682:	2800      	cmp	r0, #0
  405684:	d14e      	bne.n	405724 <hif_send+0x1a4>
			u32CurrAddr += M2M_HIF_HDR_OFFSET;
  405686:	9b04      	ldr	r3, [sp, #16]
  405688:	3308      	adds	r3, #8
  40568a:	9304      	str	r3, [sp, #16]
			if(pu8CtrlBuf != NULL)
  40568c:	f1ba 0f00 	cmp.w	sl, #0
  405690:	d00a      	beq.n	4056a8 <hif_send+0x128>
			{
				ret = nm_write_block(u32CurrAddr, pu8CtrlBuf, u16CtrlBufSize);
  405692:	9804      	ldr	r0, [sp, #16]
  405694:	464a      	mov	r2, r9
  405696:	4651      	mov	r1, sl
  405698:	4b29      	ldr	r3, [pc, #164]	; (405740 <hif_send+0x1c0>)
  40569a:	4798      	blx	r3
			#ifdef CONF_WINC_USE_I2C
				nm_bsp_sleep(1);
			#endif
				if(M2M_SUCCESS != ret) goto ERR1;
  40569c:	4683      	mov	fp, r0
  40569e:	2800      	cmp	r0, #0
  4056a0:	d140      	bne.n	405724 <hif_send+0x1a4>
				u32CurrAddr += u16CtrlBufSize;
  4056a2:	9b04      	ldr	r3, [sp, #16]
  4056a4:	444b      	add	r3, r9
  4056a6:	9304      	str	r3, [sp, #16]
			}
			if(pu8DataBuf != NULL)
  4056a8:	b17c      	cbz	r4, 4056ca <hif_send+0x14a>
			{
				u32CurrAddr += (u16DataOffset - u16CtrlBufSize);
  4056aa:	9b04      	ldr	r3, [sp, #16]
  4056ac:	eba5 0509 	sub.w	r5, r5, r9
  4056b0:	441d      	add	r5, r3
  4056b2:	9504      	str	r5, [sp, #16]
				ret = nm_write_block(u32CurrAddr, pu8DataBuf, u16DataSize);
  4056b4:	9804      	ldr	r0, [sp, #16]
  4056b6:	4632      	mov	r2, r6
  4056b8:	4621      	mov	r1, r4
  4056ba:	4b21      	ldr	r3, [pc, #132]	; (405740 <hif_send+0x1c0>)
  4056bc:	4798      	blx	r3
			#ifdef CONF_WINC_USE_I2C	
				nm_bsp_sleep(1);
			#endif
				if(M2M_SUCCESS != ret) goto ERR1;
  4056be:	4683      	mov	fp, r0
  4056c0:	2800      	cmp	r0, #0
  4056c2:	d12f      	bne.n	405724 <hif_send+0x1a4>
				u32CurrAddr += u16DataSize;
  4056c4:	9b04      	ldr	r3, [sp, #16]
  4056c6:	441e      	add	r6, r3
  4056c8:	9604      	str	r6, [sp, #16]
			}

			reg = dma_addr << 2;
  4056ca:	9b03      	ldr	r3, [sp, #12]
  4056cc:	009b      	lsls	r3, r3, #2
  4056ce:	9302      	str	r3, [sp, #8]
			reg |= (1 << 1);
  4056d0:	9b02      	ldr	r3, [sp, #8]
  4056d2:	f043 0302 	orr.w	r3, r3, #2
  4056d6:	9302      	str	r3, [sp, #8]
			ret = nm_write_reg(WIFI_HOST_RCV_CTRL_3, reg);
  4056d8:	9902      	ldr	r1, [sp, #8]
  4056da:	f241 006c 	movw	r0, #4204	; 0x106c
  4056de:	4b16      	ldr	r3, [pc, #88]	; (405738 <hif_send+0x1b8>)
  4056e0:	4798      	blx	r3
			if(M2M_SUCCESS != ret) goto ERR1;
  4056e2:	4683      	mov	fp, r0
  4056e4:	b9f0      	cbnz	r0, 405724 <hif_send+0x1a4>
	else
	{
		M2M_ERR("(HIF)Fail to wakup the chip\n");
		goto ERR1;
	}
	ret = hif_chip_sleep();
  4056e6:	4b17      	ldr	r3, [pc, #92]	; (405744 <hif_send+0x1c4>)
  4056e8:	4798      	blx	r3
  4056ea:	4683      	mov	fp, r0
  4056ec:	e01a      	b.n	405724 <hif_send+0x1a4>
		strHif.u16Length += u16CtrlBufSize;
  4056ee:	f8bd 3016 	ldrh.w	r3, [sp, #22]
  4056f2:	fa19 f383 	uxtah	r3, r9, r3
  4056f6:	b29b      	uxth	r3, r3
  4056f8:	f8ad 3016 	strh.w	r3, [sp, #22]
  4056fc:	e760      	b.n	4055c0 <hif_send+0x40>
				ret = nm_read_reg_with_ret(0x150400,(uint32 *)&dma_addr);
  4056fe:	a903      	add	r1, sp, #12
  405700:	4811      	ldr	r0, [pc, #68]	; (405748 <hif_send+0x1c8>)
  405702:	4b0e      	ldr	r3, [pc, #56]	; (40573c <hif_send+0x1bc>)
  405704:	4798      	blx	r3
				if(ret != M2M_SUCCESS) {
  405706:	2800      	cmp	r0, #0
  405708:	d0ab      	beq.n	405662 <hif_send+0xe2>
					dma_addr = 0;
  40570a:	2300      	movs	r3, #0
  40570c:	9303      	str	r3, [sp, #12]
  40570e:	e7a8      	b.n	405662 <hif_send+0xe2>
		M2M_ERR("(HIF)Fail to wakup the chip\n");
  405710:	f240 129f 	movw	r2, #415	; 0x19f
  405714:	490d      	ldr	r1, [pc, #52]	; (40574c <hif_send+0x1cc>)
  405716:	480e      	ldr	r0, [pc, #56]	; (405750 <hif_send+0x1d0>)
  405718:	4c0e      	ldr	r4, [pc, #56]	; (405754 <hif_send+0x1d4>)
  40571a:	47a0      	blx	r4
  40571c:	480e      	ldr	r0, [pc, #56]	; (405758 <hif_send+0x1d8>)
  40571e:	47a0      	blx	r4
  405720:	480e      	ldr	r0, [pc, #56]	; (40575c <hif_send+0x1dc>)
  405722:	47a0      	blx	r4

ERR1:
	return ret;
}
  405724:	4658      	mov	r0, fp
  405726:	b007      	add	sp, #28
  405728:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
			ret =  M2M_ERR_MEM_ALLOC;
  40572c:	f06f 0b02 	mvn.w	fp, #2
  405730:	e7f8      	b.n	405724 <hif_send+0x1a4>
  405732:	bf00      	nop
  405734:	00405499 	.word	0x00405499
  405738:	00406751 	.word	0x00406751
  40573c:	00406745 	.word	0x00406745
  405740:	004067b9 	.word	0x004067b9
  405744:	004054f5 	.word	0x004054f5
  405748:	00150400 	.word	0x00150400
  40574c:	0040c998 	.word	0x0040c998
  405750:	0040c96c 	.word	0x0040c96c
  405754:	00409405 	.word	0x00409405
  405758:	0040cbec 	.word	0x0040cbec
  40575c:	0040d944 	.word	0x0040d944

00405760 <hif_handle_isr>:
*	@brief	Handle interrupt received from NMC1500 firmware.
*   @return     The function SHALL return 0 for success and a negative value otherwise.
*/

sint8 hif_handle_isr(void)
{
  405760:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
  405764:	b087      	sub	sp, #28
	sint8 ret = M2M_SUCCESS;

	while (gu8Interrupt) {
  405766:	f8df 92f8 	ldr.w	r9, [pc, #760]	; 405a60 <hif_handle_isr+0x300>
	ret = hif_chip_wake();
  40576a:	4fa2      	ldr	r7, [pc, #648]	; (4059f4 <hif_handle_isr+0x294>)
			if(ret == M2M_SUCCESS) {
				/*we will try forever untill we get that interrupt*/
				/*Fail return errors here due to bus errors (reading expected values)*/
				break;
			} else {
				M2M_ERR("(HIF) Fail to handle interrupt %d try Again..\n",ret);
  40576c:	4ea2      	ldr	r6, [pc, #648]	; (4059f8 <hif_handle_isr+0x298>)
		M2M_ERR("(hif) FAIL to wakeup the chip\n");
  40576e:	f8df 82f4 	ldr.w	r8, [pc, #756]	; 405a64 <hif_handle_isr+0x304>
	while (gu8Interrupt) {
  405772:	e0d5      	b.n	405920 <hif_handle_isr+0x1c0>
					ret = nm_read_block(address, (uint8*)&strHif, sizeof(tstrHifHdr));
  405774:	2204      	movs	r2, #4
  405776:	a904      	add	r1, sp, #16
  405778:	9805      	ldr	r0, [sp, #20]
  40577a:	4ba0      	ldr	r3, [pc, #640]	; (4059fc <hif_handle_isr+0x29c>)
  40577c:	4798      	blx	r3
					strHif.u16Length = NM_BSP_B_L_16(strHif.u16Length);
  40577e:	f8bd 3012 	ldrh.w	r3, [sp, #18]
  405782:	b29b      	uxth	r3, r3
  405784:	f8ad 3012 	strh.w	r3, [sp, #18]
					if(M2M_SUCCESS != ret)
  405788:	4604      	mov	r4, r0
  40578a:	2800      	cmp	r0, #0
  40578c:	d130      	bne.n	4057f0 <hif_handle_isr+0x90>
					if(strHif.u16Length != size)
  40578e:	f8bd 3012 	ldrh.w	r3, [sp, #18]
  405792:	b29b      	uxth	r3, r3
  405794:	429d      	cmp	r5, r3
  405796:	d005      	beq.n	4057a4 <hif_handle_isr+0x44>
						if((size - strHif.u16Length) > 4)
  405798:	f8bd 3012 	ldrh.w	r3, [sp, #18]
  40579c:	b29b      	uxth	r3, r3
  40579e:	1aeb      	subs	r3, r5, r3
  4057a0:	2b04      	cmp	r3, #4
  4057a2:	dc33      	bgt.n	40580c <hif_handle_isr+0xac>
					if(M2M_REQ_GROUP_WIFI == strHif.u8Gid)
  4057a4:	f89d 3010 	ldrb.w	r3, [sp, #16]
  4057a8:	b2db      	uxtb	r3, r3
  4057aa:	2b01      	cmp	r3, #1
  4057ac:	d047      	beq.n	40583e <hif_handle_isr+0xde>
					else if(M2M_REQ_GROUP_IP == strHif.u8Gid)
  4057ae:	f89d 3010 	ldrb.w	r3, [sp, #16]
  4057b2:	b2db      	uxtb	r3, r3
  4057b4:	2b02      	cmp	r3, #2
  4057b6:	d05f      	beq.n	405878 <hif_handle_isr+0x118>
					else if(M2M_REQ_GROUP_OTA == strHif.u8Gid)
  4057b8:	f89d 3010 	ldrb.w	r3, [sp, #16]
  4057bc:	b2db      	uxtb	r3, r3
  4057be:	2b04      	cmp	r3, #4
  4057c0:	d068      	beq.n	405894 <hif_handle_isr+0x134>
					else if(M2M_REQ_GROUP_CRYPTO == strHif.u8Gid)
  4057c2:	f89d 3010 	ldrb.w	r3, [sp, #16]
  4057c6:	b2db      	uxtb	r3, r3
  4057c8:	2b06      	cmp	r3, #6
  4057ca:	d071      	beq.n	4058b0 <hif_handle_isr+0x150>
					else if(M2M_REQ_GROUP_SIGMA == strHif.u8Gid)
  4057cc:	f89d 3010 	ldrb.w	r3, [sp, #16]
  4057d0:	b2db      	uxtb	r3, r3
  4057d2:	2b07      	cmp	r3, #7
  4057d4:	d07a      	beq.n	4058cc <hif_handle_isr+0x16c>
						M2M_ERR("(hif) invalid group ID\n");
  4057d6:	f240 2202 	movw	r2, #514	; 0x202
  4057da:	4641      	mov	r1, r8
  4057dc:	4630      	mov	r0, r6
  4057de:	4c88      	ldr	r4, [pc, #544]	; (405a00 <hif_handle_isr+0x2a0>)
  4057e0:	47a0      	blx	r4
  4057e2:	4888      	ldr	r0, [pc, #544]	; (405a04 <hif_handle_isr+0x2a4>)
  4057e4:	47a0      	blx	r4
  4057e6:	4888      	ldr	r0, [pc, #544]	; (405a08 <hif_handle_isr+0x2a8>)
  4057e8:	47a0      	blx	r4
						ret = M2M_ERR_BUS_FAIL;
  4057ea:	f06f 0405 	mvn.w	r4, #5
  4057ee:	e096      	b.n	40591e <hif_handle_isr+0x1be>
						M2M_ERR("(hif) address bus fail\n");
  4057f0:	f44f 72eb 	mov.w	r2, #470	; 0x1d6
  4057f4:	4641      	mov	r1, r8
  4057f6:	4630      	mov	r0, r6
  4057f8:	4d81      	ldr	r5, [pc, #516]	; (405a00 <hif_handle_isr+0x2a0>)
  4057fa:	47a8      	blx	r5
  4057fc:	4883      	ldr	r0, [pc, #524]	; (405a0c <hif_handle_isr+0x2ac>)
  4057fe:	47a8      	blx	r5
  405800:	4881      	ldr	r0, [pc, #516]	; (405a08 <hif_handle_isr+0x2a8>)
  405802:	47a8      	blx	r5
						nm_bsp_interrupt_ctrl(1);
  405804:	2001      	movs	r0, #1
  405806:	4b82      	ldr	r3, [pc, #520]	; (405a10 <hif_handle_isr+0x2b0>)
  405808:	4798      	blx	r3
  40580a:	e088      	b.n	40591e <hif_handle_isr+0x1be>
							M2M_ERR("(hif) Corrupted packet Size = %u <L = %u, G = %u, OP = %02X>\n",
  40580c:	f240 12df 	movw	r2, #479	; 0x1df
  405810:	4641      	mov	r1, r8
  405812:	4630      	mov	r0, r6
  405814:	4c7a      	ldr	r4, [pc, #488]	; (405a00 <hif_handle_isr+0x2a0>)
  405816:	47a0      	blx	r4
  405818:	f8bd 2012 	ldrh.w	r2, [sp, #18]
  40581c:	f89d 3010 	ldrb.w	r3, [sp, #16]
  405820:	f89d 1011 	ldrb.w	r1, [sp, #17]
  405824:	9100      	str	r1, [sp, #0]
  405826:	b292      	uxth	r2, r2
  405828:	4629      	mov	r1, r5
  40582a:	487a      	ldr	r0, [pc, #488]	; (405a14 <hif_handle_isr+0x2b4>)
  40582c:	47a0      	blx	r4
  40582e:	4876      	ldr	r0, [pc, #472]	; (405a08 <hif_handle_isr+0x2a8>)
  405830:	47a0      	blx	r4
							nm_bsp_interrupt_ctrl(1);
  405832:	2001      	movs	r0, #1
  405834:	4b76      	ldr	r3, [pc, #472]	; (405a10 <hif_handle_isr+0x2b0>)
  405836:	4798      	blx	r3
							ret = M2M_ERR_BUS_FAIL;
  405838:	f06f 0405 	mvn.w	r4, #5
  40583c:	e06f      	b.n	40591e <hif_handle_isr+0x1be>
						if(pfWifiCb)
  40583e:	4b76      	ldr	r3, [pc, #472]	; (405a18 <hif_handle_isr+0x2b8>)
  405840:	681b      	ldr	r3, [r3, #0]
  405842:	b143      	cbz	r3, 405856 <hif_handle_isr+0xf6>
							pfWifiCb(strHif.u8Opcode,strHif.u16Length - M2M_HIF_HDR_OFFSET, address + M2M_HIF_HDR_OFFSET);
  405844:	f89d 0011 	ldrb.w	r0, [sp, #17]
  405848:	f8bd 1012 	ldrh.w	r1, [sp, #18]
  40584c:	3908      	subs	r1, #8
  40584e:	9a05      	ldr	r2, [sp, #20]
  405850:	3208      	adds	r2, #8
  405852:	b289      	uxth	r1, r1
  405854:	4798      	blx	r3
					if(!gu8HifSizeDone)
  405856:	4b71      	ldr	r3, [pc, #452]	; (405a1c <hif_handle_isr+0x2bc>)
  405858:	781b      	ldrb	r3, [r3, #0]
  40585a:	2b00      	cmp	r3, #0
  40585c:	d15c      	bne.n	405918 <hif_handle_isr+0x1b8>
						M2M_ERR("(hif) host app didn't set RX Done\n");
  40585e:	f240 2209 	movw	r2, #521	; 0x209
  405862:	4641      	mov	r1, r8
  405864:	4630      	mov	r0, r6
  405866:	4c66      	ldr	r4, [pc, #408]	; (405a00 <hif_handle_isr+0x2a0>)
  405868:	47a0      	blx	r4
  40586a:	486d      	ldr	r0, [pc, #436]	; (405a20 <hif_handle_isr+0x2c0>)
  40586c:	47a0      	blx	r4
  40586e:	4866      	ldr	r0, [pc, #408]	; (405a08 <hif_handle_isr+0x2a8>)
  405870:	47a0      	blx	r4
						ret = hif_set_rx_done();
  405872:	4b6c      	ldr	r3, [pc, #432]	; (405a24 <hif_handle_isr+0x2c4>)
  405874:	4798      	blx	r3
  405876:	e04f      	b.n	405918 <hif_handle_isr+0x1b8>
						if(pfIpCb)
  405878:	4b6b      	ldr	r3, [pc, #428]	; (405a28 <hif_handle_isr+0x2c8>)
  40587a:	681b      	ldr	r3, [r3, #0]
  40587c:	2b00      	cmp	r3, #0
  40587e:	d0ea      	beq.n	405856 <hif_handle_isr+0xf6>
							pfIpCb(strHif.u8Opcode,strHif.u16Length - M2M_HIF_HDR_OFFSET, address + M2M_HIF_HDR_OFFSET);
  405880:	f89d 0011 	ldrb.w	r0, [sp, #17]
  405884:	f8bd 1012 	ldrh.w	r1, [sp, #18]
  405888:	3908      	subs	r1, #8
  40588a:	9a05      	ldr	r2, [sp, #20]
  40588c:	3208      	adds	r2, #8
  40588e:	b289      	uxth	r1, r1
  405890:	4798      	blx	r3
  405892:	e7e0      	b.n	405856 <hif_handle_isr+0xf6>
						if(pfOtaCb)
  405894:	4b65      	ldr	r3, [pc, #404]	; (405a2c <hif_handle_isr+0x2cc>)
  405896:	681b      	ldr	r3, [r3, #0]
  405898:	2b00      	cmp	r3, #0
  40589a:	d0dc      	beq.n	405856 <hif_handle_isr+0xf6>
							pfOtaCb(strHif.u8Opcode,strHif.u16Length - M2M_HIF_HDR_OFFSET, address + M2M_HIF_HDR_OFFSET);
  40589c:	f89d 0011 	ldrb.w	r0, [sp, #17]
  4058a0:	f8bd 1012 	ldrh.w	r1, [sp, #18]
  4058a4:	3908      	subs	r1, #8
  4058a6:	9a05      	ldr	r2, [sp, #20]
  4058a8:	3208      	adds	r2, #8
  4058aa:	b289      	uxth	r1, r1
  4058ac:	4798      	blx	r3
  4058ae:	e7d2      	b.n	405856 <hif_handle_isr+0xf6>
						if(pfCryptoCb)
  4058b0:	4b5f      	ldr	r3, [pc, #380]	; (405a30 <hif_handle_isr+0x2d0>)
  4058b2:	681b      	ldr	r3, [r3, #0]
  4058b4:	2b00      	cmp	r3, #0
  4058b6:	d0ce      	beq.n	405856 <hif_handle_isr+0xf6>
							pfCryptoCb(strHif.u8Opcode,strHif.u16Length - M2M_HIF_HDR_OFFSET, address + M2M_HIF_HDR_OFFSET);
  4058b8:	f89d 0011 	ldrb.w	r0, [sp, #17]
  4058bc:	f8bd 1012 	ldrh.w	r1, [sp, #18]
  4058c0:	3908      	subs	r1, #8
  4058c2:	9a05      	ldr	r2, [sp, #20]
  4058c4:	3208      	adds	r2, #8
  4058c6:	b289      	uxth	r1, r1
  4058c8:	4798      	blx	r3
  4058ca:	e7c4      	b.n	405856 <hif_handle_isr+0xf6>
						if(pfSigmaCb)
  4058cc:	4b59      	ldr	r3, [pc, #356]	; (405a34 <hif_handle_isr+0x2d4>)
  4058ce:	681b      	ldr	r3, [r3, #0]
  4058d0:	2b00      	cmp	r3, #0
  4058d2:	d0c0      	beq.n	405856 <hif_handle_isr+0xf6>
							pfSigmaCb(strHif.u8Opcode,strHif.u16Length - M2M_HIF_HDR_OFFSET, address + M2M_HIF_HDR_OFFSET);
  4058d4:	f89d 0011 	ldrb.w	r0, [sp, #17]
  4058d8:	f8bd 1012 	ldrh.w	r1, [sp, #18]
  4058dc:	3908      	subs	r1, #8
  4058de:	9a05      	ldr	r2, [sp, #20]
  4058e0:	3208      	adds	r2, #8
  4058e2:	b289      	uxth	r1, r1
  4058e4:	4798      	blx	r3
  4058e6:	e7b6      	b.n	405856 <hif_handle_isr+0xf6>
					M2M_ERR("(hif) Wrong Size\n");
  4058e8:	f240 2211 	movw	r2, #529	; 0x211
  4058ec:	4641      	mov	r1, r8
  4058ee:	4630      	mov	r0, r6
  4058f0:	4c43      	ldr	r4, [pc, #268]	; (405a00 <hif_handle_isr+0x2a0>)
  4058f2:	47a0      	blx	r4
  4058f4:	4850      	ldr	r0, [pc, #320]	; (405a38 <hif_handle_isr+0x2d8>)
  4058f6:	47a0      	blx	r4
  4058f8:	4843      	ldr	r0, [pc, #268]	; (405a08 <hif_handle_isr+0x2a8>)
  4058fa:	47a0      	blx	r4
					ret = M2M_ERR_RCV;
  4058fc:	f06f 0401 	mvn.w	r4, #1
  405900:	e02f      	b.n	405962 <hif_handle_isr+0x202>
				M2M_ERR("(hif) False interrupt %lx",reg);
  405902:	f44f 7206 	mov.w	r2, #536	; 0x218
  405906:	4641      	mov	r1, r8
  405908:	4630      	mov	r0, r6
  40590a:	4c3d      	ldr	r4, [pc, #244]	; (405a00 <hif_handle_isr+0x2a0>)
  40590c:	47a0      	blx	r4
  40590e:	9903      	ldr	r1, [sp, #12]
  405910:	484a      	ldr	r0, [pc, #296]	; (405a3c <hif_handle_isr+0x2dc>)
  405912:	47a0      	blx	r4
  405914:	483c      	ldr	r0, [pc, #240]	; (405a08 <hif_handle_isr+0x2a8>)
  405916:	47a0      	blx	r4
	ret = hif_chip_sleep();
  405918:	4b49      	ldr	r3, [pc, #292]	; (405a40 <hif_handle_isr+0x2e0>)
  40591a:	4798      	blx	r3
  40591c:	4604      	mov	r4, r0
			if(ret == M2M_SUCCESS) {
  40591e:	bb04      	cbnz	r4, 405962 <hif_handle_isr+0x202>
	while (gu8Interrupt) {
  405920:	f899 3000 	ldrb.w	r3, [r9]
  405924:	2b00      	cmp	r3, #0
  405926:	f000 809f 	beq.w	405a68 <hif_handle_isr+0x308>
		gu8Interrupt--;
  40592a:	f899 3000 	ldrb.w	r3, [r9]
  40592e:	3b01      	subs	r3, #1
  405930:	b2db      	uxtb	r3, r3
  405932:	f889 3000 	strb.w	r3, [r9]
  405936:	e01f      	b.n	405978 <hif_handle_isr+0x218>
			M2M_ERR("(hif) Fail to Read interrupt reg\n");
  405938:	f240 221e 	movw	r2, #542	; 0x21e
  40593c:	4641      	mov	r1, r8
  40593e:	4630      	mov	r0, r6
  405940:	4d2f      	ldr	r5, [pc, #188]	; (405a00 <hif_handle_isr+0x2a0>)
  405942:	47a8      	blx	r5
  405944:	483f      	ldr	r0, [pc, #252]	; (405a44 <hif_handle_isr+0x2e4>)
  405946:	47a8      	blx	r5
  405948:	482f      	ldr	r0, [pc, #188]	; (405a08 <hif_handle_isr+0x2a8>)
  40594a:	47a8      	blx	r5
  40594c:	e009      	b.n	405962 <hif_handle_isr+0x202>
		M2M_ERR("(hif) FAIL to wakeup the chip\n");
  40594e:	f44f 7209 	mov.w	r2, #548	; 0x224
  405952:	4641      	mov	r1, r8
  405954:	4630      	mov	r0, r6
  405956:	4d2a      	ldr	r5, [pc, #168]	; (405a00 <hif_handle_isr+0x2a0>)
  405958:	47a8      	blx	r5
  40595a:	483b      	ldr	r0, [pc, #236]	; (405a48 <hif_handle_isr+0x2e8>)
  40595c:	47a8      	blx	r5
  40595e:	482a      	ldr	r0, [pc, #168]	; (405a08 <hif_handle_isr+0x2a8>)
  405960:	47a8      	blx	r5
				M2M_ERR("(HIF) Fail to handle interrupt %d try Again..\n",ret);
  405962:	f240 2243 	movw	r2, #579	; 0x243
  405966:	4939      	ldr	r1, [pc, #228]	; (405a4c <hif_handle_isr+0x2ec>)
  405968:	4630      	mov	r0, r6
  40596a:	4d25      	ldr	r5, [pc, #148]	; (405a00 <hif_handle_isr+0x2a0>)
  40596c:	47a8      	blx	r5
  40596e:	4621      	mov	r1, r4
  405970:	4837      	ldr	r0, [pc, #220]	; (405a50 <hif_handle_isr+0x2f0>)
  405972:	47a8      	blx	r5
  405974:	4824      	ldr	r0, [pc, #144]	; (405a08 <hif_handle_isr+0x2a8>)
  405976:	47a8      	blx	r5
	ret = hif_chip_wake();
  405978:	47b8      	blx	r7
	if(ret == M2M_SUCCESS)
  40597a:	4604      	mov	r4, r0
  40597c:	2800      	cmp	r0, #0
  40597e:	d1e6      	bne.n	40594e <hif_handle_isr+0x1ee>
		ret = nm_read_reg_with_ret(WIFI_HOST_RCV_CTRL_0, &reg);
  405980:	a903      	add	r1, sp, #12
  405982:	f241 0070 	movw	r0, #4208	; 0x1070
  405986:	4b33      	ldr	r3, [pc, #204]	; (405a54 <hif_handle_isr+0x2f4>)
  405988:	4798      	blx	r3
		if(M2M_SUCCESS == ret)
  40598a:	4604      	mov	r4, r0
  40598c:	2800      	cmp	r0, #0
  40598e:	d1d3      	bne.n	405938 <hif_handle_isr+0x1d8>
			if(reg & 0x1)	/* New interrupt has been received */
  405990:	9b03      	ldr	r3, [sp, #12]
  405992:	f013 0f01 	tst.w	r3, #1
  405996:	d0b4      	beq.n	405902 <hif_handle_isr+0x1a2>
				nm_bsp_interrupt_ctrl(0);
  405998:	4b1d      	ldr	r3, [pc, #116]	; (405a10 <hif_handle_isr+0x2b0>)
  40599a:	4798      	blx	r3
				reg &= ~(1<<0);
  40599c:	9903      	ldr	r1, [sp, #12]
  40599e:	f021 0101 	bic.w	r1, r1, #1
  4059a2:	9103      	str	r1, [sp, #12]
				ret = nm_write_reg(WIFI_HOST_RCV_CTRL_0,reg);
  4059a4:	f241 0070 	movw	r0, #4208	; 0x1070
  4059a8:	4b2b      	ldr	r3, [pc, #172]	; (405a58 <hif_handle_isr+0x2f8>)
  4059aa:	4798      	blx	r3
				if(ret != M2M_SUCCESS)goto ERR1;
  4059ac:	4604      	mov	r4, r0
  4059ae:	2800      	cmp	r0, #0
  4059b0:	d1d7      	bne.n	405962 <hif_handle_isr+0x202>
				gu8HifSizeDone = 0;
  4059b2:	2200      	movs	r2, #0
  4059b4:	4b19      	ldr	r3, [pc, #100]	; (405a1c <hif_handle_isr+0x2bc>)
  4059b6:	701a      	strb	r2, [r3, #0]
				size = (uint16)((reg >> 2) & 0xfff);
  4059b8:	9d03      	ldr	r5, [sp, #12]
  4059ba:	f3c5 058b 	ubfx	r5, r5, #2, #12
				if (size > 0) {
  4059be:	2d00      	cmp	r5, #0
  4059c0:	d092      	beq.n	4058e8 <hif_handle_isr+0x188>
					uint32 address = 0;
  4059c2:	a906      	add	r1, sp, #24
  4059c4:	f841 2d04 	str.w	r2, [r1, #-4]!
					ret = nm_read_reg_with_ret(WIFI_HOST_RCV_CTRL_1, &address);
  4059c8:	f241 0084 	movw	r0, #4228	; 0x1084
  4059cc:	4b21      	ldr	r3, [pc, #132]	; (405a54 <hif_handle_isr+0x2f4>)
  4059ce:	4798      	blx	r3
					if(M2M_SUCCESS != ret)
  4059d0:	4604      	mov	r4, r0
  4059d2:	2800      	cmp	r0, #0
  4059d4:	f43f aece 	beq.w	405774 <hif_handle_isr+0x14>
						M2M_ERR("(hif) WIFI_HOST_RCV_CTRL_1 bus fail\n");
  4059d8:	f44f 72e7 	mov.w	r2, #462	; 0x1ce
  4059dc:	4641      	mov	r1, r8
  4059de:	4630      	mov	r0, r6
  4059e0:	4d07      	ldr	r5, [pc, #28]	; (405a00 <hif_handle_isr+0x2a0>)
  4059e2:	47a8      	blx	r5
  4059e4:	481d      	ldr	r0, [pc, #116]	; (405a5c <hif_handle_isr+0x2fc>)
  4059e6:	47a8      	blx	r5
  4059e8:	4807      	ldr	r0, [pc, #28]	; (405a08 <hif_handle_isr+0x2a8>)
  4059ea:	47a8      	blx	r5
						nm_bsp_interrupt_ctrl(1);
  4059ec:	2001      	movs	r0, #1
  4059ee:	4b08      	ldr	r3, [pc, #32]	; (405a10 <hif_handle_isr+0x2b0>)
  4059f0:	4798      	blx	r3
  4059f2:	e794      	b.n	40591e <hif_handle_isr+0x1be>
  4059f4:	00405499 	.word	0x00405499
  4059f8:	0040c96c 	.word	0x0040c96c
  4059fc:	0040675d 	.word	0x0040675d
  405a00:	00409405 	.word	0x00409405
  405a04:	0040ca58 	.word	0x0040ca58
  405a08:	0040d944 	.word	0x0040d944
  405a0c:	0040ca00 	.word	0x0040ca00
  405a10:	004051b1 	.word	0x004051b1
  405a14:	0040ca18 	.word	0x0040ca18
  405a18:	2040c3b0 	.word	0x2040c3b0
  405a1c:	2040c39a 	.word	0x2040c39a
  405a20:	0040ca70 	.word	0x0040ca70
  405a24:	00405459 	.word	0x00405459
  405a28:	2040c3a4 	.word	0x2040c3a4
  405a2c:	2040c3a8 	.word	0x2040c3a8
  405a30:	2040c39c 	.word	0x2040c39c
  405a34:	2040c3ac 	.word	0x2040c3ac
  405a38:	0040ca94 	.word	0x0040ca94
  405a3c:	0040caa8 	.word	0x0040caa8
  405a40:	004054f5 	.word	0x004054f5
  405a44:	0040cac4 	.word	0x0040cac4
  405a48:	0040cae8 	.word	0x0040cae8
  405a4c:	0040c9ac 	.word	0x0040c9ac
  405a50:	0040cb08 	.word	0x0040cb08
  405a54:	00406745 	.word	0x00406745
  405a58:	00406751 	.word	0x00406751
  405a5c:	0040c9d8 	.word	0x0040c9d8
  405a60:	2040c39b 	.word	0x2040c39b
  405a64:	0040c9a4 	.word	0x0040c9a4
			}
		}
	}

	return ret;
}
  405a68:	2000      	movs	r0, #0
  405a6a:	b007      	add	sp, #28
  405a6c:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}

00405a70 <hif_receive>:
*	@param [in]	isDone
*				If you don't need any more packets send True otherwise send false
*    @return		The function shall return ZERO for successful operation and a negative value otherwise.
*/
sint8 hif_receive(uint32 u32Addr, uint8 *pu8Buf, uint16 u16Sz, uint8 isDone)
{
  405a70:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
  405a74:	b083      	sub	sp, #12
  405a76:	461c      	mov	r4, r3
	uint32 address, reg;
	uint16 size;
	sint8 ret = M2M_SUCCESS;

	if(u32Addr == 0 ||pu8Buf == NULL || u16Sz == 0)
  405a78:	2a00      	cmp	r2, #0
  405a7a:	bf18      	it	ne
  405a7c:	2900      	cmpne	r1, #0
  405a7e:	d003      	beq.n	405a88 <hif_receive+0x18>
  405a80:	4605      	mov	r5, r0
  405a82:	460f      	mov	r7, r1
  405a84:	4616      	mov	r6, r2
  405a86:	b9b8      	cbnz	r0, 405ab8 <hif_receive+0x48>
	{
		if(isDone)
  405a88:	b14c      	cbz	r4, 405a9e <hif_receive+0x2e>
		{
			gu8HifSizeDone = 1;
  405a8a:	2201      	movs	r2, #1
  405a8c:	4b32      	ldr	r3, [pc, #200]	; (405b58 <hif_receive+0xe8>)
  405a8e:	701a      	strb	r2, [r3, #0]
			
			/* set RX done */
			ret = hif_set_rx_done();
  405a90:	4b32      	ldr	r3, [pc, #200]	; (405b5c <hif_receive+0xec>)
  405a92:	4798      	blx	r3
  405a94:	4603      	mov	r3, r0



ERR1:
	return ret;
}
  405a96:	4618      	mov	r0, r3
  405a98:	b003      	add	sp, #12
  405a9a:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
			M2M_ERR(" hif_receive: Invalid argument\n");
  405a9e:	f240 2269 	movw	r2, #617	; 0x269
  405aa2:	492f      	ldr	r1, [pc, #188]	; (405b60 <hif_receive+0xf0>)
  405aa4:	482f      	ldr	r0, [pc, #188]	; (405b64 <hif_receive+0xf4>)
  405aa6:	4c30      	ldr	r4, [pc, #192]	; (405b68 <hif_receive+0xf8>)
  405aa8:	47a0      	blx	r4
  405aaa:	4830      	ldr	r0, [pc, #192]	; (405b6c <hif_receive+0xfc>)
  405aac:	47a0      	blx	r4
  405aae:	4830      	ldr	r0, [pc, #192]	; (405b70 <hif_receive+0x100>)
  405ab0:	47a0      	blx	r4
			ret = M2M_ERR_FAIL;
  405ab2:	f06f 030b 	mvn.w	r3, #11
  405ab6:	e7ee      	b.n	405a96 <hif_receive+0x26>
	ret = nm_read_reg_with_ret(WIFI_HOST_RCV_CTRL_0,&reg);
  405ab8:	4669      	mov	r1, sp
  405aba:	f241 0070 	movw	r0, #4208	; 0x1070
  405abe:	4b2d      	ldr	r3, [pc, #180]	; (405b74 <hif_receive+0x104>)
  405ac0:	4798      	blx	r3
	if(ret != M2M_SUCCESS)goto ERR1;
  405ac2:	4603      	mov	r3, r0
  405ac4:	2800      	cmp	r0, #0
  405ac6:	d1e6      	bne.n	405a96 <hif_receive+0x26>
	size = (uint16)((reg >> 2) & 0xfff);
  405ac8:	f8dd 8000 	ldr.w	r8, [sp]
	ret = nm_read_reg_with_ret(WIFI_HOST_RCV_CTRL_1,&address);
  405acc:	a901      	add	r1, sp, #4
  405ace:	f241 0084 	movw	r0, #4228	; 0x1084
  405ad2:	4b28      	ldr	r3, [pc, #160]	; (405b74 <hif_receive+0x104>)
  405ad4:	4798      	blx	r3
	if(ret != M2M_SUCCESS)goto ERR1;
  405ad6:	4603      	mov	r3, r0
  405ad8:	2800      	cmp	r0, #0
  405ada:	d1dc      	bne.n	405a96 <hif_receive+0x26>
	size = (uint16)((reg >> 2) & 0xfff);
  405adc:	f3c8 088b 	ubfx	r8, r8, #2, #12
	if(u16Sz > size)
  405ae0:	4546      	cmp	r6, r8
  405ae2:	d81c      	bhi.n	405b1e <hif_receive+0xae>
	if((u32Addr < address)||((u32Addr + u16Sz)>(address+size)))
  405ae4:	9b01      	ldr	r3, [sp, #4]
  405ae6:	429d      	cmp	r5, r3
  405ae8:	d328      	bcc.n	405b3c <hif_receive+0xcc>
  405aea:	eb05 0906 	add.w	r9, r5, r6
  405aee:	4443      	add	r3, r8
  405af0:	4599      	cmp	r9, r3
  405af2:	d823      	bhi.n	405b3c <hif_receive+0xcc>
	ret = nm_read_block(u32Addr, pu8Buf, u16Sz);
  405af4:	4632      	mov	r2, r6
  405af6:	4639      	mov	r1, r7
  405af8:	4628      	mov	r0, r5
  405afa:	4b1f      	ldr	r3, [pc, #124]	; (405b78 <hif_receive+0x108>)
  405afc:	4798      	blx	r3
	if(ret != M2M_SUCCESS)goto ERR1;
  405afe:	4603      	mov	r3, r0
  405b00:	2800      	cmp	r0, #0
  405b02:	d1c8      	bne.n	405a96 <hif_receive+0x26>
	if((((address + size) - (u32Addr + u16Sz)) <= 0) || isDone)
  405b04:	9a01      	ldr	r2, [sp, #4]
  405b06:	4490      	add	r8, r2
  405b08:	45c8      	cmp	r8, r9
  405b0a:	d001      	beq.n	405b10 <hif_receive+0xa0>
  405b0c:	2c00      	cmp	r4, #0
  405b0e:	d0c2      	beq.n	405a96 <hif_receive+0x26>
		gu8HifSizeDone = 1;
  405b10:	2201      	movs	r2, #1
  405b12:	4b11      	ldr	r3, [pc, #68]	; (405b58 <hif_receive+0xe8>)
  405b14:	701a      	strb	r2, [r3, #0]
		ret = hif_set_rx_done();
  405b16:	4b11      	ldr	r3, [pc, #68]	; (405b5c <hif_receive+0xec>)
  405b18:	4798      	blx	r3
  405b1a:	4603      	mov	r3, r0
  405b1c:	e7bb      	b.n	405a96 <hif_receive+0x26>
		M2M_ERR("APP Requested Size is larger than the recived buffer size <%d><%d>\n",u16Sz, size);
  405b1e:	f240 227a 	movw	r2, #634	; 0x27a
  405b22:	490f      	ldr	r1, [pc, #60]	; (405b60 <hif_receive+0xf0>)
  405b24:	480f      	ldr	r0, [pc, #60]	; (405b64 <hif_receive+0xf4>)
  405b26:	4c10      	ldr	r4, [pc, #64]	; (405b68 <hif_receive+0xf8>)
  405b28:	47a0      	blx	r4
  405b2a:	4642      	mov	r2, r8
  405b2c:	4631      	mov	r1, r6
  405b2e:	4813      	ldr	r0, [pc, #76]	; (405b7c <hif_receive+0x10c>)
  405b30:	47a0      	blx	r4
  405b32:	480f      	ldr	r0, [pc, #60]	; (405b70 <hif_receive+0x100>)
  405b34:	47a0      	blx	r4
		ret = M2M_ERR_FAIL;
  405b36:	f06f 030b 	mvn.w	r3, #11
		goto ERR1;
  405b3a:	e7ac      	b.n	405a96 <hif_receive+0x26>
		M2M_ERR("APP Requested Address beyond the recived buffer address and length\n");
  405b3c:	f44f 7220 	mov.w	r2, #640	; 0x280
  405b40:	4907      	ldr	r1, [pc, #28]	; (405b60 <hif_receive+0xf0>)
  405b42:	4808      	ldr	r0, [pc, #32]	; (405b64 <hif_receive+0xf4>)
  405b44:	4c08      	ldr	r4, [pc, #32]	; (405b68 <hif_receive+0xf8>)
  405b46:	47a0      	blx	r4
  405b48:	480d      	ldr	r0, [pc, #52]	; (405b80 <hif_receive+0x110>)
  405b4a:	47a0      	blx	r4
  405b4c:	4808      	ldr	r0, [pc, #32]	; (405b70 <hif_receive+0x100>)
  405b4e:	47a0      	blx	r4
		ret = M2M_ERR_FAIL;
  405b50:	f06f 030b 	mvn.w	r3, #11
		goto ERR1;
  405b54:	e79f      	b.n	405a96 <hif_receive+0x26>
  405b56:	bf00      	nop
  405b58:	2040c39a 	.word	0x2040c39a
  405b5c:	00405459 	.word	0x00405459
  405b60:	0040c9bc 	.word	0x0040c9bc
  405b64:	0040c96c 	.word	0x0040c96c
  405b68:	00409405 	.word	0x00409405
  405b6c:	0040cb38 	.word	0x0040cb38
  405b70:	0040d944 	.word	0x0040d944
  405b74:	00406745 	.word	0x00406745
  405b78:	0040675d 	.word	0x0040675d
  405b7c:	0040cb58 	.word	0x0040cb58
  405b80:	0040cb9c 	.word	0x0040cb9c

00405b84 <hif_register_cb>:
*				function to be set
*    @return		The function shall return ZERO for successful operation and a negative value otherwise.
*/

sint8 hif_register_cb(uint8 u8Grp,tpfHifCallBack fn)
{
  405b84:	b538      	push	{r3, r4, r5, lr}
	sint8 ret = M2M_SUCCESS;
	switch(u8Grp)
  405b86:	1e43      	subs	r3, r0, #1
  405b88:	2b06      	cmp	r3, #6
  405b8a:	d81d      	bhi.n	405bc8 <hif_register_cb+0x44>
  405b8c:	e8df f003 	tbb	[pc, r3]
  405b90:	0c100408 	.word	0x0c100408
  405b94:	141c      	.short	0x141c
  405b96:	18          	.byte	0x18
  405b97:	00          	.byte	0x00
	{
		case M2M_REQ_GROUP_IP:
			pfIpCb = fn;
  405b98:	4b13      	ldr	r3, [pc, #76]	; (405be8 <hif_register_cb+0x64>)
  405b9a:	6019      	str	r1, [r3, #0]
	sint8 ret = M2M_SUCCESS;
  405b9c:	2000      	movs	r0, #0
			break;
  405b9e:	bd38      	pop	{r3, r4, r5, pc}
		case M2M_REQ_GROUP_WIFI:
			pfWifiCb = fn;
  405ba0:	4b12      	ldr	r3, [pc, #72]	; (405bec <hif_register_cb+0x68>)
  405ba2:	6019      	str	r1, [r3, #0]
	sint8 ret = M2M_SUCCESS;
  405ba4:	2000      	movs	r0, #0
			break;
  405ba6:	bd38      	pop	{r3, r4, r5, pc}
		case M2M_REQ_GROUP_OTA:
			pfOtaCb = fn;
  405ba8:	4b11      	ldr	r3, [pc, #68]	; (405bf0 <hif_register_cb+0x6c>)
  405baa:	6019      	str	r1, [r3, #0]
	sint8 ret = M2M_SUCCESS;
  405bac:	2000      	movs	r0, #0
			break;
  405bae:	bd38      	pop	{r3, r4, r5, pc}
		case M2M_REQ_GROUP_HIF:
			pfHifCb = fn;
  405bb0:	4b10      	ldr	r3, [pc, #64]	; (405bf4 <hif_register_cb+0x70>)
  405bb2:	6019      	str	r1, [r3, #0]
	sint8 ret = M2M_SUCCESS;
  405bb4:	2000      	movs	r0, #0
			break;
  405bb6:	bd38      	pop	{r3, r4, r5, pc}
		case M2M_REQ_GROUP_CRYPTO:
			pfCryptoCb = fn;
  405bb8:	4b0f      	ldr	r3, [pc, #60]	; (405bf8 <hif_register_cb+0x74>)
  405bba:	6019      	str	r1, [r3, #0]
	sint8 ret = M2M_SUCCESS;
  405bbc:	2000      	movs	r0, #0
			break;
  405bbe:	bd38      	pop	{r3, r4, r5, pc}
		case M2M_REQ_GROUP_SIGMA:
			pfSigmaCb = fn;
  405bc0:	4b0e      	ldr	r3, [pc, #56]	; (405bfc <hif_register_cb+0x78>)
  405bc2:	6019      	str	r1, [r3, #0]
	sint8 ret = M2M_SUCCESS;
  405bc4:	2000      	movs	r0, #0
			break;
  405bc6:	bd38      	pop	{r3, r4, r5, pc}
  405bc8:	4604      	mov	r4, r0
		default:
			M2M_ERR("GRp ? %d\n",u8Grp);
  405bca:	f240 22b9 	movw	r2, #697	; 0x2b9
  405bce:	490c      	ldr	r1, [pc, #48]	; (405c00 <hif_register_cb+0x7c>)
  405bd0:	480c      	ldr	r0, [pc, #48]	; (405c04 <hif_register_cb+0x80>)
  405bd2:	4d0d      	ldr	r5, [pc, #52]	; (405c08 <hif_register_cb+0x84>)
  405bd4:	47a8      	blx	r5
  405bd6:	4621      	mov	r1, r4
  405bd8:	480c      	ldr	r0, [pc, #48]	; (405c0c <hif_register_cb+0x88>)
  405bda:	47a8      	blx	r5
  405bdc:	480c      	ldr	r0, [pc, #48]	; (405c10 <hif_register_cb+0x8c>)
  405bde:	47a8      	blx	r5
			ret = M2M_ERR_FAIL;
  405be0:	f06f 000b 	mvn.w	r0, #11
			break;
	}
	return ret;
}
  405be4:	bd38      	pop	{r3, r4, r5, pc}
  405be6:	bf00      	nop
  405be8:	2040c3a4 	.word	0x2040c3a4
  405bec:	2040c3b0 	.word	0x2040c3b0
  405bf0:	2040c3a8 	.word	0x2040c3a8
  405bf4:	2040c3a0 	.word	0x2040c3a0
  405bf8:	2040c39c 	.word	0x2040c39c
  405bfc:	2040c3ac 	.word	0x2040c3ac
  405c00:	0040c9c8 	.word	0x0040c9c8
  405c04:	0040c96c 	.word	0x0040c96c
  405c08:	00409405 	.word	0x00409405
  405c0c:	0040cbe0 	.word	0x0040cbe0
  405c10:	0040d944 	.word	0x0040d944

00405c14 <hif_init>:
{
  405c14:	b510      	push	{r4, lr}
	pfWifiCb = NULL;
  405c16:	2400      	movs	r4, #0
  405c18:	4b09      	ldr	r3, [pc, #36]	; (405c40 <hif_init+0x2c>)
  405c1a:	601c      	str	r4, [r3, #0]
	pfIpCb = NULL;
  405c1c:	4b09      	ldr	r3, [pc, #36]	; (405c44 <hif_init+0x30>)
  405c1e:	601c      	str	r4, [r3, #0]
	gu8ChipSleep = 0;
  405c20:	4b09      	ldr	r3, [pc, #36]	; (405c48 <hif_init+0x34>)
  405c22:	701c      	strb	r4, [r3, #0]
	gu8ChipMode = M2M_NO_PS;
  405c24:	4b09      	ldr	r3, [pc, #36]	; (405c4c <hif_init+0x38>)
  405c26:	701c      	strb	r4, [r3, #0]
	gu8Interrupt = 0;
  405c28:	4b09      	ldr	r3, [pc, #36]	; (405c50 <hif_init+0x3c>)
  405c2a:	701c      	strb	r4, [r3, #0]
	nm_bsp_register_isr(isr);
  405c2c:	4809      	ldr	r0, [pc, #36]	; (405c54 <hif_init+0x40>)
  405c2e:	4b0a      	ldr	r3, [pc, #40]	; (405c58 <hif_init+0x44>)
  405c30:	4798      	blx	r3
	hif_register_cb(M2M_REQ_GROUP_HIF,m2m_hif_cb);
  405c32:	490a      	ldr	r1, [pc, #40]	; (405c5c <hif_init+0x48>)
  405c34:	2003      	movs	r0, #3
  405c36:	4b0a      	ldr	r3, [pc, #40]	; (405c60 <hif_init+0x4c>)
  405c38:	4798      	blx	r3
}
  405c3a:	4620      	mov	r0, r4
  405c3c:	bd10      	pop	{r4, pc}
  405c3e:	bf00      	nop
  405c40:	2040c3b0 	.word	0x2040c3b0
  405c44:	2040c3a4 	.word	0x2040c3a4
  405c48:	2040c399 	.word	0x2040c399
  405c4c:	2040c398 	.word	0x2040c398
  405c50:	2040c39b 	.word	0x2040c39b
  405c54:	00405445 	.word	0x00405445
  405c58:	00405131 	.word	0x00405131
  405c5c:	00405455 	.word	0x00405455
  405c60:	00405b85 	.word	0x00405b85

00405c64 <m2m_wifi_cb>:
*	@author
*	@date
*	@version	1.0
*/
static void m2m_wifi_cb(uint8 u8OpCode, uint16 u16DataSize, uint32 u32Addr)
{
  405c64:	b530      	push	{r4, r5, lr}
  405c66:	b09f      	sub	sp, #124	; 0x7c
  405c68:	4615      	mov	r5, r2
	uint8 rx_buf[8];
	if (u8OpCode == M2M_WIFI_RESP_CON_STATE_CHANGED)
  405c6a:	282c      	cmp	r0, #44	; 0x2c
  405c6c:	d02e      	beq.n	405ccc <m2m_wifi_cb+0x68>
  405c6e:	4604      	mov	r4, r0
		{
			if (gpfAppWifiCb)
				gpfAppWifiCb(M2M_WIFI_RESP_CON_STATE_CHANGED, &strState);
		}
	}
	else if (u8OpCode == M2M_WIFI_RESP_GET_SYS_TIME)
  405c70:	281b      	cmp	r0, #27
  405c72:	d03b      	beq.n	405cec <m2m_wifi_cb+0x88>
		{
			if (gpfAppWifiCb)
				gpfAppWifiCb(M2M_WIFI_RESP_GET_SYS_TIME, &strSysTime);
		}
	}
	else if(u8OpCode == M2M_WIFI_RESP_CONN_INFO)
  405c74:	2806      	cmp	r0, #6
  405c76:	d049      	beq.n	405d0c <m2m_wifi_cb+0xa8>
		{
			if(gpfAppWifiCb)
				gpfAppWifiCb(M2M_WIFI_RESP_CONN_INFO, &strConnInfo);
		}
	}
	else if (u8OpCode == M2M_WIFI_RESP_MEMORY_RECOVER)
  405c78:	280e      	cmp	r0, #14
  405c7a:	d025      	beq.n	405cc8 <m2m_wifi_cb+0x64>
			if (app_wifi_recover_cb)
				app_wifi_recover_cb(strState.u8CurrState);
		}
#endif
	}
	else if (u8OpCode == M2M_WIFI_REQ_DHCP_CONF)
  405c7c:	2832      	cmp	r0, #50	; 0x32
  405c7e:	d055      	beq.n	405d2c <m2m_wifi_cb+0xc8>
		{
			if (gpfAppWifiCb)
				gpfAppWifiCb(M2M_WIFI_REQ_DHCP_CONF, (uint8 *)&strIpConfig);
		}
	}
	else if (u8OpCode == M2M_WIFI_REQ_WPS)
  405c80:	282f      	cmp	r0, #47	; 0x2f
  405c82:	d063      	beq.n	405d4c <m2m_wifi_cb+0xe8>
		{
			if (gpfAppWifiCb)
				gpfAppWifiCb(M2M_WIFI_REQ_WPS, &strWps);
		}
	}
	else if (u8OpCode == M2M_WIFI_RESP_IP_CONFLICT)
  405c84:	2834      	cmp	r0, #52	; 0x34
  405c86:	d076      	beq.n	405d76 <m2m_wifi_cb+0x112>
			if (gpfAppWifiCb)
				gpfAppWifiCb(M2M_WIFI_RESP_IP_CONFLICT, NULL);

		}
	}
	else if (u8OpCode == M2M_WIFI_RESP_SCAN_DONE)
  405c88:	2811      	cmp	r0, #17
  405c8a:	f000 8093 	beq.w	405db4 <m2m_wifi_cb+0x150>
			gu8ChNum = strState.u8NumofCh;
			if (gpfAppWifiCb)
				gpfAppWifiCb(M2M_WIFI_RESP_SCAN_DONE, &strState);
		}
	}
	else if (u8OpCode == M2M_WIFI_RESP_SCAN_RESULT)
  405c8e:	2813      	cmp	r0, #19
  405c90:	f000 80a8 	beq.w	405de4 <m2m_wifi_cb+0x180>
		{
			if (gpfAppWifiCb)
				gpfAppWifiCb(M2M_WIFI_RESP_SCAN_RESULT, &strScanResult);
		}
	}
	else if (u8OpCode == M2M_WIFI_RESP_CURRENT_RSSI)
  405c94:	2804      	cmp	r0, #4
  405c96:	f000 80b7 	beq.w	405e08 <m2m_wifi_cb+0x1a4>
		{
			if (gpfAppWifiCb)
				gpfAppWifiCb(M2M_WIFI_RESP_CURRENT_RSSI, rx_buf);
		}
	}
	else if (u8OpCode == M2M_WIFI_RESP_CLIENT_INFO)
  405c9a:	2865      	cmp	r0, #101	; 0x65
  405c9c:	f000 80c6 	beq.w	405e2c <m2m_wifi_cb+0x1c8>
		{
			if (gpfAppWifiCb)
				gpfAppWifiCb(M2M_WIFI_RESP_CLIENT_INFO, rx_buf);
		}
	}
	else if(u8OpCode == M2M_WIFI_RESP_PROVISION_INFO)
  405ca0:	2809      	cmp	r0, #9
  405ca2:	f000 80d5 	beq.w	405e50 <m2m_wifi_cb+0x1ec>
		{
			if(gpfAppWifiCb)
				gpfAppWifiCb(M2M_WIFI_RESP_PROVISION_INFO, &strProvInfo);
		}
	}
	else if(u8OpCode == M2M_WIFI_RESP_DEFAULT_CONNECT)
  405ca6:	282a      	cmp	r0, #42	; 0x2a
  405ca8:	f000 80e4 	beq.w	405e74 <m2m_wifi_cb+0x210>
			if(gpfAppWifiCb)
				gpfAppWifiCb(M2M_WIFI_RESP_DEFAULT_CONNECT, &strResp);
		}
	}
	
	else if(u8OpCode == M2M_WIFI_RESP_GET_PRNG)
  405cac:	2820      	cmp	r0, #32
  405cae:	f000 80f3 	beq.w	405e98 <m2m_wifi_cb+0x234>
		}
	}
#endif
	else
	{
		M2M_ERR("REQ Not defined %d\n",u8OpCode);
  405cb2:	f44f 7295 	mov.w	r2, #298	; 0x12a
  405cb6:	4986      	ldr	r1, [pc, #536]	; (405ed0 <m2m_wifi_cb+0x26c>)
  405cb8:	4886      	ldr	r0, [pc, #536]	; (405ed4 <m2m_wifi_cb+0x270>)
  405cba:	4d87      	ldr	r5, [pc, #540]	; (405ed8 <m2m_wifi_cb+0x274>)
  405cbc:	47a8      	blx	r5
  405cbe:	4621      	mov	r1, r4
  405cc0:	4886      	ldr	r0, [pc, #536]	; (405edc <m2m_wifi_cb+0x278>)
  405cc2:	47a8      	blx	r5
  405cc4:	4886      	ldr	r0, [pc, #536]	; (405ee0 <m2m_wifi_cb+0x27c>)
  405cc6:	47a8      	blx	r5
	}
}
  405cc8:	b01f      	add	sp, #124	; 0x7c
  405cca:	bd30      	pop	{r4, r5, pc}
		if (hif_receive(u32Addr, (uint8*) &strState,sizeof(tstrM2mWifiStateChanged), 0) == M2M_SUCCESS)
  405ccc:	2300      	movs	r3, #0
  405cce:	2204      	movs	r2, #4
  405cd0:	a903      	add	r1, sp, #12
  405cd2:	4628      	mov	r0, r5
  405cd4:	4c83      	ldr	r4, [pc, #524]	; (405ee4 <m2m_wifi_cb+0x280>)
  405cd6:	47a0      	blx	r4
  405cd8:	2800      	cmp	r0, #0
  405cda:	d1f5      	bne.n	405cc8 <m2m_wifi_cb+0x64>
			if (gpfAppWifiCb)
  405cdc:	4b82      	ldr	r3, [pc, #520]	; (405ee8 <m2m_wifi_cb+0x284>)
  405cde:	681b      	ldr	r3, [r3, #0]
  405ce0:	2b00      	cmp	r3, #0
  405ce2:	d0f1      	beq.n	405cc8 <m2m_wifi_cb+0x64>
				gpfAppWifiCb(M2M_WIFI_RESP_CON_STATE_CHANGED, &strState);
  405ce4:	a903      	add	r1, sp, #12
  405ce6:	202c      	movs	r0, #44	; 0x2c
  405ce8:	4798      	blx	r3
  405cea:	e7ed      	b.n	405cc8 <m2m_wifi_cb+0x64>
		if (hif_receive(u32Addr, (uint8*) &strSysTime,sizeof(tstrSystemTime), 0) == M2M_SUCCESS)
  405cec:	2300      	movs	r3, #0
  405cee:	2208      	movs	r2, #8
  405cf0:	a903      	add	r1, sp, #12
  405cf2:	4628      	mov	r0, r5
  405cf4:	4c7b      	ldr	r4, [pc, #492]	; (405ee4 <m2m_wifi_cb+0x280>)
  405cf6:	47a0      	blx	r4
  405cf8:	2800      	cmp	r0, #0
  405cfa:	d1e5      	bne.n	405cc8 <m2m_wifi_cb+0x64>
			if (gpfAppWifiCb)
  405cfc:	4b7a      	ldr	r3, [pc, #488]	; (405ee8 <m2m_wifi_cb+0x284>)
  405cfe:	681b      	ldr	r3, [r3, #0]
  405d00:	2b00      	cmp	r3, #0
  405d02:	d0e1      	beq.n	405cc8 <m2m_wifi_cb+0x64>
				gpfAppWifiCb(M2M_WIFI_RESP_GET_SYS_TIME, &strSysTime);
  405d04:	a903      	add	r1, sp, #12
  405d06:	201b      	movs	r0, #27
  405d08:	4798      	blx	r3
  405d0a:	e7dd      	b.n	405cc8 <m2m_wifi_cb+0x64>
		if(hif_receive(u32Addr, (uint8*)&strConnInfo, sizeof(tstrM2MConnInfo), 1) == M2M_SUCCESS)
  405d0c:	2301      	movs	r3, #1
  405d0e:	2230      	movs	r2, #48	; 0x30
  405d10:	a903      	add	r1, sp, #12
  405d12:	4628      	mov	r0, r5
  405d14:	4c73      	ldr	r4, [pc, #460]	; (405ee4 <m2m_wifi_cb+0x280>)
  405d16:	47a0      	blx	r4
  405d18:	2800      	cmp	r0, #0
  405d1a:	d1d5      	bne.n	405cc8 <m2m_wifi_cb+0x64>
			if(gpfAppWifiCb)
  405d1c:	4b72      	ldr	r3, [pc, #456]	; (405ee8 <m2m_wifi_cb+0x284>)
  405d1e:	681b      	ldr	r3, [r3, #0]
  405d20:	2b00      	cmp	r3, #0
  405d22:	d0d1      	beq.n	405cc8 <m2m_wifi_cb+0x64>
				gpfAppWifiCb(M2M_WIFI_RESP_CONN_INFO, &strConnInfo);
  405d24:	a903      	add	r1, sp, #12
  405d26:	2006      	movs	r0, #6
  405d28:	4798      	blx	r3
  405d2a:	e7cd      	b.n	405cc8 <m2m_wifi_cb+0x64>
		if (hif_receive(u32Addr, (uint8 *)&strIpConfig, sizeof(tstrM2MIPConfig), 0) == M2M_SUCCESS)
  405d2c:	2300      	movs	r3, #0
  405d2e:	2210      	movs	r2, #16
  405d30:	a903      	add	r1, sp, #12
  405d32:	4628      	mov	r0, r5
  405d34:	4c6b      	ldr	r4, [pc, #428]	; (405ee4 <m2m_wifi_cb+0x280>)
  405d36:	47a0      	blx	r4
  405d38:	2800      	cmp	r0, #0
  405d3a:	d1c5      	bne.n	405cc8 <m2m_wifi_cb+0x64>
			if (gpfAppWifiCb)
  405d3c:	4b6a      	ldr	r3, [pc, #424]	; (405ee8 <m2m_wifi_cb+0x284>)
  405d3e:	681b      	ldr	r3, [r3, #0]
  405d40:	2b00      	cmp	r3, #0
  405d42:	d0c1      	beq.n	405cc8 <m2m_wifi_cb+0x64>
				gpfAppWifiCb(M2M_WIFI_REQ_DHCP_CONF, (uint8 *)&strIpConfig);
  405d44:	a903      	add	r1, sp, #12
  405d46:	2032      	movs	r0, #50	; 0x32
  405d48:	4798      	blx	r3
  405d4a:	e7bd      	b.n	405cc8 <m2m_wifi_cb+0x64>
		m2m_memset((uint8*)&strWps,0,sizeof(tstrM2MWPSInfo));
  405d4c:	2264      	movs	r2, #100	; 0x64
  405d4e:	2100      	movs	r1, #0
  405d50:	a803      	add	r0, sp, #12
  405d52:	4b66      	ldr	r3, [pc, #408]	; (405eec <m2m_wifi_cb+0x288>)
  405d54:	4798      	blx	r3
		if(hif_receive(u32Addr, (uint8*)&strWps, sizeof(tstrM2MWPSInfo), 0) == M2M_SUCCESS)
  405d56:	2300      	movs	r3, #0
  405d58:	2264      	movs	r2, #100	; 0x64
  405d5a:	a903      	add	r1, sp, #12
  405d5c:	4628      	mov	r0, r5
  405d5e:	4c61      	ldr	r4, [pc, #388]	; (405ee4 <m2m_wifi_cb+0x280>)
  405d60:	47a0      	blx	r4
  405d62:	2800      	cmp	r0, #0
  405d64:	d1b0      	bne.n	405cc8 <m2m_wifi_cb+0x64>
			if (gpfAppWifiCb)
  405d66:	4b60      	ldr	r3, [pc, #384]	; (405ee8 <m2m_wifi_cb+0x284>)
  405d68:	681b      	ldr	r3, [r3, #0]
  405d6a:	2b00      	cmp	r3, #0
  405d6c:	d0ac      	beq.n	405cc8 <m2m_wifi_cb+0x64>
				gpfAppWifiCb(M2M_WIFI_REQ_WPS, &strWps);
  405d6e:	a903      	add	r1, sp, #12
  405d70:	202f      	movs	r0, #47	; 0x2f
  405d72:	4798      	blx	r3
  405d74:	e7a8      	b.n	405cc8 <m2m_wifi_cb+0x64>
		if(hif_receive(u32Addr, (uint8 *)&u32ConflictedIP, sizeof(u32ConflictedIP), 0) == M2M_SUCCESS)
  405d76:	2300      	movs	r3, #0
  405d78:	2204      	movs	r2, #4
  405d7a:	a903      	add	r1, sp, #12
  405d7c:	4628      	mov	r0, r5
  405d7e:	4c59      	ldr	r4, [pc, #356]	; (405ee4 <m2m_wifi_cb+0x280>)
  405d80:	47a0      	blx	r4
  405d82:	2800      	cmp	r0, #0
  405d84:	d1a0      	bne.n	405cc8 <m2m_wifi_cb+0x64>
			M2M_INFO("Conflicted IP \" %u.%u.%u.%u \" \n", 
  405d86:	485a      	ldr	r0, [pc, #360]	; (405ef0 <m2m_wifi_cb+0x28c>)
  405d88:	4c53      	ldr	r4, [pc, #332]	; (405ed8 <m2m_wifi_cb+0x274>)
  405d8a:	47a0      	blx	r4
  405d8c:	9903      	ldr	r1, [sp, #12]
  405d8e:	b2cb      	uxtb	r3, r1
  405d90:	9300      	str	r3, [sp, #0]
  405d92:	f3c1 2307 	ubfx	r3, r1, #8, #8
  405d96:	f3c1 4207 	ubfx	r2, r1, #16, #8
  405d9a:	0e09      	lsrs	r1, r1, #24
  405d9c:	4855      	ldr	r0, [pc, #340]	; (405ef4 <m2m_wifi_cb+0x290>)
  405d9e:	47a0      	blx	r4
  405da0:	484f      	ldr	r0, [pc, #316]	; (405ee0 <m2m_wifi_cb+0x27c>)
  405da2:	47a0      	blx	r4
			if (gpfAppWifiCb)
  405da4:	4b50      	ldr	r3, [pc, #320]	; (405ee8 <m2m_wifi_cb+0x284>)
  405da6:	681b      	ldr	r3, [r3, #0]
  405da8:	2b00      	cmp	r3, #0
  405daa:	d08d      	beq.n	405cc8 <m2m_wifi_cb+0x64>
				gpfAppWifiCb(M2M_WIFI_RESP_IP_CONFLICT, NULL);
  405dac:	2100      	movs	r1, #0
  405dae:	2034      	movs	r0, #52	; 0x34
  405db0:	4798      	blx	r3
  405db2:	e789      	b.n	405cc8 <m2m_wifi_cb+0x64>
		gu8scanInProgress = 0;
  405db4:	2300      	movs	r3, #0
  405db6:	4a50      	ldr	r2, [pc, #320]	; (405ef8 <m2m_wifi_cb+0x294>)
  405db8:	7013      	strb	r3, [r2, #0]
		if(hif_receive(u32Addr, (uint8*)&strState, sizeof(tstrM2mScanDone), 0) == M2M_SUCCESS)
  405dba:	2204      	movs	r2, #4
  405dbc:	a903      	add	r1, sp, #12
  405dbe:	4628      	mov	r0, r5
  405dc0:	4c48      	ldr	r4, [pc, #288]	; (405ee4 <m2m_wifi_cb+0x280>)
  405dc2:	47a0      	blx	r4
  405dc4:	2800      	cmp	r0, #0
  405dc6:	f47f af7f 	bne.w	405cc8 <m2m_wifi_cb+0x64>
			gu8ChNum = strState.u8NumofCh;
  405dca:	f89d 200c 	ldrb.w	r2, [sp, #12]
  405dce:	4b4b      	ldr	r3, [pc, #300]	; (405efc <m2m_wifi_cb+0x298>)
  405dd0:	701a      	strb	r2, [r3, #0]
			if (gpfAppWifiCb)
  405dd2:	4b45      	ldr	r3, [pc, #276]	; (405ee8 <m2m_wifi_cb+0x284>)
  405dd4:	681b      	ldr	r3, [r3, #0]
  405dd6:	2b00      	cmp	r3, #0
  405dd8:	f43f af76 	beq.w	405cc8 <m2m_wifi_cb+0x64>
				gpfAppWifiCb(M2M_WIFI_RESP_SCAN_DONE, &strState);
  405ddc:	a903      	add	r1, sp, #12
  405dde:	2011      	movs	r0, #17
  405de0:	4798      	blx	r3
  405de2:	e771      	b.n	405cc8 <m2m_wifi_cb+0x64>
		if(hif_receive(u32Addr, (uint8*)&strScanResult, sizeof(tstrM2mWifiscanResult), 0) == M2M_SUCCESS)
  405de4:	2300      	movs	r3, #0
  405de6:	222c      	movs	r2, #44	; 0x2c
  405de8:	a903      	add	r1, sp, #12
  405dea:	4628      	mov	r0, r5
  405dec:	4c3d      	ldr	r4, [pc, #244]	; (405ee4 <m2m_wifi_cb+0x280>)
  405dee:	47a0      	blx	r4
  405df0:	2800      	cmp	r0, #0
  405df2:	f47f af69 	bne.w	405cc8 <m2m_wifi_cb+0x64>
			if (gpfAppWifiCb)
  405df6:	4b3c      	ldr	r3, [pc, #240]	; (405ee8 <m2m_wifi_cb+0x284>)
  405df8:	681b      	ldr	r3, [r3, #0]
  405dfa:	2b00      	cmp	r3, #0
  405dfc:	f43f af64 	beq.w	405cc8 <m2m_wifi_cb+0x64>
				gpfAppWifiCb(M2M_WIFI_RESP_SCAN_RESULT, &strScanResult);
  405e00:	a903      	add	r1, sp, #12
  405e02:	2013      	movs	r0, #19
  405e04:	4798      	blx	r3
  405e06:	e75f      	b.n	405cc8 <m2m_wifi_cb+0x64>
		if (hif_receive(u32Addr, rx_buf, 4, 0) == M2M_SUCCESS)
  405e08:	2300      	movs	r3, #0
  405e0a:	2204      	movs	r2, #4
  405e0c:	a91c      	add	r1, sp, #112	; 0x70
  405e0e:	4628      	mov	r0, r5
  405e10:	4c34      	ldr	r4, [pc, #208]	; (405ee4 <m2m_wifi_cb+0x280>)
  405e12:	47a0      	blx	r4
  405e14:	2800      	cmp	r0, #0
  405e16:	f47f af57 	bne.w	405cc8 <m2m_wifi_cb+0x64>
			if (gpfAppWifiCb)
  405e1a:	4b33      	ldr	r3, [pc, #204]	; (405ee8 <m2m_wifi_cb+0x284>)
  405e1c:	681b      	ldr	r3, [r3, #0]
  405e1e:	2b00      	cmp	r3, #0
  405e20:	f43f af52 	beq.w	405cc8 <m2m_wifi_cb+0x64>
				gpfAppWifiCb(M2M_WIFI_RESP_CURRENT_RSSI, rx_buf);
  405e24:	a91c      	add	r1, sp, #112	; 0x70
  405e26:	2004      	movs	r0, #4
  405e28:	4798      	blx	r3
  405e2a:	e74d      	b.n	405cc8 <m2m_wifi_cb+0x64>
		if (hif_receive(u32Addr, rx_buf, 4, 0) == M2M_SUCCESS)
  405e2c:	2300      	movs	r3, #0
  405e2e:	2204      	movs	r2, #4
  405e30:	a91c      	add	r1, sp, #112	; 0x70
  405e32:	4628      	mov	r0, r5
  405e34:	4c2b      	ldr	r4, [pc, #172]	; (405ee4 <m2m_wifi_cb+0x280>)
  405e36:	47a0      	blx	r4
  405e38:	2800      	cmp	r0, #0
  405e3a:	f47f af45 	bne.w	405cc8 <m2m_wifi_cb+0x64>
			if (gpfAppWifiCb)
  405e3e:	4b2a      	ldr	r3, [pc, #168]	; (405ee8 <m2m_wifi_cb+0x284>)
  405e40:	681b      	ldr	r3, [r3, #0]
  405e42:	2b00      	cmp	r3, #0
  405e44:	f43f af40 	beq.w	405cc8 <m2m_wifi_cb+0x64>
				gpfAppWifiCb(M2M_WIFI_RESP_CLIENT_INFO, rx_buf);
  405e48:	a91c      	add	r1, sp, #112	; 0x70
  405e4a:	2065      	movs	r0, #101	; 0x65
  405e4c:	4798      	blx	r3
  405e4e:	e73b      	b.n	405cc8 <m2m_wifi_cb+0x64>
		if(hif_receive(u32Addr, (uint8*)&strProvInfo, sizeof(tstrM2MProvisionInfo), 1) == M2M_SUCCESS)
  405e50:	2301      	movs	r3, #1
  405e52:	2264      	movs	r2, #100	; 0x64
  405e54:	a903      	add	r1, sp, #12
  405e56:	4628      	mov	r0, r5
  405e58:	4c22      	ldr	r4, [pc, #136]	; (405ee4 <m2m_wifi_cb+0x280>)
  405e5a:	47a0      	blx	r4
  405e5c:	2800      	cmp	r0, #0
  405e5e:	f47f af33 	bne.w	405cc8 <m2m_wifi_cb+0x64>
			if(gpfAppWifiCb)
  405e62:	4b21      	ldr	r3, [pc, #132]	; (405ee8 <m2m_wifi_cb+0x284>)
  405e64:	681b      	ldr	r3, [r3, #0]
  405e66:	2b00      	cmp	r3, #0
  405e68:	f43f af2e 	beq.w	405cc8 <m2m_wifi_cb+0x64>
				gpfAppWifiCb(M2M_WIFI_RESP_PROVISION_INFO, &strProvInfo);
  405e6c:	a903      	add	r1, sp, #12
  405e6e:	2009      	movs	r0, #9
  405e70:	4798      	blx	r3
  405e72:	e729      	b.n	405cc8 <m2m_wifi_cb+0x64>
		if(hif_receive(u32Addr, (uint8*)&strResp, sizeof(tstrM2MDefaultConnResp), 1) == M2M_SUCCESS)
  405e74:	2301      	movs	r3, #1
  405e76:	2204      	movs	r2, #4
  405e78:	a903      	add	r1, sp, #12
  405e7a:	4628      	mov	r0, r5
  405e7c:	4c19      	ldr	r4, [pc, #100]	; (405ee4 <m2m_wifi_cb+0x280>)
  405e7e:	47a0      	blx	r4
  405e80:	2800      	cmp	r0, #0
  405e82:	f47f af21 	bne.w	405cc8 <m2m_wifi_cb+0x64>
			if(gpfAppWifiCb)
  405e86:	4b18      	ldr	r3, [pc, #96]	; (405ee8 <m2m_wifi_cb+0x284>)
  405e88:	681b      	ldr	r3, [r3, #0]
  405e8a:	2b00      	cmp	r3, #0
  405e8c:	f43f af1c 	beq.w	405cc8 <m2m_wifi_cb+0x64>
				gpfAppWifiCb(M2M_WIFI_RESP_DEFAULT_CONNECT, &strResp);
  405e90:	a903      	add	r1, sp, #12
  405e92:	202a      	movs	r0, #42	; 0x2a
  405e94:	4798      	blx	r3
  405e96:	e717      	b.n	405cc8 <m2m_wifi_cb+0x64>
		if(hif_receive(u32Addr, (uint8*)&strPrng,sizeof(tstrPrng), 0) == M2M_SUCCESS)
  405e98:	2300      	movs	r3, #0
  405e9a:	2208      	movs	r2, #8
  405e9c:	a903      	add	r1, sp, #12
  405e9e:	4628      	mov	r0, r5
  405ea0:	4c10      	ldr	r4, [pc, #64]	; (405ee4 <m2m_wifi_cb+0x280>)
  405ea2:	47a0      	blx	r4
  405ea4:	2800      	cmp	r0, #0
  405ea6:	f47f af0f 	bne.w	405cc8 <m2m_wifi_cb+0x64>
			if(hif_receive(u32Addr + sizeof(tstrPrng),strPrng.pu8RngBuff,strPrng.u16PrngSize, 1) == M2M_SUCCESS)
  405eaa:	2301      	movs	r3, #1
  405eac:	f8bd 2010 	ldrh.w	r2, [sp, #16]
  405eb0:	9903      	ldr	r1, [sp, #12]
  405eb2:	f105 0008 	add.w	r0, r5, #8
  405eb6:	47a0      	blx	r4
  405eb8:	2800      	cmp	r0, #0
  405eba:	f47f af05 	bne.w	405cc8 <m2m_wifi_cb+0x64>
				if(gpfAppWifiCb)
  405ebe:	4b0a      	ldr	r3, [pc, #40]	; (405ee8 <m2m_wifi_cb+0x284>)
  405ec0:	681b      	ldr	r3, [r3, #0]
  405ec2:	2b00      	cmp	r3, #0
  405ec4:	f43f af00 	beq.w	405cc8 <m2m_wifi_cb+0x64>
					gpfAppWifiCb(M2M_WIFI_RESP_GET_PRNG,&strPrng);
  405ec8:	a903      	add	r1, sp, #12
  405eca:	2020      	movs	r0, #32
  405ecc:	4798      	blx	r3
  405ece:	e6fb      	b.n	405cc8 <m2m_wifi_cb+0x64>
  405ed0:	0040cc0c 	.word	0x0040cc0c
  405ed4:	0040c96c 	.word	0x0040c96c
  405ed8:	00409405 	.word	0x00409405
  405edc:	0040cc68 	.word	0x0040cc68
  405ee0:	0040d944 	.word	0x0040d944
  405ee4:	00405a71 	.word	0x00405a71
  405ee8:	2040c3b4 	.word	0x2040c3b4
  405eec:	0040541d 	.word	0x0040541d
  405ef0:	0040cc3c 	.word	0x0040cc3c
  405ef4:	0040cc48 	.word	0x0040cc48
  405ef8:	2040c3b9 	.word	0x2040c3b9
  405efc:	2040c3b8 	.word	0x2040c3b8

00405f00 <m2m_wifi_init>:
	}	
	return s8Ret;
}

sint8 m2m_wifi_init(tstrWifiInitParam * param)
{
  405f00:	b5f0      	push	{r4, r5, r6, r7, lr}
  405f02:	b08b      	sub	sp, #44	; 0x2c
	tstrM2mRev strtmp;
	sint8 ret = M2M_SUCCESS;
	uint8 u8WifiMode = M2M_WIFI_MODE_NORMAL;
  405f04:	2301      	movs	r3, #1
  405f06:	f88d 3007 	strb.w	r3, [sp, #7]
	
	if(param == NULL) {
  405f0a:	2800      	cmp	r0, #0
  405f0c:	d050      	beq.n	405fb0 <m2m_wifi_init+0xb0>
		ret = M2M_ERR_FAIL;
		goto _EXIT0;
	}
	
	gpfAppWifiCb = param->pfAppWifiCb;
  405f0e:	6802      	ldr	r2, [r0, #0]
  405f10:	4b29      	ldr	r3, [pc, #164]	; (405fb8 <m2m_wifi_init+0xb8>)
  405f12:	601a      	str	r2, [r3, #0]
#endif /* ETH_MODE */

#ifdef CONF_MGMT
	gpfAppMonCb  = param->pfAppMonCb;
#endif
	gu8scanInProgress = 0;
  405f14:	2200      	movs	r2, #0
  405f16:	4b29      	ldr	r3, [pc, #164]	; (405fbc <m2m_wifi_init+0xbc>)
  405f18:	701a      	strb	r2, [r3, #0]
	/* Apply device specific initialization. */
	ret = nm_drv_init(&u8WifiMode);
  405f1a:	f10d 0007 	add.w	r0, sp, #7
  405f1e:	4b28      	ldr	r3, [pc, #160]	; (405fc0 <m2m_wifi_init+0xc0>)
  405f20:	4798      	blx	r3
	if(ret != M2M_SUCCESS) 	goto _EXIT0;
  405f22:	4604      	mov	r4, r0
  405f24:	b110      	cbz	r0, 405f2c <m2m_wifi_init+0x2c>

_EXIT1:
	nm_drv_deinit(NULL);
_EXIT0:
	return ret;
}
  405f26:	4620      	mov	r0, r4
  405f28:	b00b      	add	sp, #44	; 0x2c
  405f2a:	bdf0      	pop	{r4, r5, r6, r7, pc}
	ret = hif_init(NULL);
  405f2c:	4b25      	ldr	r3, [pc, #148]	; (405fc4 <m2m_wifi_init+0xc4>)
  405f2e:	4798      	blx	r3
	if(ret != M2M_SUCCESS) 	goto _EXIT1;
  405f30:	4604      	mov	r4, r0
  405f32:	2800      	cmp	r0, #0
  405f34:	d138      	bne.n	405fa8 <m2m_wifi_init+0xa8>
	hif_register_cb(M2M_REQ_GROUP_WIFI,m2m_wifi_cb);
  405f36:	4924      	ldr	r1, [pc, #144]	; (405fc8 <m2m_wifi_init+0xc8>)
  405f38:	2001      	movs	r0, #1
  405f3a:	4b24      	ldr	r3, [pc, #144]	; (405fcc <m2m_wifi_init+0xcc>)
  405f3c:	4798      	blx	r3
	ret = nm_get_firmware_info(&strtmp);
  405f3e:	a802      	add	r0, sp, #8
  405f40:	4b23      	ldr	r3, [pc, #140]	; (405fd0 <m2m_wifi_init+0xd0>)
  405f42:	4798      	blx	r3
  405f44:	4604      	mov	r4, r0
	M2M_INFO("Firmware ver   : %u.%u.%u\n", strtmp.u8FirmwareMajor, strtmp.u8FirmwareMinor, strtmp.u8FirmwarePatch);
  405f46:	4f23      	ldr	r7, [pc, #140]	; (405fd4 <m2m_wifi_init+0xd4>)
  405f48:	4638      	mov	r0, r7
  405f4a:	4d23      	ldr	r5, [pc, #140]	; (405fd8 <m2m_wifi_init+0xd8>)
  405f4c:	47a8      	blx	r5
  405f4e:	f89d 300e 	ldrb.w	r3, [sp, #14]
  405f52:	f89d 200d 	ldrb.w	r2, [sp, #13]
  405f56:	f89d 100c 	ldrb.w	r1, [sp, #12]
  405f5a:	4820      	ldr	r0, [pc, #128]	; (405fdc <m2m_wifi_init+0xdc>)
  405f5c:	47a8      	blx	r5
  405f5e:	4e20      	ldr	r6, [pc, #128]	; (405fe0 <m2m_wifi_init+0xe0>)
  405f60:	4630      	mov	r0, r6
  405f62:	47a8      	blx	r5
	M2M_INFO("Min driver ver : %u.%u.%u\n", strtmp.u8DriverMajor, strtmp.u8DriverMinor, strtmp.u8DriverPatch);
  405f64:	4638      	mov	r0, r7
  405f66:	47a8      	blx	r5
  405f68:	f89d 3011 	ldrb.w	r3, [sp, #17]
  405f6c:	f89d 2010 	ldrb.w	r2, [sp, #16]
  405f70:	f89d 100f 	ldrb.w	r1, [sp, #15]
  405f74:	481b      	ldr	r0, [pc, #108]	; (405fe4 <m2m_wifi_init+0xe4>)
  405f76:	47a8      	blx	r5
  405f78:	4630      	mov	r0, r6
  405f7a:	47a8      	blx	r5
	M2M_INFO("Curr driver ver: %u.%u.%u\n", M2M_DRIVER_VERSION_MAJOR_NO, M2M_DRIVER_VERSION_MINOR_NO, M2M_DRIVER_VERSION_PATCH_NO);
  405f7c:	4638      	mov	r0, r7
  405f7e:	47a8      	blx	r5
  405f80:	2300      	movs	r3, #0
  405f82:	2203      	movs	r2, #3
  405f84:	2113      	movs	r1, #19
  405f86:	4818      	ldr	r0, [pc, #96]	; (405fe8 <m2m_wifi_init+0xe8>)
  405f88:	47a8      	blx	r5
  405f8a:	4630      	mov	r0, r6
  405f8c:	47a8      	blx	r5
	if(M2M_ERR_FW_VER_MISMATCH == ret)
  405f8e:	f114 0f0d 	cmn.w	r4, #13
  405f92:	d1c8      	bne.n	405f26 <m2m_wifi_init+0x26>
		M2M_ERR("Mismatch Firmawre Version\n");
  405f94:	f240 12d5 	movw	r2, #469	; 0x1d5
  405f98:	4914      	ldr	r1, [pc, #80]	; (405fec <m2m_wifi_init+0xec>)
  405f9a:	4815      	ldr	r0, [pc, #84]	; (405ff0 <m2m_wifi_init+0xf0>)
  405f9c:	47a8      	blx	r5
  405f9e:	4815      	ldr	r0, [pc, #84]	; (405ff4 <m2m_wifi_init+0xf4>)
  405fa0:	47a8      	blx	r5
  405fa2:	4630      	mov	r0, r6
  405fa4:	47a8      	blx	r5
  405fa6:	e7be      	b.n	405f26 <m2m_wifi_init+0x26>
	nm_drv_deinit(NULL);
  405fa8:	2000      	movs	r0, #0
  405faa:	4b13      	ldr	r3, [pc, #76]	; (405ff8 <m2m_wifi_init+0xf8>)
  405fac:	4798      	blx	r3
  405fae:	e7ba      	b.n	405f26 <m2m_wifi_init+0x26>
		ret = M2M_ERR_FAIL;
  405fb0:	f06f 040b 	mvn.w	r4, #11
  405fb4:	e7b7      	b.n	405f26 <m2m_wifi_init+0x26>
  405fb6:	bf00      	nop
  405fb8:	2040c3b4 	.word	0x2040c3b4
  405fbc:	2040c3b9 	.word	0x2040c3b9
  405fc0:	004068c5 	.word	0x004068c5
  405fc4:	00405c15 	.word	0x00405c15
  405fc8:	00405c65 	.word	0x00405c65
  405fcc:	00405b85 	.word	0x00405b85
  405fd0:	00406815 	.word	0x00406815
  405fd4:	0040cc3c 	.word	0x0040cc3c
  405fd8:	00409405 	.word	0x00409405
  405fdc:	0040cd28 	.word	0x0040cd28
  405fe0:	0040d944 	.word	0x0040d944
  405fe4:	0040cd44 	.word	0x0040cd44
  405fe8:	0040cd60 	.word	0x0040cd60
  405fec:	0040cc18 	.word	0x0040cc18
  405ff0:	0040c96c 	.word	0x0040c96c
  405ff4:	0040cd7c 	.word	0x0040cd7c
  405ff8:	00406991 	.word	0x00406991

00405ffc <m2m_wifi_handle_events>:
	return M2M_SUCCESS;
}


sint8 m2m_wifi_handle_events(void * arg)
{
  405ffc:	b508      	push	{r3, lr}
	return hif_handle_isr();
  405ffe:	4b01      	ldr	r3, [pc, #4]	; (406004 <m2m_wifi_handle_events+0x8>)
  406000:	4798      	blx	r3
}
  406002:	bd08      	pop	{r3, pc}
  406004:	00405761 	.word	0x00405761

00406008 <m2m_wifi_connect_sc>:
sint8 m2m_wifi_connect(char *pcSsid, uint8 u8SsidLen, uint8 u8SecType, void *pvAuthInfo, uint16 u16Ch)
{
	return m2m_wifi_connect_sc(pcSsid, u8SsidLen, u8SecType, pvAuthInfo,  u16Ch,0);
}
sint8 m2m_wifi_connect_sc(char *pcSsid, uint8 u8SsidLen, uint8 u8SecType, void *pvAuthInfo, uint16 u16Ch, uint8 u8NoSaveCred)
{
  406008:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  40600c:	b0a0      	sub	sp, #128	; 0x80
  40600e:	4680      	mov	r8, r0
  406010:	460d      	mov	r5, r1
  406012:	4614      	mov	r4, r2
  406014:	461e      	mov	r6, r3
  406016:	f8bd 7098 	ldrh.w	r7, [sp, #152]	; 0x98
	sint8				ret = M2M_SUCCESS;
	tstrM2mWifiConnect	strConnect;
	tstrM2MWifiSecInfo	*pstrAuthInfo;

	if(u8SecType != M2M_WIFI_SEC_OPEN)
  40601a:	2a01      	cmp	r2, #1
  40601c:	d003      	beq.n	406026 <m2m_wifi_connect_sc+0x1e>
	{
		if(pvAuthInfo == NULL)
  40601e:	2b00      	cmp	r3, #0
  406020:	d037      	beq.n	406092 <m2m_wifi_connect_sc+0x8a>
		{
			M2M_ERR("Key is not valid\n");
			ret = M2M_ERR_FAIL;
			goto ERR1;
		}
		if((u8SecType == M2M_WIFI_SEC_WPA_PSK) && (m2m_strlen(pvAuthInfo) == (M2M_MAX_PSK_LEN-1)))
  406022:	2a02      	cmp	r2, #2
  406024:	d042      	beq.n	4060ac <m2m_wifi_connect_sc+0xa4>
				}
				i++;
			}
		}
	}
	if((u8SsidLen<=0)||(u8SsidLen>=M2M_MAX_SSID_LEN))
  406026:	1e6b      	subs	r3, r5, #1
  406028:	b2db      	uxtb	r3, r3
  40602a:	2b1f      	cmp	r3, #31
  40602c:	d875      	bhi.n	40611a <m2m_wifi_connect_sc+0x112>
		goto ERR1;
	}

	if(u16Ch>M2M_WIFI_CH_14)
	{
		if(u16Ch!=M2M_WIFI_CH_ALL)
  40602e:	2fff      	cmp	r7, #255	; 0xff
  406030:	d001      	beq.n	406036 <m2m_wifi_connect_sc+0x2e>
  406032:	2f0d      	cmp	r7, #13
  406034:	d87e      	bhi.n	406134 <m2m_wifi_connect_sc+0x12c>
			goto ERR1;
		}
	}


	m2m_memcpy(strConnect.au8SSID, (uint8*)pcSsid, u8SsidLen);
  406036:	462a      	mov	r2, r5
  406038:	4641      	mov	r1, r8
  40603a:	f10d 005a 	add.w	r0, sp, #90	; 0x5a
  40603e:	4b77      	ldr	r3, [pc, #476]	; (40621c <m2m_wifi_connect_sc+0x214>)
  406040:	4798      	blx	r3
	strConnect.au8SSID[u8SsidLen]	= 0;
  406042:	ab20      	add	r3, sp, #128	; 0x80
  406044:	441d      	add	r5, r3
  406046:	2300      	movs	r3, #0
  406048:	f805 3c26 	strb.w	r3, [r5, #-38]
	strConnect.u16Ch				= NM_BSP_B_L_16(u16Ch);
  40604c:	f8ad 7058 	strh.w	r7, [sp, #88]	; 0x58
	/* Credentials will be Not be saved if u8NoSaveCred is set */ 
	strConnect.u8NoSaveCred 			= u8NoSaveCred ? 1:0;
  406050:	f89d 309c 	ldrb.w	r3, [sp, #156]	; 0x9c
  406054:	3300      	adds	r3, #0
  406056:	bf18      	it	ne
  406058:	2301      	movne	r3, #1
  40605a:	f88d 307b 	strb.w	r3, [sp, #123]	; 0x7b
	pstrAuthInfo = &strConnect.strSec;
	pstrAuthInfo->u8SecType		= u8SecType;
  40605e:	f88d 4055 	strb.w	r4, [sp, #85]	; 0x55

	if(u8SecType == M2M_WIFI_SEC_WEP)
  406062:	2c03      	cmp	r4, #3
  406064:	d073      	beq.n	40614e <m2m_wifi_connect_sc+0x146>
		pstrWep->au8WepKey[pstrWepParams->u8KeySz] = 0;

	}


	else if(u8SecType == M2M_WIFI_SEC_WPA_PSK)
  406066:	2c02      	cmp	r4, #2
  406068:	f000 80aa 	beq.w	4061c0 <m2m_wifi_connect_sc+0x1b8>
			ret = M2M_ERR_FAIL;
			goto ERR1;
		}
		m2m_memcpy(pstrAuthInfo->uniAuth.au8PSK, (uint8*)pvAuthInfo, u16KeyLen + 1);
	}
	else if(u8SecType == M2M_WIFI_SEC_802_1X)
  40606c:	2c04      	cmp	r4, #4
  40606e:	f000 80c1 	beq.w	4061f4 <m2m_wifi_connect_sc+0x1ec>
	{
		m2m_memcpy((uint8*)&pstrAuthInfo->uniAuth.strCred1x, (uint8*)pvAuthInfo, sizeof(tstr1xAuthCredentials));
	}
	else if(u8SecType == M2M_WIFI_SEC_OPEN)
  406072:	2c01      	cmp	r4, #1
  406074:	f040 80c4 	bne.w	406200 <m2m_wifi_connect_sc+0x1f8>
		M2M_ERR("undefined sec type\n");
		ret = M2M_ERR_FAIL;
		goto ERR1;
	}

	ret = hif_send(M2M_REQ_GROUP_WIFI, M2M_WIFI_REQ_CONNECT, (uint8*)&strConnect, sizeof(tstrM2mWifiConnect),NULL, 0,0);
  406078:	2300      	movs	r3, #0
  40607a:	9302      	str	r3, [sp, #8]
  40607c:	9301      	str	r3, [sp, #4]
  40607e:	9300      	str	r3, [sp, #0]
  406080:	236c      	movs	r3, #108	; 0x6c
  406082:	aa05      	add	r2, sp, #20
  406084:	2128      	movs	r1, #40	; 0x28
  406086:	2001      	movs	r0, #1
  406088:	4c65      	ldr	r4, [pc, #404]	; (406220 <m2m_wifi_connect_sc+0x218>)
  40608a:	47a0      	blx	r4

ERR1:
	return ret;
}
  40608c:	b020      	add	sp, #128	; 0x80
  40608e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
			M2M_ERR("Key is not valid\n");
  406092:	f240 2203 	movw	r2, #515	; 0x203
  406096:	4963      	ldr	r1, [pc, #396]	; (406224 <m2m_wifi_connect_sc+0x21c>)
  406098:	4863      	ldr	r0, [pc, #396]	; (406228 <m2m_wifi_connect_sc+0x220>)
  40609a:	4c64      	ldr	r4, [pc, #400]	; (40622c <m2m_wifi_connect_sc+0x224>)
  40609c:	47a0      	blx	r4
  40609e:	4864      	ldr	r0, [pc, #400]	; (406230 <m2m_wifi_connect_sc+0x228>)
  4060a0:	47a0      	blx	r4
  4060a2:	4864      	ldr	r0, [pc, #400]	; (406234 <m2m_wifi_connect_sc+0x22c>)
  4060a4:	47a0      	blx	r4
			ret = M2M_ERR_FAIL;
  4060a6:	f06f 000b 	mvn.w	r0, #11
			goto ERR1;
  4060aa:	e7ef      	b.n	40608c <m2m_wifi_connect_sc+0x84>
		if((u8SecType == M2M_WIFI_SEC_WPA_PSK) && (m2m_strlen(pvAuthInfo) == (M2M_MAX_PSK_LEN-1)))
  4060ac:	4618      	mov	r0, r3
  4060ae:	4b62      	ldr	r3, [pc, #392]	; (406238 <m2m_wifi_connect_sc+0x230>)
  4060b0:	4798      	blx	r3
  4060b2:	2840      	cmp	r0, #64	; 0x40
  4060b4:	d1b7      	bne.n	406026 <m2m_wifi_connect_sc+0x1e>
				if(pu8Psk[i]<'0' || (pu8Psk[i]>'9' && pu8Psk[i] < 'A')|| (pu8Psk[i]>'F' && pu8Psk[i] < 'a') || pu8Psk[i] > 'f')
  4060b6:	7833      	ldrb	r3, [r6, #0]
  4060b8:	f1a3 023a 	sub.w	r2, r3, #58	; 0x3a
  4060bc:	b2d2      	uxtb	r2, r2
  4060be:	2a06      	cmp	r2, #6
  4060c0:	d91e      	bls.n	406100 <m2m_wifi_connect_sc+0xf8>
  4060c2:	f1a3 0230 	sub.w	r2, r3, #48	; 0x30
  4060c6:	b2d2      	uxtb	r2, r2
  4060c8:	2a36      	cmp	r2, #54	; 0x36
  4060ca:	d819      	bhi.n	406100 <m2m_wifi_connect_sc+0xf8>
  4060cc:	3b47      	subs	r3, #71	; 0x47
  4060ce:	b2db      	uxtb	r3, r3
  4060d0:	2b19      	cmp	r3, #25
  4060d2:	d915      	bls.n	406100 <m2m_wifi_connect_sc+0xf8>
  4060d4:	4631      	mov	r1, r6
  4060d6:	f106 003f 	add.w	r0, r6, #63	; 0x3f
  4060da:	f811 3f01 	ldrb.w	r3, [r1, #1]!
  4060de:	f1a3 023a 	sub.w	r2, r3, #58	; 0x3a
  4060e2:	b2d2      	uxtb	r2, r2
  4060e4:	2a06      	cmp	r2, #6
  4060e6:	d90b      	bls.n	406100 <m2m_wifi_connect_sc+0xf8>
  4060e8:	f1a3 0230 	sub.w	r2, r3, #48	; 0x30
  4060ec:	b2d2      	uxtb	r2, r2
  4060ee:	2a36      	cmp	r2, #54	; 0x36
  4060f0:	d806      	bhi.n	406100 <m2m_wifi_connect_sc+0xf8>
  4060f2:	3b47      	subs	r3, #71	; 0x47
  4060f4:	b2db      	uxtb	r3, r3
  4060f6:	2b19      	cmp	r3, #25
  4060f8:	d902      	bls.n	406100 <m2m_wifi_connect_sc+0xf8>
			while(i < (M2M_MAX_PSK_LEN-1))
  4060fa:	4288      	cmp	r0, r1
  4060fc:	d1ed      	bne.n	4060da <m2m_wifi_connect_sc+0xd2>
  4060fe:	e792      	b.n	406026 <m2m_wifi_connect_sc+0x1e>
					M2M_ERR("Invalid Key\n");
  406100:	f240 220f 	movw	r2, #527	; 0x20f
  406104:	4947      	ldr	r1, [pc, #284]	; (406224 <m2m_wifi_connect_sc+0x21c>)
  406106:	4848      	ldr	r0, [pc, #288]	; (406228 <m2m_wifi_connect_sc+0x220>)
  406108:	4c48      	ldr	r4, [pc, #288]	; (40622c <m2m_wifi_connect_sc+0x224>)
  40610a:	47a0      	blx	r4
  40610c:	484b      	ldr	r0, [pc, #300]	; (40623c <m2m_wifi_connect_sc+0x234>)
  40610e:	47a0      	blx	r4
  406110:	4848      	ldr	r0, [pc, #288]	; (406234 <m2m_wifi_connect_sc+0x22c>)
  406112:	47a0      	blx	r4
					ret = M2M_ERR_FAIL;
  406114:	f06f 000b 	mvn.w	r0, #11
					goto ERR1;
  406118:	e7b8      	b.n	40608c <m2m_wifi_connect_sc+0x84>
		M2M_ERR("SSID LEN INVALID\n");
  40611a:	f240 2219 	movw	r2, #537	; 0x219
  40611e:	4941      	ldr	r1, [pc, #260]	; (406224 <m2m_wifi_connect_sc+0x21c>)
  406120:	4841      	ldr	r0, [pc, #260]	; (406228 <m2m_wifi_connect_sc+0x220>)
  406122:	4c42      	ldr	r4, [pc, #264]	; (40622c <m2m_wifi_connect_sc+0x224>)
  406124:	47a0      	blx	r4
  406126:	4846      	ldr	r0, [pc, #280]	; (406240 <m2m_wifi_connect_sc+0x238>)
  406128:	47a0      	blx	r4
  40612a:	4842      	ldr	r0, [pc, #264]	; (406234 <m2m_wifi_connect_sc+0x22c>)
  40612c:	47a0      	blx	r4
		ret = M2M_ERR_FAIL;
  40612e:	f06f 000b 	mvn.w	r0, #11
		goto ERR1;
  406132:	e7ab      	b.n	40608c <m2m_wifi_connect_sc+0x84>
			M2M_ERR("CH INVALID\n");
  406134:	f240 2222 	movw	r2, #546	; 0x222
  406138:	493a      	ldr	r1, [pc, #232]	; (406224 <m2m_wifi_connect_sc+0x21c>)
  40613a:	483b      	ldr	r0, [pc, #236]	; (406228 <m2m_wifi_connect_sc+0x220>)
  40613c:	4c3b      	ldr	r4, [pc, #236]	; (40622c <m2m_wifi_connect_sc+0x224>)
  40613e:	47a0      	blx	r4
  406140:	4840      	ldr	r0, [pc, #256]	; (406244 <m2m_wifi_connect_sc+0x23c>)
  406142:	47a0      	blx	r4
  406144:	483b      	ldr	r0, [pc, #236]	; (406234 <m2m_wifi_connect_sc+0x22c>)
  406146:	47a0      	blx	r4
			ret = M2M_ERR_FAIL;
  406148:	f06f 000b 	mvn.w	r0, #11
			goto ERR1;
  40614c:	e79e      	b.n	40608c <m2m_wifi_connect_sc+0x84>
		pstrWep->u8KeyIndx =pstrWepParams->u8KeyIndx-1;
  40614e:	7833      	ldrb	r3, [r6, #0]
  406150:	3b01      	subs	r3, #1
  406152:	b2db      	uxtb	r3, r3
  406154:	f88d 3014 	strb.w	r3, [sp, #20]
		if(pstrWep->u8KeyIndx >= WEP_KEY_MAX_INDEX)
  406158:	2b03      	cmp	r3, #3
  40615a:	d813      	bhi.n	406184 <m2m_wifi_connect_sc+0x17c>
		pstrWep->u8KeySz = pstrWepParams->u8KeySz-1;
  40615c:	7872      	ldrb	r2, [r6, #1]
  40615e:	1e53      	subs	r3, r2, #1
  406160:	f88d 3015 	strb.w	r3, [sp, #21]
		if ((pstrWep->u8KeySz != WEP_40_KEY_STRING_SIZE)&& (pstrWep->u8KeySz != WEP_104_KEY_STRING_SIZE))
  406164:	f002 03ef 	and.w	r3, r2, #239	; 0xef
  406168:	2b0b      	cmp	r3, #11
  40616a:	d11a      	bne.n	4061a2 <m2m_wifi_connect_sc+0x19a>
		m2m_memcpy((uint8*)pstrWep->au8WepKey,(uint8*)pstrWepParams->au8WepKey, pstrWepParams->u8KeySz);
  40616c:	1cb1      	adds	r1, r6, #2
  40616e:	f10d 0016 	add.w	r0, sp, #22
  406172:	4b2a      	ldr	r3, [pc, #168]	; (40621c <m2m_wifi_connect_sc+0x214>)
  406174:	4798      	blx	r3
		pstrWep->au8WepKey[pstrWepParams->u8KeySz] = 0;
  406176:	7873      	ldrb	r3, [r6, #1]
  406178:	aa20      	add	r2, sp, #128	; 0x80
  40617a:	4413      	add	r3, r2
  40617c:	2200      	movs	r2, #0
  40617e:	f803 2c6a 	strb.w	r2, [r3, #-106]
  406182:	e779      	b.n	406078 <m2m_wifi_connect_sc+0x70>
			M2M_ERR("Invalid Wep key index %d\n", pstrWep->u8KeyIndx);
  406184:	f240 2239 	movw	r2, #569	; 0x239
  406188:	4926      	ldr	r1, [pc, #152]	; (406224 <m2m_wifi_connect_sc+0x21c>)
  40618a:	4827      	ldr	r0, [pc, #156]	; (406228 <m2m_wifi_connect_sc+0x220>)
  40618c:	4c27      	ldr	r4, [pc, #156]	; (40622c <m2m_wifi_connect_sc+0x224>)
  40618e:	47a0      	blx	r4
  406190:	f89d 1014 	ldrb.w	r1, [sp, #20]
  406194:	482c      	ldr	r0, [pc, #176]	; (406248 <m2m_wifi_connect_sc+0x240>)
  406196:	47a0      	blx	r4
  406198:	4826      	ldr	r0, [pc, #152]	; (406234 <m2m_wifi_connect_sc+0x22c>)
  40619a:	47a0      	blx	r4
			ret = M2M_ERR_FAIL;
  40619c:	f06f 000b 	mvn.w	r0, #11
			goto ERR1;
  4061a0:	e774      	b.n	40608c <m2m_wifi_connect_sc+0x84>
			M2M_ERR("Invalid Wep key length %d\n", pstrWep->u8KeySz);
  4061a2:	f44f 7210 	mov.w	r2, #576	; 0x240
  4061a6:	491f      	ldr	r1, [pc, #124]	; (406224 <m2m_wifi_connect_sc+0x21c>)
  4061a8:	481f      	ldr	r0, [pc, #124]	; (406228 <m2m_wifi_connect_sc+0x220>)
  4061aa:	4c20      	ldr	r4, [pc, #128]	; (40622c <m2m_wifi_connect_sc+0x224>)
  4061ac:	47a0      	blx	r4
  4061ae:	f89d 1015 	ldrb.w	r1, [sp, #21]
  4061b2:	4826      	ldr	r0, [pc, #152]	; (40624c <m2m_wifi_connect_sc+0x244>)
  4061b4:	47a0      	blx	r4
  4061b6:	481f      	ldr	r0, [pc, #124]	; (406234 <m2m_wifi_connect_sc+0x22c>)
  4061b8:	47a0      	blx	r4
			ret = M2M_ERR_FAIL;
  4061ba:	f06f 000b 	mvn.w	r0, #11
			goto ERR1;
  4061be:	e765      	b.n	40608c <m2m_wifi_connect_sc+0x84>
		uint16	u16KeyLen = m2m_strlen((uint8*)pvAuthInfo);
  4061c0:	4630      	mov	r0, r6
  4061c2:	4b1d      	ldr	r3, [pc, #116]	; (406238 <m2m_wifi_connect_sc+0x230>)
  4061c4:	4798      	blx	r3
		if((u16KeyLen <= 0)||(u16KeyLen >= M2M_MAX_PSK_LEN))
  4061c6:	1e43      	subs	r3, r0, #1
  4061c8:	b29b      	uxth	r3, r3
  4061ca:	2b3f      	cmp	r3, #63	; 0x3f
  4061cc:	d805      	bhi.n	4061da <m2m_wifi_connect_sc+0x1d2>
		m2m_memcpy(pstrAuthInfo->uniAuth.au8PSK, (uint8*)pvAuthInfo, u16KeyLen + 1);
  4061ce:	1c42      	adds	r2, r0, #1
  4061d0:	4631      	mov	r1, r6
  4061d2:	a805      	add	r0, sp, #20
  4061d4:	4b11      	ldr	r3, [pc, #68]	; (40621c <m2m_wifi_connect_sc+0x214>)
  4061d6:	4798      	blx	r3
  4061d8:	e74e      	b.n	406078 <m2m_wifi_connect_sc+0x70>
			M2M_ERR("Incorrect PSK key length\n");
  4061da:	f240 224f 	movw	r2, #591	; 0x24f
  4061de:	4911      	ldr	r1, [pc, #68]	; (406224 <m2m_wifi_connect_sc+0x21c>)
  4061e0:	4811      	ldr	r0, [pc, #68]	; (406228 <m2m_wifi_connect_sc+0x220>)
  4061e2:	4c12      	ldr	r4, [pc, #72]	; (40622c <m2m_wifi_connect_sc+0x224>)
  4061e4:	47a0      	blx	r4
  4061e6:	481a      	ldr	r0, [pc, #104]	; (406250 <m2m_wifi_connect_sc+0x248>)
  4061e8:	47a0      	blx	r4
  4061ea:	4812      	ldr	r0, [pc, #72]	; (406234 <m2m_wifi_connect_sc+0x22c>)
  4061ec:	47a0      	blx	r4
			ret = M2M_ERR_FAIL;
  4061ee:	f06f 000b 	mvn.w	r0, #11
			goto ERR1;
  4061f2:	e74b      	b.n	40608c <m2m_wifi_connect_sc+0x84>
		m2m_memcpy((uint8*)&pstrAuthInfo->uniAuth.strCred1x, (uint8*)pvAuthInfo, sizeof(tstr1xAuthCredentials));
  4061f4:	223e      	movs	r2, #62	; 0x3e
  4061f6:	4631      	mov	r1, r6
  4061f8:	a805      	add	r0, sp, #20
  4061fa:	4b08      	ldr	r3, [pc, #32]	; (40621c <m2m_wifi_connect_sc+0x214>)
  4061fc:	4798      	blx	r3
  4061fe:	e73b      	b.n	406078 <m2m_wifi_connect_sc+0x70>
		M2M_ERR("undefined sec type\n");
  406200:	f240 225f 	movw	r2, #607	; 0x25f
  406204:	4907      	ldr	r1, [pc, #28]	; (406224 <m2m_wifi_connect_sc+0x21c>)
  406206:	4808      	ldr	r0, [pc, #32]	; (406228 <m2m_wifi_connect_sc+0x220>)
  406208:	4c08      	ldr	r4, [pc, #32]	; (40622c <m2m_wifi_connect_sc+0x224>)
  40620a:	47a0      	blx	r4
  40620c:	4811      	ldr	r0, [pc, #68]	; (406254 <m2m_wifi_connect_sc+0x24c>)
  40620e:	47a0      	blx	r4
  406210:	4808      	ldr	r0, [pc, #32]	; (406234 <m2m_wifi_connect_sc+0x22c>)
  406212:	47a0      	blx	r4
		ret = M2M_ERR_FAIL;
  406214:	f06f 000b 	mvn.w	r0, #11
		goto ERR1;
  406218:	e738      	b.n	40608c <m2m_wifi_connect_sc+0x84>
  40621a:	bf00      	nop
  40621c:	00405409 	.word	0x00405409
  406220:	00405581 	.word	0x00405581
  406224:	0040cc28 	.word	0x0040cc28
  406228:	0040c96c 	.word	0x0040c96c
  40622c:	00409405 	.word	0x00409405
  406230:	0040cc7c 	.word	0x0040cc7c
  406234:	0040d944 	.word	0x0040d944
  406238:	0040542b 	.word	0x0040542b
  40623c:	0040cc90 	.word	0x0040cc90
  406240:	0040cca0 	.word	0x0040cca0
  406244:	0040ccb4 	.word	0x0040ccb4
  406248:	0040ccc0 	.word	0x0040ccc0
  40624c:	0040ccdc 	.word	0x0040ccdc
  406250:	0040ccf8 	.word	0x0040ccf8
  406254:	0040cd14 	.word	0x0040cd14

00406258 <m2m_wifi_connect>:
{
  406258:	b510      	push	{r4, lr}
  40625a:	b082      	sub	sp, #8
	return m2m_wifi_connect_sc(pcSsid, u8SsidLen, u8SecType, pvAuthInfo,  u16Ch,0);
  40625c:	2400      	movs	r4, #0
  40625e:	9401      	str	r4, [sp, #4]
  406260:	f8bd 4010 	ldrh.w	r4, [sp, #16]
  406264:	9400      	str	r4, [sp, #0]
  406266:	4c02      	ldr	r4, [pc, #8]	; (406270 <m2m_wifi_connect+0x18>)
  406268:	47a0      	blx	r4
}
  40626a:	b002      	add	sp, #8
  40626c:	bd10      	pop	{r4, pc}
  40626e:	bf00      	nop
  406270:	00406009 	.word	0x00406009

00406274 <m2m_wifi_request_dhcp_client>:

sint8 m2m_wifi_request_dhcp_client(void)
{
	/*legacy API should be removed */
	return 0;
}
  406274:	2000      	movs	r0, #0
  406276:	4770      	bx	lr

00406278 <chip_apply_conf>:
#define M2M_DISABLE_PS				(0xd0ul)

static uint32 clk_status_reg_adr = 0xf; /* Assume initially it is B0 chip */

sint8 chip_apply_conf(uint32 u32Conf)
{
  406278:	b5f0      	push	{r4, r5, r6, r7, lr}
  40627a:	b083      	sub	sp, #12
  40627c:	4604      	mov	r4, r0
#endif
#ifdef __DISABLE_FIRMWARE_LOGS__
	val32 |= rHAVE_LOGS_DISABLED_BIT;
#endif
	do  {
		nm_write_reg(rNMI_GP_REG_1, val32);
  40627e:	f44f 55a5 	mov.w	r5, #5280	; 0x14a0
  406282:	4e0a      	ldr	r6, [pc, #40]	; (4062ac <chip_apply_conf+0x34>)
		if(val32 != 0) {		
			uint32 reg = 0;
			ret = nm_read_reg_with_ret(rNMI_GP_REG_1, &reg);
  406284:	4f0a      	ldr	r7, [pc, #40]	; (4062b0 <chip_apply_conf+0x38>)
		nm_write_reg(rNMI_GP_REG_1, val32);
  406286:	4621      	mov	r1, r4
  406288:	4628      	mov	r0, r5
  40628a:	47b0      	blx	r6
		if(val32 != 0) {		
  40628c:	b154      	cbz	r4, 4062a4 <chip_apply_conf+0x2c>
			uint32 reg = 0;
  40628e:	a902      	add	r1, sp, #8
  406290:	2300      	movs	r3, #0
  406292:	f841 3d04 	str.w	r3, [r1, #-4]!
			ret = nm_read_reg_with_ret(rNMI_GP_REG_1, &reg);
  406296:	4628      	mov	r0, r5
  406298:	47b8      	blx	r7
			if(ret == M2M_SUCCESS) {
  40629a:	2800      	cmp	r0, #0
  40629c:	d1f3      	bne.n	406286 <chip_apply_conf+0xe>
				if(reg == val32)
  40629e:	9b01      	ldr	r3, [sp, #4]
  4062a0:	429c      	cmp	r4, r3
  4062a2:	d1f0      	bne.n	406286 <chip_apply_conf+0xe>
			break;
		}
	} while(1);

	return M2M_SUCCESS;
}
  4062a4:	2000      	movs	r0, #0
  4062a6:	b003      	add	sp, #12
  4062a8:	bdf0      	pop	{r4, r5, r6, r7, pc}
  4062aa:	bf00      	nop
  4062ac:	00406751 	.word	0x00406751
  4062b0:	00406745 	.word	0x00406745

004062b4 <nm_clkless_wake>:
*	@author	Samer Sarhan
*	@date	06 June 2014
*	@version	1.0
*/
sint8 nm_clkless_wake(void)
{
  4062b4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  4062b8:	b083      	sub	sp, #12
	sint8 ret = M2M_SUCCESS;
	uint32 reg, clk_status_reg,trials = 0;
	/* wait 1ms, spi data read */
	nm_bsp_sleep(1);
  4062ba:	2001      	movs	r0, #1
  4062bc:	4b3c      	ldr	r3, [pc, #240]	; (4063b0 <nm_clkless_wake+0xfc>)
  4062be:	4798      	blx	r3
	ret = nm_read_reg_with_ret(0x1, &reg);
  4062c0:	a901      	add	r1, sp, #4
  4062c2:	2001      	movs	r0, #1
  4062c4:	4b3b      	ldr	r3, [pc, #236]	; (4063b4 <nm_clkless_wake+0x100>)
  4062c6:	4798      	blx	r3
	if(ret != M2M_SUCCESS) {
  4062c8:	4682      	mov	sl, r0
  4062ca:	b938      	cbnz	r0, 4062dc <nm_clkless_wake+0x28>
  4062cc:	2400      	movs	r4, #0
	 * If A0, then clks_enabled bit exists in register 0xe
	 */
	do
	{
		/* Set bit 1 */
		nm_write_reg(0x1, reg | (1 << 1));
  4062ce:	f04f 0801 	mov.w	r8, #1
  4062d2:	f8df 9108 	ldr.w	r9, [pc, #264]	; 4063dc <nm_clkless_wake+0x128>
		/* wait 1ms, spi data read */
		nm_bsp_sleep(1);
  4062d6:	4d36      	ldr	r5, [pc, #216]	; (4063b0 <nm_clkless_wake+0xfc>)
		}

		// in case of clocks off, wait 2ms, and check it again.
		// if still off, wait for another 2ms, for a total wait of 6ms.
		// If still off, redo the wake up sequence
		while( ((clk_status_reg & 0x4) == 0) && (((++trials) %3) == 0))
  4062d8:	4f37      	ldr	r7, [pc, #220]	; (4063b8 <nm_clkless_wake+0x104>)
  4062da:	e020      	b.n	40631e <nm_clkless_wake+0x6a>
		M2M_ERR("Bus error (1). Wake up failed\n");
  4062dc:	2272      	movs	r2, #114	; 0x72
  4062de:	4937      	ldr	r1, [pc, #220]	; (4063bc <nm_clkless_wake+0x108>)
  4062e0:	4837      	ldr	r0, [pc, #220]	; (4063c0 <nm_clkless_wake+0x10c>)
  4062e2:	4c38      	ldr	r4, [pc, #224]	; (4063c4 <nm_clkless_wake+0x110>)
  4062e4:	47a0      	blx	r4
  4062e6:	4838      	ldr	r0, [pc, #224]	; (4063c8 <nm_clkless_wake+0x114>)
  4062e8:	47a0      	blx	r4
  4062ea:	4838      	ldr	r0, [pc, #224]	; (4063cc <nm_clkless_wake+0x118>)
  4062ec:	47a0      	blx	r4
		goto _WAKE_EXIT;
  4062ee:	e009      	b.n	406304 <nm_clkless_wake+0x50>
					M2M_ERR("Bus error (2). Wake up failed\n");
  4062f0:	2296      	movs	r2, #150	; 0x96
  4062f2:	4932      	ldr	r1, [pc, #200]	; (4063bc <nm_clkless_wake+0x108>)
  4062f4:	4832      	ldr	r0, [pc, #200]	; (4063c0 <nm_clkless_wake+0x10c>)
  4062f6:	4c33      	ldr	r4, [pc, #204]	; (4063c4 <nm_clkless_wake+0x110>)
  4062f8:	47a0      	blx	r4
  4062fa:	4835      	ldr	r0, [pc, #212]	; (4063d0 <nm_clkless_wake+0x11c>)
  4062fc:	47a0      	blx	r4
  4062fe:	4833      	ldr	r0, [pc, #204]	; (4063cc <nm_clkless_wake+0x118>)
  406300:	47a0      	blx	r4
				ret = nm_read_reg_with_ret(clk_status_reg_adr, &clk_status_reg);
  406302:	46b2      	mov	sl, r6
		}
	} while((clk_status_reg & 0x4) == 0);

_WAKE_EXIT:
	return ret;
}
  406304:	4650      	mov	r0, sl
  406306:	b003      	add	sp, #12
  406308:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
			nm_write_reg(0x1, reg | (1 << 1));
  40630c:	9901      	ldr	r1, [sp, #4]
  40630e:	f041 0102 	orr.w	r1, r1, #2
  406312:	4640      	mov	r0, r8
  406314:	47c8      	blx	r9
	} while((clk_status_reg & 0x4) == 0);
  406316:	9b00      	ldr	r3, [sp, #0]
  406318:	f013 0f04 	tst.w	r3, #4
  40631c:	d1f2      	bne.n	406304 <nm_clkless_wake+0x50>
		nm_write_reg(0x1, reg | (1 << 1));
  40631e:	9901      	ldr	r1, [sp, #4]
  406320:	f041 0102 	orr.w	r1, r1, #2
  406324:	4640      	mov	r0, r8
  406326:	47c8      	blx	r9
		nm_bsp_sleep(1);
  406328:	4640      	mov	r0, r8
  40632a:	47a8      	blx	r5
		ret = nm_read_reg_with_ret(clk_status_reg_adr, &clk_status_reg);
  40632c:	4669      	mov	r1, sp
  40632e:	4b29      	ldr	r3, [pc, #164]	; (4063d4 <nm_clkless_wake+0x120>)
  406330:	6818      	ldr	r0, [r3, #0]
  406332:	4b20      	ldr	r3, [pc, #128]	; (4063b4 <nm_clkless_wake+0x100>)
  406334:	4798      	blx	r3
		if( (ret != M2M_SUCCESS) || ((ret == M2M_SUCCESS) && (clk_status_reg == 0)) ) {
  406336:	b908      	cbnz	r0, 40633c <nm_clkless_wake+0x88>
  406338:	9b00      	ldr	r3, [sp, #0]
  40633a:	b9bb      	cbnz	r3, 40636c <nm_clkless_wake+0xb8>
			clk_status_reg_adr = 0xe;
  40633c:	4e25      	ldr	r6, [pc, #148]	; (4063d4 <nm_clkless_wake+0x120>)
  40633e:	230e      	movs	r3, #14
  406340:	6033      	str	r3, [r6, #0]
			nm_bsp_sleep(1);
  406342:	4640      	mov	r0, r8
  406344:	47a8      	blx	r5
			ret = nm_read_reg_with_ret(clk_status_reg_adr, &clk_status_reg);
  406346:	4669      	mov	r1, sp
  406348:	6830      	ldr	r0, [r6, #0]
  40634a:	4b1a      	ldr	r3, [pc, #104]	; (4063b4 <nm_clkless_wake+0x100>)
  40634c:	4798      	blx	r3
			if( (ret != M2M_SUCCESS) || ((ret == M2M_SUCCESS) && (clk_status_reg == 0)) ) {
  40634e:	b908      	cbnz	r0, 406354 <nm_clkless_wake+0xa0>
  406350:	9b00      	ldr	r3, [sp, #0]
  406352:	b95b      	cbnz	r3, 40636c <nm_clkless_wake+0xb8>
				clk_status_reg_adr = 0x13;
  406354:	4e1f      	ldr	r6, [pc, #124]	; (4063d4 <nm_clkless_wake+0x120>)
  406356:	2313      	movs	r3, #19
  406358:	6033      	str	r3, [r6, #0]
				nm_bsp_sleep(1);
  40635a:	4640      	mov	r0, r8
  40635c:	47a8      	blx	r5
				ret = nm_read_reg_with_ret(clk_status_reg_adr, &clk_status_reg);
  40635e:	4669      	mov	r1, sp
  406360:	6830      	ldr	r0, [r6, #0]
  406362:	4b14      	ldr	r3, [pc, #80]	; (4063b4 <nm_clkless_wake+0x100>)
  406364:	4798      	blx	r3
				if(ret != M2M_SUCCESS) {
  406366:	4606      	mov	r6, r0
  406368:	2800      	cmp	r0, #0
  40636a:	d1c1      	bne.n	4062f0 <nm_clkless_wake+0x3c>
			nm_read_reg_with_ret(clk_status_reg_adr, &clk_status_reg);
  40636c:	4e19      	ldr	r6, [pc, #100]	; (4063d4 <nm_clkless_wake+0x120>)
		while( ((clk_status_reg & 0x4) == 0) && (((++trials) %3) == 0))
  40636e:	9b00      	ldr	r3, [sp, #0]
  406370:	f013 0f04 	tst.w	r3, #4
  406374:	d1c6      	bne.n	406304 <nm_clkless_wake+0x50>
  406376:	3401      	adds	r4, #1
  406378:	fba7 2304 	umull	r2, r3, r7, r4
  40637c:	085b      	lsrs	r3, r3, #1
  40637e:	eb03 0343 	add.w	r3, r3, r3, lsl #1
  406382:	429c      	cmp	r4, r3
  406384:	d1c2      	bne.n	40630c <nm_clkless_wake+0x58>
			nm_bsp_sleep(2);
  406386:	2002      	movs	r0, #2
  406388:	47a8      	blx	r5
			nm_read_reg_with_ret(clk_status_reg_adr, &clk_status_reg);
  40638a:	4669      	mov	r1, sp
  40638c:	6830      	ldr	r0, [r6, #0]
  40638e:	4b09      	ldr	r3, [pc, #36]	; (4063b4 <nm_clkless_wake+0x100>)
  406390:	4798      	blx	r3
			if((clk_status_reg & 0x4) == 0)
  406392:	9b00      	ldr	r3, [sp, #0]
  406394:	f013 0f04 	tst.w	r3, #4
  406398:	d1e9      	bne.n	40636e <nm_clkless_wake+0xba>
				M2M_ERR("clocks still OFF. Wake up failed\n");
  40639a:	22aa      	movs	r2, #170	; 0xaa
  40639c:	4907      	ldr	r1, [pc, #28]	; (4063bc <nm_clkless_wake+0x108>)
  40639e:	4808      	ldr	r0, [pc, #32]	; (4063c0 <nm_clkless_wake+0x10c>)
  4063a0:	f8df b020 	ldr.w	fp, [pc, #32]	; 4063c4 <nm_clkless_wake+0x110>
  4063a4:	47d8      	blx	fp
  4063a6:	480c      	ldr	r0, [pc, #48]	; (4063d8 <nm_clkless_wake+0x124>)
  4063a8:	47d8      	blx	fp
  4063aa:	4808      	ldr	r0, [pc, #32]	; (4063cc <nm_clkless_wake+0x118>)
  4063ac:	47d8      	blx	fp
  4063ae:	e7de      	b.n	40636e <nm_clkless_wake+0xba>
  4063b0:	00405065 	.word	0x00405065
  4063b4:	00406745 	.word	0x00406745
  4063b8:	aaaaaaab 	.word	0xaaaaaaab
  4063bc:	0040cd98 	.word	0x0040cd98
  4063c0:	0040c96c 	.word	0x0040c96c
  4063c4:	00409405 	.word	0x00409405
  4063c8:	0040ce08 	.word	0x0040ce08
  4063cc:	0040d944 	.word	0x0040d944
  4063d0:	0040ce28 	.word	0x0040ce28
  4063d4:	20400038 	.word	0x20400038
  4063d8:	0040ce48 	.word	0x0040ce48
  4063dc:	00406751 	.word	0x00406751

004063e0 <enable_interrupts>:
	nm_write_reg(0x6, 0x0);
	nm_write_reg(0x7, 0x0);
}

sint8 enable_interrupts(void)
{
  4063e0:	b500      	push	{lr}
  4063e2:	b083      	sub	sp, #12
	uint32 reg;
	sint8 ret;
	/**
	interrupt pin mux select
	**/
	ret = nm_read_reg_with_ret(NMI_PIN_MUX_0, &reg);
  4063e4:	a901      	add	r1, sp, #4
  4063e6:	f241 4008 	movw	r0, #5128	; 0x1408
  4063ea:	4b15      	ldr	r3, [pc, #84]	; (406440 <enable_interrupts+0x60>)
  4063ec:	4798      	blx	r3
	if (M2M_SUCCESS != ret) {
  4063ee:	b9e8      	cbnz	r0, 40642c <enable_interrupts+0x4c>
		return M2M_ERR_BUS_FAIL;
	}
	reg |= ((uint32) 1 << 8);
  4063f0:	9901      	ldr	r1, [sp, #4]
  4063f2:	f441 7180 	orr.w	r1, r1, #256	; 0x100
  4063f6:	9101      	str	r1, [sp, #4]
	ret = nm_write_reg(NMI_PIN_MUX_0, reg);
  4063f8:	f241 4008 	movw	r0, #5128	; 0x1408
  4063fc:	4b11      	ldr	r3, [pc, #68]	; (406444 <enable_interrupts+0x64>)
  4063fe:	4798      	blx	r3
	if (M2M_SUCCESS != ret) {
  406400:	b9b8      	cbnz	r0, 406432 <enable_interrupts+0x52>
		return M2M_ERR_BUS_FAIL;
	}
	/**
	interrupt enable
	**/
	ret = nm_read_reg_with_ret(NMI_INTR_ENABLE, &reg);
  406402:	a901      	add	r1, sp, #4
  406404:	f44f 50d0 	mov.w	r0, #6656	; 0x1a00
  406408:	4b0d      	ldr	r3, [pc, #52]	; (406440 <enable_interrupts+0x60>)
  40640a:	4798      	blx	r3
	if (M2M_SUCCESS != ret) {
  40640c:	b9a0      	cbnz	r0, 406438 <enable_interrupts+0x58>
		return M2M_ERR_BUS_FAIL;
	}
	reg |= ((uint32) 1 << 16);
  40640e:	9901      	ldr	r1, [sp, #4]
  406410:	f441 3180 	orr.w	r1, r1, #65536	; 0x10000
  406414:	9101      	str	r1, [sp, #4]
	ret = nm_write_reg(NMI_INTR_ENABLE, reg);
  406416:	f44f 50d0 	mov.w	r0, #6656	; 0x1a00
  40641a:	4b0a      	ldr	r3, [pc, #40]	; (406444 <enable_interrupts+0x64>)
  40641c:	4798      	blx	r3
	if (M2M_SUCCESS != ret) {
  40641e:	2800      	cmp	r0, #0
		return M2M_ERR_BUS_FAIL;
  406420:	bf18      	it	ne
  406422:	f06f 0005 	mvnne.w	r0, #5
	}
	return M2M_SUCCESS;
}
  406426:	b003      	add	sp, #12
  406428:	f85d fb04 	ldr.w	pc, [sp], #4
		return M2M_ERR_BUS_FAIL;
  40642c:	f06f 0005 	mvn.w	r0, #5
  406430:	e7f9      	b.n	406426 <enable_interrupts+0x46>
		return M2M_ERR_BUS_FAIL;
  406432:	f06f 0005 	mvn.w	r0, #5
  406436:	e7f6      	b.n	406426 <enable_interrupts+0x46>
		return M2M_ERR_BUS_FAIL;
  406438:	f06f 0005 	mvn.w	r0, #5
  40643c:	e7f3      	b.n	406426 <enable_interrupts+0x46>
  40643e:	bf00      	nop
  406440:	00406745 	.word	0x00406745
  406444:	00406751 	.word	0x00406751

00406448 <nmi_get_chipid>:
	nm_bsp_sleep(1); /* TODO: Why bus error if this delay is not here. */
	return ret;
}

uint32 nmi_get_chipid(void)
{
  406448:	b510      	push	{r4, lr}
  40644a:	b082      	sub	sp, #8
	static uint32 chipid = 0;

	if (chipid == 0) {
  40644c:	4b25      	ldr	r3, [pc, #148]	; (4064e4 <nmi_get_chipid+0x9c>)
  40644e:	681c      	ldr	r4, [r3, #0]
  406450:	b124      	cbz	r4, 40645c <nmi_get_chipid+0x14>
		/*M2M is by default have SPI flash*/
		chipid &= ~(0x0f0000);
		chipid |= 0x050000;
#endif /* PROBE_FLASH */
	}
	return chipid;
  406452:	4b24      	ldr	r3, [pc, #144]	; (4064e4 <nmi_get_chipid+0x9c>)
  406454:	681c      	ldr	r4, [r3, #0]
}
  406456:	4620      	mov	r0, r4
  406458:	b002      	add	sp, #8
  40645a:	bd10      	pop	{r4, pc}
		if((nm_read_reg_with_ret(0x1000, &chipid)) != M2M_SUCCESS) {
  40645c:	4619      	mov	r1, r3
  40645e:	f44f 5080 	mov.w	r0, #4096	; 0x1000
  406462:	4b21      	ldr	r3, [pc, #132]	; (4064e8 <nmi_get_chipid+0xa0>)
  406464:	4798      	blx	r3
  406466:	b118      	cbz	r0, 406470 <nmi_get_chipid+0x28>
			chipid = 0;
  406468:	2200      	movs	r2, #0
  40646a:	4b1e      	ldr	r3, [pc, #120]	; (4064e4 <nmi_get_chipid+0x9c>)
  40646c:	601a      	str	r2, [r3, #0]
			return 0;
  40646e:	e7f2      	b.n	406456 <nmi_get_chipid+0xe>
		if((nm_read_reg_with_ret(0x13f4, &rfrevid)) != M2M_SUCCESS) {
  406470:	a901      	add	r1, sp, #4
  406472:	f241 30f4 	movw	r0, #5108	; 0x13f4
  406476:	4b1c      	ldr	r3, [pc, #112]	; (4064e8 <nmi_get_chipid+0xa0>)
  406478:	4798      	blx	r3
  40647a:	b118      	cbz	r0, 406484 <nmi_get_chipid+0x3c>
			chipid = 0;
  40647c:	2200      	movs	r2, #0
  40647e:	4b19      	ldr	r3, [pc, #100]	; (4064e4 <nmi_get_chipid+0x9c>)
  406480:	601a      	str	r2, [r3, #0]
			return 0;
  406482:	e7e8      	b.n	406456 <nmi_get_chipid+0xe>
		if (chipid == 0x1002a0)  {
  406484:	4b17      	ldr	r3, [pc, #92]	; (4064e4 <nmi_get_chipid+0x9c>)
  406486:	681b      	ldr	r3, [r3, #0]
  406488:	4a18      	ldr	r2, [pc, #96]	; (4064ec <nmi_get_chipid+0xa4>)
  40648a:	4293      	cmp	r3, r2
  40648c:	d00d      	beq.n	4064aa <nmi_get_chipid+0x62>
		} else if(chipid == 0x1002b0) {
  40648e:	4a18      	ldr	r2, [pc, #96]	; (4064f0 <nmi_get_chipid+0xa8>)
  406490:	4293      	cmp	r3, r2
  406492:	d011      	beq.n	4064b8 <nmi_get_chipid+0x70>
		} else if(chipid == 0x1000F0) { 
  406494:	4a17      	ldr	r2, [pc, #92]	; (4064f4 <nmi_get_chipid+0xac>)
  406496:	4293      	cmp	r3, r2
  406498:	d018      	beq.n	4064cc <nmi_get_chipid+0x84>
		chipid |= 0x050000;
  40649a:	4a12      	ldr	r2, [pc, #72]	; (4064e4 <nmi_get_chipid+0x9c>)
		chipid &= ~(0x0f0000);
  40649c:	6813      	ldr	r3, [r2, #0]
  40649e:	f423 2370 	bic.w	r3, r3, #983040	; 0xf0000
		chipid |= 0x050000;
  4064a2:	f443 23a0 	orr.w	r3, r3, #327680	; 0x50000
  4064a6:	6013      	str	r3, [r2, #0]
  4064a8:	e7d3      	b.n	406452 <nmi_get_chipid+0xa>
			if (rfrevid == 0x1) { /* 1002A0 */
  4064aa:	9b01      	ldr	r3, [sp, #4]
  4064ac:	2b01      	cmp	r3, #1
  4064ae:	d0f4      	beq.n	40649a <nmi_get_chipid+0x52>
				chipid = 0x1002a1;
  4064b0:	3201      	adds	r2, #1
  4064b2:	4b0c      	ldr	r3, [pc, #48]	; (4064e4 <nmi_get_chipid+0x9c>)
  4064b4:	601a      	str	r2, [r3, #0]
  4064b6:	e7f0      	b.n	40649a <nmi_get_chipid+0x52>
			if(rfrevid == 3) { /* 1002B0 */
  4064b8:	9b01      	ldr	r3, [sp, #4]
  4064ba:	2b03      	cmp	r3, #3
  4064bc:	d0ed      	beq.n	40649a <nmi_get_chipid+0x52>
			} else if(rfrevid == 4) { /* 1002B1 */
  4064be:	2b04      	cmp	r3, #4
				chipid = 0x1002b1;
  4064c0:	bf0c      	ite	eq
  4064c2:	3201      	addeq	r2, #1
				chipid = 0x1002b2;
  4064c4:	4a0c      	ldrne	r2, [pc, #48]	; (4064f8 <nmi_get_chipid+0xb0>)
  4064c6:	4b07      	ldr	r3, [pc, #28]	; (4064e4 <nmi_get_chipid+0x9c>)
  4064c8:	601a      	str	r2, [r3, #0]
  4064ca:	e7e6      	b.n	40649a <nmi_get_chipid+0x52>
			if((nm_read_reg_with_ret(0x3B0000, &chipid)) != M2M_SUCCESS) {
  4064cc:	4905      	ldr	r1, [pc, #20]	; (4064e4 <nmi_get_chipid+0x9c>)
  4064ce:	f44f 106c 	mov.w	r0, #3866624	; 0x3b0000
  4064d2:	4b05      	ldr	r3, [pc, #20]	; (4064e8 <nmi_get_chipid+0xa0>)
  4064d4:	4798      	blx	r3
  4064d6:	2800      	cmp	r0, #0
  4064d8:	d0df      	beq.n	40649a <nmi_get_chipid+0x52>
			chipid = 0;
  4064da:	2200      	movs	r2, #0
  4064dc:	4b01      	ldr	r3, [pc, #4]	; (4064e4 <nmi_get_chipid+0x9c>)
  4064de:	601a      	str	r2, [r3, #0]
			return 0;
  4064e0:	e7b9      	b.n	406456 <nmi_get_chipid+0xe>
  4064e2:	bf00      	nop
  4064e4:	2040c3bc 	.word	0x2040c3bc
  4064e8:	00406745 	.word	0x00406745
  4064ec:	001002a0 	.word	0x001002a0
  4064f0:	001002b0 	.word	0x001002b0
  4064f4:	001000f0 	.word	0x001000f0
  4064f8:	001002b2 	.word	0x001002b2

004064fc <wait_for_bootrom>:
#endif
	return ret;
}

sint8 wait_for_bootrom(uint8 arg)
{
  4064fc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  406500:	4607      	mov	r7, r0
	uint32 reg = 0, cnt = 0;
	uint32 u32GpReg1 = 0;

	reg = 0;
	while(1) {
		reg = nm_read_reg(0x1014);	/* wait for efuse loading done */
  406502:	f241 0514 	movw	r5, #4116	; 0x1014
  406506:	4c28      	ldr	r4, [pc, #160]	; (4065a8 <wait_for_bootrom+0xac>)
		if (reg & 0x80000000) {
			break;
		}
		nm_bsp_sleep(1); /* TODO: Why bus error if this delay is not here. */
  406508:	4e28      	ldr	r6, [pc, #160]	; (4065ac <wait_for_bootrom+0xb0>)
		reg = nm_read_reg(0x1014);	/* wait for efuse loading done */
  40650a:	4628      	mov	r0, r5
  40650c:	47a0      	blx	r4
		if (reg & 0x80000000) {
  40650e:	2800      	cmp	r0, #0
  406510:	db02      	blt.n	406518 <wait_for_bootrom+0x1c>
		nm_bsp_sleep(1); /* TODO: Why bus error if this delay is not here. */
  406512:	2001      	movs	r0, #1
  406514:	47b0      	blx	r6
		reg = nm_read_reg(0x1014);	/* wait for efuse loading done */
  406516:	e7f8      	b.n	40650a <wait_for_bootrom+0xe>
	}
	reg = nm_read_reg(M2M_WAIT_FOR_HOST_REG);
  406518:	4825      	ldr	r0, [pc, #148]	; (4065b0 <wait_for_bootrom+0xb4>)
  40651a:	4b23      	ldr	r3, [pc, #140]	; (4065a8 <wait_for_bootrom+0xac>)
  40651c:	4798      	blx	r3
	reg &= 0x1;

	/* check if waiting for the host will be skipped or not */
	if(reg == 0)
  40651e:	f010 0f01 	tst.w	r0, #1
  406522:	d110      	bne.n	406546 <wait_for_bootrom+0x4a>
	{
		reg = 0;
		while(reg != M2M_FINISH_BOOT_ROM)
		{
			nm_bsp_sleep(1);
  406524:	f8df 8084 	ldr.w	r8, [pc, #132]	; 4065ac <wait_for_bootrom+0xb0>
			reg = nm_read_reg(BOOTROM_REG);
  406528:	4e1f      	ldr	r6, [pc, #124]	; (4065a8 <wait_for_bootrom+0xac>)

			printf("reg:%x / %x \n",reg, M2M_FINISH_BOOT_ROM );
  40652a:	4d22      	ldr	r5, [pc, #136]	; (4065b4 <wait_for_bootrom+0xb8>)
			nm_bsp_sleep(1);
  40652c:	2001      	movs	r0, #1
  40652e:	47c0      	blx	r8
			reg = nm_read_reg(BOOTROM_REG);
  406530:	f04f 100c 	mov.w	r0, #786444	; 0xc000c
  406534:	47b0      	blx	r6
  406536:	4604      	mov	r4, r0
			printf("reg:%x / %x \n",reg, M2M_FINISH_BOOT_ROM );
  406538:	462a      	mov	r2, r5
  40653a:	4601      	mov	r1, r0
  40653c:	481e      	ldr	r0, [pc, #120]	; (4065b8 <wait_for_bootrom+0xbc>)
  40653e:	4b1f      	ldr	r3, [pc, #124]	; (4065bc <wait_for_bootrom+0xc0>)
  406540:	4798      	blx	r3
		while(reg != M2M_FINISH_BOOT_ROM)
  406542:	42ac      	cmp	r4, r5
  406544:	d1f2      	bne.n	40652c <wait_for_bootrom+0x30>
				goto ERR2;
			}
		}
	}
	
	if(M2M_WIFI_MODE_ATE_HIGH == arg) {
  406546:	2f02      	cmp	r7, #2
  406548:	d019      	beq.n	40657e <wait_for_bootrom+0x82>
		nm_write_reg(NMI_REV_REG, M2M_ATE_FW_START_VALUE);
		nm_write_reg(NMI_STATE_REG, NBIT20);
	}else if(M2M_WIFI_MODE_ATE_LOW == arg) {
  40654a:	2f03      	cmp	r7, #3
  40654c:	d022      	beq.n	406594 <wait_for_bootrom+0x98>
		nm_write_reg(NMI_REV_REG, M2M_ATE_FW_START_VALUE);
		nm_write_reg(NMI_STATE_REG, 0);
	}else if(M2M_WIFI_MODE_ETHERNET == arg){
		u32GpReg1 = rHAVE_ETHERNET_MODE_BIT;
  40654e:	2f04      	cmp	r7, #4
  406550:	bf14      	ite	ne
  406552:	2400      	movne	r4, #0
  406554:	2480      	moveq	r4, #128	; 0x80
	} else {
		/*bypass this step*/
	}

	if(REV(nmi_get_chipid()) == REV_3A0)
  406556:	4b1a      	ldr	r3, [pc, #104]	; (4065c0 <wait_for_bootrom+0xc4>)
  406558:	4798      	blx	r3
  40655a:	f3c0 000b 	ubfx	r0, r0, #0, #12
  40655e:	f5b0 7f68 	cmp.w	r0, #928	; 0x3a0
	{
		chip_apply_conf(u32GpReg1 | rHAVE_USE_PMU_BIT);
  406562:	bf0c      	ite	eq
  406564:	f044 0002 	orreq.w	r0, r4, #2
	}
	else
	{
		chip_apply_conf(u32GpReg1);
  406568:	4620      	movne	r0, r4
  40656a:	4b16      	ldr	r3, [pc, #88]	; (4065c4 <wait_for_bootrom+0xc8>)
  40656c:	4798      	blx	r3
	}
	
	nm_write_reg(BOOTROM_REG,M2M_START_FIRMWARE);
  40656e:	4916      	ldr	r1, [pc, #88]	; (4065c8 <wait_for_bootrom+0xcc>)
  406570:	f04f 100c 	mov.w	r0, #786444	; 0xc000c
  406574:	4b15      	ldr	r3, [pc, #84]	; (4065cc <wait_for_bootrom+0xd0>)
  406576:	4798      	blx	r3
	rom_test();
#endif /* __ROM_TEST__ */

ERR2:
	return ret;
}
  406578:	2000      	movs	r0, #0
  40657a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		nm_write_reg(NMI_REV_REG, M2M_ATE_FW_START_VALUE);
  40657e:	4914      	ldr	r1, [pc, #80]	; (4065d0 <wait_for_bootrom+0xd4>)
  406580:	4814      	ldr	r0, [pc, #80]	; (4065d4 <wait_for_bootrom+0xd8>)
  406582:	4c12      	ldr	r4, [pc, #72]	; (4065cc <wait_for_bootrom+0xd0>)
  406584:	47a0      	blx	r4
		nm_write_reg(NMI_STATE_REG, NBIT20);
  406586:	f44f 1180 	mov.w	r1, #1048576	; 0x100000
  40658a:	f241 008c 	movw	r0, #4236	; 0x108c
  40658e:	47a0      	blx	r4
	uint32 u32GpReg1 = 0;
  406590:	2400      	movs	r4, #0
  406592:	e7e0      	b.n	406556 <wait_for_bootrom+0x5a>
		nm_write_reg(NMI_REV_REG, M2M_ATE_FW_START_VALUE);
  406594:	490e      	ldr	r1, [pc, #56]	; (4065d0 <wait_for_bootrom+0xd4>)
  406596:	480f      	ldr	r0, [pc, #60]	; (4065d4 <wait_for_bootrom+0xd8>)
  406598:	4c0c      	ldr	r4, [pc, #48]	; (4065cc <wait_for_bootrom+0xd0>)
  40659a:	47a0      	blx	r4
		nm_write_reg(NMI_STATE_REG, 0);
  40659c:	2100      	movs	r1, #0
  40659e:	f241 008c 	movw	r0, #4236	; 0x108c
  4065a2:	47a0      	blx	r4
	uint32 u32GpReg1 = 0;
  4065a4:	2400      	movs	r4, #0
  4065a6:	e7d6      	b.n	406556 <wait_for_bootrom+0x5a>
  4065a8:	00406739 	.word	0x00406739
  4065ac:	00405065 	.word	0x00405065
  4065b0:	000207bc 	.word	0x000207bc
  4065b4:	10add09e 	.word	0x10add09e
  4065b8:	0040ce6c 	.word	0x0040ce6c
  4065bc:	00409405 	.word	0x00409405
  4065c0:	00406449 	.word	0x00406449
  4065c4:	00406279 	.word	0x00406279
  4065c8:	ef522f61 	.word	0xef522f61
  4065cc:	00406751 	.word	0x00406751
  4065d0:	3c1cd57d 	.word	0x3c1cd57d
  4065d4:	000207ac 	.word	0x000207ac

004065d8 <wait_for_firmware_start>:

sint8 wait_for_firmware_start(uint8 arg)
{
  4065d8:	b5f0      	push	{r4, r5, r6, r7, lr}
  4065da:	b083      	sub	sp, #12
	sint8 ret = M2M_SUCCESS;
	uint32 reg = 0, cnt = 0;
	uint32 u32Timeout = TIMEOUT;
	volatile uint32 regAddress = NMI_STATE_REG;
  4065dc:	f241 038c 	movw	r3, #4236	; 0x108c
  4065e0:	9301      	str	r3, [sp, #4]
	volatile uint32 checkValue = M2M_FINISH_INIT_STATE;
  4065e2:	4b18      	ldr	r3, [pc, #96]	; (406644 <wait_for_firmware_start+0x6c>)
  4065e4:	9300      	str	r3, [sp, #0]
	
	if((M2M_WIFI_MODE_ATE_HIGH == arg)||(M2M_WIFI_MODE_ATE_LOW == arg)) {
  4065e6:	3802      	subs	r0, #2
  4065e8:	b2c0      	uxtb	r0, r0
  4065ea:	2801      	cmp	r0, #1
  4065ec:	d911      	bls.n	406612 <wait_for_firmware_start+0x3a>
{
  4065ee:	f04f 34ff 	mov.w	r4, #4294967295
  4065f2:	2000      	movs	r0, #0
	
	
	while (checkValue != reg)
	{
	
		nm_bsp_sleep(2); /* TODO: Why bus error if this delay is not here. */
  4065f4:	2702      	movs	r7, #2
  4065f6:	4e14      	ldr	r6, [pc, #80]	; (406648 <wait_for_firmware_start+0x70>)
		M2M_DBG("%x %x %x\n",(unsigned int)nm_read_reg(0x108c),(unsigned int)nm_read_reg(0x108c),(unsigned int)nm_read_reg(0x14A0));
		reg = nm_read_reg(regAddress);
  4065f8:	4d14      	ldr	r5, [pc, #80]	; (40664c <wait_for_firmware_start+0x74>)
	while (checkValue != reg)
  4065fa:	9b00      	ldr	r3, [sp, #0]
  4065fc:	4298      	cmp	r0, r3
  4065fe:	d012      	beq.n	406626 <wait_for_firmware_start+0x4e>
		nm_bsp_sleep(2); /* TODO: Why bus error if this delay is not here. */
  406600:	4638      	mov	r0, r7
  406602:	47b0      	blx	r6
		reg = nm_read_reg(regAddress);
  406604:	9801      	ldr	r0, [sp, #4]
  406606:	47a8      	blx	r5
		if(++cnt >= u32Timeout)
  406608:	3c01      	subs	r4, #1
  40660a:	d1f6      	bne.n	4065fa <wait_for_firmware_start+0x22>
		{
			M2M_DBG("Time out for wait firmware Run\n");
			ret = M2M_ERR_INIT;
  40660c:	f06f 0004 	mvn.w	r0, #4
  406610:	e00e      	b.n	406630 <wait_for_firmware_start+0x58>
		regAddress = NMI_REV_REG;
  406612:	4b0f      	ldr	r3, [pc, #60]	; (406650 <wait_for_firmware_start+0x78>)
  406614:	9301      	str	r3, [sp, #4]
		checkValue = M2M_ATE_FW_IS_UP_VALUE;
  406616:	f1a3 5322 	sub.w	r3, r3, #679477248	; 0x28800000
  40661a:	f5a3 1311 	sub.w	r3, r3, #2375680	; 0x244000
  40661e:	f2a3 53e9 	subw	r3, r3, #1513	; 0x5e9
  406622:	9300      	str	r3, [sp, #0]
  406624:	e7e3      	b.n	4065ee <wait_for_firmware_start+0x16>
			goto ERR;
		}
	}
	if(M2M_FINISH_INIT_STATE == checkValue)
  406626:	9a00      	ldr	r2, [sp, #0]
  406628:	4b06      	ldr	r3, [pc, #24]	; (406644 <wait_for_firmware_start+0x6c>)
  40662a:	429a      	cmp	r2, r3
  40662c:	d002      	beq.n	406634 <wait_for_firmware_start+0x5c>
	sint8 ret = M2M_SUCCESS;
  40662e:	2000      	movs	r0, #0
	{
		nm_write_reg(NMI_STATE_REG, 0);
	}
ERR:
	return ret;
}
  406630:	b003      	add	sp, #12
  406632:	bdf0      	pop	{r4, r5, r6, r7, pc}
		nm_write_reg(NMI_STATE_REG, 0);
  406634:	2100      	movs	r1, #0
  406636:	f241 008c 	movw	r0, #4236	; 0x108c
  40663a:	4b06      	ldr	r3, [pc, #24]	; (406654 <wait_for_firmware_start+0x7c>)
  40663c:	4798      	blx	r3
	sint8 ret = M2M_SUCCESS;
  40663e:	2000      	movs	r0, #0
  406640:	e7f6      	b.n	406630 <wait_for_firmware_start+0x58>
  406642:	bf00      	nop
  406644:	02532636 	.word	0x02532636
  406648:	00405065 	.word	0x00405065
  40664c:	00406739 	.word	0x00406739
  406650:	000207ac 	.word	0x000207ac
  406654:	00406751 	.word	0x00406751

00406658 <chip_deinit>:

sint8 chip_deinit(void)
{
  406658:	b5f0      	push	{r4, r5, r6, r7, lr}
  40665a:	b083      	sub	sp, #12
	uint32 reg = 0;
  40665c:	a902      	add	r1, sp, #8
  40665e:	2300      	movs	r3, #0
  406660:	f841 3d04 	str.w	r3, [r1, #-4]!
	uint8 timeout = 10;

	/**
	stop the firmware, need a re-download
	**/
	ret = nm_read_reg_with_ret(NMI_GLB_RESET_0, &reg);
  406664:	f44f 50a0 	mov.w	r0, #5120	; 0x1400
  406668:	4b24      	ldr	r3, [pc, #144]	; (4066fc <chip_deinit+0xa4>)
  40666a:	4798      	blx	r3
	if (ret != M2M_SUCCESS) {
  40666c:	bb20      	cbnz	r0, 4066b8 <chip_deinit+0x60>
		M2M_ERR("failed to de-initialize\n");
	}
	reg &= ~(1 << 10);
  40666e:	9901      	ldr	r1, [sp, #4]
  406670:	f421 6180 	bic.w	r1, r1, #1024	; 0x400
  406674:	9101      	str	r1, [sp, #4]
	ret = nm_write_reg(NMI_GLB_RESET_0, reg);
  406676:	f44f 50a0 	mov.w	r0, #5120	; 0x1400
  40667a:	4b21      	ldr	r3, [pc, #132]	; (406700 <chip_deinit+0xa8>)
  40667c:	4798      	blx	r3

	if (ret != M2M_SUCCESS) {
  40667e:	4605      	mov	r5, r0
  406680:	bb28      	cbnz	r0, 4066ce <chip_deinit+0x76>
  406682:	240a      	movs	r4, #10
		M2M_ERR("Error while writing reg\n");
		return ret;
	}

	do {
		ret = nm_read_reg_with_ret(NMI_GLB_RESET_0, &reg);
  406684:	4e1d      	ldr	r6, [pc, #116]	; (4066fc <chip_deinit+0xa4>)
		}
		/*Workaround to ensure that the chip is actually reset*/
		if ((reg & (1 << 10))) {
			M2M_DBG("Bit 10 not reset retry %d\n", timeout);
			reg &= ~(1 << 10);
			ret = nm_write_reg(NMI_GLB_RESET_0, reg);
  406686:	4f1e      	ldr	r7, [pc, #120]	; (406700 <chip_deinit+0xa8>)
		ret = nm_read_reg_with_ret(NMI_GLB_RESET_0, &reg);
  406688:	a901      	add	r1, sp, #4
  40668a:	f44f 50a0 	mov.w	r0, #5120	; 0x1400
  40668e:	47b0      	blx	r6
		if (ret != M2M_SUCCESS) {
  406690:	4605      	mov	r5, r0
  406692:	bb38      	cbnz	r0, 4066e4 <chip_deinit+0x8c>
		if ((reg & (1 << 10))) {
  406694:	9901      	ldr	r1, [sp, #4]
  406696:	f411 6f80 	tst.w	r1, #1024	; 0x400
  40669a:	d00a      	beq.n	4066b2 <chip_deinit+0x5a>
			reg &= ~(1 << 10);
  40669c:	f421 6180 	bic.w	r1, r1, #1024	; 0x400
  4066a0:	9101      	str	r1, [sp, #4]
			ret = nm_write_reg(NMI_GLB_RESET_0, reg);
  4066a2:	f44f 50a0 	mov.w	r0, #5120	; 0x1400
  4066a6:	47b8      	blx	r7
  4066a8:	4605      	mov	r5, r0
  4066aa:	1e63      	subs	r3, r4, #1
			timeout--;
		} else {
			break;
		}

	} while (timeout);
  4066ac:	f013 04ff 	ands.w	r4, r3, #255	; 0xff
  4066b0:	d1ea      	bne.n	406688 <chip_deinit+0x30>

	return ret;
}
  4066b2:	4628      	mov	r0, r5
  4066b4:	b003      	add	sp, #12
  4066b6:	bdf0      	pop	{r4, r5, r6, r7, pc}
		M2M_ERR("failed to de-initialize\n");
  4066b8:	f240 2231 	movw	r2, #561	; 0x231
  4066bc:	4911      	ldr	r1, [pc, #68]	; (406704 <chip_deinit+0xac>)
  4066be:	4812      	ldr	r0, [pc, #72]	; (406708 <chip_deinit+0xb0>)
  4066c0:	4c12      	ldr	r4, [pc, #72]	; (40670c <chip_deinit+0xb4>)
  4066c2:	47a0      	blx	r4
  4066c4:	4812      	ldr	r0, [pc, #72]	; (406710 <chip_deinit+0xb8>)
  4066c6:	47a0      	blx	r4
  4066c8:	4812      	ldr	r0, [pc, #72]	; (406714 <chip_deinit+0xbc>)
  4066ca:	47a0      	blx	r4
  4066cc:	e7cf      	b.n	40666e <chip_deinit+0x16>
		M2M_ERR("Error while writing reg\n");
  4066ce:	f240 2237 	movw	r2, #567	; 0x237
  4066d2:	490c      	ldr	r1, [pc, #48]	; (406704 <chip_deinit+0xac>)
  4066d4:	480c      	ldr	r0, [pc, #48]	; (406708 <chip_deinit+0xb0>)
  4066d6:	4c0d      	ldr	r4, [pc, #52]	; (40670c <chip_deinit+0xb4>)
  4066d8:	47a0      	blx	r4
  4066da:	480f      	ldr	r0, [pc, #60]	; (406718 <chip_deinit+0xc0>)
  4066dc:	47a0      	blx	r4
  4066de:	480d      	ldr	r0, [pc, #52]	; (406714 <chip_deinit+0xbc>)
  4066e0:	47a0      	blx	r4
		return ret;
  4066e2:	e7e6      	b.n	4066b2 <chip_deinit+0x5a>
			M2M_ERR("Error while reading reg\n");
  4066e4:	f240 223e 	movw	r2, #574	; 0x23e
  4066e8:	4906      	ldr	r1, [pc, #24]	; (406704 <chip_deinit+0xac>)
  4066ea:	4807      	ldr	r0, [pc, #28]	; (406708 <chip_deinit+0xb0>)
  4066ec:	4c07      	ldr	r4, [pc, #28]	; (40670c <chip_deinit+0xb4>)
  4066ee:	47a0      	blx	r4
  4066f0:	480a      	ldr	r0, [pc, #40]	; (40671c <chip_deinit+0xc4>)
  4066f2:	47a0      	blx	r4
  4066f4:	4807      	ldr	r0, [pc, #28]	; (406714 <chip_deinit+0xbc>)
  4066f6:	47a0      	blx	r4
			return ret;
  4066f8:	e7db      	b.n	4066b2 <chip_deinit+0x5a>
  4066fa:	bf00      	nop
  4066fc:	00406745 	.word	0x00406745
  406700:	00406751 	.word	0x00406751
  406704:	0040cda8 	.word	0x0040cda8
  406708:	0040c96c 	.word	0x0040c96c
  40670c:	00409405 	.word	0x00409405
  406710:	0040cdb4 	.word	0x0040cdb4
  406714:	0040d944 	.word	0x0040d944
  406718:	0040cdd0 	.word	0x0040cdd0
  40671c:	0040cdec 	.word	0x0040cdec

00406720 <nm_bus_iface_init>:
*	@author	M. Abdelmawla
*	@date	11 July 2012
*	@version	1.0
*/
sint8 nm_bus_iface_init(void *pvInitVal)
{
  406720:	b508      	push	{r3, lr}
	sint8 ret = M2M_SUCCESS;
	ret = nm_bus_init(pvInitVal);
  406722:	4b01      	ldr	r3, [pc, #4]	; (406728 <nm_bus_iface_init+0x8>)
  406724:	4798      	blx	r3

	return ret;
}
  406726:	bd08      	pop	{r3, pc}
  406728:	004051d9 	.word	0x004051d9

0040672c <nm_bus_iface_deinit>:
*	@author	Samer Sarhan
*	@date	07 April 2014
*	@version	1.0
*/
sint8 nm_bus_iface_deinit(void)
{
  40672c:	b508      	push	{r3, lr}
	sint8 ret = M2M_SUCCESS;
	ret = nm_bus_deinit();
  40672e:	4b01      	ldr	r3, [pc, #4]	; (406734 <nm_bus_iface_deinit+0x8>)
  406730:	4798      	blx	r3

	return ret;
}
  406732:	bd08      	pop	{r3, pc}
  406734:	004053c9 	.word	0x004053c9

00406738 <nm_read_reg>:
*	@author	M. Abdelmawla
*	@date	11 July 2012
*	@version	1.0
*/
uint32 nm_read_reg(uint32 u32Addr)
{
  406738:	b508      	push	{r3, lr}
#ifdef CONF_WINC_USE_UART
	return nm_uart_read_reg(u32Addr);
#elif defined (CONF_WINC_USE_SPI)
	return nm_spi_read_reg(u32Addr);
  40673a:	4b01      	ldr	r3, [pc, #4]	; (406740 <nm_read_reg+0x8>)
  40673c:	4798      	blx	r3
	return nm_i2c_read_reg(u32Addr);
#else
#error "Plesae define bus usage"
#endif

}
  40673e:	bd08      	pop	{r3, pc}
  406740:	00406f8d 	.word	0x00406f8d

00406744 <nm_read_reg_with_ret>:
*	@author	M. Abdelmawla
*	@date	11 July 2012
*	@version	1.0
*/
sint8 nm_read_reg_with_ret(uint32 u32Addr, uint32* pu32RetVal)
{
  406744:	b508      	push	{r3, lr}
#ifdef CONF_WINC_USE_UART
	return nm_uart_read_reg_with_ret(u32Addr,pu32RetVal);
#elif defined (CONF_WINC_USE_SPI)
	return nm_spi_read_reg_with_ret(u32Addr,pu32RetVal);
  406746:	4b01      	ldr	r3, [pc, #4]	; (40674c <nm_read_reg_with_ret+0x8>)
  406748:	4798      	blx	r3
#elif defined (CONF_WINC_USE_I2C)
	return nm_i2c_read_reg_with_ret(u32Addr,pu32RetVal);
#else
#error "Plesae define bus usage"
#endif
}
  40674a:	bd08      	pop	{r3, pc}
  40674c:	00406fa5 	.word	0x00406fa5

00406750 <nm_write_reg>:
*	@author	M. Abdelmawla
*	@date	11 July 2012
*	@version	1.0
*/
sint8 nm_write_reg(uint32 u32Addr, uint32 u32Val)
{
  406750:	b508      	push	{r3, lr}
#ifdef CONF_WINC_USE_UART
	return nm_uart_write_reg(u32Addr,u32Val);
#elif defined (CONF_WINC_USE_SPI)
	return nm_spi_write_reg(u32Addr,u32Val);
  406752:	4b01      	ldr	r3, [pc, #4]	; (406758 <nm_write_reg+0x8>)
  406754:	4798      	blx	r3
#elif defined (CONF_WINC_USE_I2C)
	return nm_i2c_write_reg(u32Addr,u32Val);
#else
#error "Plesae define bus usage"
#endif
}
  406756:	bd08      	pop	{r3, pc}
  406758:	00406fbd 	.word	0x00406fbd

0040675c <nm_read_block>:
*	@author	M. Abdelmawla
*	@date	11 July 2012
*	@version	1.0
*/
sint8 nm_read_block(uint32 u32Addr, uint8 *puBuf, uint32 u32Sz)
{
  40675c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
  406760:	4607      	mov	r7, r0
  406762:	4689      	mov	r9, r1
  406764:	4615      	mov	r5, r2
	uint16 u16MaxTrxSz = egstrNmBusCapabilities.u16MaxTrxSz - MAX_TRX_CFG_SZ;
  406766:	4b12      	ldr	r3, [pc, #72]	; (4067b0 <nm_read_block+0x54>)
  406768:	f8b3 8000 	ldrh.w	r8, [r3]
  40676c:	f1a8 0808 	sub.w	r8, r8, #8
  406770:	fa1f f888 	uxth.w	r8, r8
	uint32 off = 0;
	sint8 s8Ret = M2M_SUCCESS;

	for(;;)
	{
		if(u32Sz <= u16MaxTrxSz)
  406774:	4542      	cmp	r2, r8
  406776:	d919      	bls.n	4067ac <nm_read_block+0x50>
  406778:	4644      	mov	r4, r8
  40677a:	2600      	movs	r6, #0
	return nm_spi_read_block(u32Addr,puBuf,u16Sz);
  40677c:	f8df a034 	ldr.w	sl, [pc, #52]	; 4067b4 <nm_read_block+0x58>
  406780:	4642      	mov	r2, r8
  406782:	eb09 0106 	add.w	r1, r9, r6
  406786:	4638      	mov	r0, r7
  406788:	47d0      	blx	sl
			break;
		}
		else
		{
			s8Ret += p_nm_read_block(u32Addr, &puBuf[off], u16MaxTrxSz);
			if(M2M_SUCCESS != s8Ret) break;
  40678a:	4603      	mov	r3, r0
  40678c:	b958      	cbnz	r0, 4067a6 <nm_read_block+0x4a>
			u32Sz -= u16MaxTrxSz;
  40678e:	1b2d      	subs	r5, r5, r4
			off += u16MaxTrxSz;
  406790:	4426      	add	r6, r4
			u32Addr += u16MaxTrxSz;
  406792:	4427      	add	r7, r4
		if(u32Sz <= u16MaxTrxSz)
  406794:	42a5      	cmp	r5, r4
  406796:	d8f3      	bhi.n	406780 <nm_read_block+0x24>
	return nm_spi_read_block(u32Addr,puBuf,u16Sz);
  406798:	b2aa      	uxth	r2, r5
  40679a:	eb09 0106 	add.w	r1, r9, r6
  40679e:	4638      	mov	r0, r7
  4067a0:	4b04      	ldr	r3, [pc, #16]	; (4067b4 <nm_read_block+0x58>)
  4067a2:	4798      	blx	r3
  4067a4:	4603      	mov	r3, r0
		}
	}

	return s8Ret;
}
  4067a6:	4618      	mov	r0, r3
  4067a8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
	uint32 off = 0;
  4067ac:	2600      	movs	r6, #0
  4067ae:	e7f3      	b.n	406798 <nm_read_block+0x3c>
  4067b0:	20400034 	.word	0x20400034
  4067b4:	004070e9 	.word	0x004070e9

004067b8 <nm_write_block>:
*	@author	M. Abdelmawla
*	@date	11 July 2012
*	@version	1.0
*/
sint8 nm_write_block(uint32 u32Addr, uint8 *puBuf, uint32 u32Sz)
{
  4067b8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
  4067bc:	4607      	mov	r7, r0
  4067be:	4689      	mov	r9, r1
  4067c0:	4615      	mov	r5, r2
	uint16 u16MaxTrxSz = egstrNmBusCapabilities.u16MaxTrxSz - MAX_TRX_CFG_SZ;
  4067c2:	4b12      	ldr	r3, [pc, #72]	; (40680c <nm_write_block+0x54>)
  4067c4:	f8b3 8000 	ldrh.w	r8, [r3]
  4067c8:	f1a8 0808 	sub.w	r8, r8, #8
  4067cc:	fa1f f888 	uxth.w	r8, r8
	uint32 off = 0;
	sint8 s8Ret = M2M_SUCCESS;

	for(;;)
	{
		if(u32Sz <= u16MaxTrxSz)
  4067d0:	4542      	cmp	r2, r8
  4067d2:	d919      	bls.n	406808 <nm_write_block+0x50>
  4067d4:	4644      	mov	r4, r8
  4067d6:	2600      	movs	r6, #0
	return nm_spi_write_block(u32Addr,puBuf,u16Sz);
  4067d8:	f8df a034 	ldr.w	sl, [pc, #52]	; 406810 <nm_write_block+0x58>
  4067dc:	4642      	mov	r2, r8
  4067de:	eb09 0106 	add.w	r1, r9, r6
  4067e2:	4638      	mov	r0, r7
  4067e4:	47d0      	blx	sl
			break;
		}
		else
		{
			s8Ret += p_nm_write_block(u32Addr, &puBuf[off], u16MaxTrxSz);
			if(M2M_SUCCESS != s8Ret) break;
  4067e6:	4603      	mov	r3, r0
  4067e8:	b958      	cbnz	r0, 406802 <nm_write_block+0x4a>
			u32Sz -= u16MaxTrxSz;
  4067ea:	1b2d      	subs	r5, r5, r4
			off += u16MaxTrxSz;
  4067ec:	4426      	add	r6, r4
			u32Addr += u16MaxTrxSz;
  4067ee:	4427      	add	r7, r4
		if(u32Sz <= u16MaxTrxSz)
  4067f0:	42a5      	cmp	r5, r4
  4067f2:	d8f3      	bhi.n	4067dc <nm_write_block+0x24>
	return nm_spi_write_block(u32Addr,puBuf,u16Sz);
  4067f4:	b2aa      	uxth	r2, r5
  4067f6:	eb09 0106 	add.w	r1, r9, r6
  4067fa:	4638      	mov	r0, r7
  4067fc:	4b04      	ldr	r3, [pc, #16]	; (406810 <nm_write_block+0x58>)
  4067fe:	4798      	blx	r3
  406800:	4603      	mov	r3, r0
		}
	}

	return s8Ret;
}
  406802:	4618      	mov	r0, r3
  406804:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
	uint32 off = 0;
  406808:	2600      	movs	r6, #0
  40680a:	e7f3      	b.n	4067f4 <nm_write_block+0x3c>
  40680c:	20400034 	.word	0x20400034
  406810:	004071b1 	.word	0x004071b1

00406814 <nm_get_firmware_info>:
*	@param [out]	M2mRev
*			    pointer holds address of structure "tstrM2mRev" that contains the firmware version parameters
*	@version	1.0
*/
sint8 nm_get_firmware_info(tstrM2mRev* M2mRev)
{
  406814:	b530      	push	{r4, r5, lr}
  406816:	b083      	sub	sp, #12
  406818:	4604      	mov	r4, r0
	uint16  curr_drv_ver, min_req_drv_ver,curr_firm_ver;
	uint32	reg = 0;
  40681a:	a902      	add	r1, sp, #8
  40681c:	2300      	movs	r3, #0
  40681e:	f841 3d04 	str.w	r3, [r1, #-4]!
	sint8	ret = M2M_SUCCESS;

	ret = nm_read_reg_with_ret(NMI_REV_REG, &reg);
  406822:	4824      	ldr	r0, [pc, #144]	; (4068b4 <nm_get_firmware_info+0xa0>)
  406824:	4b24      	ldr	r3, [pc, #144]	; (4068b8 <nm_get_firmware_info+0xa4>)
  406826:	4798      	blx	r3
  406828:	4605      	mov	r5, r0
	//In case the Firmware running is ATE fw
	if(M2M_ATE_FW_IS_UP_VALUE == reg)
  40682a:	9a01      	ldr	r2, [sp, #4]
  40682c:	4b23      	ldr	r3, [pc, #140]	; (4068bc <nm_get_firmware_info+0xa8>)
  40682e:	429a      	cmp	r2, r3
  406830:	d039      	beq.n	4068a6 <nm_get_firmware_info+0x92>
	{
		//Read FW info again from the register specified for ATE
		ret = nm_read_reg_with_ret(NMI_REV_REG_ATE, &reg);
	}
	M2mRev->u8DriverMajor	= M2M_GET_DRV_MAJOR(reg);
  406832:	9b01      	ldr	r3, [sp, #4]
  406834:	0c1a      	lsrs	r2, r3, #16
  406836:	b291      	uxth	r1, r2
  406838:	0a08      	lsrs	r0, r1, #8
  40683a:	71e0      	strb	r0, [r4, #7]
	M2mRev->u8DriverMinor   = M2M_GET_DRV_MINOR(reg);
  40683c:	f3c1 1103 	ubfx	r1, r1, #4, #4
  406840:	7221      	strb	r1, [r4, #8]
	M2mRev->u8DriverPatch	= M2M_GET_DRV_PATCH(reg);
  406842:	f002 020f 	and.w	r2, r2, #15
  406846:	7262      	strb	r2, [r4, #9]
	M2mRev->u8FirmwareMajor	= M2M_GET_FW_MAJOR(reg);
  406848:	b29a      	uxth	r2, r3
  40684a:	0a11      	lsrs	r1, r2, #8
  40684c:	7121      	strb	r1, [r4, #4]
	M2mRev->u8FirmwareMinor = M2M_GET_FW_MINOR(reg);
  40684e:	f3c2 1203 	ubfx	r2, r2, #4, #4
  406852:	7162      	strb	r2, [r4, #5]
	M2mRev->u8FirmwarePatch = M2M_GET_FW_PATCH(reg);
  406854:	f003 030f 	and.w	r3, r3, #15
  406858:	71a3      	strb	r3, [r4, #6]
	M2mRev->u32Chipid	= nmi_get_chipid();
  40685a:	4b19      	ldr	r3, [pc, #100]	; (4068c0 <nm_get_firmware_info+0xac>)
  40685c:	4798      	blx	r3
  40685e:	6020      	str	r0, [r4, #0]
	
	curr_firm_ver   = M2M_MAKE_VERSION(M2mRev->u8FirmwareMajor, M2mRev->u8FirmwareMinor,M2mRev->u8FirmwarePatch);
  406860:	7922      	ldrb	r2, [r4, #4]
  406862:	79a3      	ldrb	r3, [r4, #6]
  406864:	f003 030f 	and.w	r3, r3, #15
  406868:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
  40686c:	7962      	ldrb	r2, [r4, #5]
  40686e:	0112      	lsls	r2, r2, #4
  406870:	b2d2      	uxtb	r2, r2
  406872:	4313      	orrs	r3, r2
	curr_drv_ver    = M2M_MAKE_VERSION(M2M_DRIVER_VERSION_MAJOR_NO, M2M_DRIVER_VERSION_MINOR_NO, M2M_DRIVER_VERSION_PATCH_NO);
	min_req_drv_ver = M2M_MAKE_VERSION(M2mRev->u8DriverMajor, M2mRev->u8DriverMinor,M2mRev->u8DriverPatch);
  406874:	79e1      	ldrb	r1, [r4, #7]
  406876:	7a62      	ldrb	r2, [r4, #9]
  406878:	f002 020f 	and.w	r2, r2, #15
  40687c:	ea42 2201 	orr.w	r2, r2, r1, lsl #8
  406880:	7a21      	ldrb	r1, [r4, #8]
  406882:	0109      	lsls	r1, r1, #4
  406884:	b2c9      	uxtb	r1, r1
	if(curr_drv_ver <  min_req_drv_ver) {
  406886:	430a      	orrs	r2, r1
  406888:	f241 3130 	movw	r1, #4912	; 0x1330
		/*The current driver version should be larger or equal 
		than the min driver that the current firmware support  */
		ret = M2M_ERR_FW_VER_MISMATCH;
  40688c:	428a      	cmp	r2, r1
  40688e:	bf88      	it	hi
  406890:	f06f 050c 	mvnhi.w	r5, #12
	}
	if(curr_drv_ver >  curr_firm_ver) {
  406894:	f241 322f 	movw	r2, #4911	; 0x132f
		/*The current driver should be equal or less than the firmware version*/
		ret = M2M_ERR_FW_VER_MISMATCH;
  406898:	4293      	cmp	r3, r2
	}
	return ret;
}
  40689a:	bf8c      	ite	hi
  40689c:	4628      	movhi	r0, r5
  40689e:	f06f 000c 	mvnls.w	r0, #12
  4068a2:	b003      	add	sp, #12
  4068a4:	bd30      	pop	{r4, r5, pc}
		ret = nm_read_reg_with_ret(NMI_REV_REG_ATE, &reg);
  4068a6:	a901      	add	r1, sp, #4
  4068a8:	f241 0048 	movw	r0, #4168	; 0x1048
  4068ac:	4b02      	ldr	r3, [pc, #8]	; (4068b8 <nm_get_firmware_info+0xa4>)
  4068ae:	4798      	blx	r3
  4068b0:	4605      	mov	r5, r0
  4068b2:	e7be      	b.n	406832 <nm_get_firmware_info+0x1e>
  4068b4:	000207ac 	.word	0x000207ac
  4068b8:	00406745 	.word	0x00406745
  4068bc:	d75dc1c3 	.word	0xd75dc1c3
  4068c0:	00406449 	.word	0x00406449

004068c4 <nm_drv_init>:
*	@author	M. Abdelmawla
*	@date	15 July 2012
*	@version	1.0
*/
sint8 nm_drv_init(void * arg)
{
  4068c4:	b538      	push	{r3, r4, r5, lr}
	sint8 ret = M2M_SUCCESS;
	uint8 u8Mode;
	
	if(NULL != arg) {
  4068c6:	2800      	cmp	r0, #0
  4068c8:	d037      	beq.n	40693a <nm_drv_init+0x76>
		u8Mode = *((uint8 *)arg);
  4068ca:	7804      	ldrb	r4, [r0, #0]
		if((u8Mode < M2M_WIFI_MODE_NORMAL)||(u8Mode >= M2M_WIFI_MODE_MAX)) {
  4068cc:	1e63      	subs	r3, r4, #1
  4068ce:	b2db      	uxtb	r3, r3
			u8Mode = M2M_WIFI_MODE_NORMAL;
  4068d0:	2b04      	cmp	r3, #4
  4068d2:	bf28      	it	cs
  4068d4:	2401      	movcs	r4, #1
		}
	} else {
		u8Mode = M2M_WIFI_MODE_NORMAL;
	}
	
	ret = nm_bus_iface_init(NULL);
  4068d6:	2000      	movs	r0, #0
  4068d8:	4b1e      	ldr	r3, [pc, #120]	; (406954 <nm_drv_init+0x90>)
  4068da:	4798      	blx	r3
	if (M2M_SUCCESS != ret) {
  4068dc:	4605      	mov	r5, r0
  4068de:	2800      	cmp	r0, #0
  4068e0:	d12d      	bne.n	40693e <nm_drv_init+0x7a>
	ret = chip_reset();
	if (M2M_SUCCESS != ret) {
		goto ERR2;
	}
#endif
	M2M_INFO("Chip ID %lx\n", nmi_get_chipid());
  4068e2:	481d      	ldr	r0, [pc, #116]	; (406958 <nm_drv_init+0x94>)
  4068e4:	4d1d      	ldr	r5, [pc, #116]	; (40695c <nm_drv_init+0x98>)
  4068e6:	47a8      	blx	r5
  4068e8:	4b1d      	ldr	r3, [pc, #116]	; (406960 <nm_drv_init+0x9c>)
  4068ea:	4798      	blx	r3
  4068ec:	4601      	mov	r1, r0
  4068ee:	481d      	ldr	r0, [pc, #116]	; (406964 <nm_drv_init+0xa0>)
  4068f0:	47a8      	blx	r5
  4068f2:	481d      	ldr	r0, [pc, #116]	; (406968 <nm_drv_init+0xa4>)
  4068f4:	47a8      	blx	r5
#ifdef CONF_WINC_USE_SPI
	/* Must do this after global reset to set SPI data packet size. */
	nm_spi_init();
  4068f6:	4b1d      	ldr	r3, [pc, #116]	; (40696c <nm_drv_init+0xa8>)
  4068f8:	4798      	blx	r3
	ret = cpu_start();
	if (M2M_SUCCESS != ret) {
		goto ERR2;
	}
#endif
	ret = wait_for_bootrom(u8Mode);
  4068fa:	4620      	mov	r0, r4
  4068fc:	4b1c      	ldr	r3, [pc, #112]	; (406970 <nm_drv_init+0xac>)
  4068fe:	4798      	blx	r3
	if (M2M_SUCCESS != ret) {
  406900:	4605      	mov	r5, r0
  406902:	b9b0      	cbnz	r0, 406932 <nm_drv_init+0x6e>
		goto ERR2;
	}
		
	ret = wait_for_firmware_start(u8Mode);
  406904:	4620      	mov	r0, r4
  406906:	4b1b      	ldr	r3, [pc, #108]	; (406974 <nm_drv_init+0xb0>)
  406908:	4798      	blx	r3
	if (M2M_SUCCESS != ret) {
  40690a:	4605      	mov	r5, r0
  40690c:	b988      	cbnz	r0, 406932 <nm_drv_init+0x6e>
		goto ERR2;
	}
	
	if((M2M_WIFI_MODE_ATE_HIGH == u8Mode)||(M2M_WIFI_MODE_ATE_LOW == u8Mode)) {
  40690e:	3c02      	subs	r4, #2
  406910:	b2e4      	uxtb	r4, r4
  406912:	2c01      	cmp	r4, #1
  406914:	d90f      	bls.n	406936 <nm_drv_init+0x72>
		goto ERR1;
	} else {
		/*continue running*/
	}
	
	ret = enable_interrupts();
  406916:	4b18      	ldr	r3, [pc, #96]	; (406978 <nm_drv_init+0xb4>)
  406918:	4798      	blx	r3
	if (M2M_SUCCESS != ret) {
  40691a:	4605      	mov	r5, r0
  40691c:	b158      	cbz	r0, 406936 <nm_drv_init+0x72>
		M2M_ERR("failed to enable interrupts..\n");
  40691e:	f44f 72ae 	mov.w	r2, #348	; 0x15c
  406922:	4916      	ldr	r1, [pc, #88]	; (40697c <nm_drv_init+0xb8>)
  406924:	4816      	ldr	r0, [pc, #88]	; (406980 <nm_drv_init+0xbc>)
  406926:	4c0d      	ldr	r4, [pc, #52]	; (40695c <nm_drv_init+0x98>)
  406928:	47a0      	blx	r4
  40692a:	4816      	ldr	r0, [pc, #88]	; (406984 <nm_drv_init+0xc0>)
  40692c:	47a0      	blx	r4
  40692e:	480e      	ldr	r0, [pc, #56]	; (406968 <nm_drv_init+0xa4>)
  406930:	47a0      	blx	r4
		goto ERR2;
	}
	
	return ret;
ERR2:
	nm_bus_iface_deinit();
  406932:	4b15      	ldr	r3, [pc, #84]	; (406988 <nm_drv_init+0xc4>)
  406934:	4798      	blx	r3
ERR1:
	return ret;
}
  406936:	4628      	mov	r0, r5
  406938:	bd38      	pop	{r3, r4, r5, pc}
		u8Mode = M2M_WIFI_MODE_NORMAL;
  40693a:	2401      	movs	r4, #1
  40693c:	e7cb      	b.n	4068d6 <nm_drv_init+0x12>
		M2M_ERR("[nmi start]: fail init bus\n");
  40693e:	f44f 7292 	mov.w	r2, #292	; 0x124
  406942:	490e      	ldr	r1, [pc, #56]	; (40697c <nm_drv_init+0xb8>)
  406944:	480e      	ldr	r0, [pc, #56]	; (406980 <nm_drv_init+0xbc>)
  406946:	4c05      	ldr	r4, [pc, #20]	; (40695c <nm_drv_init+0x98>)
  406948:	47a0      	blx	r4
  40694a:	4810      	ldr	r0, [pc, #64]	; (40698c <nm_drv_init+0xc8>)
  40694c:	47a0      	blx	r4
  40694e:	4806      	ldr	r0, [pc, #24]	; (406968 <nm_drv_init+0xa4>)
  406950:	47a0      	blx	r4
		goto ERR1;
  406952:	e7f0      	b.n	406936 <nm_drv_init+0x72>
  406954:	00406721 	.word	0x00406721
  406958:	0040cc3c 	.word	0x0040cc3c
  40695c:	00409405 	.word	0x00409405
  406960:	00406449 	.word	0x00406449
  406964:	0040cf34 	.word	0x0040cf34
  406968:	0040d944 	.word	0x0040d944
  40696c:	00406fd5 	.word	0x00406fd5
  406970:	004064fd 	.word	0x004064fd
  406974:	004065d9 	.word	0x004065d9
  406978:	004063e1 	.word	0x004063e1
  40697c:	0040ce7c 	.word	0x0040ce7c
  406980:	0040c96c 	.word	0x0040c96c
  406984:	0040cef8 	.word	0x0040cef8
  406988:	0040672d 	.word	0x0040672d
  40698c:	0040cf18 	.word	0x0040cf18

00406990 <nm_drv_deinit>:
*	@author	M. Abdelmawla
*	@date	17 July 2012
*	@version	1.0
*/
sint8 nm_drv_deinit(void * arg)
{
  406990:	b538      	push	{r3, r4, r5, lr}
	sint8 ret;

	ret = chip_deinit();
  406992:	4b19      	ldr	r3, [pc, #100]	; (4069f8 <nm_drv_deinit+0x68>)
  406994:	4798      	blx	r3
	if (M2M_SUCCESS != ret) {
  406996:	b958      	cbnz	r0, 4069b0 <nm_drv_deinit+0x20>
		M2M_ERR("[nmi stop]: chip_deinit fail\n");
		goto ERR1;
	}
	
	/* Disable SPI flash to save power when the chip is off */
	ret = spi_flash_enable(0);
  406998:	2000      	movs	r0, #0
  40699a:	4b18      	ldr	r3, [pc, #96]	; (4069fc <nm_drv_deinit+0x6c>)
  40699c:	4798      	blx	r3
	if (M2M_SUCCESS != ret) {
  40699e:	4604      	mov	r4, r0
  4069a0:	b998      	cbnz	r0, 4069ca <nm_drv_deinit+0x3a>
		M2M_ERR("[nmi stop]: SPI flash disable fail\n");
		goto ERR1;
	}

	ret = nm_bus_iface_deinit();
  4069a2:	4b17      	ldr	r3, [pc, #92]	; (406a00 <nm_drv_deinit+0x70>)
  4069a4:	4798      	blx	r3
	if (M2M_SUCCESS != ret) {
  4069a6:	4604      	mov	r4, r0
  4069a8:	b9d0      	cbnz	r0, 4069e0 <nm_drv_deinit+0x50>
		M2M_ERR("[nmi stop]: fail init bus\n");
		goto ERR1;
	}
#ifdef CONF_WINC_USE_SPI
	/* Must do this after global reset to set SPI data packet size. */
	nm_spi_deinit();
  4069aa:	4b16      	ldr	r3, [pc, #88]	; (406a04 <nm_drv_deinit+0x74>)
  4069ac:	4798      	blx	r3
  4069ae:	e00a      	b.n	4069c6 <nm_drv_deinit+0x36>
  4069b0:	4604      	mov	r4, r0
		M2M_ERR("[nmi stop]: chip_deinit fail\n");
  4069b2:	f44f 72ba 	mov.w	r2, #372	; 0x174
  4069b6:	4914      	ldr	r1, [pc, #80]	; (406a08 <nm_drv_deinit+0x78>)
  4069b8:	4814      	ldr	r0, [pc, #80]	; (406a0c <nm_drv_deinit+0x7c>)
  4069ba:	4d15      	ldr	r5, [pc, #84]	; (406a10 <nm_drv_deinit+0x80>)
  4069bc:	47a8      	blx	r5
  4069be:	4815      	ldr	r0, [pc, #84]	; (406a14 <nm_drv_deinit+0x84>)
  4069c0:	47a8      	blx	r5
  4069c2:	4815      	ldr	r0, [pc, #84]	; (406a18 <nm_drv_deinit+0x88>)
  4069c4:	47a8      	blx	r5
#endif

ERR1:
	return ret;
}
  4069c6:	4620      	mov	r0, r4
  4069c8:	bd38      	pop	{r3, r4, r5, pc}
		M2M_ERR("[nmi stop]: SPI flash disable fail\n");
  4069ca:	f240 127b 	movw	r2, #379	; 0x17b
  4069ce:	490e      	ldr	r1, [pc, #56]	; (406a08 <nm_drv_deinit+0x78>)
  4069d0:	480e      	ldr	r0, [pc, #56]	; (406a0c <nm_drv_deinit+0x7c>)
  4069d2:	4d0f      	ldr	r5, [pc, #60]	; (406a10 <nm_drv_deinit+0x80>)
  4069d4:	47a8      	blx	r5
  4069d6:	4811      	ldr	r0, [pc, #68]	; (406a1c <nm_drv_deinit+0x8c>)
  4069d8:	47a8      	blx	r5
  4069da:	480f      	ldr	r0, [pc, #60]	; (406a18 <nm_drv_deinit+0x88>)
  4069dc:	47a8      	blx	r5
		goto ERR1;
  4069de:	e7f2      	b.n	4069c6 <nm_drv_deinit+0x36>
		M2M_ERR("[nmi stop]: fail init bus\n");
  4069e0:	f240 1281 	movw	r2, #385	; 0x181
  4069e4:	4908      	ldr	r1, [pc, #32]	; (406a08 <nm_drv_deinit+0x78>)
  4069e6:	4809      	ldr	r0, [pc, #36]	; (406a0c <nm_drv_deinit+0x7c>)
  4069e8:	4d09      	ldr	r5, [pc, #36]	; (406a10 <nm_drv_deinit+0x80>)
  4069ea:	47a8      	blx	r5
  4069ec:	480c      	ldr	r0, [pc, #48]	; (406a20 <nm_drv_deinit+0x90>)
  4069ee:	47a8      	blx	r5
  4069f0:	4809      	ldr	r0, [pc, #36]	; (406a18 <nm_drv_deinit+0x88>)
  4069f2:	47a8      	blx	r5
		goto ERR1;
  4069f4:	e7e7      	b.n	4069c6 <nm_drv_deinit+0x36>
  4069f6:	bf00      	nop
  4069f8:	00406659 	.word	0x00406659
  4069fc:	00407a35 	.word	0x00407a35
  406a00:	0040672d 	.word	0x0040672d
  406a04:	00406f81 	.word	0x00406f81
  406a08:	0040ce88 	.word	0x0040ce88
  406a0c:	0040c96c 	.word	0x0040c96c
  406a10:	00409405 	.word	0x00409405
  406a14:	0040ce98 	.word	0x0040ce98
  406a18:	0040d944 	.word	0x0040d944
  406a1c:	0040ceb8 	.word	0x0040ceb8
  406a20:	0040cedc 	.word	0x0040cedc

00406a24 <nmi_spi_read>:
#define DATA_PKT_SZ				DATA_PKT_SZ_8K

static uint8 	gu8Crc_off	=   0;

static sint8 nmi_spi_read(uint8* b, uint16 sz)
{
  406a24:	b500      	push	{lr}
  406a26:	b085      	sub	sp, #20
	tstrNmSpiRw spi;
	spi.pu8InBuf = NULL;
  406a28:	2300      	movs	r3, #0
  406a2a:	9301      	str	r3, [sp, #4]
	spi.pu8OutBuf = b;
  406a2c:	9002      	str	r0, [sp, #8]
	spi.u16Sz = sz;
  406a2e:	f8ad 100c 	strh.w	r1, [sp, #12]
	return nm_bus_ioctl(NM_BUS_IOCTL_RW, &spi);
  406a32:	a901      	add	r1, sp, #4
  406a34:	2003      	movs	r0, #3
  406a36:	4b02      	ldr	r3, [pc, #8]	; (406a40 <nmi_spi_read+0x1c>)
  406a38:	4798      	blx	r3
}
  406a3a:	b005      	add	sp, #20
  406a3c:	f85d fb04 	ldr.w	pc, [sp], #4
  406a40:	004052f5 	.word	0x004052f5

00406a44 <spi_cmd_rsp>:

	return result;
}

static sint8 spi_cmd_rsp(uint8 cmd)
{
  406a44:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  406a48:	b082      	sub	sp, #8
  406a4a:	4605      	mov	r5, r0

	/**
		Command/Control response
	**/
	if ((cmd == CMD_RESET) ||
		 (cmd == CMD_TERMINATE) ||
  406a4c:	f100 033b 	add.w	r3, r0, #59	; 0x3b
  406a50:	b2db      	uxtb	r3, r3
  406a52:	2b01      	cmp	r3, #1
  406a54:	d927      	bls.n	406aa6 <spi_cmd_rsp+0x62>
  406a56:	28cf      	cmp	r0, #207	; 0xcf
  406a58:	d025      	beq.n	406aa6 <spi_cmd_rsp+0x62>
{
  406a5a:	240b      	movs	r4, #11

	/* wait for response */
	s8RetryCnt = 10;
	do
	{
		if (M2M_SUCCESS != nmi_spi_read(&rsp, 1)) {
  406a5c:	f04f 0801 	mov.w	r8, #1
  406a60:	4f23      	ldr	r7, [pc, #140]	; (406af0 <spi_cmd_rsp+0xac>)
  406a62:	4641      	mov	r1, r8
  406a64:	f10d 0007 	add.w	r0, sp, #7
  406a68:	47b8      	blx	r7
  406a6a:	4606      	mov	r6, r0
  406a6c:	bb20      	cbnz	r0, 406ab8 <spi_cmd_rsp+0x74>
			M2M_ERR("[nmi spi]: Failed cmd response read, bus error...\n");
			result = N_FAIL;
			goto _fail_;
		}
	} while((rsp != cmd) && (s8RetryCnt-- >0));
  406a6e:	f89d 3007 	ldrb.w	r3, [sp, #7]
  406a72:	42ab      	cmp	r3, r5
  406a74:	d02c      	beq.n	406ad0 <spi_cmd_rsp+0x8c>
  406a76:	1e63      	subs	r3, r4, #1
  406a78:	f013 04ff 	ands.w	r4, r3, #255	; 0xff
  406a7c:	d1f1      	bne.n	406a62 <spi_cmd_rsp+0x1e>
  406a7e:	240b      	movs	r4, #11
	**/
	/* wait for response */
	s8RetryCnt = 10;
	do
	{
		if (M2M_SUCCESS != nmi_spi_read(&rsp, 1)) {
  406a80:	2701      	movs	r7, #1
  406a82:	4d1b      	ldr	r5, [pc, #108]	; (406af0 <spi_cmd_rsp+0xac>)
  406a84:	4639      	mov	r1, r7
  406a86:	f10d 0007 	add.w	r0, sp, #7
  406a8a:	47a8      	blx	r5
  406a8c:	bb10      	cbnz	r0, 406ad4 <spi_cmd_rsp+0x90>
			M2M_ERR("[nmi spi]: Failed cmd response read, bus error...\n");
			result = N_FAIL;
			goto _fail_;
		}
	} while((rsp != 0x00) && (s8RetryCnt-- >0));
  406a8e:	f89d 3007 	ldrb.w	r3, [sp, #7]
  406a92:	b353      	cbz	r3, 406aea <spi_cmd_rsp+0xa6>
  406a94:	1e63      	subs	r3, r4, #1
  406a96:	f013 04ff 	ands.w	r4, r3, #255	; 0xff
  406a9a:	d1f3      	bne.n	406a84 <spi_cmd_rsp+0x40>
	sint8 result = N_OK;
  406a9c:	2601      	movs	r6, #1

_fail_:

	return result;
}
  406a9e:	4630      	mov	r0, r6
  406aa0:	b002      	add	sp, #8
  406aa2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		if (M2M_SUCCESS != nmi_spi_read(&rsp, 1)) {
  406aa6:	2101      	movs	r1, #1
  406aa8:	f10d 0007 	add.w	r0, sp, #7
  406aac:	4b10      	ldr	r3, [pc, #64]	; (406af0 <spi_cmd_rsp+0xac>)
  406aae:	4798      	blx	r3
  406ab0:	2800      	cmp	r0, #0
  406ab2:	d0d2      	beq.n	406a5a <spi_cmd_rsp+0x16>
			result = N_FAIL;
  406ab4:	2600      	movs	r6, #0
  406ab6:	e7f2      	b.n	406a9e <spi_cmd_rsp+0x5a>
			M2M_ERR("[nmi spi]: Failed cmd response read, bus error...\n");
  406ab8:	f240 1227 	movw	r2, #295	; 0x127
  406abc:	490d      	ldr	r1, [pc, #52]	; (406af4 <spi_cmd_rsp+0xb0>)
  406abe:	480e      	ldr	r0, [pc, #56]	; (406af8 <spi_cmd_rsp+0xb4>)
  406ac0:	4c0e      	ldr	r4, [pc, #56]	; (406afc <spi_cmd_rsp+0xb8>)
  406ac2:	47a0      	blx	r4
  406ac4:	480e      	ldr	r0, [pc, #56]	; (406b00 <spi_cmd_rsp+0xbc>)
  406ac6:	47a0      	blx	r4
  406ac8:	480e      	ldr	r0, [pc, #56]	; (406b04 <spi_cmd_rsp+0xc0>)
  406aca:	47a0      	blx	r4
			result = N_FAIL;
  406acc:	2600      	movs	r6, #0
			goto _fail_;
  406ace:	e7e6      	b.n	406a9e <spi_cmd_rsp+0x5a>
  406ad0:	240b      	movs	r4, #11
  406ad2:	e7d5      	b.n	406a80 <spi_cmd_rsp+0x3c>
			M2M_ERR("[nmi spi]: Failed cmd response read, bus error...\n");
  406ad4:	f240 1235 	movw	r2, #309	; 0x135
  406ad8:	4906      	ldr	r1, [pc, #24]	; (406af4 <spi_cmd_rsp+0xb0>)
  406ada:	4807      	ldr	r0, [pc, #28]	; (406af8 <spi_cmd_rsp+0xb4>)
  406adc:	4c07      	ldr	r4, [pc, #28]	; (406afc <spi_cmd_rsp+0xb8>)
  406ade:	47a0      	blx	r4
  406ae0:	4807      	ldr	r0, [pc, #28]	; (406b00 <spi_cmd_rsp+0xbc>)
  406ae2:	47a0      	blx	r4
  406ae4:	4807      	ldr	r0, [pc, #28]	; (406b04 <spi_cmd_rsp+0xc0>)
  406ae6:	47a0      	blx	r4
			goto _fail_;
  406ae8:	e7d9      	b.n	406a9e <spi_cmd_rsp+0x5a>
	sint8 result = N_OK;
  406aea:	2601      	movs	r6, #1
  406aec:	e7d7      	b.n	406a9e <spi_cmd_rsp+0x5a>
  406aee:	bf00      	nop
  406af0:	00406a25 	.word	0x00406a25
  406af4:	0040cf4c 	.word	0x0040cf4c
  406af8:	0040c96c 	.word	0x0040c96c
  406afc:	00409405 	.word	0x00409405
  406b00:	0040d38c 	.word	0x0040d38c
  406b04:	0040d944 	.word	0x0040d944

00406b08 <spi_data_read>:

static sint8 spi_data_read(uint8 *b, uint16 sz,uint8 clockless)
{
  406b08:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  406b0c:	b085      	sub	sp, #20
  406b0e:	4683      	mov	fp, r0
  406b10:	468a      	mov	sl, r1
  406b12:	4617      	mov	r7, r2
	uint8 rsp;

	/**
		Data
	**/
	ix = 0;
  406b14:	f04f 0900 	mov.w	r9, #0
		/**
			Data Respnose header
		**/
		retry = 10;
		do {
			if (M2M_SUCCESS != nmi_spi_read(&rsp, 1)) {
  406b18:	4d37      	ldr	r5, [pc, #220]	; (406bf8 <spi_data_read+0xf0>)
  406b1a:	e027      	b.n	406b6c <spi_data_read+0x64>
				M2M_ERR("[nmi spi]: Failed data response read, bus error...\n");
  406b1c:	f240 1257 	movw	r2, #343	; 0x157
  406b20:	4936      	ldr	r1, [pc, #216]	; (406bfc <spi_data_read+0xf4>)
  406b22:	4837      	ldr	r0, [pc, #220]	; (406c00 <spi_data_read+0xf8>)
  406b24:	4c37      	ldr	r4, [pc, #220]	; (406c04 <spi_data_read+0xfc>)
  406b26:	47a0      	blx	r4
  406b28:	4837      	ldr	r0, [pc, #220]	; (406c08 <spi_data_read+0x100>)
  406b2a:	47a0      	blx	r4
  406b2c:	4837      	ldr	r0, [pc, #220]	; (406c0c <spi_data_read+0x104>)
  406b2e:	47a0      	blx	r4
  406b30:	2300      	movs	r3, #0
  406b32:	9301      	str	r3, [sp, #4]
		sz -= nbytes;

	} while (sz);

	return result;
}
  406b34:	9801      	ldr	r0, [sp, #4]
  406b36:	b005      	add	sp, #20
  406b38:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
		if (retry <= 0) {
  406b3c:	2c00      	cmp	r4, #0
  406b3e:	dd2e      	ble.n	406b9e <spi_data_read+0x96>
		if (M2M_SUCCESS != nmi_spi_read(&b[ix], nbytes)) {
  406b40:	4641      	mov	r1, r8
  406b42:	eb0b 0009 	add.w	r0, fp, r9
  406b46:	47a8      	blx	r5
  406b48:	4604      	mov	r4, r0
  406b4a:	2800      	cmp	r0, #0
  406b4c:	d134      	bne.n	406bb8 <spi_data_read+0xb0>
		if(!clockless)
  406b4e:	b91f      	cbnz	r7, 406b58 <spi_data_read+0x50>
			if (!gu8Crc_off) {
  406b50:	4b2f      	ldr	r3, [pc, #188]	; (406c10 <spi_data_read+0x108>)
  406b52:	781b      	ldrb	r3, [r3, #0]
  406b54:	2b00      	cmp	r3, #0
  406b56:	d03a      	beq.n	406bce <spi_data_read+0xc6>
		ix += nbytes;
  406b58:	44c1      	add	r9, r8
  406b5a:	fa0f f989 	sxth.w	r9, r9
		sz -= nbytes;
  406b5e:	ebaa 0a08 	sub.w	sl, sl, r8
  406b62:	fa1f fa8a 	uxth.w	sl, sl
	} while (sz);
  406b66:	f1ba 0f00 	cmp.w	sl, #0
  406b6a:	d041      	beq.n	406bf0 <spi_data_read+0xe8>
  406b6c:	46d0      	mov	r8, sl
  406b6e:	f5ba 5f00 	cmp.w	sl, #8192	; 0x2000
  406b72:	bf28      	it	cs
  406b74:	f44f 5800 	movcs.w	r8, #8192	; 0x2000
		retry = 10;
  406b78:	240a      	movs	r4, #10
			if (M2M_SUCCESS != nmi_spi_read(&rsp, 1)) {
  406b7a:	2601      	movs	r6, #1
  406b7c:	4631      	mov	r1, r6
  406b7e:	f10d 000b 	add.w	r0, sp, #11
  406b82:	47a8      	blx	r5
  406b84:	9001      	str	r0, [sp, #4]
  406b86:	2800      	cmp	r0, #0
  406b88:	d1c8      	bne.n	406b1c <spi_data_read+0x14>
			if (((rsp >> 4) & 0xf) == 0xf)
  406b8a:	f89d 300b 	ldrb.w	r3, [sp, #11]
  406b8e:	091b      	lsrs	r3, r3, #4
  406b90:	2b0f      	cmp	r3, #15
  406b92:	d0d3      	beq.n	406b3c <spi_data_read+0x34>
  406b94:	3c01      	subs	r4, #1
  406b96:	b224      	sxth	r4, r4
		} while (retry--);
  406b98:	f1b4 3fff 	cmp.w	r4, #4294967295
  406b9c:	d1ee      	bne.n	406b7c <spi_data_read+0x74>
			M2M_ERR("[nmi spi]: Failed data response read...(%02x)\n", rsp);
  406b9e:	f240 1263 	movw	r2, #355	; 0x163
  406ba2:	4916      	ldr	r1, [pc, #88]	; (406bfc <spi_data_read+0xf4>)
  406ba4:	4816      	ldr	r0, [pc, #88]	; (406c00 <spi_data_read+0xf8>)
  406ba6:	4c17      	ldr	r4, [pc, #92]	; (406c04 <spi_data_read+0xfc>)
  406ba8:	47a0      	blx	r4
  406baa:	f89d 100b 	ldrb.w	r1, [sp, #11]
  406bae:	4819      	ldr	r0, [pc, #100]	; (406c14 <spi_data_read+0x10c>)
  406bb0:	47a0      	blx	r4
  406bb2:	4816      	ldr	r0, [pc, #88]	; (406c0c <spi_data_read+0x104>)
  406bb4:	47a0      	blx	r4
			break;
  406bb6:	e7bd      	b.n	406b34 <spi_data_read+0x2c>
			M2M_ERR("[nmi spi]: Failed data block read, bus error...\n");
  406bb8:	f44f 72b6 	mov.w	r2, #364	; 0x16c
  406bbc:	490f      	ldr	r1, [pc, #60]	; (406bfc <spi_data_read+0xf4>)
  406bbe:	4810      	ldr	r0, [pc, #64]	; (406c00 <spi_data_read+0xf8>)
  406bc0:	4c10      	ldr	r4, [pc, #64]	; (406c04 <spi_data_read+0xfc>)
  406bc2:	47a0      	blx	r4
  406bc4:	4814      	ldr	r0, [pc, #80]	; (406c18 <spi_data_read+0x110>)
  406bc6:	47a0      	blx	r4
  406bc8:	4810      	ldr	r0, [pc, #64]	; (406c0c <spi_data_read+0x104>)
  406bca:	47a0      	blx	r4
			break;
  406bcc:	e7b2      	b.n	406b34 <spi_data_read+0x2c>
				if (M2M_SUCCESS != nmi_spi_read(crc, 2)) {
  406bce:	2102      	movs	r1, #2
  406bd0:	a803      	add	r0, sp, #12
  406bd2:	47a8      	blx	r5
  406bd4:	2800      	cmp	r0, #0
  406bd6:	d0bf      	beq.n	406b58 <spi_data_read+0x50>
					M2M_ERR("[nmi spi]: Failed data block crc read, bus error...\n");
  406bd8:	f240 1277 	movw	r2, #375	; 0x177
  406bdc:	4907      	ldr	r1, [pc, #28]	; (406bfc <spi_data_read+0xf4>)
  406bde:	4808      	ldr	r0, [pc, #32]	; (406c00 <spi_data_read+0xf8>)
  406be0:	4d08      	ldr	r5, [pc, #32]	; (406c04 <spi_data_read+0xfc>)
  406be2:	47a8      	blx	r5
  406be4:	480d      	ldr	r0, [pc, #52]	; (406c1c <spi_data_read+0x114>)
  406be6:	47a8      	blx	r5
  406be8:	4808      	ldr	r0, [pc, #32]	; (406c0c <spi_data_read+0x104>)
  406bea:	47a8      	blx	r5
					result = N_FAIL;
  406bec:	9401      	str	r4, [sp, #4]
					break;
  406bee:	e7a1      	b.n	406b34 <spi_data_read+0x2c>
  406bf0:	2301      	movs	r3, #1
  406bf2:	9301      	str	r3, [sp, #4]
  406bf4:	e79e      	b.n	406b34 <spi_data_read+0x2c>
  406bf6:	bf00      	nop
  406bf8:	00406a25 	.word	0x00406a25
  406bfc:	0040cf58 	.word	0x0040cf58
  406c00:	0040c96c 	.word	0x0040c96c
  406c04:	00409405 	.word	0x00409405
  406c08:	0040d3c0 	.word	0x0040d3c0
  406c0c:	0040d944 	.word	0x0040d944
  406c10:	2040c3c0 	.word	0x2040c3c0
  406c14:	0040d3f4 	.word	0x0040d3f4
  406c18:	0040d424 	.word	0x0040d424
  406c1c:	0040d458 	.word	0x0040d458

00406c20 <nmi_spi_write>:
{
  406c20:	b500      	push	{lr}
  406c22:	b085      	sub	sp, #20
	spi.pu8InBuf = b;
  406c24:	9001      	str	r0, [sp, #4]
	spi.pu8OutBuf = NULL;
  406c26:	2300      	movs	r3, #0
  406c28:	9302      	str	r3, [sp, #8]
	spi.u16Sz = sz;
  406c2a:	f8ad 100c 	strh.w	r1, [sp, #12]
	return nm_bus_ioctl(NM_BUS_IOCTL_RW, &spi);
  406c2e:	a901      	add	r1, sp, #4
  406c30:	2003      	movs	r0, #3
  406c32:	4b02      	ldr	r3, [pc, #8]	; (406c3c <nmi_spi_write+0x1c>)
  406c34:	4798      	blx	r3
}
  406c36:	b005      	add	sp, #20
  406c38:	f85d fb04 	ldr.w	pc, [sp], #4
  406c3c:	004052f5 	.word	0x004052f5

00406c40 <spi_cmd>:
{
  406c40:	b570      	push	{r4, r5, r6, lr}
  406c42:	b084      	sub	sp, #16
  406c44:	f89d 4020 	ldrb.w	r4, [sp, #32]
	bc[0] = cmd;
  406c48:	f88d 0004 	strb.w	r0, [sp, #4]
	switch (cmd) {
  406c4c:	38c1      	subs	r0, #193	; 0xc1
  406c4e:	280e      	cmp	r0, #14
  406c50:	f200 80a2 	bhi.w	406d98 <spi_cmd+0x158>
  406c54:	e8df f000 	tbb	[pc, r0]
  406c58:	19664545 	.word	0x19664545
  406c5c:	5454332a 	.word	0x5454332a
  406c60:	a0a0087f 	.word	0xa0a0087f
  406c64:	a0a0      	.short	0xa0a0
  406c66:	3c          	.byte	0x3c
  406c67:	00          	.byte	0x00
		bc[1] = (uint8)(adr >> 16);
  406c68:	0c0b      	lsrs	r3, r1, #16
  406c6a:	f88d 3005 	strb.w	r3, [sp, #5]
		bc[2] = (uint8)(adr >> 8);
  406c6e:	0a0b      	lsrs	r3, r1, #8
  406c70:	f88d 3006 	strb.w	r3, [sp, #6]
		bc[3] = (uint8)adr;
  406c74:	f88d 1007 	strb.w	r1, [sp, #7]
		len = 5;
  406c78:	2105      	movs	r1, #5
		if (!gu8Crc_off)
  406c7a:	4b55      	ldr	r3, [pc, #340]	; (406dd0 <spi_cmd+0x190>)
  406c7c:	781b      	ldrb	r3, [r3, #0]
  406c7e:	2b00      	cmp	r3, #0
  406c80:	f000 808c 	beq.w	406d9c <spi_cmd+0x15c>
			len-=1;
  406c84:	3901      	subs	r1, #1
  406c86:	b2c9      	uxtb	r1, r1
  406c88:	e09a      	b.n	406dc0 <spi_cmd+0x180>
		bc[1] = (uint8)(adr >> 8);
  406c8a:	f3c1 2307 	ubfx	r3, r1, #8, #8
		if(clockless)  bc[1] |= (1 << 7);
  406c8e:	b944      	cbnz	r4, 406ca2 <spi_cmd+0x62>
		bc[1] = (uint8)(adr >> 8);
  406c90:	f88d 3005 	strb.w	r3, [sp, #5]
		bc[2] = (uint8)adr;
  406c94:	f88d 1006 	strb.w	r1, [sp, #6]
		bc[3] = 0x00;
  406c98:	2300      	movs	r3, #0
  406c9a:	f88d 3007 	strb.w	r3, [sp, #7]
		len = 5;
  406c9e:	2105      	movs	r1, #5
		break;
  406ca0:	e7eb      	b.n	406c7a <spi_cmd+0x3a>
		if(clockless)  bc[1] |= (1 << 7);
  406ca2:	f063 037f 	orn	r3, r3, #127	; 0x7f
  406ca6:	f88d 3005 	strb.w	r3, [sp, #5]
  406caa:	e7f3      	b.n	406c94 <spi_cmd+0x54>
		bc[1] = 0x00;
  406cac:	2300      	movs	r3, #0
  406cae:	f88d 3005 	strb.w	r3, [sp, #5]
		bc[2] = 0x00;
  406cb2:	f88d 3006 	strb.w	r3, [sp, #6]
		bc[3] = 0x00;
  406cb6:	f88d 3007 	strb.w	r3, [sp, #7]
		len = 5;
  406cba:	2105      	movs	r1, #5
		break;
  406cbc:	e7dd      	b.n	406c7a <spi_cmd+0x3a>
		bc[1] = 0x00;
  406cbe:	2300      	movs	r3, #0
  406cc0:	f88d 3005 	strb.w	r3, [sp, #5]
		bc[2] = 0x00;
  406cc4:	f88d 3006 	strb.w	r3, [sp, #6]
		bc[3] = 0x00;
  406cc8:	f88d 3007 	strb.w	r3, [sp, #7]
		len = 5;
  406ccc:	2105      	movs	r1, #5
		break;
  406cce:	e7d4      	b.n	406c7a <spi_cmd+0x3a>
		bc[1] = 0xff;
  406cd0:	23ff      	movs	r3, #255	; 0xff
  406cd2:	f88d 3005 	strb.w	r3, [sp, #5]
		bc[2] = 0xff;
  406cd6:	f88d 3006 	strb.w	r3, [sp, #6]
		bc[3] = 0xff;
  406cda:	f88d 3007 	strb.w	r3, [sp, #7]
		len = 5;
  406cde:	2105      	movs	r1, #5
		break;
  406ce0:	e7cb      	b.n	406c7a <spi_cmd+0x3a>
		bc[1] = (uint8)(adr >> 16);
  406ce2:	0c0a      	lsrs	r2, r1, #16
  406ce4:	f88d 2005 	strb.w	r2, [sp, #5]
		bc[2] = (uint8)(adr >> 8);
  406ce8:	0a0a      	lsrs	r2, r1, #8
  406cea:	f88d 2006 	strb.w	r2, [sp, #6]
		bc[3] = (uint8)adr;
  406cee:	f88d 1007 	strb.w	r1, [sp, #7]
		bc[4] = (uint8)(sz >> 8);
  406cf2:	0a1a      	lsrs	r2, r3, #8
  406cf4:	f88d 2008 	strb.w	r2, [sp, #8]
		bc[5] = (uint8)(sz);
  406cf8:	f88d 3009 	strb.w	r3, [sp, #9]
		len = 7;
  406cfc:	2107      	movs	r1, #7
		break;
  406cfe:	e7bc      	b.n	406c7a <spi_cmd+0x3a>
		bc[1] = (uint8)(adr >> 16);
  406d00:	0c0a      	lsrs	r2, r1, #16
  406d02:	f88d 2005 	strb.w	r2, [sp, #5]
		bc[2] = (uint8)(adr >> 8);
  406d06:	0a0a      	lsrs	r2, r1, #8
  406d08:	f88d 2006 	strb.w	r2, [sp, #6]
		bc[3] = (uint8)adr;
  406d0c:	f88d 1007 	strb.w	r1, [sp, #7]
		bc[4] = (uint8)(sz >> 16);
  406d10:	0c1a      	lsrs	r2, r3, #16
  406d12:	f88d 2008 	strb.w	r2, [sp, #8]
		bc[5] = (uint8)(sz >> 8);
  406d16:	0a1a      	lsrs	r2, r3, #8
  406d18:	f88d 2009 	strb.w	r2, [sp, #9]
		bc[6] = (uint8)(sz);
  406d1c:	f88d 300a 	strb.w	r3, [sp, #10]
		len = 8;
  406d20:	2108      	movs	r1, #8
		break;
  406d22:	e7aa      	b.n	406c7a <spi_cmd+0x3a>
		bc[1] = (uint8)(adr >> 8);
  406d24:	f3c1 2307 	ubfx	r3, r1, #8, #8
		if(clockless)  bc[1] |= (1 << 7);
  406d28:	b984      	cbnz	r4, 406d4c <spi_cmd+0x10c>
		bc[1] = (uint8)(adr >> 8);
  406d2a:	f88d 3005 	strb.w	r3, [sp, #5]
		bc[2] = (uint8)(adr);
  406d2e:	f88d 1006 	strb.w	r1, [sp, #6]
		bc[3] = (uint8)(u32data >> 24);
  406d32:	0e13      	lsrs	r3, r2, #24
  406d34:	f88d 3007 	strb.w	r3, [sp, #7]
		bc[4] = (uint8)(u32data >> 16);
  406d38:	0c13      	lsrs	r3, r2, #16
  406d3a:	f88d 3008 	strb.w	r3, [sp, #8]
		bc[5] = (uint8)(u32data >> 8);
  406d3e:	0a13      	lsrs	r3, r2, #8
  406d40:	f88d 3009 	strb.w	r3, [sp, #9]
		bc[6] = (uint8)(u32data);
  406d44:	f88d 200a 	strb.w	r2, [sp, #10]
		len = 8;
  406d48:	2108      	movs	r1, #8
		break;
  406d4a:	e796      	b.n	406c7a <spi_cmd+0x3a>
		if(clockless)  bc[1] |= (1 << 7);
  406d4c:	f063 037f 	orn	r3, r3, #127	; 0x7f
  406d50:	f88d 3005 	strb.w	r3, [sp, #5]
  406d54:	e7eb      	b.n	406d2e <spi_cmd+0xee>
		bc[1] = (uint8)(adr >> 16);
  406d56:	0c0b      	lsrs	r3, r1, #16
  406d58:	f88d 3005 	strb.w	r3, [sp, #5]
		bc[2] = (uint8)(adr >> 8);
  406d5c:	0a0b      	lsrs	r3, r1, #8
  406d5e:	f88d 3006 	strb.w	r3, [sp, #6]
		bc[3] = (uint8)(adr);
  406d62:	f88d 1007 	strb.w	r1, [sp, #7]
		bc[4] = (uint8)(u32data >> 24);
  406d66:	0e13      	lsrs	r3, r2, #24
  406d68:	f88d 3008 	strb.w	r3, [sp, #8]
		bc[5] = (uint8)(u32data >> 16);
  406d6c:	0c13      	lsrs	r3, r2, #16
  406d6e:	f88d 3009 	strb.w	r3, [sp, #9]
		bc[6] = (uint8)(u32data >> 8);
  406d72:	0a13      	lsrs	r3, r2, #8
  406d74:	f88d 300a 	strb.w	r3, [sp, #10]
		bc[7] = (uint8)(u32data);
  406d78:	f88d 200b 	strb.w	r2, [sp, #11]
		len = 9;
  406d7c:	2109      	movs	r1, #9
		break;
  406d7e:	e77c      	b.n	406c7a <spi_cmd+0x3a>
			M2M_ERR("[nmi spi]: Failed cmd write, bus error...\n");
  406d80:	f44f 7284 	mov.w	r2, #264	; 0x108
  406d84:	4913      	ldr	r1, [pc, #76]	; (406dd4 <spi_cmd+0x194>)
  406d86:	4814      	ldr	r0, [pc, #80]	; (406dd8 <spi_cmd+0x198>)
  406d88:	4c14      	ldr	r4, [pc, #80]	; (406ddc <spi_cmd+0x19c>)
  406d8a:	47a0      	blx	r4
  406d8c:	4814      	ldr	r0, [pc, #80]	; (406de0 <spi_cmd+0x1a0>)
  406d8e:	47a0      	blx	r4
  406d90:	4814      	ldr	r0, [pc, #80]	; (406de4 <spi_cmd+0x1a4>)
  406d92:	47a0      	blx	r4
			result = N_FAIL;
  406d94:	2000      	movs	r0, #0
  406d96:	e019      	b.n	406dcc <spi_cmd+0x18c>
	switch (cmd) {
  406d98:	2000      	movs	r0, #0
  406d9a:	e017      	b.n	406dcc <spi_cmd+0x18c>
			bc[len-1] = (crc7(0x7f, (const uint8 *)&bc[0], len-1)) << 1;
  406d9c:	1e4e      	subs	r6, r1, #1
  406d9e:	ab01      	add	r3, sp, #4
  406da0:	199d      	adds	r5, r3, r6
  406da2:	207f      	movs	r0, #127	; 0x7f
  406da4:	461a      	mov	r2, r3
	return crc7_syndrome_table[(crc << 1) ^ data];
  406da6:	4c10      	ldr	r4, [pc, #64]	; (406de8 <spi_cmd+0x1a8>)
  406da8:	f812 3b01 	ldrb.w	r3, [r2], #1
  406dac:	ea83 0340 	eor.w	r3, r3, r0, lsl #1
  406db0:	5ce0      	ldrb	r0, [r4, r3]
	while (len--)
  406db2:	4295      	cmp	r5, r2
  406db4:	d1f8      	bne.n	406da8 <spi_cmd+0x168>
			bc[len-1] = (crc7(0x7f, (const uint8 *)&bc[0], len-1)) << 1;
  406db6:	ab04      	add	r3, sp, #16
  406db8:	441e      	add	r6, r3
  406dba:	0043      	lsls	r3, r0, #1
  406dbc:	f806 3c0c 	strb.w	r3, [r6, #-12]
		if (M2M_SUCCESS != nmi_spi_write(bc, len)) {
  406dc0:	a801      	add	r0, sp, #4
  406dc2:	4b0a      	ldr	r3, [pc, #40]	; (406dec <spi_cmd+0x1ac>)
  406dc4:	4798      	blx	r3
  406dc6:	2800      	cmp	r0, #0
  406dc8:	d1da      	bne.n	406d80 <spi_cmd+0x140>
  406dca:	2001      	movs	r0, #1
}
  406dcc:	b004      	add	sp, #16
  406dce:	bd70      	pop	{r4, r5, r6, pc}
  406dd0:	2040c3c0 	.word	0x2040c3c0
  406dd4:	0040cf44 	.word	0x0040cf44
  406dd8:	0040c96c 	.word	0x0040c96c
  406ddc:	00409405 	.word	0x00409405
  406de0:	0040d360 	.word	0x0040d360
  406de4:	0040d944 	.word	0x0040d944
  406de8:	0040cfc0 	.word	0x0040cfc0
  406dec:	00406c21 	.word	0x00406c21

00406df0 <spi_write_reg>:
	Spi interfaces

********************************************/

static sint8 spi_write_reg(uint32 addr, uint32 u32data)
{
  406df0:	b570      	push	{r4, r5, r6, lr}
  406df2:	b082      	sub	sp, #8
  406df4:	4604      	mov	r4, r0
		clockless = 1;
	}
	else
	{
		cmd = CMD_SINGLE_WRITE;
		clockless = 0;
  406df6:	2831      	cmp	r0, #49	; 0x31
  406df8:	bf35      	itete	cc
  406dfa:	2301      	movcc	r3, #1
  406dfc:	2300      	movcs	r3, #0
  406dfe:	25c3      	movcc	r5, #195	; 0xc3
  406e00:	25c9      	movcs	r5, #201	; 0xc9
	}

#if defined USE_OLD_SPI_SW
	result = spi_cmd(cmd, addr, u32data, 4, clockless);
  406e02:	9300      	str	r3, [sp, #0]
  406e04:	2304      	movs	r3, #4
  406e06:	460a      	mov	r2, r1
  406e08:	4601      	mov	r1, r0
  406e0a:	4628      	mov	r0, r5
  406e0c:	4e15      	ldr	r6, [pc, #84]	; (406e64 <spi_write_reg+0x74>)
  406e0e:	47b0      	blx	r6
	if (result != N_OK) {
  406e10:	2801      	cmp	r0, #1
  406e12:	d00d      	beq.n	406e30 <spi_write_reg+0x40>
		M2M_ERR("[nmi spi]: Failed cmd, write reg (%08x)...\n", (unsigned int)addr);
  406e14:	f240 12eb 	movw	r2, #491	; 0x1eb
  406e18:	4913      	ldr	r1, [pc, #76]	; (406e68 <spi_write_reg+0x78>)
  406e1a:	4814      	ldr	r0, [pc, #80]	; (406e6c <spi_write_reg+0x7c>)
  406e1c:	4d14      	ldr	r5, [pc, #80]	; (406e70 <spi_write_reg+0x80>)
  406e1e:	47a8      	blx	r5
  406e20:	4621      	mov	r1, r4
  406e22:	4814      	ldr	r0, [pc, #80]	; (406e74 <spi_write_reg+0x84>)
  406e24:	47a8      	blx	r5
  406e26:	4814      	ldr	r0, [pc, #80]	; (406e78 <spi_write_reg+0x88>)
  406e28:	47a8      	blx	r5
		return N_FAIL;
  406e2a:	2000      	movs	r0, #0
	}

	return result;

#endif
}
  406e2c:	b002      	add	sp, #8
  406e2e:	bd70      	pop	{r4, r5, r6, pc}
	result = spi_cmd_rsp(cmd);
  406e30:	4628      	mov	r0, r5
  406e32:	4b12      	ldr	r3, [pc, #72]	; (406e7c <spi_write_reg+0x8c>)
  406e34:	4798      	blx	r3
	if (result != N_OK) {
  406e36:	2801      	cmp	r0, #1
  406e38:	d0f8      	beq.n	406e2c <spi_write_reg+0x3c>
		M2M_ERR("[nmi spi]: Failed cmd response, write reg (%08x)...\n", (unsigned int)addr);
  406e3a:	f240 12f1 	movw	r2, #497	; 0x1f1
  406e3e:	490a      	ldr	r1, [pc, #40]	; (406e68 <spi_write_reg+0x78>)
  406e40:	480a      	ldr	r0, [pc, #40]	; (406e6c <spi_write_reg+0x7c>)
  406e42:	4d0b      	ldr	r5, [pc, #44]	; (406e70 <spi_write_reg+0x80>)
  406e44:	47a8      	blx	r5
  406e46:	4621      	mov	r1, r4
  406e48:	480d      	ldr	r0, [pc, #52]	; (406e80 <spi_write_reg+0x90>)
  406e4a:	47a8      	blx	r5
  406e4c:	480a      	ldr	r0, [pc, #40]	; (406e78 <spi_write_reg+0x88>)
  406e4e:	47a8      	blx	r5
		spi_cmd(CMD_RESET, 0, 0, 0, 0);
  406e50:	2400      	movs	r4, #0
  406e52:	9400      	str	r4, [sp, #0]
  406e54:	4623      	mov	r3, r4
  406e56:	4622      	mov	r2, r4
  406e58:	4621      	mov	r1, r4
  406e5a:	20cf      	movs	r0, #207	; 0xcf
  406e5c:	4d01      	ldr	r5, [pc, #4]	; (406e64 <spi_write_reg+0x74>)
  406e5e:	47a8      	blx	r5
		return N_FAIL;
  406e60:	4620      	mov	r0, r4
  406e62:	e7e3      	b.n	406e2c <spi_write_reg+0x3c>
  406e64:	00406c41 	.word	0x00406c41
  406e68:	0040cf78 	.word	0x0040cf78
  406e6c:	0040c96c 	.word	0x0040c96c
  406e70:	00409405 	.word	0x00409405
  406e74:	0040d510 	.word	0x0040d510
  406e78:	0040d944 	.word	0x0040d944
  406e7c:	00406a45 	.word	0x00406a45
  406e80:	0040d53c 	.word	0x0040d53c

00406e84 <spi_read_reg>:

	return N_OK;
}

static sint8 spi_read_reg(uint32 addr, uint32 *u32data)
{
  406e84:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  406e88:	b084      	sub	sp, #16
  406e8a:	4604      	mov	r4, r0
  406e8c:	4688      	mov	r8, r1
		clockless = 1;
	}
	else
	{
		cmd = CMD_SINGLE_READ;
		clockless = 0;
  406e8e:	f5b0 7f80 	cmp.w	r0, #256	; 0x100
  406e92:	bf35      	itete	cc
  406e94:	2601      	movcc	r6, #1
  406e96:	2600      	movcs	r6, #0
  406e98:	25c4      	movcc	r5, #196	; 0xc4
  406e9a:	25ca      	movcs	r5, #202	; 0xca
	}

#if defined USE_OLD_SPI_SW
	result = spi_cmd(cmd, addr, 0, 4, clockless);
  406e9c:	9600      	str	r6, [sp, #0]
  406e9e:	2304      	movs	r3, #4
  406ea0:	2200      	movs	r2, #0
  406ea2:	4601      	mov	r1, r0
  406ea4:	4628      	mov	r0, r5
  406ea6:	4f2c      	ldr	r7, [pc, #176]	; (406f58 <spi_read_reg+0xd4>)
  406ea8:	47b8      	blx	r7
	if (result != N_OK) {
  406eaa:	2801      	cmp	r0, #1
  406eac:	d00e      	beq.n	406ecc <spi_read_reg+0x48>
		M2M_ERR("[nmi spi]: Failed cmd, read reg (%08x)...\n", (unsigned int)addr);
  406eae:	f240 2245 	movw	r2, #581	; 0x245
  406eb2:	492a      	ldr	r1, [pc, #168]	; (406f5c <spi_read_reg+0xd8>)
  406eb4:	482a      	ldr	r0, [pc, #168]	; (406f60 <spi_read_reg+0xdc>)
  406eb6:	4d2b      	ldr	r5, [pc, #172]	; (406f64 <spi_read_reg+0xe0>)
  406eb8:	47a8      	blx	r5
  406eba:	4621      	mov	r1, r4
  406ebc:	482a      	ldr	r0, [pc, #168]	; (406f68 <spi_read_reg+0xe4>)
  406ebe:	47a8      	blx	r5
  406ec0:	482a      	ldr	r0, [pc, #168]	; (406f6c <spi_read_reg+0xe8>)
  406ec2:	47a8      	blx	r5
		return N_FAIL;
  406ec4:	2000      	movs	r0, #0
		((uint32)tmp[1] << 8) |
		((uint32)tmp[2] << 16) |
		((uint32)tmp[3] << 24);

	return N_OK;
}
  406ec6:	b004      	add	sp, #16
  406ec8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	result = spi_cmd_rsp(cmd);
  406ecc:	4628      	mov	r0, r5
  406ece:	4b28      	ldr	r3, [pc, #160]	; (406f70 <spi_read_reg+0xec>)
  406ed0:	4798      	blx	r3
	if (result != N_OK) {
  406ed2:	2801      	cmp	r0, #1
  406ed4:	d014      	beq.n	406f00 <spi_read_reg+0x7c>
		M2M_ERR("[nmi spi]: Failed cmd response, read reg (%08x)...\n", (unsigned int)addr);
  406ed6:	f240 224b 	movw	r2, #587	; 0x24b
  406eda:	4920      	ldr	r1, [pc, #128]	; (406f5c <spi_read_reg+0xd8>)
  406edc:	4820      	ldr	r0, [pc, #128]	; (406f60 <spi_read_reg+0xdc>)
  406ede:	4d21      	ldr	r5, [pc, #132]	; (406f64 <spi_read_reg+0xe0>)
  406ee0:	47a8      	blx	r5
  406ee2:	4621      	mov	r1, r4
  406ee4:	4823      	ldr	r0, [pc, #140]	; (406f74 <spi_read_reg+0xf0>)
  406ee6:	47a8      	blx	r5
  406ee8:	4820      	ldr	r0, [pc, #128]	; (406f6c <spi_read_reg+0xe8>)
  406eea:	47a8      	blx	r5
		spi_cmd(CMD_RESET, 0, 0, 0, 0);
  406eec:	2400      	movs	r4, #0
  406eee:	9400      	str	r4, [sp, #0]
  406ef0:	4623      	mov	r3, r4
  406ef2:	4622      	mov	r2, r4
  406ef4:	4621      	mov	r1, r4
  406ef6:	20cf      	movs	r0, #207	; 0xcf
  406ef8:	4d17      	ldr	r5, [pc, #92]	; (406f58 <spi_read_reg+0xd4>)
  406efa:	47a8      	blx	r5
		return N_FAIL;
  406efc:	4620      	mov	r0, r4
  406efe:	e7e2      	b.n	406ec6 <spi_read_reg+0x42>
	result = spi_data_read(&tmp[0], 4, clockless);
  406f00:	4632      	mov	r2, r6
  406f02:	2104      	movs	r1, #4
  406f04:	a803      	add	r0, sp, #12
  406f06:	4b1c      	ldr	r3, [pc, #112]	; (406f78 <spi_read_reg+0xf4>)
  406f08:	4798      	blx	r3
	if (result != N_OK) {
  406f0a:	2801      	cmp	r0, #1
  406f0c:	d110      	bne.n	406f30 <spi_read_reg+0xac>
		((uint32)tmp[1] << 8) |
  406f0e:	f89d 200d 	ldrb.w	r2, [sp, #13]
		((uint32)tmp[2] << 16) |
  406f12:	f89d 300e 	ldrb.w	r3, [sp, #14]
  406f16:	041b      	lsls	r3, r3, #16
		((uint32)tmp[1] << 8) |
  406f18:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
	*u32data = tmp[0] |
  406f1c:	f89d 200c 	ldrb.w	r2, [sp, #12]
		((uint32)tmp[1] << 8) |
  406f20:	4313      	orrs	r3, r2
		((uint32)tmp[3] << 24);
  406f22:	f89d 200f 	ldrb.w	r2, [sp, #15]
		((uint32)tmp[2] << 16) |
  406f26:	ea43 6302 	orr.w	r3, r3, r2, lsl #24
	*u32data = tmp[0] |
  406f2a:	f8c8 3000 	str.w	r3, [r8]
	return N_OK;
  406f2e:	e7ca      	b.n	406ec6 <spi_read_reg+0x42>
		M2M_ERR("[nmi spi]: Failed data read...\n");
  406f30:	f240 2253 	movw	r2, #595	; 0x253
  406f34:	4909      	ldr	r1, [pc, #36]	; (406f5c <spi_read_reg+0xd8>)
  406f36:	480a      	ldr	r0, [pc, #40]	; (406f60 <spi_read_reg+0xdc>)
  406f38:	4c0a      	ldr	r4, [pc, #40]	; (406f64 <spi_read_reg+0xe0>)
  406f3a:	47a0      	blx	r4
  406f3c:	480f      	ldr	r0, [pc, #60]	; (406f7c <spi_read_reg+0xf8>)
  406f3e:	47a0      	blx	r4
  406f40:	480a      	ldr	r0, [pc, #40]	; (406f6c <spi_read_reg+0xe8>)
  406f42:	47a0      	blx	r4
		spi_cmd(CMD_RESET, 0, 0, 0, 0);
  406f44:	2400      	movs	r4, #0
  406f46:	9400      	str	r4, [sp, #0]
  406f48:	4623      	mov	r3, r4
  406f4a:	4622      	mov	r2, r4
  406f4c:	4621      	mov	r1, r4
  406f4e:	20cf      	movs	r0, #207	; 0xcf
  406f50:	4d01      	ldr	r5, [pc, #4]	; (406f58 <spi_read_reg+0xd4>)
  406f52:	47a8      	blx	r5
		return N_FAIL;
  406f54:	4620      	mov	r0, r4
  406f56:	e7b6      	b.n	406ec6 <spi_read_reg+0x42>
  406f58:	00406c41 	.word	0x00406c41
  406f5c:	0040cf98 	.word	0x0040cf98
  406f60:	0040c96c 	.word	0x0040c96c
  406f64:	00409405 	.word	0x00409405
  406f68:	0040d490 	.word	0x0040d490
  406f6c:	0040d944 	.word	0x0040d944
  406f70:	00406a45 	.word	0x00406a45
  406f74:	0040d4bc 	.word	0x0040d4bc
  406f78:	00406b09 	.word	0x00406b09
  406f7c:	0040d4f0 	.word	0x0040d4f0

00406f80 <nm_spi_deinit>:
*	@date	27 Feb 2015
*	@version	1.0
*/
sint8 nm_spi_deinit(void)
{
	gu8Crc_off = 0;
  406f80:	2000      	movs	r0, #0
  406f82:	4b01      	ldr	r3, [pc, #4]	; (406f88 <nm_spi_deinit+0x8>)
  406f84:	7018      	strb	r0, [r3, #0]
	return M2M_SUCCESS;
}
  406f86:	4770      	bx	lr
  406f88:	2040c3c0 	.word	0x2040c3c0

00406f8c <nm_spi_read_reg>:
*	@author	M. Abdelmawla
*	@date	11 July 2012
*	@version	1.0
*/
uint32 nm_spi_read_reg(uint32 u32Addr)
{
  406f8c:	b500      	push	{lr}
  406f8e:	b083      	sub	sp, #12
	uint32 u32Val;

	spi_read_reg(u32Addr, &u32Val);
  406f90:	a901      	add	r1, sp, #4
  406f92:	4b03      	ldr	r3, [pc, #12]	; (406fa0 <nm_spi_read_reg+0x14>)
  406f94:	4798      	blx	r3

	return u32Val;
}
  406f96:	9801      	ldr	r0, [sp, #4]
  406f98:	b003      	add	sp, #12
  406f9a:	f85d fb04 	ldr.w	pc, [sp], #4
  406f9e:	bf00      	nop
  406fa0:	00406e85 	.word	0x00406e85

00406fa4 <nm_spi_read_reg_with_ret>:
*	@author	M. Abdelmawla
*	@date	11 July 2012
*	@version	1.0
*/
sint8 nm_spi_read_reg_with_ret(uint32 u32Addr, uint32* pu32RetVal)
{
  406fa4:	b508      	push	{r3, lr}
	sint8 s8Ret;

	s8Ret = spi_read_reg(u32Addr,pu32RetVal);
  406fa6:	4b04      	ldr	r3, [pc, #16]	; (406fb8 <nm_spi_read_reg_with_ret+0x14>)
  406fa8:	4798      	blx	r3

	if(N_OK == s8Ret) s8Ret = M2M_SUCCESS;
	else s8Ret = M2M_ERR_BUS_FAIL;
  406faa:	2801      	cmp	r0, #1

	return s8Ret;
}
  406fac:	bf0c      	ite	eq
  406fae:	2000      	moveq	r0, #0
  406fb0:	f06f 0005 	mvnne.w	r0, #5
  406fb4:	bd08      	pop	{r3, pc}
  406fb6:	bf00      	nop
  406fb8:	00406e85 	.word	0x00406e85

00406fbc <nm_spi_write_reg>:
*	@author	M. Abdelmawla
*	@date	11 July 2012
*	@version	1.0
*/
sint8 nm_spi_write_reg(uint32 u32Addr, uint32 u32Val)
{
  406fbc:	b508      	push	{r3, lr}
	sint8 s8Ret;

	s8Ret = spi_write_reg(u32Addr, u32Val);
  406fbe:	4b04      	ldr	r3, [pc, #16]	; (406fd0 <nm_spi_write_reg+0x14>)
  406fc0:	4798      	blx	r3

	if(N_OK == s8Ret) s8Ret = M2M_SUCCESS;
	else s8Ret = M2M_ERR_BUS_FAIL;
  406fc2:	2801      	cmp	r0, #1

	return s8Ret;
}
  406fc4:	bf0c      	ite	eq
  406fc6:	2000      	moveq	r0, #0
  406fc8:	f06f 0005 	mvnne.w	r0, #5
  406fcc:	bd08      	pop	{r3, pc}
  406fce:	bf00      	nop
  406fd0:	00406df1 	.word	0x00406df1

00406fd4 <nm_spi_init>:
{
  406fd4:	b530      	push	{r4, r5, lr}
  406fd6:	b083      	sub	sp, #12
	uint32 reg =0;
  406fd8:	2300      	movs	r3, #0
  406fda:	a902      	add	r1, sp, #8
  406fdc:	f841 3d08 	str.w	r3, [r1, #-8]!
	gu8Crc_off = 0;
  406fe0:	4a34      	ldr	r2, [pc, #208]	; (4070b4 <nm_spi_init+0xe0>)
  406fe2:	7013      	strb	r3, [r2, #0]
	if (!spi_read_reg(NMI_SPI_PROTOCOL_CONFIG, &reg)) {
  406fe4:	f64e 0024 	movw	r0, #59428	; 0xe824
  406fe8:	4b33      	ldr	r3, [pc, #204]	; (4070b8 <nm_spi_init+0xe4>)
  406fea:	4798      	blx	r3
  406fec:	b348      	cbz	r0, 407042 <nm_spi_init+0x6e>
	if(gu8Crc_off == 0)
  406fee:	4b31      	ldr	r3, [pc, #196]	; (4070b4 <nm_spi_init+0xe0>)
  406ff0:	781b      	ldrb	r3, [r3, #0]
  406ff2:	b97b      	cbnz	r3, 407014 <nm_spi_init+0x40>
		reg &= ~0x70;
  406ff4:	9900      	ldr	r1, [sp, #0]
  406ff6:	f021 017c 	bic.w	r1, r1, #124	; 0x7c
		reg |= (0x5 << 4);
  406ffa:	f041 0150 	orr.w	r1, r1, #80	; 0x50
  406ffe:	9100      	str	r1, [sp, #0]
		if (!spi_write_reg(NMI_SPI_PROTOCOL_CONFIG, reg)) {
  407000:	f64e 0024 	movw	r0, #59428	; 0xe824
  407004:	4b2d      	ldr	r3, [pc, #180]	; (4070bc <nm_spi_init+0xe8>)
  407006:	4798      	blx	r3
  407008:	4604      	mov	r4, r0
  40700a:	2800      	cmp	r0, #0
  40700c:	d039      	beq.n	407082 <nm_spi_init+0xae>
		gu8Crc_off = 1;
  40700e:	2201      	movs	r2, #1
  407010:	4b28      	ldr	r3, [pc, #160]	; (4070b4 <nm_spi_init+0xe0>)
  407012:	701a      	strb	r2, [r3, #0]
	if (!spi_read_reg(0x1000, &chipid)) {
  407014:	a901      	add	r1, sp, #4
  407016:	f44f 5080 	mov.w	r0, #4096	; 0x1000
  40701a:	4b27      	ldr	r3, [pc, #156]	; (4070b8 <nm_spi_init+0xe4>)
  40701c:	4798      	blx	r3
  40701e:	2800      	cmp	r0, #0
  407020:	d03a      	beq.n	407098 <nm_spi_init+0xc4>
	val32 = nm_spi_read_reg(SPI_BASE+0x24);
  407022:	f64e 0024 	movw	r0, #59428	; 0xe824
  407026:	4b26      	ldr	r3, [pc, #152]	; (4070c0 <nm_spi_init+0xec>)
  407028:	4798      	blx	r3
	val32 &= ~(0x7 << 4);
  40702a:	f020 0170 	bic.w	r1, r0, #112	; 0x70
	nm_spi_write_reg(SPI_BASE+0x24, val32);
  40702e:	f041 0150 	orr.w	r1, r1, #80	; 0x50
  407032:	f64e 0024 	movw	r0, #59428	; 0xe824
  407036:	4b23      	ldr	r3, [pc, #140]	; (4070c4 <nm_spi_init+0xf0>)
  407038:	4798      	blx	r3
	return M2M_SUCCESS;
  40703a:	2400      	movs	r4, #0
}
  40703c:	4620      	mov	r0, r4
  40703e:	b003      	add	sp, #12
  407040:	bd30      	pop	{r4, r5, pc}
		gu8Crc_off = 1;
  407042:	2201      	movs	r2, #1
  407044:	4b1b      	ldr	r3, [pc, #108]	; (4070b4 <nm_spi_init+0xe0>)
  407046:	701a      	strb	r2, [r3, #0]
		M2M_ERR("[nmi spi]: Failed internal read protocol with CRC on, retyring with CRC off...\n");
  407048:	f240 22c5 	movw	r2, #709	; 0x2c5
  40704c:	491e      	ldr	r1, [pc, #120]	; (4070c8 <nm_spi_init+0xf4>)
  40704e:	481f      	ldr	r0, [pc, #124]	; (4070cc <nm_spi_init+0xf8>)
  407050:	4c1f      	ldr	r4, [pc, #124]	; (4070d0 <nm_spi_init+0xfc>)
  407052:	47a0      	blx	r4
  407054:	481f      	ldr	r0, [pc, #124]	; (4070d4 <nm_spi_init+0x100>)
  407056:	47a0      	blx	r4
  407058:	481f      	ldr	r0, [pc, #124]	; (4070d8 <nm_spi_init+0x104>)
  40705a:	47a0      	blx	r4
		if (!spi_read_reg(NMI_SPI_PROTOCOL_CONFIG, &reg)){
  40705c:	4669      	mov	r1, sp
  40705e:	f64e 0024 	movw	r0, #59428	; 0xe824
  407062:	4b15      	ldr	r3, [pc, #84]	; (4070b8 <nm_spi_init+0xe4>)
  407064:	4798      	blx	r3
  407066:	4604      	mov	r4, r0
  407068:	2800      	cmp	r0, #0
  40706a:	d1c0      	bne.n	406fee <nm_spi_init+0x1a>
			M2M_ERR( "[nmi spi]: Failed internal read protocol...\n");
  40706c:	f44f 7232 	mov.w	r2, #712	; 0x2c8
  407070:	4915      	ldr	r1, [pc, #84]	; (4070c8 <nm_spi_init+0xf4>)
  407072:	4816      	ldr	r0, [pc, #88]	; (4070cc <nm_spi_init+0xf8>)
  407074:	4d16      	ldr	r5, [pc, #88]	; (4070d0 <nm_spi_init+0xfc>)
  407076:	47a8      	blx	r5
  407078:	4818      	ldr	r0, [pc, #96]	; (4070dc <nm_spi_init+0x108>)
  40707a:	47a8      	blx	r5
  40707c:	4816      	ldr	r0, [pc, #88]	; (4070d8 <nm_spi_init+0x104>)
  40707e:	47a8      	blx	r5
			return 0;
  407080:	e7dc      	b.n	40703c <nm_spi_init+0x68>
			M2M_ERR( "[nmi spi]: Failed internal write protocol reg...\n");
  407082:	f240 22d2 	movw	r2, #722	; 0x2d2
  407086:	4910      	ldr	r1, [pc, #64]	; (4070c8 <nm_spi_init+0xf4>)
  407088:	4810      	ldr	r0, [pc, #64]	; (4070cc <nm_spi_init+0xf8>)
  40708a:	4d11      	ldr	r5, [pc, #68]	; (4070d0 <nm_spi_init+0xfc>)
  40708c:	47a8      	blx	r5
  40708e:	4814      	ldr	r0, [pc, #80]	; (4070e0 <nm_spi_init+0x10c>)
  407090:	47a8      	blx	r5
  407092:	4811      	ldr	r0, [pc, #68]	; (4070d8 <nm_spi_init+0x104>)
  407094:	47a8      	blx	r5
			return 0;
  407096:	e7d1      	b.n	40703c <nm_spi_init+0x68>
		M2M_ERR("[nmi spi]: Fail cmd read chip id...\n");
  407098:	f44f 7237 	mov.w	r2, #732	; 0x2dc
  40709c:	490a      	ldr	r1, [pc, #40]	; (4070c8 <nm_spi_init+0xf4>)
  40709e:	480b      	ldr	r0, [pc, #44]	; (4070cc <nm_spi_init+0xf8>)
  4070a0:	4c0b      	ldr	r4, [pc, #44]	; (4070d0 <nm_spi_init+0xfc>)
  4070a2:	47a0      	blx	r4
  4070a4:	480f      	ldr	r0, [pc, #60]	; (4070e4 <nm_spi_init+0x110>)
  4070a6:	47a0      	blx	r4
  4070a8:	480b      	ldr	r0, [pc, #44]	; (4070d8 <nm_spi_init+0x104>)
  4070aa:	47a0      	blx	r4
		return M2M_ERR_BUS_FAIL;
  4070ac:	f06f 0405 	mvn.w	r4, #5
  4070b0:	e7c4      	b.n	40703c <nm_spi_init+0x68>
  4070b2:	bf00      	nop
  4070b4:	2040c3c0 	.word	0x2040c3c0
  4070b8:	00406e85 	.word	0x00406e85
  4070bc:	00406df1 	.word	0x00406df1
  4070c0:	00406f8d 	.word	0x00406f8d
  4070c4:	00406fbd 	.word	0x00406fbd
  4070c8:	0040cfb4 	.word	0x0040cfb4
  4070cc:	0040c96c 	.word	0x0040c96c
  4070d0:	00409405 	.word	0x00409405
  4070d4:	0040d0c0 	.word	0x0040d0c0
  4070d8:	0040d944 	.word	0x0040d944
  4070dc:	0040d110 	.word	0x0040d110
  4070e0:	0040d140 	.word	0x0040d140
  4070e4:	0040d174 	.word	0x0040d174

004070e8 <nm_spi_read_block>:
*	@author	M. Abdelmawla
*	@date	11 July 2012
*	@version	1.0
*/
sint8 nm_spi_read_block(uint32 u32Addr, uint8 *puBuf, uint16 u16Sz)
{
  4070e8:	b5f0      	push	{r4, r5, r6, r7, lr}
  4070ea:	b083      	sub	sp, #12
  4070ec:	4604      	mov	r4, r0
  4070ee:	460f      	mov	r7, r1
  4070f0:	4615      	mov	r5, r2
	result = spi_cmd(cmd, addr, 0, size,0);
  4070f2:	2200      	movs	r2, #0
  4070f4:	9200      	str	r2, [sp, #0]
  4070f6:	462b      	mov	r3, r5
  4070f8:	4601      	mov	r1, r0
  4070fa:	20c8      	movs	r0, #200	; 0xc8
  4070fc:	4e22      	ldr	r6, [pc, #136]	; (407188 <nm_spi_read_block+0xa0>)
  4070fe:	47b0      	blx	r6
	if (result != N_OK) {
  407100:	2801      	cmp	r0, #1
  407102:	d00e      	beq.n	407122 <nm_spi_read_block+0x3a>
		M2M_ERR("[nmi spi]: Failed cmd, read block (%08x)...\n", (unsigned int)addr);
  407104:	f44f 721d 	mov.w	r2, #628	; 0x274
  407108:	4920      	ldr	r1, [pc, #128]	; (40718c <nm_spi_read_block+0xa4>)
  40710a:	4821      	ldr	r0, [pc, #132]	; (407190 <nm_spi_read_block+0xa8>)
  40710c:	4d21      	ldr	r5, [pc, #132]	; (407194 <nm_spi_read_block+0xac>)
  40710e:	47a8      	blx	r5
  407110:	4621      	mov	r1, r4
  407112:	4821      	ldr	r0, [pc, #132]	; (407198 <nm_spi_read_block+0xb0>)
  407114:	47a8      	blx	r5
  407116:	4821      	ldr	r0, [pc, #132]	; (40719c <nm_spi_read_block+0xb4>)
  407118:	47a8      	blx	r5
	sint8 s8Ret;

	s8Ret = nm_spi_read(u32Addr, puBuf, u16Sz);

	if(N_OK == s8Ret) s8Ret = M2M_SUCCESS;
	else s8Ret = M2M_ERR_BUS_FAIL;
  40711a:	f06f 0005 	mvn.w	r0, #5

	return s8Ret;
}
  40711e:	b003      	add	sp, #12
  407120:	bdf0      	pop	{r4, r5, r6, r7, pc}
	result = spi_cmd_rsp(cmd);
  407122:	20c8      	movs	r0, #200	; 0xc8
  407124:	4b1e      	ldr	r3, [pc, #120]	; (4071a0 <nm_spi_read_block+0xb8>)
  407126:	4798      	blx	r3
	if (result != N_OK) {
  407128:	2801      	cmp	r0, #1
  40712a:	d012      	beq.n	407152 <nm_spi_read_block+0x6a>
		M2M_ERR("[nmi spi]: Failed cmd response, read block (%08x)...\n", (unsigned int)addr);
  40712c:	f240 227a 	movw	r2, #634	; 0x27a
  407130:	4916      	ldr	r1, [pc, #88]	; (40718c <nm_spi_read_block+0xa4>)
  407132:	4817      	ldr	r0, [pc, #92]	; (407190 <nm_spi_read_block+0xa8>)
  407134:	4d17      	ldr	r5, [pc, #92]	; (407194 <nm_spi_read_block+0xac>)
  407136:	47a8      	blx	r5
  407138:	4621      	mov	r1, r4
  40713a:	481a      	ldr	r0, [pc, #104]	; (4071a4 <nm_spi_read_block+0xbc>)
  40713c:	47a8      	blx	r5
  40713e:	4817      	ldr	r0, [pc, #92]	; (40719c <nm_spi_read_block+0xb4>)
  407140:	47a8      	blx	r5
		spi_cmd(CMD_RESET, 0, 0, 0, 0);
  407142:	2100      	movs	r1, #0
  407144:	9100      	str	r1, [sp, #0]
  407146:	460b      	mov	r3, r1
  407148:	460a      	mov	r2, r1
  40714a:	20cf      	movs	r0, #207	; 0xcf
  40714c:	4c0e      	ldr	r4, [pc, #56]	; (407188 <nm_spi_read_block+0xa0>)
  40714e:	47a0      	blx	r4
  407150:	e7e3      	b.n	40711a <nm_spi_read_block+0x32>
	result = spi_data_read(buf, size,0);
  407152:	2200      	movs	r2, #0
  407154:	4629      	mov	r1, r5
  407156:	4638      	mov	r0, r7
  407158:	4b13      	ldr	r3, [pc, #76]	; (4071a8 <nm_spi_read_block+0xc0>)
  40715a:	4798      	blx	r3
	if (result != N_OK) {
  40715c:	2801      	cmp	r0, #1
  40715e:	d011      	beq.n	407184 <nm_spi_read_block+0x9c>
		M2M_ERR("[nmi spi]: Failed block data read...\n");
  407160:	f44f 7221 	mov.w	r2, #644	; 0x284
  407164:	4909      	ldr	r1, [pc, #36]	; (40718c <nm_spi_read_block+0xa4>)
  407166:	480a      	ldr	r0, [pc, #40]	; (407190 <nm_spi_read_block+0xa8>)
  407168:	4c0a      	ldr	r4, [pc, #40]	; (407194 <nm_spi_read_block+0xac>)
  40716a:	47a0      	blx	r4
  40716c:	480f      	ldr	r0, [pc, #60]	; (4071ac <nm_spi_read_block+0xc4>)
  40716e:	47a0      	blx	r4
  407170:	480a      	ldr	r0, [pc, #40]	; (40719c <nm_spi_read_block+0xb4>)
  407172:	47a0      	blx	r4
		spi_cmd(CMD_RESET, 0, 0, 0, 0);
  407174:	2100      	movs	r1, #0
  407176:	9100      	str	r1, [sp, #0]
  407178:	460b      	mov	r3, r1
  40717a:	460a      	mov	r2, r1
  40717c:	20cf      	movs	r0, #207	; 0xcf
  40717e:	4c02      	ldr	r4, [pc, #8]	; (407188 <nm_spi_read_block+0xa0>)
  407180:	47a0      	blx	r4
  407182:	e7ca      	b.n	40711a <nm_spi_read_block+0x32>
	if(N_OK == s8Ret) s8Ret = M2M_SUCCESS;
  407184:	2000      	movs	r0, #0
  407186:	e7ca      	b.n	40711e <nm_spi_read_block+0x36>
  407188:	00406c41 	.word	0x00406c41
  40718c:	0040cfa8 	.word	0x0040cfa8
  407190:	0040c96c 	.word	0x0040c96c
  407194:	00409405 	.word	0x00409405
  407198:	0040d19c 	.word	0x0040d19c
  40719c:	0040d944 	.word	0x0040d944
  4071a0:	00406a45 	.word	0x00406a45
  4071a4:	0040d1cc 	.word	0x0040d1cc
  4071a8:	00406b09 	.word	0x00406b09
  4071ac:	0040d204 	.word	0x0040d204

004071b0 <nm_spi_write_block>:
*	@author	M. Abdelmawla
*	@date	11 July 2012
*	@version	1.0
*/
sint8 nm_spi_write_block(uint32 u32Addr, uint8 *puBuf, uint16 u16Sz)
{
  4071b0:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
  4071b4:	b085      	sub	sp, #20
  4071b6:	4604      	mov	r4, r0
  4071b8:	4688      	mov	r8, r1
  4071ba:	4615      	mov	r5, r2
	result = spi_cmd(cmd, addr, 0, size,0);
  4071bc:	2200      	movs	r2, #0
  4071be:	9200      	str	r2, [sp, #0]
  4071c0:	462b      	mov	r3, r5
  4071c2:	4601      	mov	r1, r0
  4071c4:	20c7      	movs	r0, #199	; 0xc7
  4071c6:	4e4d      	ldr	r6, [pc, #308]	; (4072fc <nm_spi_write_block+0x14c>)
  4071c8:	47b0      	blx	r6
	if (result != N_OK) {
  4071ca:	2801      	cmp	r0, #1
  4071cc:	d00f      	beq.n	4071ee <nm_spi_write_block+0x3e>
		M2M_ERR("[nmi spi]: Failed cmd, write block (%08x)...\n", (unsigned int)addr);
  4071ce:	f240 220f 	movw	r2, #527	; 0x20f
  4071d2:	494b      	ldr	r1, [pc, #300]	; (407300 <nm_spi_write_block+0x150>)
  4071d4:	484b      	ldr	r0, [pc, #300]	; (407304 <nm_spi_write_block+0x154>)
  4071d6:	4d4c      	ldr	r5, [pc, #304]	; (407308 <nm_spi_write_block+0x158>)
  4071d8:	47a8      	blx	r5
  4071da:	4621      	mov	r1, r4
  4071dc:	484b      	ldr	r0, [pc, #300]	; (40730c <nm_spi_write_block+0x15c>)
  4071de:	47a8      	blx	r5
  4071e0:	484b      	ldr	r0, [pc, #300]	; (407310 <nm_spi_write_block+0x160>)
  4071e2:	47a8      	blx	r5
	sint8 s8Ret;

	s8Ret = nm_spi_write(u32Addr, puBuf, u16Sz);

	if(N_OK == s8Ret) s8Ret = M2M_SUCCESS;
	else s8Ret = M2M_ERR_BUS_FAIL;
  4071e4:	f06f 0005 	mvn.w	r0, #5

	return s8Ret;
}
  4071e8:	b005      	add	sp, #20
  4071ea:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
	result = spi_cmd_rsp(cmd);
  4071ee:	20c7      	movs	r0, #199	; 0xc7
  4071f0:	4b48      	ldr	r3, [pc, #288]	; (407314 <nm_spi_write_block+0x164>)
  4071f2:	4798      	blx	r3
	if (result != N_OK) {
  4071f4:	2801      	cmp	r0, #1
  4071f6:	d012      	beq.n	40721e <nm_spi_write_block+0x6e>
		M2M_ERR("[nmi spi ]: Failed cmd response, write block (%08x)...\n", (unsigned int)addr);
  4071f8:	f240 2215 	movw	r2, #533	; 0x215
  4071fc:	4940      	ldr	r1, [pc, #256]	; (407300 <nm_spi_write_block+0x150>)
  4071fe:	4841      	ldr	r0, [pc, #260]	; (407304 <nm_spi_write_block+0x154>)
  407200:	4d41      	ldr	r5, [pc, #260]	; (407308 <nm_spi_write_block+0x158>)
  407202:	47a8      	blx	r5
  407204:	4621      	mov	r1, r4
  407206:	4844      	ldr	r0, [pc, #272]	; (407318 <nm_spi_write_block+0x168>)
  407208:	47a8      	blx	r5
  40720a:	4841      	ldr	r0, [pc, #260]	; (407310 <nm_spi_write_block+0x160>)
  40720c:	47a8      	blx	r5
		spi_cmd(CMD_RESET, 0, 0, 0, 0);
  40720e:	2100      	movs	r1, #0
  407210:	9100      	str	r1, [sp, #0]
  407212:	460b      	mov	r3, r1
  407214:	460a      	mov	r2, r1
  407216:	20cf      	movs	r0, #207	; 0xcf
  407218:	4c38      	ldr	r4, [pc, #224]	; (4072fc <nm_spi_write_block+0x14c>)
  40721a:	47a0      	blx	r4
  40721c:	e7e2      	b.n	4071e4 <nm_spi_write_block+0x34>
	uint8 cmd, order, crc[2] = {0};
  40721e:	2400      	movs	r4, #0
  407220:	f8ad 400c 	strh.w	r4, [sp, #12]
		if (M2M_SUCCESS != nmi_spi_write(&cmd, 1)) {
  407224:	4f3d      	ldr	r7, [pc, #244]	; (40731c <nm_spi_write_block+0x16c>)
		if (!gu8Crc_off) {
  407226:	f8df 910c 	ldr.w	r9, [pc, #268]	; 407334 <nm_spi_write_block+0x184>
  40722a:	e01d      	b.n	407268 <nm_spi_write_block+0xb8>
				order = 0x2;
  40722c:	f5b5 5f00 	cmp.w	r5, #8192	; 0x2000
  407230:	bf94      	ite	ls
  407232:	2303      	movls	r3, #3
  407234:	2302      	movhi	r3, #2
		cmd |= order;
  407236:	f063 030f 	orn	r3, r3, #15
  40723a:	f88d 300b 	strb.w	r3, [sp, #11]
		if (M2M_SUCCESS != nmi_spi_write(&cmd, 1)) {
  40723e:	2101      	movs	r1, #1
  407240:	f10d 000b 	add.w	r0, sp, #11
  407244:	47b8      	blx	r7
  407246:	b9e8      	cbnz	r0, 407284 <nm_spi_write_block+0xd4>
		if (M2M_SUCCESS != nmi_spi_write(&b[ix], nbytes)) {
  407248:	4631      	mov	r1, r6
  40724a:	eb08 0004 	add.w	r0, r8, r4
  40724e:	47b8      	blx	r7
  407250:	2800      	cmp	r0, #0
  407252:	d135      	bne.n	4072c0 <nm_spi_write_block+0x110>
		if (!gu8Crc_off) {
  407254:	f899 3000 	ldrb.w	r3, [r9]
  407258:	2b00      	cmp	r3, #0
  40725a:	d03c      	beq.n	4072d6 <nm_spi_write_block+0x126>
		ix += nbytes;
  40725c:	4434      	add	r4, r6
  40725e:	b224      	sxth	r4, r4
		sz -= nbytes;
  407260:	1bad      	subs	r5, r5, r6
  407262:	b2ad      	uxth	r5, r5
	} while (sz);
  407264:	2d00      	cmp	r5, #0
  407266:	d046      	beq.n	4072f6 <nm_spi_write_block+0x146>
  407268:	462e      	mov	r6, r5
  40726a:	f5b5 5f00 	cmp.w	r5, #8192	; 0x2000
  40726e:	bf28      	it	cs
  407270:	f44f 5600 	movcs.w	r6, #8192	; 0x2000
		if (ix == 0)  {
  407274:	2c00      	cmp	r4, #0
  407276:	d1d9      	bne.n	40722c <nm_spi_write_block+0x7c>
				order = 0x1;
  407278:	f5b5 5f00 	cmp.w	r5, #8192	; 0x2000
  40727c:	bf94      	ite	ls
  40727e:	2303      	movls	r3, #3
  407280:	2301      	movhi	r3, #1
  407282:	e7d8      	b.n	407236 <nm_spi_write_block+0x86>
			M2M_ERR("[nmi spi]: Failed data block cmd write, bus error...\n");
  407284:	f44f 72d4 	mov.w	r2, #424	; 0x1a8
  407288:	4925      	ldr	r1, [pc, #148]	; (407320 <nm_spi_write_block+0x170>)
  40728a:	481e      	ldr	r0, [pc, #120]	; (407304 <nm_spi_write_block+0x154>)
  40728c:	4c1e      	ldr	r4, [pc, #120]	; (407308 <nm_spi_write_block+0x158>)
  40728e:	47a0      	blx	r4
  407290:	4824      	ldr	r0, [pc, #144]	; (407324 <nm_spi_write_block+0x174>)
  407292:	47a0      	blx	r4
  407294:	481e      	ldr	r0, [pc, #120]	; (407310 <nm_spi_write_block+0x160>)
  407296:	47a0      	blx	r4
		M2M_ERR("[nmi spi]: Failed block data write...\n");
  407298:	f240 2226 	movw	r2, #550	; 0x226
  40729c:	4918      	ldr	r1, [pc, #96]	; (407300 <nm_spi_write_block+0x150>)
  40729e:	4819      	ldr	r0, [pc, #100]	; (407304 <nm_spi_write_block+0x154>)
  4072a0:	4c19      	ldr	r4, [pc, #100]	; (407308 <nm_spi_write_block+0x158>)
  4072a2:	47a0      	blx	r4
  4072a4:	4820      	ldr	r0, [pc, #128]	; (407328 <nm_spi_write_block+0x178>)
  4072a6:	47a0      	blx	r4
  4072a8:	4819      	ldr	r0, [pc, #100]	; (407310 <nm_spi_write_block+0x160>)
  4072aa:	47a0      	blx	r4
		spi_cmd(CMD_RESET, 0, 0, 0, 0);
  4072ac:	2400      	movs	r4, #0
  4072ae:	9400      	str	r4, [sp, #0]
  4072b0:	4623      	mov	r3, r4
  4072b2:	4622      	mov	r2, r4
  4072b4:	4621      	mov	r1, r4
  4072b6:	20cf      	movs	r0, #207	; 0xcf
  4072b8:	4d10      	ldr	r5, [pc, #64]	; (4072fc <nm_spi_write_block+0x14c>)
  4072ba:	47a8      	blx	r5
	if(N_OK == s8Ret) s8Ret = M2M_SUCCESS;
  4072bc:	4620      	mov	r0, r4
  4072be:	e793      	b.n	4071e8 <nm_spi_write_block+0x38>
			M2M_ERR("[nmi spi]: Failed data block write, bus error...\n");
  4072c0:	f240 12b1 	movw	r2, #433	; 0x1b1
  4072c4:	4916      	ldr	r1, [pc, #88]	; (407320 <nm_spi_write_block+0x170>)
  4072c6:	480f      	ldr	r0, [pc, #60]	; (407304 <nm_spi_write_block+0x154>)
  4072c8:	4c0f      	ldr	r4, [pc, #60]	; (407308 <nm_spi_write_block+0x158>)
  4072ca:	47a0      	blx	r4
  4072cc:	4817      	ldr	r0, [pc, #92]	; (40732c <nm_spi_write_block+0x17c>)
  4072ce:	47a0      	blx	r4
  4072d0:	480f      	ldr	r0, [pc, #60]	; (407310 <nm_spi_write_block+0x160>)
  4072d2:	47a0      	blx	r4
  4072d4:	e7e0      	b.n	407298 <nm_spi_write_block+0xe8>
			if (M2M_SUCCESS != nmi_spi_write(crc, 2)) {
  4072d6:	2102      	movs	r1, #2
  4072d8:	a803      	add	r0, sp, #12
  4072da:	47b8      	blx	r7
  4072dc:	2800      	cmp	r0, #0
  4072de:	d0bd      	beq.n	40725c <nm_spi_write_block+0xac>
				M2M_ERR("[nmi spi]: Failed data block crc write, bus error...\n");
  4072e0:	f240 12bb 	movw	r2, #443	; 0x1bb
  4072e4:	490e      	ldr	r1, [pc, #56]	; (407320 <nm_spi_write_block+0x170>)
  4072e6:	4807      	ldr	r0, [pc, #28]	; (407304 <nm_spi_write_block+0x154>)
  4072e8:	4c07      	ldr	r4, [pc, #28]	; (407308 <nm_spi_write_block+0x158>)
  4072ea:	47a0      	blx	r4
  4072ec:	4810      	ldr	r0, [pc, #64]	; (407330 <nm_spi_write_block+0x180>)
  4072ee:	47a0      	blx	r4
  4072f0:	4807      	ldr	r0, [pc, #28]	; (407310 <nm_spi_write_block+0x160>)
  4072f2:	47a0      	blx	r4
  4072f4:	e7d0      	b.n	407298 <nm_spi_write_block+0xe8>
	if(N_OK == s8Ret) s8Ret = M2M_SUCCESS;
  4072f6:	2000      	movs	r0, #0
  4072f8:	e776      	b.n	4071e8 <nm_spi_write_block+0x38>
  4072fa:	bf00      	nop
  4072fc:	00406c41 	.word	0x00406c41
  407300:	0040cf88 	.word	0x0040cf88
  407304:	0040c96c 	.word	0x0040c96c
  407308:	00409405 	.word	0x00409405
  40730c:	0040d22c 	.word	0x0040d22c
  407310:	0040d944 	.word	0x0040d944
  407314:	00406a45 	.word	0x00406a45
  407318:	0040d25c 	.word	0x0040d25c
  40731c:	00406c21 	.word	0x00406c21
  407320:	0040cf68 	.word	0x0040cf68
  407324:	0040d294 	.word	0x0040d294
  407328:	0040d338 	.word	0x0040d338
  40732c:	0040d2cc 	.word	0x0040d2cc
  407330:	0040d300 	.word	0x0040d300
  407334:	2040c3c0 	.word	0x2040c3c0

00407338 <Socket_ReadSocketData>:
Date
		17 July 2012
*********************************************************************/
NMI_API void Socket_ReadSocketData(SOCKET sock, tstrSocketRecvMsg *pstrRecv,uint8 u8SocketMsg,
								  uint32 u32StartAddress,uint16 u16ReadCount)
{
  407338:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
  40733c:	f8bd 4028 	ldrh.w	r4, [sp, #40]	; 0x28
	if((u16ReadCount > 0) && (gastrSockets[sock].pu8UserBuffer != NULL) && (gastrSockets[sock].u16UserBufferSize > 0) && (gastrSockets[sock].bIsUsed == 1))
  407340:	b194      	cbz	r4, 407368 <Socket_ReadSocketData+0x30>
  407342:	4681      	mov	r9, r0
  407344:	460e      	mov	r6, r1
  407346:	4692      	mov	sl, r2
  407348:	4698      	mov	r8, r3
  40734a:	0103      	lsls	r3, r0, #4
  40734c:	4922      	ldr	r1, [pc, #136]	; (4073d8 <Socket_ReadSocketData+0xa0>)
  40734e:	58cb      	ldr	r3, [r1, r3]
  407350:	b153      	cbz	r3, 407368 <Socket_ReadSocketData+0x30>
  407352:	eb01 1300 	add.w	r3, r1, r0, lsl #4
  407356:	889b      	ldrh	r3, [r3, #4]
  407358:	b29b      	uxth	r3, r3
  40735a:	b12b      	cbz	r3, 407368 <Socket_ReadSocketData+0x30>
  40735c:	eb01 1300 	add.w	r3, r1, r0, lsl #4
  407360:	7a9b      	ldrb	r3, [r3, #10]
  407362:	b2db      	uxtb	r3, r3
  407364:	2b01      	cmp	r3, #1
  407366:	d001      	beq.n	40736c <Socket_ReadSocketData+0x34>
  407368:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
		uint32	u32Address = u32StartAddress;
		uint16	u16Read;
		sint16	s16Diff;
		uint8	u8SetRxDone;

		pstrRecv->u16RemainingSize = u16ReadCount;
  40736c:	80f4      	strh	r4, [r6, #6]
		do
		{
			u8SetRxDone = 1;
			u16Read = u16ReadCount;
			s16Diff	= u16Read - gastrSockets[sock].u16UserBufferSize;
  40736e:	eb01 1700 	add.w	r7, r1, r0, lsl #4
			if(s16Diff > 0)
			{
				u8SetRxDone = 0;
				u16Read		= gastrSockets[sock].u16UserBufferSize;
			}
			if(hif_receive(u32Address, gastrSockets[sock].pu8UserBuffer, u16Read, u8SetRxDone) == M2M_SUCCESS)
  407372:	f8df b07c 	ldr.w	fp, [pc, #124]	; 4073f0 <Socket_ReadSocketData+0xb8>
  407376:	e006      	b.n	407386 <Socket_ReadSocketData+0x4e>
  407378:	4625      	mov	r5, r4
			u8SetRxDone = 1;
  40737a:	2301      	movs	r3, #1
  40737c:	e00b      	b.n	407396 <Socket_ReadSocketData+0x5e>
				pstrRecv->u16RemainingSize	-= u16Read;

				if (gpfAppSocketCb)
					gpfAppSocketCb(sock,u8SocketMsg, pstrRecv);

				u16ReadCount -= u16Read;
  40737e:	1b64      	subs	r4, r4, r5
  407380:	b2a4      	uxth	r4, r4
				u32Address += u16Read;
  407382:	44a8      	add	r8, r5
			else
			{
				M2M_INFO("(ERRR)Current <%d>\n", u16ReadCount);
				break;
			}
		}while(u16ReadCount != 0);
  407384:	b1ec      	cbz	r4, 4073c2 <Socket_ReadSocketData+0x8a>
			s16Diff	= u16Read - gastrSockets[sock].u16UserBufferSize;
  407386:	88bb      	ldrh	r3, [r7, #4]
  407388:	1ae3      	subs	r3, r4, r3
			if(s16Diff > 0)
  40738a:	b21b      	sxth	r3, r3
  40738c:	2b00      	cmp	r3, #0
  40738e:	ddf3      	ble.n	407378 <Socket_ReadSocketData+0x40>
				u16Read		= gastrSockets[sock].u16UserBufferSize;
  407390:	88bd      	ldrh	r5, [r7, #4]
  407392:	b2ad      	uxth	r5, r5
				u8SetRxDone = 0;
  407394:	2300      	movs	r3, #0
			if(hif_receive(u32Address, gastrSockets[sock].pu8UserBuffer, u16Read, u8SetRxDone) == M2M_SUCCESS)
  407396:	6839      	ldr	r1, [r7, #0]
  407398:	462a      	mov	r2, r5
  40739a:	4640      	mov	r0, r8
  40739c:	47d8      	blx	fp
  40739e:	b990      	cbnz	r0, 4073c6 <Socket_ReadSocketData+0x8e>
				pstrRecv->pu8Buffer			= gastrSockets[sock].pu8UserBuffer;
  4073a0:	683b      	ldr	r3, [r7, #0]
  4073a2:	6033      	str	r3, [r6, #0]
				pstrRecv->s16BufferSize		= u16Read;
  4073a4:	80b5      	strh	r5, [r6, #4]
				pstrRecv->u16RemainingSize	-= u16Read;
  4073a6:	88f3      	ldrh	r3, [r6, #6]
  4073a8:	1b5b      	subs	r3, r3, r5
  4073aa:	80f3      	strh	r3, [r6, #6]
				if (gpfAppSocketCb)
  4073ac:	4b0b      	ldr	r3, [pc, #44]	; (4073dc <Socket_ReadSocketData+0xa4>)
  4073ae:	681b      	ldr	r3, [r3, #0]
  4073b0:	2b00      	cmp	r3, #0
  4073b2:	d0e4      	beq.n	40737e <Socket_ReadSocketData+0x46>
					gpfAppSocketCb(sock,u8SocketMsg, pstrRecv);
  4073b4:	4b09      	ldr	r3, [pc, #36]	; (4073dc <Socket_ReadSocketData+0xa4>)
  4073b6:	681b      	ldr	r3, [r3, #0]
  4073b8:	4632      	mov	r2, r6
  4073ba:	4651      	mov	r1, sl
  4073bc:	4648      	mov	r0, r9
  4073be:	4798      	blx	r3
  4073c0:	e7dd      	b.n	40737e <Socket_ReadSocketData+0x46>
  4073c2:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
				M2M_INFO("(ERRR)Current <%d>\n", u16ReadCount);
  4073c6:	4806      	ldr	r0, [pc, #24]	; (4073e0 <Socket_ReadSocketData+0xa8>)
  4073c8:	4d06      	ldr	r5, [pc, #24]	; (4073e4 <Socket_ReadSocketData+0xac>)
  4073ca:	47a8      	blx	r5
  4073cc:	4621      	mov	r1, r4
  4073ce:	4806      	ldr	r0, [pc, #24]	; (4073e8 <Socket_ReadSocketData+0xb0>)
  4073d0:	47a8      	blx	r5
  4073d2:	4806      	ldr	r0, [pc, #24]	; (4073ec <Socket_ReadSocketData+0xb4>)
  4073d4:	47a8      	blx	r5
	}
}
  4073d6:	e7c7      	b.n	407368 <Socket_ReadSocketData+0x30>
  4073d8:	2040ca3c 	.word	0x2040ca3c
  4073dc:	2040caec 	.word	0x2040caec
  4073e0:	0040cc3c 	.word	0x0040cc3c
  4073e4:	00409405 	.word	0x00409405
  4073e8:	0040d574 	.word	0x0040d574
  4073ec:	0040d944 	.word	0x0040d944
  4073f0:	00405a71 	.word	0x00405a71

004073f4 <m2m_ip_cb>:

Date
		17 July 2012
*********************************************************************/
static void m2m_ip_cb(uint8 u8OpCode, uint16 u16BufferSize,uint32 u32Address)
{
  4073f4:	b5f0      	push	{r4, r5, r6, r7, lr}
  4073f6:	b099      	sub	sp, #100	; 0x64
  4073f8:	4614      	mov	r4, r2
	if(u8OpCode == SOCKET_CMD_BIND)
  4073fa:	2841      	cmp	r0, #65	; 0x41
  4073fc:	d049      	beq.n	407492 <m2m_ip_cb+0x9e>
  4073fe:	460d      	mov	r5, r1
			strBind.status = strBindReply.s8Status;
			if(gpfAppSocketCb)
				gpfAppSocketCb(strBindReply.sock,SOCKET_MSG_BIND,&strBind);
		}
	}
	else if(u8OpCode == SOCKET_CMD_LISTEN)
  407400:	2842      	cmp	r0, #66	; 0x42
  407402:	d05f      	beq.n	4074c4 <m2m_ip_cb+0xd0>
			strListen.status = strListenReply.s8Status;
			if(gpfAppSocketCb)
				gpfAppSocketCb(strListenReply.sock,SOCKET_MSG_LISTEN, &strListen);
		}
	}
	else if(u8OpCode == SOCKET_CMD_ACCEPT)
  407404:	2843      	cmp	r0, #67	; 0x43
  407406:	d075      	beq.n	4074f4 <m2m_ip_cb+0x100>
			strAccept.strAddr.sin_addr.s_addr = strAcceptReply.strAddr.u32IPAddr;
			if(gpfAppSocketCb)
				gpfAppSocketCb(strAcceptReply.sListenSock, SOCKET_MSG_ACCEPT, &strAccept);
		}
	}
	else if((u8OpCode == SOCKET_CMD_CONNECT) || (u8OpCode == SOCKET_CMD_SSL_CONNECT))
  407408:	2844      	cmp	r0, #68	; 0x44
  40740a:	f000 80b0 	beq.w	40756e <m2m_ip_cb+0x17a>
  40740e:	284b      	cmp	r0, #75	; 0x4b
  407410:	f000 80ad 	beq.w	40756e <m2m_ip_cb+0x17a>
			}
			if(gpfAppSocketCb)
				gpfAppSocketCb(strConnectReply.sock,SOCKET_MSG_CONNECT, &strConnMsg);
		}
	}
	else if(u8OpCode == SOCKET_CMD_DNS_RESOLVE)
  407414:	284a      	cmp	r0, #74	; 0x4a
  407416:	f000 80cc 	beq.w	4075b2 <m2m_ip_cb+0x1be>
			strDnsReply.u32HostIP = strDnsReply.u32HostIP;
			if(gpfAppResolveCb)
				gpfAppResolveCb((uint8*)strDnsReply.acHostName, strDnsReply.u32HostIP);
		}
	}
	else if((u8OpCode == SOCKET_CMD_RECV) || (u8OpCode == SOCKET_CMD_RECVFROM) || (u8OpCode == SOCKET_CMD_SSL_RECV))
  40741a:	f1a0 0346 	sub.w	r3, r0, #70	; 0x46
  40741e:	b2db      	uxtb	r3, r3
  407420:	2b07      	cmp	r3, #7
  407422:	f200 80f4 	bhi.w	40760e <m2m_ip_cb+0x21a>
  407426:	2285      	movs	r2, #133	; 0x85
  407428:	fa22 f303 	lsr.w	r3, r2, r3
  40742c:	f013 0f01 	tst.w	r3, #1
  407430:	f000 80ed 	beq.w	40760e <m2m_ip_cb+0x21a>
		tstrSocketRecvMsg	strRecvMsg;
		uint8				u8CallbackMsgID = SOCKET_MSG_RECV;
		uint16				u16DataOffset;

		if(u8OpCode == SOCKET_CMD_RECVFROM)
			u8CallbackMsgID = SOCKET_MSG_RECVFROM;
  407434:	2848      	cmp	r0, #72	; 0x48
  407436:	bf14      	ite	ne
  407438:	2706      	movne	r7, #6
  40743a:	2709      	moveq	r7, #9

		/* Read RECV REPLY data structure.
		*/
		u16ReadSize = sizeof(tstrRecvReply);
		if(hif_receive(u32Address, (uint8*)&strRecvReply, u16ReadSize, 0) == M2M_SUCCESS)
  40743c:	2300      	movs	r3, #0
  40743e:	2210      	movs	r2, #16
  407440:	a903      	add	r1, sp, #12
  407442:	4620      	mov	r0, r4
  407444:	4e93      	ldr	r6, [pc, #588]	; (407694 <m2m_ip_cb+0x2a0>)
  407446:	47b0      	blx	r6
  407448:	2800      	cmp	r0, #0
  40744a:	f040 80b0 	bne.w	4075ae <m2m_ip_cb+0x1ba>
		{
			uint16 u16SessionID = 0;

			sock			= strRecvReply.sock;
  40744e:	f99d 0018 	ldrsb.w	r0, [sp, #24]
			u16SessionID = strRecvReply.u16SessionID;
  407452:	f8bd 101a 	ldrh.w	r1, [sp, #26]
			M2M_DBG("recv callback session ID = %d\r\n",u16SessionID);
			
			/* Reset the Socket RX Pending Flag.
			*/
			gastrSockets[sock].bIsRecvPending = 0;
  407456:	4a90      	ldr	r2, [pc, #576]	; (407698 <m2m_ip_cb+0x2a4>)
  407458:	eb02 1200 	add.w	r2, r2, r0, lsl #4
  40745c:	2300      	movs	r3, #0
  40745e:	7313      	strb	r3, [r2, #12]

			s16RecvStatus	= NM_BSP_B_L_16(strRecvReply.s16RecvStatus);
  407460:	f9bd e014 	ldrsh.w	lr, [sp, #20]
			u16DataOffset	= NM_BSP_B_L_16(strRecvReply.u16DataOffset);
  407464:	f8bd 3016 	ldrh.w	r3, [sp, #22]
			strRecvMsg.strRemoteAddr.sin_port 			= strRecvReply.strRemoteAddr.u16Port;
  407468:	f8bd 600e 	ldrh.w	r6, [sp, #14]
  40746c:	f8ad 6026 	strh.w	r6, [sp, #38]	; 0x26
			strRecvMsg.strRemoteAddr.sin_addr.s_addr 	= strRecvReply.strRemoteAddr.u32IPAddr;
  407470:	9e04      	ldr	r6, [sp, #16]
  407472:	960a      	str	r6, [sp, #40]	; 0x28

			if(u16SessionID == gastrSockets[sock].u16SessionID)
  407474:	88d2      	ldrh	r2, [r2, #6]
  407476:	b292      	uxth	r2, r2
  407478:	4291      	cmp	r1, r2
  40747a:	f000 80ac 	beq.w	4075d6 <m2m_ip_cb+0x1e2>
				}
			}
			else
			{
				M2M_DBG("Discard recv callback %d %d \r\n",u16SessionID , gastrSockets[sock].u16SessionID);
				if(u16ReadSize < u16BufferSize)
  40747e:	2d10      	cmp	r5, #16
  407480:	f240 8095 	bls.w	4075ae <m2m_ip_cb+0x1ba>
					hif_receive(0, NULL, 0, 1);
  407484:	2301      	movs	r3, #1
  407486:	2200      	movs	r2, #0
  407488:	4611      	mov	r1, r2
  40748a:	4610      	mov	r0, r2
  40748c:	4c81      	ldr	r4, [pc, #516]	; (407694 <m2m_ip_cb+0x2a0>)
  40748e:	47a0      	blx	r4
	{
  407490:	e08d      	b.n	4075ae <m2m_ip_cb+0x1ba>
		if(hif_receive(u32Address, (uint8*)&strBindReply, sizeof(tstrBindReply), 0) == M2M_SUCCESS)
  407492:	2300      	movs	r3, #0
  407494:	2204      	movs	r2, #4
  407496:	a907      	add	r1, sp, #28
  407498:	4620      	mov	r0, r4
  40749a:	4c7e      	ldr	r4, [pc, #504]	; (407694 <m2m_ip_cb+0x2a0>)
  40749c:	47a0      	blx	r4
  40749e:	2800      	cmp	r0, #0
  4074a0:	f040 8085 	bne.w	4075ae <m2m_ip_cb+0x1ba>
			strBind.status = strBindReply.s8Status;
  4074a4:	f89d 301d 	ldrb.w	r3, [sp, #29]
  4074a8:	f88d 300c 	strb.w	r3, [sp, #12]
			if(gpfAppSocketCb)
  4074ac:	4b7b      	ldr	r3, [pc, #492]	; (40769c <m2m_ip_cb+0x2a8>)
  4074ae:	681b      	ldr	r3, [r3, #0]
  4074b0:	2b00      	cmp	r3, #0
  4074b2:	d07c      	beq.n	4075ae <m2m_ip_cb+0x1ba>
				gpfAppSocketCb(strBindReply.sock,SOCKET_MSG_BIND,&strBind);
  4074b4:	4b79      	ldr	r3, [pc, #484]	; (40769c <m2m_ip_cb+0x2a8>)
  4074b6:	681b      	ldr	r3, [r3, #0]
  4074b8:	aa03      	add	r2, sp, #12
  4074ba:	2101      	movs	r1, #1
  4074bc:	f99d 001c 	ldrsb.w	r0, [sp, #28]
  4074c0:	4798      	blx	r3
  4074c2:	e074      	b.n	4075ae <m2m_ip_cb+0x1ba>
		if(hif_receive(u32Address, (uint8*)&strListenReply, sizeof(tstrListenReply), 0) == M2M_SUCCESS)
  4074c4:	2300      	movs	r3, #0
  4074c6:	2204      	movs	r2, #4
  4074c8:	a907      	add	r1, sp, #28
  4074ca:	4620      	mov	r0, r4
  4074cc:	4c71      	ldr	r4, [pc, #452]	; (407694 <m2m_ip_cb+0x2a0>)
  4074ce:	47a0      	blx	r4
  4074d0:	2800      	cmp	r0, #0
  4074d2:	d16c      	bne.n	4075ae <m2m_ip_cb+0x1ba>
			strListen.status = strListenReply.s8Status;
  4074d4:	f89d 301d 	ldrb.w	r3, [sp, #29]
  4074d8:	f88d 300c 	strb.w	r3, [sp, #12]
			if(gpfAppSocketCb)
  4074dc:	4b6f      	ldr	r3, [pc, #444]	; (40769c <m2m_ip_cb+0x2a8>)
  4074de:	681b      	ldr	r3, [r3, #0]
  4074e0:	2b00      	cmp	r3, #0
  4074e2:	d064      	beq.n	4075ae <m2m_ip_cb+0x1ba>
				gpfAppSocketCb(strListenReply.sock,SOCKET_MSG_LISTEN, &strListen);
  4074e4:	4b6d      	ldr	r3, [pc, #436]	; (40769c <m2m_ip_cb+0x2a8>)
  4074e6:	681b      	ldr	r3, [r3, #0]
  4074e8:	aa03      	add	r2, sp, #12
  4074ea:	2102      	movs	r1, #2
  4074ec:	f99d 001c 	ldrsb.w	r0, [sp, #28]
  4074f0:	4798      	blx	r3
  4074f2:	e05c      	b.n	4075ae <m2m_ip_cb+0x1ba>
		if(hif_receive(u32Address, (uint8*)&strAcceptReply, sizeof(tstrAcceptReply), 0) == M2M_SUCCESS)
  4074f4:	2300      	movs	r3, #0
  4074f6:	220c      	movs	r2, #12
  4074f8:	eb0d 0102 	add.w	r1, sp, r2
  4074fc:	4620      	mov	r0, r4
  4074fe:	4c65      	ldr	r4, [pc, #404]	; (407694 <m2m_ip_cb+0x2a0>)
  407500:	47a0      	blx	r4
  407502:	2800      	cmp	r0, #0
  407504:	d153      	bne.n	4075ae <m2m_ip_cb+0x1ba>
			if(strAcceptReply.sConnectedSock >= 0)
  407506:	f99d 3015 	ldrsb.w	r3, [sp, #21]
  40750a:	2b00      	cmp	r3, #0
  40750c:	db19      	blt.n	407542 <m2m_ip_cb+0x14e>
				gastrSockets[strAcceptReply.sConnectedSock].u8SSLFlags 	= 0;
  40750e:	4a62      	ldr	r2, [pc, #392]	; (407698 <m2m_ip_cb+0x2a4>)
  407510:	eb02 1203 	add.w	r2, r2, r3, lsl #4
  407514:	2100      	movs	r1, #0
  407516:	72d1      	strb	r1, [r2, #11]
				gastrSockets[strAcceptReply.sConnectedSock].bIsUsed 	= 1;
  407518:	2101      	movs	r1, #1
  40751a:	7291      	strb	r1, [r2, #10]
				++gu16SessionID;
  40751c:	4960      	ldr	r1, [pc, #384]	; (4076a0 <m2m_ip_cb+0x2ac>)
  40751e:	880a      	ldrh	r2, [r1, #0]
  407520:	3201      	adds	r2, #1
  407522:	b292      	uxth	r2, r2
  407524:	800a      	strh	r2, [r1, #0]
				if(gu16SessionID == 0)
  407526:	880a      	ldrh	r2, [r1, #0]
  407528:	b292      	uxth	r2, r2
  40752a:	b91a      	cbnz	r2, 407534 <m2m_ip_cb+0x140>
					++gu16SessionID;
  40752c:	880a      	ldrh	r2, [r1, #0]
  40752e:	3201      	adds	r2, #1
  407530:	b292      	uxth	r2, r2
  407532:	800a      	strh	r2, [r1, #0]
				gastrSockets[strAcceptReply.sConnectedSock].u16SessionID = gu16SessionID;
  407534:	4a5a      	ldr	r2, [pc, #360]	; (4076a0 <m2m_ip_cb+0x2ac>)
  407536:	8811      	ldrh	r1, [r2, #0]
  407538:	b289      	uxth	r1, r1
  40753a:	4a57      	ldr	r2, [pc, #348]	; (407698 <m2m_ip_cb+0x2a4>)
  40753c:	eb02 1203 	add.w	r2, r2, r3, lsl #4
  407540:	80d1      	strh	r1, [r2, #6]
			strAccept.sock = strAcceptReply.sConnectedSock;
  407542:	f88d 301c 	strb.w	r3, [sp, #28]
			strAccept.strAddr.sin_family		= AF_INET;
  407546:	2302      	movs	r3, #2
  407548:	f8ad 3020 	strh.w	r3, [sp, #32]
			strAccept.strAddr.sin_port = strAcceptReply.strAddr.u16Port;
  40754c:	f8bd 300e 	ldrh.w	r3, [sp, #14]
  407550:	f8ad 3022 	strh.w	r3, [sp, #34]	; 0x22
			strAccept.strAddr.sin_addr.s_addr = strAcceptReply.strAddr.u32IPAddr;
  407554:	9b04      	ldr	r3, [sp, #16]
  407556:	9309      	str	r3, [sp, #36]	; 0x24
			if(gpfAppSocketCb)
  407558:	4b50      	ldr	r3, [pc, #320]	; (40769c <m2m_ip_cb+0x2a8>)
  40755a:	681b      	ldr	r3, [r3, #0]
  40755c:	b33b      	cbz	r3, 4075ae <m2m_ip_cb+0x1ba>
				gpfAppSocketCb(strAcceptReply.sListenSock, SOCKET_MSG_ACCEPT, &strAccept);
  40755e:	4b4f      	ldr	r3, [pc, #316]	; (40769c <m2m_ip_cb+0x2a8>)
  407560:	681b      	ldr	r3, [r3, #0]
  407562:	aa07      	add	r2, sp, #28
  407564:	2104      	movs	r1, #4
  407566:	f99d 0014 	ldrsb.w	r0, [sp, #20]
  40756a:	4798      	blx	r3
  40756c:	e01f      	b.n	4075ae <m2m_ip_cb+0x1ba>
		if(hif_receive(u32Address, (uint8*)&strConnectReply, sizeof(tstrConnectReply), 0) == M2M_SUCCESS)
  40756e:	2300      	movs	r3, #0
  407570:	2204      	movs	r2, #4
  407572:	a907      	add	r1, sp, #28
  407574:	4620      	mov	r0, r4
  407576:	4c47      	ldr	r4, [pc, #284]	; (407694 <m2m_ip_cb+0x2a0>)
  407578:	47a0      	blx	r4
  40757a:	b9c0      	cbnz	r0, 4075ae <m2m_ip_cb+0x1ba>
			strConnMsg.sock		= strConnectReply.sock;
  40757c:	f99d 001c 	ldrsb.w	r0, [sp, #28]
  407580:	f88d 000c 	strb.w	r0, [sp, #12]
			strConnMsg.s8Error	= strConnectReply.s8Error;
  407584:	f99d 301d 	ldrsb.w	r3, [sp, #29]
  407588:	f88d 300d 	strb.w	r3, [sp, #13]
			if(strConnectReply.s8Error == SOCK_ERR_NO_ERROR)
  40758c:	b93b      	cbnz	r3, 40759e <m2m_ip_cb+0x1aa>
				gastrSockets[strConnectReply.sock].u16DataOffset = strConnectReply.u16AppDataOffset - M2M_HIF_HDR_OFFSET;
  40758e:	f8bd 301e 	ldrh.w	r3, [sp, #30]
  407592:	3b08      	subs	r3, #8
  407594:	b29b      	uxth	r3, r3
  407596:	4a40      	ldr	r2, [pc, #256]	; (407698 <m2m_ip_cb+0x2a4>)
  407598:	eb02 1200 	add.w	r2, r2, r0, lsl #4
  40759c:	8113      	strh	r3, [r2, #8]
			if(gpfAppSocketCb)
  40759e:	4b3f      	ldr	r3, [pc, #252]	; (40769c <m2m_ip_cb+0x2a8>)
  4075a0:	681b      	ldr	r3, [r3, #0]
  4075a2:	b123      	cbz	r3, 4075ae <m2m_ip_cb+0x1ba>
				gpfAppSocketCb(strConnectReply.sock,SOCKET_MSG_CONNECT, &strConnMsg);
  4075a4:	4b3d      	ldr	r3, [pc, #244]	; (40769c <m2m_ip_cb+0x2a8>)
  4075a6:	681b      	ldr	r3, [r3, #0]
  4075a8:	aa03      	add	r2, sp, #12
  4075aa:	2105      	movs	r1, #5
  4075ac:	4798      	blx	r3
			{
				gfpPingCb(strPingReply.u32IPAddr, strPingReply.u32RTT, strPingReply.u8ErrorCode);
			}
		}
	}
}
  4075ae:	b019      	add	sp, #100	; 0x64
  4075b0:	bdf0      	pop	{r4, r5, r6, r7, pc}
		if(hif_receive(u32Address, (uint8*)&strDnsReply, sizeof(tstrDnsReply), 0) == M2M_SUCCESS)
  4075b2:	2300      	movs	r3, #0
  4075b4:	2244      	movs	r2, #68	; 0x44
  4075b6:	a907      	add	r1, sp, #28
  4075b8:	4620      	mov	r0, r4
  4075ba:	4c36      	ldr	r4, [pc, #216]	; (407694 <m2m_ip_cb+0x2a0>)
  4075bc:	47a0      	blx	r4
  4075be:	2800      	cmp	r0, #0
  4075c0:	d1f5      	bne.n	4075ae <m2m_ip_cb+0x1ba>
			if(gpfAppResolveCb)
  4075c2:	4b38      	ldr	r3, [pc, #224]	; (4076a4 <m2m_ip_cb+0x2b0>)
  4075c4:	681b      	ldr	r3, [r3, #0]
  4075c6:	2b00      	cmp	r3, #0
  4075c8:	d0f1      	beq.n	4075ae <m2m_ip_cb+0x1ba>
				gpfAppResolveCb((uint8*)strDnsReply.acHostName, strDnsReply.u32HostIP);
  4075ca:	4b36      	ldr	r3, [pc, #216]	; (4076a4 <m2m_ip_cb+0x2b0>)
  4075cc:	681b      	ldr	r3, [r3, #0]
  4075ce:	9917      	ldr	r1, [sp, #92]	; 0x5c
  4075d0:	a807      	add	r0, sp, #28
  4075d2:	4798      	blx	r3
  4075d4:	e7eb      	b.n	4075ae <m2m_ip_cb+0x1ba>
				if((s16RecvStatus > 0) && (s16RecvStatus < u16BufferSize))
  4075d6:	f1be 0f00 	cmp.w	lr, #0
  4075da:	dd01      	ble.n	4075e0 <m2m_ip_cb+0x1ec>
  4075dc:	45ae      	cmp	lr, r5
  4075de:	db0d      	blt.n	4075fc <m2m_ip_cb+0x208>
					strRecvMsg.s16BufferSize	= s16RecvStatus;
  4075e0:	f8ad e020 	strh.w	lr, [sp, #32]
					strRecvMsg.pu8Buffer		= NULL;
  4075e4:	2300      	movs	r3, #0
  4075e6:	9307      	str	r3, [sp, #28]
					if(gpfAppSocketCb)
  4075e8:	4b2c      	ldr	r3, [pc, #176]	; (40769c <m2m_ip_cb+0x2a8>)
  4075ea:	681b      	ldr	r3, [r3, #0]
  4075ec:	2b00      	cmp	r3, #0
  4075ee:	d0de      	beq.n	4075ae <m2m_ip_cb+0x1ba>
						gpfAppSocketCb(sock,u8CallbackMsgID, &strRecvMsg);
  4075f0:	4b2a      	ldr	r3, [pc, #168]	; (40769c <m2m_ip_cb+0x2a8>)
  4075f2:	681b      	ldr	r3, [r3, #0]
  4075f4:	aa07      	add	r2, sp, #28
  4075f6:	4639      	mov	r1, r7
  4075f8:	4798      	blx	r3
  4075fa:	e7d8      	b.n	4075ae <m2m_ip_cb+0x1ba>
					Socket_ReadSocketData(sock, &strRecvMsg, u8CallbackMsgID, u32Address, u16ReadSize);
  4075fc:	fa1f f28e 	uxth.w	r2, lr
  407600:	9200      	str	r2, [sp, #0]
  407602:	4423      	add	r3, r4
  407604:	463a      	mov	r2, r7
  407606:	a907      	add	r1, sp, #28
  407608:	4c27      	ldr	r4, [pc, #156]	; (4076a8 <m2m_ip_cb+0x2b4>)
  40760a:	47a0      	blx	r4
  40760c:	e7cf      	b.n	4075ae <m2m_ip_cb+0x1ba>
	else if((u8OpCode == SOCKET_CMD_SEND) || (u8OpCode == SOCKET_CMD_SENDTO) || (u8OpCode == SOCKET_CMD_SSL_SEND))
  40760e:	f000 03fd 	and.w	r3, r0, #253	; 0xfd
  407612:	2b45      	cmp	r3, #69	; 0x45
  407614:	d019      	beq.n	40764a <m2m_ip_cb+0x256>
  407616:	284c      	cmp	r0, #76	; 0x4c
  407618:	d017      	beq.n	40764a <m2m_ip_cb+0x256>
	else if(u8OpCode == SOCKET_CMD_PING)
  40761a:	2852      	cmp	r0, #82	; 0x52
  40761c:	d1c7      	bne.n	4075ae <m2m_ip_cb+0x1ba>
		if(hif_receive(u32Address, (uint8*)&strPingReply, sizeof(tstrPingReply), 1) == M2M_SUCCESS)
  40761e:	2301      	movs	r3, #1
  407620:	2214      	movs	r2, #20
  407622:	a907      	add	r1, sp, #28
  407624:	4620      	mov	r0, r4
  407626:	4c1b      	ldr	r4, [pc, #108]	; (407694 <m2m_ip_cb+0x2a0>)
  407628:	47a0      	blx	r4
  40762a:	2800      	cmp	r0, #0
  40762c:	d1bf      	bne.n	4075ae <m2m_ip_cb+0x1ba>
			gfpPingCb = (void (*)(uint32 , uint32 , uint8))strPingReply.u32CmdPrivate;
  40762e:	4b1f      	ldr	r3, [pc, #124]	; (4076ac <m2m_ip_cb+0x2b8>)
  407630:	9a08      	ldr	r2, [sp, #32]
  407632:	601a      	str	r2, [r3, #0]
			if(gfpPingCb != NULL)
  407634:	681b      	ldr	r3, [r3, #0]
  407636:	2b00      	cmp	r3, #0
  407638:	d0b9      	beq.n	4075ae <m2m_ip_cb+0x1ba>
				gfpPingCb(strPingReply.u32IPAddr, strPingReply.u32RTT, strPingReply.u8ErrorCode);
  40763a:	4b1c      	ldr	r3, [pc, #112]	; (4076ac <m2m_ip_cb+0x2b8>)
  40763c:	681b      	ldr	r3, [r3, #0]
  40763e:	f89d 202c 	ldrb.w	r2, [sp, #44]	; 0x2c
  407642:	9909      	ldr	r1, [sp, #36]	; 0x24
  407644:	9807      	ldr	r0, [sp, #28]
  407646:	4798      	blx	r3
}
  407648:	e7b1      	b.n	4075ae <m2m_ip_cb+0x1ba>
			u8CallbackMsgID = SOCKET_MSG_SENDTO;
  40764a:	2847      	cmp	r0, #71	; 0x47
  40764c:	bf14      	ite	ne
  40764e:	2507      	movne	r5, #7
  407650:	2508      	moveq	r5, #8
		if(hif_receive(u32Address, (uint8*)&strReply, sizeof(tstrSendReply), 0) == M2M_SUCCESS)
  407652:	2300      	movs	r3, #0
  407654:	2208      	movs	r2, #8
  407656:	a907      	add	r1, sp, #28
  407658:	4620      	mov	r0, r4
  40765a:	4c0e      	ldr	r4, [pc, #56]	; (407694 <m2m_ip_cb+0x2a0>)
  40765c:	47a0      	blx	r4
  40765e:	2800      	cmp	r0, #0
  407660:	d1a5      	bne.n	4075ae <m2m_ip_cb+0x1ba>
			sock = strReply.sock;
  407662:	f99d 001c 	ldrsb.w	r0, [sp, #28]
			u16SessionID = strReply.u16SessionID;
  407666:	f8bd 2020 	ldrh.w	r2, [sp, #32]
			s16Rcvd = NM_BSP_B_L_16(strReply.s16SentBytes);
  40766a:	f8bd 301e 	ldrh.w	r3, [sp, #30]
  40766e:	f8ad 300c 	strh.w	r3, [sp, #12]
			if(u16SessionID == gastrSockets[sock].u16SessionID)
  407672:	4b09      	ldr	r3, [pc, #36]	; (407698 <m2m_ip_cb+0x2a4>)
  407674:	eb03 1300 	add.w	r3, r3, r0, lsl #4
  407678:	88db      	ldrh	r3, [r3, #6]
  40767a:	b29b      	uxth	r3, r3
  40767c:	429a      	cmp	r2, r3
  40767e:	d196      	bne.n	4075ae <m2m_ip_cb+0x1ba>
				if(gpfAppSocketCb)
  407680:	4b06      	ldr	r3, [pc, #24]	; (40769c <m2m_ip_cb+0x2a8>)
  407682:	681b      	ldr	r3, [r3, #0]
  407684:	2b00      	cmp	r3, #0
  407686:	d092      	beq.n	4075ae <m2m_ip_cb+0x1ba>
					gpfAppSocketCb(sock,u8CallbackMsgID, &s16Rcvd);
  407688:	4b04      	ldr	r3, [pc, #16]	; (40769c <m2m_ip_cb+0x2a8>)
  40768a:	681b      	ldr	r3, [r3, #0]
  40768c:	aa03      	add	r2, sp, #12
  40768e:	4629      	mov	r1, r5
  407690:	4798      	blx	r3
	{
  407692:	e78c      	b.n	4075ae <m2m_ip_cb+0x1ba>
  407694:	00405a71 	.word	0x00405a71
  407698:	2040ca3c 	.word	0x2040ca3c
  40769c:	2040caec 	.word	0x2040caec
  4076a0:	2040c3c2 	.word	0x2040c3c2
  4076a4:	2040caf4 	.word	0x2040caf4
  4076a8:	00407339 	.word	0x00407339
  4076ac:	2040caf0 	.word	0x2040caf0

004076b0 <socketInit>:

Date
		4 June 2012
*********************************************************************/
void socketInit(void)
{
  4076b0:	b508      	push	{r3, lr}
	if(gbSocketInit==0)
  4076b2:	4b0a      	ldr	r3, [pc, #40]	; (4076dc <socketInit+0x2c>)
  4076b4:	781b      	ldrb	r3, [r3, #0]
  4076b6:	b103      	cbz	r3, 4076ba <socketInit+0xa>
  4076b8:	bd08      	pop	{r3, pc}
	{
		m2m_memset((uint8*)gastrSockets, 0, MAX_SOCKET * sizeof(tstrSocket));
  4076ba:	22b0      	movs	r2, #176	; 0xb0
  4076bc:	2100      	movs	r1, #0
  4076be:	4808      	ldr	r0, [pc, #32]	; (4076e0 <socketInit+0x30>)
  4076c0:	4b08      	ldr	r3, [pc, #32]	; (4076e4 <socketInit+0x34>)
  4076c2:	4798      	blx	r3
		hif_register_cb(M2M_REQ_GROUP_IP,m2m_ip_cb);
  4076c4:	4908      	ldr	r1, [pc, #32]	; (4076e8 <socketInit+0x38>)
  4076c6:	2002      	movs	r0, #2
  4076c8:	4b08      	ldr	r3, [pc, #32]	; (4076ec <socketInit+0x3c>)
  4076ca:	4798      	blx	r3
		gbSocketInit=1;
  4076cc:	2201      	movs	r2, #1
  4076ce:	4b03      	ldr	r3, [pc, #12]	; (4076dc <socketInit+0x2c>)
  4076d0:	701a      	strb	r2, [r3, #0]
		gu16SessionID = 0;
  4076d2:	2200      	movs	r2, #0
  4076d4:	4b06      	ldr	r3, [pc, #24]	; (4076f0 <socketInit+0x40>)
  4076d6:	801a      	strh	r2, [r3, #0]
	}
}
  4076d8:	e7ee      	b.n	4076b8 <socketInit+0x8>
  4076da:	bf00      	nop
  4076dc:	2040c3c1 	.word	0x2040c3c1
  4076e0:	2040ca3c 	.word	0x2040ca3c
  4076e4:	0040541d 	.word	0x0040541d
  4076e8:	004073f5 	.word	0x004073f5
  4076ec:	00405b85 	.word	0x00405b85
  4076f0:	2040c3c2 	.word	0x2040c3c2

004076f4 <registerSocketCallback>:
Date
		4 June 2012
*********************************************************************/
void registerSocketCallback(tpfAppSocketCb pfAppSocketCb, tpfAppResolveCb pfAppResolveCb)
{
	gpfAppSocketCb = pfAppSocketCb;
  4076f4:	4b02      	ldr	r3, [pc, #8]	; (407700 <registerSocketCallback+0xc>)
  4076f6:	6018      	str	r0, [r3, #0]
	gpfAppResolveCb = pfAppResolveCb;
  4076f8:	4b02      	ldr	r3, [pc, #8]	; (407704 <registerSocketCallback+0x10>)
  4076fa:	6019      	str	r1, [r3, #0]
  4076fc:	4770      	bx	lr
  4076fe:	bf00      	nop
  407700:	2040caec 	.word	0x2040caec
  407704:	2040caf4 	.word	0x2040caf4

00407708 <socket>:

Date
		4 June 2012
*********************************************************************/
SOCKET socket(uint16 u16Domain, uint8 u8Type, uint8 u8Flags)
{
  407708:	b5f0      	push	{r4, r5, r6, r7, lr}
  40770a:	b087      	sub	sp, #28
	SOCKET		sock = -1;
	uint8		u8Count,u8SocketCount = MAX_SOCKET;
	volatile tstrSocket	*pstrSock;
	
	/* The only supported family is the AF_INET for UDP and TCP transport layer protocols. */
	if(u16Domain == AF_INET)
  40770c:	2802      	cmp	r0, #2
  40770e:	d158      	bne.n	4077c2 <socket+0xba>
	{
		if(u8Type == SOCK_STREAM)
  407710:	2901      	cmp	r1, #1
  407712:	d059      	beq.n	4077c8 <socket+0xc0>
		{
			u8SocketCount = TCP_SOCK_MAX;
			u8Count = 0;
		}
		else if(u8Type == SOCK_DGRAM)
  407714:	2902      	cmp	r1, #2
  407716:	d116      	bne.n	407746 <socket+0x3e>
		{
			/*--- UDP SOCKET ---*/
			u8SocketCount = MAX_SOCKET;
  407718:	260b      	movs	r6, #11
			u8Count = TCP_SOCK_MAX;
  40771a:	2407      	movs	r4, #7
		else
			return sock;

		for(;u8Count < u8SocketCount; u8Count ++)
		{
			pstrSock = &gastrSockets[u8Count];
  40771c:	4625      	mov	r5, r4
			if(pstrSock->bIsUsed == 0)
  40771e:	4b2e      	ldr	r3, [pc, #184]	; (4077d8 <socket+0xd0>)
  407720:	eb03 1304 	add.w	r3, r3, r4, lsl #4
  407724:	7a9b      	ldrb	r3, [r3, #10]
  407726:	2b00      	cmp	r3, #0
  407728:	d051      	beq.n	4077ce <socket+0xc6>
  40772a:	1c63      	adds	r3, r4, #1
  40772c:	b2db      	uxtb	r3, r3
  40772e:	4f2a      	ldr	r7, [pc, #168]	; (4077d8 <socket+0xd0>)
		for(;u8Count < u8SocketCount; u8Count ++)
  407730:	b2dc      	uxtb	r4, r3
  407732:	42b4      	cmp	r4, r6
  407734:	d240      	bcs.n	4077b8 <socket+0xb0>
			pstrSock = &gastrSockets[u8Count];
  407736:	461d      	mov	r5, r3
			if(pstrSock->bIsUsed == 0)
  407738:	eb07 1103 	add.w	r1, r7, r3, lsl #4
  40773c:	7a89      	ldrb	r1, [r1, #10]
  40773e:	1c58      	adds	r0, r3, #1
  407740:	b121      	cbz	r1, 40774c <socket+0x44>
  407742:	4603      	mov	r3, r0
  407744:	e7f4      	b.n	407730 <socket+0x28>
			return sock;
  407746:	f04f 34ff 	mov.w	r4, #4294967295
  40774a:	e037      	b.n	4077bc <socket+0xb4>
			pstrSock = &gastrSockets[u8Count];
  40774c:	4822      	ldr	r0, [pc, #136]	; (4077d8 <socket+0xd0>)
  40774e:	eb00 1003 	add.w	r0, r0, r3, lsl #4
  407752:	4616      	mov	r6, r2
			{
				m2m_memset((uint8*)pstrSock, 0, sizeof(tstrSocket));
  407754:	2210      	movs	r2, #16
  407756:	2100      	movs	r1, #0
  407758:	4b20      	ldr	r3, [pc, #128]	; (4077dc <socket+0xd4>)
  40775a:	4798      	blx	r3

				pstrSock->bIsUsed = 1;
  40775c:	4b1e      	ldr	r3, [pc, #120]	; (4077d8 <socket+0xd0>)
  40775e:	eb03 1305 	add.w	r3, r3, r5, lsl #4
  407762:	2201      	movs	r2, #1
  407764:	729a      	strb	r2, [r3, #10]

				/* The session ID is used to distinguish different socket connections
					by comparing the assigned session ID to the one reported by the firmware*/
				++gu16SessionID;
  407766:	4a1e      	ldr	r2, [pc, #120]	; (4077e0 <socket+0xd8>)
  407768:	8813      	ldrh	r3, [r2, #0]
  40776a:	3301      	adds	r3, #1
  40776c:	b29b      	uxth	r3, r3
  40776e:	8013      	strh	r3, [r2, #0]
				if(gu16SessionID == 0)
  407770:	8813      	ldrh	r3, [r2, #0]
  407772:	b29b      	uxth	r3, r3
  407774:	b91b      	cbnz	r3, 40777e <socket+0x76>
					++gu16SessionID;
  407776:	8813      	ldrh	r3, [r2, #0]
  407778:	3301      	adds	r3, #1
  40777a:	b29b      	uxth	r3, r3
  40777c:	8013      	strh	r3, [r2, #0]
				
				pstrSock->u16SessionID = gu16SessionID;
  40777e:	4b18      	ldr	r3, [pc, #96]	; (4077e0 <socket+0xd8>)
  407780:	881a      	ldrh	r2, [r3, #0]
  407782:	b292      	uxth	r2, r2
  407784:	4b14      	ldr	r3, [pc, #80]	; (4077d8 <socket+0xd0>)
  407786:	eb03 1305 	add.w	r3, r3, r5, lsl #4
  40778a:	80da      	strh	r2, [r3, #6]
				M2M_DBG("1 Socket %d session ID = %d\r\n",u8Count, gu16SessionID );
				sock = (SOCKET)u8Count;
  40778c:	b264      	sxtb	r4, r4

				if(u8Flags & SOCKET_FLAGS_SSL)
  40778e:	f016 0f01 	tst.w	r6, #1
  407792:	d013      	beq.n	4077bc <socket+0xb4>
				{
					tstrSSLSocketCreateCmd	strSSLCreate;
					strSSLCreate.sslSock = sock;
  407794:	aa06      	add	r2, sp, #24
  407796:	f802 4d04 	strb.w	r4, [r2, #-4]!
					pstrSock->u8SSLFlags = SSL_FLAGS_ACTIVE | SSL_FLAGS_NO_TX_COPY;
  40779a:	4b0f      	ldr	r3, [pc, #60]	; (4077d8 <socket+0xd0>)
  40779c:	eb03 1505 	add.w	r5, r3, r5, lsl #4
  4077a0:	2321      	movs	r3, #33	; 0x21
  4077a2:	72eb      	strb	r3, [r5, #11]
					SOCKET_REQUEST(SOCKET_CMD_SSL_CREATE, (uint8*)&strSSLCreate, sizeof(tstrSSLSocketCreateCmd), 0, 0, 0);
  4077a4:	2300      	movs	r3, #0
  4077a6:	9302      	str	r3, [sp, #8]
  4077a8:	9301      	str	r3, [sp, #4]
  4077aa:	9300      	str	r3, [sp, #0]
  4077ac:	2304      	movs	r3, #4
  4077ae:	2150      	movs	r1, #80	; 0x50
  4077b0:	2002      	movs	r0, #2
  4077b2:	4d0c      	ldr	r5, [pc, #48]	; (4077e4 <socket+0xdc>)
  4077b4:	47a8      	blx	r5
  4077b6:	e001      	b.n	4077bc <socket+0xb4>
	SOCKET		sock = -1;
  4077b8:	f04f 34ff 	mov.w	r4, #4294967295
				break;
			}
		}
	}
	return sock;
}
  4077bc:	4620      	mov	r0, r4
  4077be:	b007      	add	sp, #28
  4077c0:	bdf0      	pop	{r4, r5, r6, r7, pc}
	SOCKET		sock = -1;
  4077c2:	f04f 34ff 	mov.w	r4, #4294967295
  4077c6:	e7f9      	b.n	4077bc <socket+0xb4>
			u8SocketCount = TCP_SOCK_MAX;
  4077c8:	2607      	movs	r6, #7
			u8Count = 0;
  4077ca:	2400      	movs	r4, #0
  4077cc:	e7a6      	b.n	40771c <socket+0x14>
			pstrSock = &gastrSockets[u8Count];
  4077ce:	4802      	ldr	r0, [pc, #8]	; (4077d8 <socket+0xd0>)
  4077d0:	eb00 1004 	add.w	r0, r0, r4, lsl #4
  4077d4:	e7bd      	b.n	407752 <socket+0x4a>
  4077d6:	bf00      	nop
  4077d8:	2040ca3c 	.word	0x2040ca3c
  4077dc:	0040541d 	.word	0x0040541d
  4077e0:	2040c3c2 	.word	0x2040c3c2
  4077e4:	00405581 	.word	0x00405581

004077e8 <connect>:

Date
		5 June 2012
*********************************************************************/
sint8 connect(SOCKET sock, struct sockaddr *pstrAddr, uint8 u8AddrLen)
{
  4077e8:	b530      	push	{r4, r5, lr}
  4077ea:	b089      	sub	sp, #36	; 0x24
	sint8	s8Ret = SOCK_ERR_INVALID_ARG;
	if((sock >= 0) && (pstrAddr != NULL) && (gastrSockets[sock].bIsUsed == 1) && (u8AddrLen != 0))
  4077ec:	1e04      	subs	r4, r0, #0
  4077ee:	db36      	blt.n	40785e <connect+0x76>
  4077f0:	2900      	cmp	r1, #0
  4077f2:	d034      	beq.n	40785e <connect+0x76>
  4077f4:	4b1d      	ldr	r3, [pc, #116]	; (40786c <connect+0x84>)
  4077f6:	eb03 1304 	add.w	r3, r3, r4, lsl #4
  4077fa:	7a9b      	ldrb	r3, [r3, #10]
  4077fc:	b2db      	uxtb	r3, r3
  4077fe:	2a00      	cmp	r2, #0
  407800:	d030      	beq.n	407864 <connect+0x7c>
  407802:	2b01      	cmp	r3, #1
  407804:	d12e      	bne.n	407864 <connect+0x7c>
	{
		tstrConnectCmd	strConnect;
		uint8			u8Cmd = SOCKET_CMD_CONNECT;
		if((gastrSockets[sock].u8SSLFlags) & SSL_FLAGS_ACTIVE)
  407806:	4b19      	ldr	r3, [pc, #100]	; (40786c <connect+0x84>)
  407808:	eb03 1304 	add.w	r3, r3, r4, lsl #4
  40780c:	7adb      	ldrb	r3, [r3, #11]
  40780e:	f013 0f01 	tst.w	r3, #1
  407812:	d022      	beq.n	40785a <connect+0x72>
		{
			u8Cmd = SOCKET_CMD_SSL_CONNECT;
			strConnect.u8SslFlags = gastrSockets[sock].u8SSLFlags;
  407814:	4b15      	ldr	r3, [pc, #84]	; (40786c <connect+0x84>)
  407816:	eb03 1304 	add.w	r3, r3, r4, lsl #4
  40781a:	7adb      	ldrb	r3, [r3, #11]
  40781c:	f88d 301d 	strb.w	r3, [sp, #29]
			u8Cmd = SOCKET_CMD_SSL_CONNECT;
  407820:	254b      	movs	r5, #75	; 0x4b
		}
		strConnect.sock = sock;
  407822:	f88d 401c 	strb.w	r4, [sp, #28]
		m2m_memcpy((uint8 *)&strConnect.strAddr, (uint8 *)pstrAddr, sizeof(tstrSockAddr));
  407826:	2208      	movs	r2, #8
  407828:	a805      	add	r0, sp, #20
  40782a:	4b11      	ldr	r3, [pc, #68]	; (407870 <connect+0x88>)
  40782c:	4798      	blx	r3

		strConnect.u16SessionID		= gastrSockets[sock].u16SessionID;
  40782e:	480f      	ldr	r0, [pc, #60]	; (40786c <connect+0x84>)
  407830:	eb00 1004 	add.w	r0, r0, r4, lsl #4
  407834:	88c3      	ldrh	r3, [r0, #6]
  407836:	f8ad 301e 	strh.w	r3, [sp, #30]
		s8Ret = SOCKET_REQUEST(u8Cmd, (uint8*)&strConnect,sizeof(tstrConnectCmd), NULL, 0, 0);
  40783a:	2300      	movs	r3, #0
  40783c:	9302      	str	r3, [sp, #8]
  40783e:	9301      	str	r3, [sp, #4]
  407840:	9300      	str	r3, [sp, #0]
  407842:	230c      	movs	r3, #12
  407844:	aa05      	add	r2, sp, #20
  407846:	4629      	mov	r1, r5
  407848:	2002      	movs	r0, #2
  40784a:	4c0a      	ldr	r4, [pc, #40]	; (407874 <connect+0x8c>)
  40784c:	47a0      	blx	r4
		if(s8Ret != SOCK_ERR_NO_ERROR)
  40784e:	2800      	cmp	r0, #0
		{
			s8Ret = SOCK_ERR_INVALID;
  407850:	bf18      	it	ne
  407852:	f06f 0008 	mvnne.w	r0, #8
		}
	}
	return s8Ret;
}
  407856:	b009      	add	sp, #36	; 0x24
  407858:	bd30      	pop	{r4, r5, pc}
		uint8			u8Cmd = SOCKET_CMD_CONNECT;
  40785a:	2544      	movs	r5, #68	; 0x44
  40785c:	e7e1      	b.n	407822 <connect+0x3a>
	sint8	s8Ret = SOCK_ERR_INVALID_ARG;
  40785e:	f06f 0005 	mvn.w	r0, #5
  407862:	e7f8      	b.n	407856 <connect+0x6e>
  407864:	f06f 0005 	mvn.w	r0, #5
  407868:	e7f5      	b.n	407856 <connect+0x6e>
  40786a:	bf00      	nop
  40786c:	2040ca3c 	.word	0x2040ca3c
  407870:	00405409 	.word	0x00405409
  407874:	00405581 	.word	0x00405581

00407878 <send>:

Date
		5 June 2012
*********************************************************************/
sint16 send(SOCKET sock, void *pvSendBuffer, uint16 u16SendLength, uint16 flags)
{
  407878:	b530      	push	{r4, r5, lr}
  40787a:	b089      	sub	sp, #36	; 0x24
	sint16	s16Ret = SOCK_ERR_INVALID_ARG;
	
	if((sock >= 0) && (pvSendBuffer != NULL) && (u16SendLength <= SOCKET_BUFFER_MAX_LENGTH) && (gastrSockets[sock].bIsUsed == 1))
  40787c:	460c      	mov	r4, r1
  40787e:	3100      	adds	r1, #0
  407880:	bf18      	it	ne
  407882:	2101      	movne	r1, #1
  407884:	f5b2 6faf 	cmp.w	r2, #1400	; 0x578
  407888:	bf88      	it	hi
  40788a:	2100      	movhi	r1, #0
  40788c:	2900      	cmp	r1, #0
  40788e:	d037      	beq.n	407900 <send+0x88>
  407890:	2800      	cmp	r0, #0
  407892:	db35      	blt.n	407900 <send+0x88>
  407894:	4b1d      	ldr	r3, [pc, #116]	; (40790c <send+0x94>)
  407896:	eb03 1300 	add.w	r3, r3, r0, lsl #4
  40789a:	7a9b      	ldrb	r3, [r3, #10]
  40789c:	b2db      	uxtb	r3, r3
  40789e:	2b01      	cmp	r3, #1
  4078a0:	d131      	bne.n	407906 <send+0x8e>
		uint8			u8Cmd;

		u8Cmd			= SOCKET_CMD_SEND;
		u16DataOffset	= TCP_TX_PACKET_OFFSET;

		strSend.sock			= sock;
  4078a2:	f88d 0010 	strb.w	r0, [sp, #16]
		strSend.u16DataSize		= NM_BSP_B_L_16(u16SendLength);
  4078a6:	f8ad 2012 	strh.w	r2, [sp, #18]
		strSend.u16SessionID	= gastrSockets[sock].u16SessionID;
  4078aa:	4b18      	ldr	r3, [pc, #96]	; (40790c <send+0x94>)
  4078ac:	eb03 1300 	add.w	r3, r3, r0, lsl #4
  4078b0:	88db      	ldrh	r3, [r3, #6]
  4078b2:	f8ad 301c 	strh.w	r3, [sp, #28]

		if(sock >= TCP_SOCK_MAX)
		{
			u16DataOffset = UDP_TX_PACKET_OFFSET;
  4078b6:	2807      	cmp	r0, #7
  4078b8:	bfb4      	ite	lt
  4078ba:	2550      	movlt	r5, #80	; 0x50
  4078bc:	2544      	movge	r5, #68	; 0x44
		}
		if(gastrSockets[sock].u8SSLFlags & SSL_FLAGS_ACTIVE)
  4078be:	4b13      	ldr	r3, [pc, #76]	; (40790c <send+0x94>)
  4078c0:	eb03 1300 	add.w	r3, r3, r0, lsl #4
  4078c4:	7adb      	ldrb	r3, [r3, #11]
  4078c6:	f013 0f01 	tst.w	r3, #1
  4078ca:	d017      	beq.n	4078fc <send+0x84>
		{
			u8Cmd			= SOCKET_CMD_SSL_SEND;
			u16DataOffset	= gastrSockets[sock].u16DataOffset;
  4078cc:	4b0f      	ldr	r3, [pc, #60]	; (40790c <send+0x94>)
  4078ce:	eb03 1000 	add.w	r0, r3, r0, lsl #4
  4078d2:	8905      	ldrh	r5, [r0, #8]
  4078d4:	b2ad      	uxth	r5, r5
			u8Cmd			= SOCKET_CMD_SSL_SEND;
  4078d6:	214c      	movs	r1, #76	; 0x4c
		}

		s16Ret =  SOCKET_REQUEST(u8Cmd|M2M_REQ_DATA_PKT, (uint8*)&strSend, sizeof(tstrSendCmd), pvSendBuffer, u16SendLength, u16DataOffset);
  4078d8:	9502      	str	r5, [sp, #8]
  4078da:	9201      	str	r2, [sp, #4]
  4078dc:	9400      	str	r4, [sp, #0]
  4078de:	2310      	movs	r3, #16
  4078e0:	eb0d 0203 	add.w	r2, sp, r3
  4078e4:	f041 0180 	orr.w	r1, r1, #128	; 0x80
  4078e8:	2002      	movs	r0, #2
  4078ea:	4c09      	ldr	r4, [pc, #36]	; (407910 <send+0x98>)
  4078ec:	47a0      	blx	r4
		if(s16Ret != SOCK_ERR_NO_ERROR)
  4078ee:	2800      	cmp	r0, #0
		{
			s16Ret = SOCK_ERR_BUFFER_FULL;
  4078f0:	bf0c      	ite	eq
  4078f2:	2000      	moveq	r0, #0
  4078f4:	f06f 000d 	mvnne.w	r0, #13
		}
	}
	return s16Ret;
}
  4078f8:	b009      	add	sp, #36	; 0x24
  4078fa:	bd30      	pop	{r4, r5, pc}
		u8Cmd			= SOCKET_CMD_SEND;
  4078fc:	2145      	movs	r1, #69	; 0x45
  4078fe:	e7eb      	b.n	4078d8 <send+0x60>
	sint16	s16Ret = SOCK_ERR_INVALID_ARG;
  407900:	f06f 0005 	mvn.w	r0, #5
  407904:	e7f8      	b.n	4078f8 <send+0x80>
  407906:	f06f 0005 	mvn.w	r0, #5
  40790a:	e7f5      	b.n	4078f8 <send+0x80>
  40790c:	2040ca3c 	.word	0x2040ca3c
  407910:	00405581 	.word	0x00405581

00407914 <recv>:
*********************************************************************/
sint16 recv(SOCKET sock, void *pvRecvBuf, uint16 u16BufLen, uint32 u32Timeoutmsec)
{
	sint16	s16Ret = SOCK_ERR_INVALID_ARG;
	
	if((sock >= 0) && (pvRecvBuf != NULL) && (u16BufLen != 0) && (gastrSockets[sock].bIsUsed == 1))
  407914:	2900      	cmp	r1, #0
  407916:	bf18      	it	ne
  407918:	2a00      	cmpne	r2, #0
  40791a:	d044      	beq.n	4079a6 <recv+0x92>
{
  40791c:	b570      	push	{r4, r5, r6, lr}
  40791e:	b086      	sub	sp, #24
  407920:	460e      	mov	r6, r1
  407922:	4615      	mov	r5, r2
	if((sock >= 0) && (pvRecvBuf != NULL) && (u16BufLen != 0) && (gastrSockets[sock].bIsUsed == 1))
  407924:	2800      	cmp	r0, #0
  407926:	db36      	blt.n	407996 <recv+0x82>
  407928:	4a20      	ldr	r2, [pc, #128]	; (4079ac <recv+0x98>)
  40792a:	eb02 1200 	add.w	r2, r2, r0, lsl #4
  40792e:	7a92      	ldrb	r2, [r2, #10]
  407930:	b2d2      	uxtb	r2, r2
  407932:	2a01      	cmp	r2, #1
  407934:	d132      	bne.n	40799c <recv+0x88>
	{
		s16Ret = SOCK_ERR_NO_ERROR;
		gastrSockets[sock].pu8UserBuffer 		= (uint8*)pvRecvBuf;
  407936:	4c1d      	ldr	r4, [pc, #116]	; (4079ac <recv+0x98>)
  407938:	0101      	lsls	r1, r0, #4
  40793a:	1862      	adds	r2, r4, r1
  40793c:	5066      	str	r6, [r4, r1]
		gastrSockets[sock].u16UserBufferSize 	= u16BufLen;
  40793e:	8095      	strh	r5, [r2, #4]

		if(!gastrSockets[sock].bIsRecvPending)
  407940:	7b12      	ldrb	r2, [r2, #12]
  407942:	2a00      	cmp	r2, #0
  407944:	d12d      	bne.n	4079a2 <recv+0x8e>
		{
			tstrRecvCmd	strRecv;
			uint8		u8Cmd = SOCKET_CMD_RECV;

			gastrSockets[sock].bIsRecvPending = 1;
  407946:	eb04 1200 	add.w	r2, r4, r0, lsl #4
  40794a:	2101      	movs	r1, #1
  40794c:	7311      	strb	r1, [r2, #12]
			if(gastrSockets[sock].u8SSLFlags & SSL_FLAGS_ACTIVE)
  40794e:	7ad2      	ldrb	r2, [r2, #11]
  407950:	400a      	ands	r2, r1
			{
				u8Cmd = SOCKET_CMD_SSL_RECV;
  407952:	2a00      	cmp	r2, #0
  407954:	bf0c      	ite	eq
  407956:	2146      	moveq	r1, #70	; 0x46
  407958:	214d      	movne	r1, #77	; 0x4d
			}

			/* Check the timeout value. */
			if(u32Timeoutmsec == 0)
  40795a:	b9d3      	cbnz	r3, 407992 <recv+0x7e>
				strRecv.u32Timeoutmsec = 0xFFFFFFFF;
  40795c:	f04f 33ff 	mov.w	r3, #4294967295
  407960:	9304      	str	r3, [sp, #16]
			else
				strRecv.u32Timeoutmsec = NM_BSP_B_L_32(u32Timeoutmsec);
			strRecv.sock = sock;
  407962:	f88d 0014 	strb.w	r0, [sp, #20]
			strRecv.u16SessionID		= gastrSockets[sock].u16SessionID;
  407966:	4b11      	ldr	r3, [pc, #68]	; (4079ac <recv+0x98>)
  407968:	eb03 1000 	add.w	r0, r3, r0, lsl #4
  40796c:	88c3      	ldrh	r3, [r0, #6]
  40796e:	f8ad 3016 	strh.w	r3, [sp, #22]
		
			s16Ret = SOCKET_REQUEST(u8Cmd, (uint8*)&strRecv, sizeof(tstrRecvCmd), NULL , 0, 0);
  407972:	2300      	movs	r3, #0
  407974:	9302      	str	r3, [sp, #8]
  407976:	9301      	str	r3, [sp, #4]
  407978:	9300      	str	r3, [sp, #0]
  40797a:	2308      	movs	r3, #8
  40797c:	aa04      	add	r2, sp, #16
  40797e:	2002      	movs	r0, #2
  407980:	4c0b      	ldr	r4, [pc, #44]	; (4079b0 <recv+0x9c>)
  407982:	47a0      	blx	r4
			if(s16Ret != SOCK_ERR_NO_ERROR)
  407984:	2800      	cmp	r0, #0
			{
				s16Ret = SOCK_ERR_BUFFER_FULL;
  407986:	bf0c      	ite	eq
  407988:	2000      	moveq	r0, #0
  40798a:	f06f 000d 	mvnne.w	r0, #13
			}
		}
	}
	return s16Ret;
}
  40798e:	b006      	add	sp, #24
  407990:	bd70      	pop	{r4, r5, r6, pc}
				strRecv.u32Timeoutmsec = NM_BSP_B_L_32(u32Timeoutmsec);
  407992:	9304      	str	r3, [sp, #16]
  407994:	e7e5      	b.n	407962 <recv+0x4e>
	sint16	s16Ret = SOCK_ERR_INVALID_ARG;
  407996:	f06f 0005 	mvn.w	r0, #5
  40799a:	e7f8      	b.n	40798e <recv+0x7a>
  40799c:	f06f 0005 	mvn.w	r0, #5
  4079a0:	e7f5      	b.n	40798e <recv+0x7a>
		s16Ret = SOCK_ERR_NO_ERROR;
  4079a2:	2000      	movs	r0, #0
  4079a4:	e7f3      	b.n	40798e <recv+0x7a>
	sint16	s16Ret = SOCK_ERR_INVALID_ARG;
  4079a6:	f06f 0005 	mvn.w	r0, #5
}
  4079aa:	4770      	bx	lr
  4079ac:	2040ca3c 	.word	0x2040ca3c
  4079b0:	00405581 	.word	0x00405581

004079b4 <close>:

Date
		4 June 2012
*********************************************************************/
sint8 close(SOCKET sock)
{
  4079b4:	b530      	push	{r4, r5, lr}
  4079b6:	b087      	sub	sp, #28
	sint8	s8Ret = SOCK_ERR_INVALID_ARG;
	if(sock >= 0 && (gastrSockets[sock].bIsUsed == 1))
  4079b8:	1e04      	subs	r4, r0, #0
  4079ba:	db2f      	blt.n	407a1c <close+0x68>
  4079bc:	4b1a      	ldr	r3, [pc, #104]	; (407a28 <close+0x74>)
  4079be:	eb03 1304 	add.w	r3, r3, r4, lsl #4
  4079c2:	7a9b      	ldrb	r3, [r3, #10]
  4079c4:	b2db      	uxtb	r3, r3
  4079c6:	2b01      	cmp	r3, #1
  4079c8:	d12b      	bne.n	407a22 <close+0x6e>
	{
		uint8	u8Cmd = SOCKET_CMD_CLOSE;
		tstrCloseCmd strclose;
		strclose.sock = sock; 
  4079ca:	f88d 4014 	strb.w	r4, [sp, #20]
		strclose.u16SessionID		= gastrSockets[sock].u16SessionID;
  4079ce:	4b16      	ldr	r3, [pc, #88]	; (407a28 <close+0x74>)
  4079d0:	eb03 1304 	add.w	r3, r3, r4, lsl #4
  4079d4:	88da      	ldrh	r2, [r3, #6]
  4079d6:	f8ad 2016 	strh.w	r2, [sp, #22]
		
		gastrSockets[sock].bIsUsed = 0;
  4079da:	2200      	movs	r2, #0
  4079dc:	729a      	strb	r2, [r3, #10]
		gastrSockets[sock].u16SessionID =0;
  4079de:	80da      	strh	r2, [r3, #6]
		
		if(gastrSockets[sock].u8SSLFlags & SSL_FLAGS_ACTIVE)
  4079e0:	7adb      	ldrb	r3, [r3, #11]
  4079e2:	f003 0301 	and.w	r3, r3, #1
		{
			u8Cmd = SOCKET_CMD_SSL_CLOSE;
  4079e6:	4293      	cmp	r3, r2
		}
		s8Ret = SOCKET_REQUEST(u8Cmd, (uint8*)&strclose, sizeof(tstrCloseCmd), NULL,0, 0);
  4079e8:	9202      	str	r2, [sp, #8]
  4079ea:	9201      	str	r2, [sp, #4]
  4079ec:	9200      	str	r2, [sp, #0]
  4079ee:	f04f 0304 	mov.w	r3, #4
  4079f2:	aa05      	add	r2, sp, #20
  4079f4:	bf0c      	ite	eq
  4079f6:	2149      	moveq	r1, #73	; 0x49
  4079f8:	214e      	movne	r1, #78	; 0x4e
  4079fa:	2002      	movs	r0, #2
  4079fc:	4d0b      	ldr	r5, [pc, #44]	; (407a2c <close+0x78>)
  4079fe:	47a8      	blx	r5
		if(s8Ret != SOCK_ERR_NO_ERROR)
  407a00:	1e05      	subs	r5, r0, #0
		{
			s8Ret = SOCK_ERR_INVALID;
  407a02:	bf18      	it	ne
  407a04:	f06f 0508 	mvnne.w	r5, #8
		}
		m2m_memset((uint8*)&gastrSockets[sock], 0, sizeof(tstrSocket));
  407a08:	2210      	movs	r2, #16
  407a0a:	2100      	movs	r1, #0
  407a0c:	4806      	ldr	r0, [pc, #24]	; (407a28 <close+0x74>)
  407a0e:	eb00 1004 	add.w	r0, r0, r4, lsl #4
  407a12:	4b07      	ldr	r3, [pc, #28]	; (407a30 <close+0x7c>)
  407a14:	4798      	blx	r3
	}
	return s8Ret;
}
  407a16:	4628      	mov	r0, r5
  407a18:	b007      	add	sp, #28
  407a1a:	bd30      	pop	{r4, r5, pc}
	sint8	s8Ret = SOCK_ERR_INVALID_ARG;
  407a1c:	f06f 0505 	mvn.w	r5, #5
  407a20:	e7f9      	b.n	407a16 <close+0x62>
  407a22:	f06f 0505 	mvn.w	r5, #5
  407a26:	e7f6      	b.n	407a16 <close+0x62>
  407a28:	2040ca3c 	.word	0x2040ca3c
  407a2c:	00405581 	.word	0x00405581
  407a30:	0040541d 	.word	0x0040541d

00407a34 <spi_flash_enable>:
/**
 *	@fn		spi_flash_enable
 *	@brief	Enable spi flash operations
 */
sint8 spi_flash_enable(uint8 enable)
{
  407a34:	b570      	push	{r4, r5, r6, lr}
  407a36:	b082      	sub	sp, #8
  407a38:	4605      	mov	r5, r0
	sint8 s8Ret = M2M_SUCCESS;
	if(REV(nmi_get_chipid()) >= REV_3A0) {		
  407a3a:	4b2b      	ldr	r3, [pc, #172]	; (407ae8 <spi_flash_enable+0xb4>)
  407a3c:	4798      	blx	r3
  407a3e:	f3c0 000b 	ubfx	r0, r0, #0, #12
  407a42:	f5b0 7f68 	cmp.w	r0, #928	; 0x3a0
  407a46:	d203      	bcs.n	407a50 <spi_flash_enable+0x1c>
	sint8 s8Ret = M2M_SUCCESS;
  407a48:	2400      	movs	r4, #0
		u32Val |= ((0x0010ul) << 12);
		nm_write_reg(0x1410, u32Val);
	}
ERR1:
	return s8Ret;
}
  407a4a:	4620      	mov	r0, r4
  407a4c:	b002      	add	sp, #8
  407a4e:	bd70      	pop	{r4, r5, r6, pc}
		s8Ret = nm_read_reg_with_ret(0x1410, &u32Val);
  407a50:	a901      	add	r1, sp, #4
  407a52:	f241 4010 	movw	r0, #5136	; 0x1410
  407a56:	4b25      	ldr	r3, [pc, #148]	; (407aec <spi_flash_enable+0xb8>)
  407a58:	4798      	blx	r3
		if(s8Ret != M2M_SUCCESS) {
  407a5a:	4604      	mov	r4, r0
  407a5c:	2800      	cmp	r0, #0
  407a5e:	d1f4      	bne.n	407a4a <spi_flash_enable+0x16>
		u32Val &= ~((0x7777ul) << 12);
  407a60:	4b23      	ldr	r3, [pc, #140]	; (407af0 <spi_flash_enable+0xbc>)
  407a62:	9a01      	ldr	r2, [sp, #4]
  407a64:	4013      	ands	r3, r2
		u32Val |= ((0x1111ul) << 12);
  407a66:	4923      	ldr	r1, [pc, #140]	; (407af4 <spi_flash_enable+0xc0>)
  407a68:	4319      	orrs	r1, r3
  407a6a:	9101      	str	r1, [sp, #4]
		nm_write_reg(0x1410, u32Val);
  407a6c:	f241 4010 	movw	r0, #5136	; 0x1410
  407a70:	4b21      	ldr	r3, [pc, #132]	; (407af8 <spi_flash_enable+0xc4>)
  407a72:	4798      	blx	r3
		if(enable) {
  407a74:	b305      	cbz	r5, 407ab8 <spi_flash_enable+0x84>
	nm_write_reg(SPI_FLASH_DATA_CNT, 0);
  407a76:	2100      	movs	r1, #0
  407a78:	4820      	ldr	r0, [pc, #128]	; (407afc <spi_flash_enable+0xc8>)
  407a7a:	4d1f      	ldr	r5, [pc, #124]	; (407af8 <spi_flash_enable+0xc4>)
  407a7c:	47a8      	blx	r5
	nm_write_reg(SPI_FLASH_BUF1, cmd[0]);
  407a7e:	21ab      	movs	r1, #171	; 0xab
  407a80:	481f      	ldr	r0, [pc, #124]	; (407b00 <spi_flash_enable+0xcc>)
  407a82:	47a8      	blx	r5
	nm_write_reg(SPI_FLASH_BUF_DIR, 0x1);
  407a84:	2101      	movs	r1, #1
  407a86:	481f      	ldr	r0, [pc, #124]	; (407b04 <spi_flash_enable+0xd0>)
  407a88:	47a8      	blx	r5
	nm_write_reg(SPI_FLASH_DMA_ADDR, 0);
  407a8a:	2100      	movs	r1, #0
  407a8c:	481e      	ldr	r0, [pc, #120]	; (407b08 <spi_flash_enable+0xd4>)
  407a8e:	47a8      	blx	r5
	nm_write_reg(SPI_FLASH_CMD_CNT,  1 | (1 << 7));
  407a90:	2181      	movs	r1, #129	; 0x81
  407a92:	481e      	ldr	r0, [pc, #120]	; (407b0c <spi_flash_enable+0xd8>)
  407a94:	47a8      	blx	r5
	while(nm_read_reg(SPI_FLASH_TR_DONE) != 1);
  407a96:	4e1e      	ldr	r6, [pc, #120]	; (407b10 <spi_flash_enable+0xdc>)
  407a98:	4d1e      	ldr	r5, [pc, #120]	; (407b14 <spi_flash_enable+0xe0>)
  407a9a:	4630      	mov	r0, r6
  407a9c:	47a8      	blx	r5
  407a9e:	2801      	cmp	r0, #1
  407aa0:	d1fb      	bne.n	407a9a <spi_flash_enable+0x66>
		u32Val &= ~((0x7777ul) << 12);
  407aa2:	4913      	ldr	r1, [pc, #76]	; (407af0 <spi_flash_enable+0xbc>)
  407aa4:	9b01      	ldr	r3, [sp, #4]
  407aa6:	4019      	ands	r1, r3
		u32Val |= ((0x0010ul) << 12);
  407aa8:	f441 3180 	orr.w	r1, r1, #65536	; 0x10000
  407aac:	9101      	str	r1, [sp, #4]
		nm_write_reg(0x1410, u32Val);
  407aae:	f241 4010 	movw	r0, #5136	; 0x1410
  407ab2:	4b11      	ldr	r3, [pc, #68]	; (407af8 <spi_flash_enable+0xc4>)
  407ab4:	4798      	blx	r3
  407ab6:	e7c8      	b.n	407a4a <spi_flash_enable+0x16>
	nm_write_reg(SPI_FLASH_DATA_CNT, 0);
  407ab8:	2100      	movs	r1, #0
  407aba:	4810      	ldr	r0, [pc, #64]	; (407afc <spi_flash_enable+0xc8>)
  407abc:	4d0e      	ldr	r5, [pc, #56]	; (407af8 <spi_flash_enable+0xc4>)
  407abe:	47a8      	blx	r5
	nm_write_reg(SPI_FLASH_BUF1, cmd[0]);
  407ac0:	21b9      	movs	r1, #185	; 0xb9
  407ac2:	480f      	ldr	r0, [pc, #60]	; (407b00 <spi_flash_enable+0xcc>)
  407ac4:	47a8      	blx	r5
	nm_write_reg(SPI_FLASH_BUF_DIR, 0x1);
  407ac6:	2101      	movs	r1, #1
  407ac8:	480e      	ldr	r0, [pc, #56]	; (407b04 <spi_flash_enable+0xd0>)
  407aca:	47a8      	blx	r5
	nm_write_reg(SPI_FLASH_DMA_ADDR, 0);
  407acc:	2100      	movs	r1, #0
  407ace:	480e      	ldr	r0, [pc, #56]	; (407b08 <spi_flash_enable+0xd4>)
  407ad0:	47a8      	blx	r5
	nm_write_reg(SPI_FLASH_CMD_CNT, 1 | (1 << 7));
  407ad2:	2181      	movs	r1, #129	; 0x81
  407ad4:	480d      	ldr	r0, [pc, #52]	; (407b0c <spi_flash_enable+0xd8>)
  407ad6:	47a8      	blx	r5
	while(nm_read_reg(SPI_FLASH_TR_DONE) != 1);
  407ad8:	4e0d      	ldr	r6, [pc, #52]	; (407b10 <spi_flash_enable+0xdc>)
  407ada:	4d0e      	ldr	r5, [pc, #56]	; (407b14 <spi_flash_enable+0xe0>)
  407adc:	4630      	mov	r0, r6
  407ade:	47a8      	blx	r5
  407ae0:	2801      	cmp	r0, #1
  407ae2:	d1fb      	bne.n	407adc <spi_flash_enable+0xa8>
  407ae4:	e7dd      	b.n	407aa2 <spi_flash_enable+0x6e>
  407ae6:	bf00      	nop
  407ae8:	00406449 	.word	0x00406449
  407aec:	00406745 	.word	0x00406745
  407af0:	f8888fff 	.word	0xf8888fff
  407af4:	01111000 	.word	0x01111000
  407af8:	00406751 	.word	0x00406751
  407afc:	00010208 	.word	0x00010208
  407b00:	0001020c 	.word	0x0001020c
  407b04:	00010214 	.word	0x00010214
  407b08:	0001021c 	.word	0x0001021c
  407b0c:	00010204 	.word	0x00010204
  407b10:	00010218 	.word	0x00010218
  407b14:	00406739 	.word	0x00406739

00407b18 <sysclk_init>:
	pmc_disable_udpck();
}
#endif // CONFIG_USBCLK_SOURCE

void sysclk_init(void)
{
  407b18:	b510      	push	{r4, lr}
	struct pll_config pllcfg;

	/* Set flash wait state to max in case the below clock switching. */
	system_init_flash(CHIP_FREQ_CPU_MAX);
  407b1a:	4810      	ldr	r0, [pc, #64]	; (407b5c <sysclk_init+0x44>)
  407b1c:	4b10      	ldr	r3, [pc, #64]	; (407b60 <sysclk_init+0x48>)
  407b1e:	4798      	blx	r3
		pmc_switch_mainck_to_fastrc(CKGR_MOR_MOSCRCF_12_MHz);
		break;


	case OSC_MAINCK_XTAL:
		pmc_switch_mainck_to_xtal(PMC_OSC_XTAL,
  407b20:	213e      	movs	r1, #62	; 0x3e
  407b22:	2000      	movs	r0, #0
  407b24:	4b0f      	ldr	r3, [pc, #60]	; (407b64 <sysclk_init+0x4c>)
  407b26:	4798      	blx	r3
	case OSC_MAINCK_4M_RC:
	case OSC_MAINCK_8M_RC:
	case OSC_MAINCK_12M_RC:
	case OSC_MAINCK_XTAL:
	case OSC_MAINCK_BYPASS:
		return pmc_osc_is_ready_mainck();
  407b28:	4c0f      	ldr	r4, [pc, #60]	; (407b68 <sysclk_init+0x50>)
  407b2a:	47a0      	blx	r4
 *
 * \param id A number identifying the oscillator to wait for.
 */
static inline void osc_wait_ready(uint8_t id)
{
	while (!osc_is_ready(id)) {
  407b2c:	2800      	cmp	r0, #0
  407b2e:	d0fc      	beq.n	407b2a <sysclk_init+0x12>
static inline void pll_enable(const struct pll_config *p_cfg, uint32_t ul_pll_id)
{
	Assert(ul_pll_id < NR_PLLS);

	if (ul_pll_id == PLLA_ID) {
		pmc_disable_pllack(); // Always stop PLL first!
  407b30:	4b0e      	ldr	r3, [pc, #56]	; (407b6c <sysclk_init+0x54>)
  407b32:	4798      	blx	r3
		PMC->CKGR_PLLAR = CKGR_PLLAR_ONE | p_cfg->ctrl;
  407b34:	4a0e      	ldr	r2, [pc, #56]	; (407b70 <sysclk_init+0x58>)
  407b36:	4b0f      	ldr	r3, [pc, #60]	; (407b74 <sysclk_init+0x5c>)
  407b38:	629a      	str	r2, [r3, #40]	; 0x28
static inline uint32_t pll_is_locked(uint32_t ul_pll_id)
{
	Assert(ul_pll_id < NR_PLLS);

	if (ul_pll_id == PLLA_ID) {
	return pmc_is_locked_pllack();
  407b3a:	4c0f      	ldr	r4, [pc, #60]	; (407b78 <sysclk_init+0x60>)
  407b3c:	47a0      	blx	r4
 */
static inline int pll_wait_for_lock(unsigned int pll_id)
{
	Assert(pll_id < NR_PLLS);

	while (!pll_is_locked(pll_id)) {
  407b3e:	2800      	cmp	r0, #0
  407b40:	d0fc      	beq.n	407b3c <sysclk_init+0x24>
	else if (CONFIG_SYSCLK_SOURCE == SYSCLK_SRC_PLLACK) {
		pll_enable_source(CONFIG_PLL0_SOURCE);
		pll_config_defaults(&pllcfg, 0);
		pll_enable(&pllcfg, 0);
		pll_wait_for_lock(0);
		pmc_mck_set_division(CONFIG_SYSCLK_DIV);
  407b42:	2002      	movs	r0, #2
  407b44:	4b0d      	ldr	r3, [pc, #52]	; (407b7c <sysclk_init+0x64>)
  407b46:	4798      	blx	r3
		pmc_switch_mck_to_pllack(CONFIG_SYSCLK_PRES);
  407b48:	2000      	movs	r0, #0
  407b4a:	4b0d      	ldr	r3, [pc, #52]	; (407b80 <sysclk_init+0x68>)
  407b4c:	4798      	blx	r3
		pll_wait_for_lock(1);
		pmc_mck_set_division(CONFIG_SYSCLK_DIV);
		pmc_switch_mck_to_upllck(CONFIG_SYSCLK_PRES);
	}
	/* Update the SystemFrequency variable */
	SystemCoreClockUpdate();
  407b4e:	4b0d      	ldr	r3, [pc, #52]	; (407b84 <sysclk_init+0x6c>)
  407b50:	4798      	blx	r3

	/* Set a flash wait state depending on the new cpu frequency */
	system_init_flash(sysclk_get_cpu_hz());
  407b52:	4802      	ldr	r0, [pc, #8]	; (407b5c <sysclk_init+0x44>)
  407b54:	4b02      	ldr	r3, [pc, #8]	; (407b60 <sysclk_init+0x48>)
  407b56:	4798      	blx	r3
  407b58:	bd10      	pop	{r4, pc}
  407b5a:	bf00      	nop
  407b5c:	11e1a300 	.word	0x11e1a300
  407b60:	004089c9 	.word	0x004089c9
  407b64:	00408491 	.word	0x00408491
  407b68:	004084e5 	.word	0x004084e5
  407b6c:	004084f5 	.word	0x004084f5
  407b70:	20183f01 	.word	0x20183f01
  407b74:	400e0600 	.word	0x400e0600
  407b78:	00408505 	.word	0x00408505
  407b7c:	004083f5 	.word	0x004083f5
  407b80:	0040842d 	.word	0x0040842d
  407b84:	004088bd 	.word	0x004088bd

00407b88 <_read>:
int __attribute__((weak))
_read (int file, char * ptr, int len); // Remove GCC compiler warning

int __attribute__((weak))
_read (int file, char * ptr, int len)
{
  407b88:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	int nChars = 0;

	if (file != 0) {
  407b8c:	b980      	cbnz	r0, 407bb0 <_read+0x28>
  407b8e:	460c      	mov	r4, r1
  407b90:	4690      	mov	r8, r2
		return -1;
	}

	for (; len > 0; --len) {
  407b92:	2a00      	cmp	r2, #0
  407b94:	dd0f      	ble.n	407bb6 <_read+0x2e>
  407b96:	188f      	adds	r7, r1, r2
		ptr_get(stdio_base, ptr);
  407b98:	4e08      	ldr	r6, [pc, #32]	; (407bbc <_read+0x34>)
  407b9a:	4d09      	ldr	r5, [pc, #36]	; (407bc0 <_read+0x38>)
  407b9c:	6830      	ldr	r0, [r6, #0]
  407b9e:	4621      	mov	r1, r4
  407ba0:	682b      	ldr	r3, [r5, #0]
  407ba2:	4798      	blx	r3
		ptr++;
  407ba4:	3401      	adds	r4, #1
	for (; len > 0; --len) {
  407ba6:	42bc      	cmp	r4, r7
  407ba8:	d1f8      	bne.n	407b9c <_read+0x14>
		nChars++;
	}
	return nChars;
}
  407baa:	4640      	mov	r0, r8
  407bac:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		return -1;
  407bb0:	f04f 38ff 	mov.w	r8, #4294967295
  407bb4:	e7f9      	b.n	407baa <_read+0x22>
	for (; len > 0; --len) {
  407bb6:	4680      	mov	r8, r0
  407bb8:	e7f7      	b.n	407baa <_read+0x22>
  407bba:	bf00      	nop
  407bbc:	2040cb00 	.word	0x2040cb00
  407bc0:	2040caf8 	.word	0x2040caf8

00407bc4 <_write>:
int __attribute__((weak))
_write (int file, const char *ptr, int len)
{
	int nChars = 0;

	if ((file != 1) && (file != 2) && (file!=3)) {
  407bc4:	3801      	subs	r0, #1
  407bc6:	2802      	cmp	r0, #2
  407bc8:	d815      	bhi.n	407bf6 <_write+0x32>
{
  407bca:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  407bce:	460e      	mov	r6, r1
  407bd0:	4614      	mov	r4, r2
		return -1;
	}

	for (; len != 0; --len) {
  407bd2:	b19a      	cbz	r2, 407bfc <_write+0x38>
  407bd4:	460d      	mov	r5, r1
		if (ptr_put(stdio_base, *ptr++) < 0) {
  407bd6:	f8df 8038 	ldr.w	r8, [pc, #56]	; 407c10 <_write+0x4c>
  407bda:	4f0c      	ldr	r7, [pc, #48]	; (407c0c <_write+0x48>)
  407bdc:	f8d8 0000 	ldr.w	r0, [r8]
  407be0:	f815 1b01 	ldrb.w	r1, [r5], #1
  407be4:	683b      	ldr	r3, [r7, #0]
  407be6:	4798      	blx	r3
  407be8:	2800      	cmp	r0, #0
  407bea:	db0a      	blt.n	407c02 <_write+0x3e>
  407bec:	1ba8      	subs	r0, r5, r6
	for (; len != 0; --len) {
  407bee:	3c01      	subs	r4, #1
  407bf0:	d1f4      	bne.n	407bdc <_write+0x18>
  407bf2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		return -1;
  407bf6:	f04f 30ff 	mov.w	r0, #4294967295
  407bfa:	4770      	bx	lr
	for (; len != 0; --len) {
  407bfc:	4610      	mov	r0, r2
  407bfe:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
			return -1;
  407c02:	f04f 30ff 	mov.w	r0, #4294967295
		}
		++nChars;
	}
	return nChars;
}
  407c06:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  407c0a:	bf00      	nop
  407c0c:	2040cafc 	.word	0x2040cafc
  407c10:	2040cb00 	.word	0x2040cb00

00407c14 <board_init>:
	__ISB();
}
#endif

void board_init(void)
{
  407c14:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
#ifndef CONF_BOARD_KEEP_WATCHDOG_AT_INIT
	/* Disable the watchdog */
	WDT->WDT_MR = WDT_MR_WDDIS;
  407c16:	f44f 4200 	mov.w	r2, #32768	; 0x8000
  407c1a:	4bb8      	ldr	r3, [pc, #736]	; (407efc <board_init+0x2e8>)
  407c1c:	605a      	str	r2, [r3, #4]
  __ASM volatile ("dmb");
  407c1e:	f3bf 8f5f 	dmb	sy
		mpu_cal_mpu_region_size(ITCM_END_ADDRESS - ITCM_START_ADDRESS) |
  407c22:	4fb7      	ldr	r7, [pc, #732]	; (407f00 <board_init+0x2ec>)
  407c24:	4638      	mov	r0, r7
  407c26:	4db7      	ldr	r5, [pc, #732]	; (407f04 <board_init+0x2f0>)
  407c28:	47a8      	blx	r5
	dw_region_attr =
  407c2a:	4eb7      	ldr	r6, [pc, #732]	; (407f08 <board_init+0x2f4>)
	mpu_set_region( dw_region_base_addr, dw_region_attr);
  407c2c:	ea40 0106 	orr.w	r1, r0, r6
  407c30:	2011      	movs	r0, #17
  407c32:	4cb6      	ldr	r4, [pc, #728]	; (407f0c <board_init+0x2f8>)
  407c34:	47a0      	blx	r4
		mpu_cal_mpu_region_size(IFLASH_END_ADDRESS - IFLASH_START_ADDRESS) |
  407c36:	48b6      	ldr	r0, [pc, #728]	; (407f10 <board_init+0x2fc>)
  407c38:	47a8      	blx	r5
	mpu_set_region( dw_region_base_addr, dw_region_attr);
  407c3a:	49b6      	ldr	r1, [pc, #728]	; (407f14 <board_init+0x300>)
  407c3c:	4301      	orrs	r1, r0
  407c3e:	48b6      	ldr	r0, [pc, #728]	; (407f18 <board_init+0x304>)
  407c40:	47a0      	blx	r4
		mpu_cal_mpu_region_size(DTCM_END_ADDRESS - DTCM_START_ADDRESS) |
  407c42:	4638      	mov	r0, r7
  407c44:	47a8      	blx	r5
	mpu_set_region( dw_region_base_addr, dw_region_attr);
  407c46:	ea40 0106 	orr.w	r1, r0, r6
  407c4a:	48b4      	ldr	r0, [pc, #720]	; (407f1c <board_init+0x308>)
  407c4c:	47a0      	blx	r4
		mpu_cal_mpu_region_size(SRAM_FIRST_END_ADDRESS - SRAM_FIRST_START_ADDRESS)
  407c4e:	48b4      	ldr	r0, [pc, #720]	; (407f20 <board_init+0x30c>)
  407c50:	47a8      	blx	r5
	dw_region_attr =
  407c52:	f106 7608 	add.w	r6, r6, #35651584	; 0x2200000
  407c56:	f506 3640 	add.w	r6, r6, #196608	; 0x30000
	mpu_set_region( dw_region_base_addr, dw_region_attr);
  407c5a:	ea40 0106 	orr.w	r1, r0, r6
  407c5e:	48b1      	ldr	r0, [pc, #708]	; (407f24 <board_init+0x310>)
  407c60:	47a0      	blx	r4
		mpu_cal_mpu_region_size(SRAM_SECOND_END_ADDRESS - SRAM_SECOND_START_ADDRESS) |
  407c62:	48b1      	ldr	r0, [pc, #708]	; (407f28 <board_init+0x314>)
  407c64:	47a8      	blx	r5
	mpu_set_region( dw_region_base_addr, dw_region_attr);
  407c66:	ea40 0106 	orr.w	r1, r0, r6
  407c6a:	48b0      	ldr	r0, [pc, #704]	; (407f2c <board_init+0x318>)
  407c6c:	47a0      	blx	r4
		mpu_cal_mpu_region_size(PERIPHERALS_END_ADDRESS - PERIPHERALS_START_ADDRESS)
  407c6e:	f06f 4060 	mvn.w	r0, #3758096384	; 0xe0000000
  407c72:	47a8      	blx	r5
	dw_region_attr = MPU_AP_FULL_ACCESS |
  407c74:	4eae      	ldr	r6, [pc, #696]	; (407f30 <board_init+0x31c>)
	mpu_set_region( dw_region_base_addr, dw_region_attr);
  407c76:	ea40 0106 	orr.w	r1, r0, r6
  407c7a:	48ae      	ldr	r0, [pc, #696]	; (407f34 <board_init+0x320>)
  407c7c:	47a0      	blx	r4
		mpu_cal_mpu_region_size(EXT_EBI_END_ADDRESS - EXT_EBI_START_ADDRESS) |
  407c7e:	f06f 4070 	mvn.w	r0, #4026531840	; 0xf0000000
  407c82:	47a8      	blx	r5
	dw_region_attr =
  407c84:	4fac      	ldr	r7, [pc, #688]	; (407f38 <board_init+0x324>)
	mpu_set_region( dw_region_base_addr, dw_region_attr);
  407c86:	ea40 0107 	orr.w	r1, r0, r7
  407c8a:	48ac      	ldr	r0, [pc, #688]	; (407f3c <board_init+0x328>)
  407c8c:	47a0      	blx	r4
		mpu_cal_mpu_region_size(SDRAM_END_ADDRESS - SDRAM_START_ADDRESS) |
  407c8e:	f06f 4070 	mvn.w	r0, #4026531840	; 0xf0000000
  407c92:	47a8      	blx	r5
	mpu_set_region( dw_region_base_addr, dw_region_attr);
  407c94:	49aa      	ldr	r1, [pc, #680]	; (407f40 <board_init+0x32c>)
  407c96:	4301      	orrs	r1, r0
  407c98:	48aa      	ldr	r0, [pc, #680]	; (407f44 <board_init+0x330>)
  407c9a:	47a0      	blx	r4
		mpu_cal_mpu_region_size(QSPI_END_ADDRESS - QSPI_START_ADDRESS) |
  407c9c:	f06f 4060 	mvn.w	r0, #3758096384	; 0xe0000000
  407ca0:	47a8      	blx	r5
	mpu_set_region( dw_region_base_addr, dw_region_attr);
  407ca2:	ea40 0107 	orr.w	r1, r0, r7
  407ca6:	48a8      	ldr	r0, [pc, #672]	; (407f48 <board_init+0x334>)
  407ca8:	47a0      	blx	r4
		mpu_cal_mpu_region_size(USBHSRAM_END_ADDRESS - USBHSRAM_START_ADDRESS) |
  407caa:	48a8      	ldr	r0, [pc, #672]	; (407f4c <board_init+0x338>)
  407cac:	47a8      	blx	r5
	mpu_set_region( dw_region_base_addr, dw_region_attr);
  407cae:	ea40 0106 	orr.w	r1, r0, r6
  407cb2:	48a7      	ldr	r0, [pc, #668]	; (407f50 <board_init+0x33c>)
  407cb4:	47a0      	blx	r4
	SCB->SHCSR |= (SCB_SHCSR_MEMFAULTENA_Msk | SCB_SHCSR_BUSFAULTENA_Msk
  407cb6:	4ca7      	ldr	r4, [pc, #668]	; (407f54 <board_init+0x340>)
  407cb8:	6a63      	ldr	r3, [r4, #36]	; 0x24
  407cba:	f443 23e0 	orr.w	r3, r3, #458752	; 0x70000
  407cbe:	6263      	str	r3, [r4, #36]	; 0x24
	mpu_enable( MPU_ENABLE | MPU_PRIVDEFENA);
  407cc0:	2005      	movs	r0, #5
  407cc2:	4ba5      	ldr	r3, [pc, #660]	; (407f58 <board_init+0x344>)
  407cc4:	4798      	blx	r3
  __ASM volatile ("dsb");
  407cc6:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb");
  407cca:	f3bf 8f6f 	isb	sy
  __ASM volatile ("dsb");
  407cce:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb");
  407cd2:	f3bf 8f6f 	isb	sy
    SCB->ICIALLU = 0;                       // invalidate I-Cache
  407cd6:	2300      	movs	r3, #0
  407cd8:	f8c4 3250 	str.w	r3, [r4, #592]	; 0x250
    SCB->CCR |=  SCB_CCR_IC_Msk;            // enable I-Cache
  407cdc:	6963      	ldr	r3, [r4, #20]
  407cde:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
  407ce2:	6163      	str	r3, [r4, #20]
  __ASM volatile ("dsb");
  407ce4:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb");
  407ce8:	f3bf 8f6f 	isb	sy
    ccsidr  = SCB->CCSIDR;
  407cec:	f8d4 7080 	ldr.w	r7, [r4, #128]	; 0x80
    sets    = CCSIDR_SETS(ccsidr);
  407cf0:	f3c7 364e 	ubfx	r6, r7, #13, #15
    sshift  = CCSIDR_LSSHIFT(ccsidr) + 4;
  407cf4:	f007 0007 	and.w	r0, r7, #7
  407cf8:	3004      	adds	r0, #4
    ways    = CCSIDR_WAYS(ccsidr);
  407cfa:	f3c7 07c9 	ubfx	r7, r7, #3, #10
  __ASM volatile ("clz %0, %1" : "=r" (result) : "r" (value) );
  407cfe:	fab7 fe87 	clz	lr, r7
    wshift  = __CLZ(ways) & 0x1f;
  407d02:	f00e 0e1f 	and.w	lr, lr, #31
  __ASM volatile ("dsb");
  407d06:	f3bf 8f4f 	dsb	sy
  407d0a:	f04f 34ff 	mov.w	r4, #4294967295
  407d0e:	fa04 fc00 	lsl.w	ip, r4, r0
  407d12:	fa06 f000 	lsl.w	r0, r6, r0
  407d16:	fa04 f40e 	lsl.w	r4, r4, lr
  407d1a:	fa07 fe0e 	lsl.w	lr, r7, lr
              SCB->DCISW = sw;
  407d1e:	4d8d      	ldr	r5, [pc, #564]	; (407f54 <board_init+0x340>)
         int32_t tmpways = ways;
  407d20:	463a      	mov	r2, r7
  407d22:	4673      	mov	r3, lr
              sw = ((tmpways << wshift) | (sets << sshift));
  407d24:	ea40 0103 	orr.w	r1, r0, r3
              SCB->DCISW = sw;
  407d28:	f8c5 1260 	str.w	r1, [r5, #608]	; 0x260
            } while(tmpways--);
  407d2c:	3a01      	subs	r2, #1
  407d2e:	4423      	add	r3, r4
  407d30:	f1b2 3fff 	cmp.w	r2, #4294967295
  407d34:	d1f6      	bne.n	407d24 <board_init+0x110>
        } while(sets--);
  407d36:	3e01      	subs	r6, #1
  407d38:	4460      	add	r0, ip
  407d3a:	f1b6 3fff 	cmp.w	r6, #4294967295
  407d3e:	d1ef      	bne.n	407d20 <board_init+0x10c>
  407d40:	f3bf 8f4f 	dsb	sy
    SCB->CCR |=  SCB_CCR_DC_Msk;            // enable D-Cache
  407d44:	4b83      	ldr	r3, [pc, #524]	; (407f54 <board_init+0x340>)
  407d46:	695a      	ldr	r2, [r3, #20]
  407d48:	f442 3280 	orr.w	r2, r2, #65536	; 0x10000
  407d4c:	615a      	str	r2, [r3, #20]
  407d4e:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb");
  407d52:	f3bf 8f6f 	isb	sy
		*dst++ = *src++;
	}
#endif
#else
	/* TCM Configuration */
	EFC->EEFC_FCR = (EEFC_FCR_FKEY_PASSWD | EEFC_FCR_FCMD_CGPB 
  407d56:	4a81      	ldr	r2, [pc, #516]	; (407f5c <board_init+0x348>)
  407d58:	4981      	ldr	r1, [pc, #516]	; (407f60 <board_init+0x34c>)
  407d5a:	6051      	str	r1, [r2, #4]
					| EEFC_FCR_FARG(8));
	EFC->EEFC_FCR = (EEFC_FCR_FKEY_PASSWD | EEFC_FCR_FCMD_CGPB 
  407d5c:	f5a1 7180 	sub.w	r1, r1, #256	; 0x100
  407d60:	6051      	str	r1, [r2, #4]
  __ASM volatile ("dsb");
  407d62:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb");
  407d66:	f3bf 8f6f 	isb	sy
	SCB->ITCMCR &= ~(uint32_t)(1UL);
  407d6a:	f8d3 2290 	ldr.w	r2, [r3, #656]	; 0x290
  407d6e:	f022 0201 	bic.w	r2, r2, #1
  407d72:	f8c3 2290 	str.w	r2, [r3, #656]	; 0x290
	SCB->DTCMCR &= ~(uint32_t)SCB_DTCMCR_EN_Msk;
  407d76:	f8d3 2294 	ldr.w	r2, [r3, #660]	; 0x294
  407d7a:	f022 0201 	bic.w	r2, r2, #1
  407d7e:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  __ASM volatile ("dsb");
  407d82:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb");
  407d86:	f3bf 8f6f 	isb	sy
  407d8a:	200a      	movs	r0, #10
  407d8c:	4c75      	ldr	r4, [pc, #468]	; (407f64 <board_init+0x350>)
  407d8e:	47a0      	blx	r4
  407d90:	200b      	movs	r0, #11
  407d92:	47a0      	blx	r4
  407d94:	200c      	movs	r0, #12
  407d96:	47a0      	blx	r4
  407d98:	2010      	movs	r0, #16
  407d9a:	47a0      	blx	r4
  407d9c:	2011      	movs	r0, #17
  407d9e:	47a0      	blx	r4
		base->PIO_OER = arch_ioport_pin_to_mask(pin);
  407da0:	4a71      	ldr	r2, [pc, #452]	; (407f68 <board_init+0x354>)
  407da2:	f44f 7380 	mov.w	r3, #256	; 0x100
  407da6:	6113      	str	r3, [r2, #16]
	base->PIO_OWER = arch_ioport_pin_to_mask(pin);
  407da8:	f8c2 30a0 	str.w	r3, [r2, #160]	; 0xa0
		base->PIO_SODR = arch_ioport_pin_to_mask(pin);
  407dac:	6313      	str	r3, [r2, #48]	; 0x30
		base->PIO_ODR = arch_ioport_pin_to_mask(pin);
  407dae:	4b6f      	ldr	r3, [pc, #444]	; (407f6c <board_init+0x358>)
  407db0:	f44f 6100 	mov.w	r1, #2048	; 0x800
  407db4:	6159      	str	r1, [r3, #20]
	base->PIO_OWER = arch_ioport_pin_to_mask(pin);
  407db6:	f8c3 10a0 	str.w	r1, [r3, #160]	; 0xa0
		base->PIO_PUER = mask;
  407dba:	6659      	str	r1, [r3, #100]	; 0x64
		base->PIO_PPDDR = mask;
  407dbc:	f8c3 1090 	str.w	r1, [r3, #144]	; 0x90
		base->PIO_MDDR = mask;
  407dc0:	6559      	str	r1, [r3, #84]	; 0x54
		base->PIO_IFER = mask;
  407dc2:	6219      	str	r1, [r3, #32]
		base->PIO_IFSCER = mask;
  407dc4:	f8c3 1084 	str.w	r1, [r3, #132]	; 0x84
		base->PIO_ABCDSR[0] &= ~mask;
  407dc8:	6f18      	ldr	r0, [r3, #112]	; 0x70
  407dca:	f420 6000 	bic.w	r0, r0, #2048	; 0x800
  407dce:	6718      	str	r0, [r3, #112]	; 0x70
		base->PIO_ABCDSR[1] &= ~mask;
  407dd0:	6f58      	ldr	r0, [r3, #116]	; 0x74
  407dd2:	f420 6000 	bic.w	r0, r0, #2048	; 0x800
  407dd6:	6758      	str	r0, [r3, #116]	; 0x74
	case IOPORT_SENSE_FALLING:
		base->PIO_ESR = mask;
		base->PIO_FELLSR = mask;
		break;
	case IOPORT_SENSE_RISING:
		base->PIO_ESR = mask;
  407dd8:	f8c3 10c0 	str.w	r1, [r3, #192]	; 0xc0
		base->PIO_REHLSR = mask;
  407ddc:	f8c3 10d4 	str.w	r1, [r3, #212]	; 0xd4
		break;
	default:
		base->PIO_AIMDR = mask;
		return;
	}
	base->PIO_AIMER = mask;
  407de0:	f8c3 10b0 	str.w	r1, [r3, #176]	; 0xb0
		base->PIO_PUDR = mask;
  407de4:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
  407de8:	6619      	str	r1, [r3, #96]	; 0x60
		base->PIO_PPDDR = mask;
  407dea:	f8c3 1090 	str.w	r1, [r3, #144]	; 0x90
		base->PIO_MDDR = mask;
  407dee:	6559      	str	r1, [r3, #84]	; 0x54
		base->PIO_IFDR = mask;
  407df0:	6259      	str	r1, [r3, #36]	; 0x24
		base->PIO_IFSCDR = mask;
  407df2:	f8c3 1080 	str.w	r1, [r3, #128]	; 0x80
		base->PIO_ABCDSR[0] &= ~mask;
  407df6:	6f18      	ldr	r0, [r3, #112]	; 0x70
  407df8:	f420 1000 	bic.w	r0, r0, #2097152	; 0x200000
  407dfc:	6718      	str	r0, [r3, #112]	; 0x70
		base->PIO_ABCDSR[1] &= ~mask;
  407dfe:	6f58      	ldr	r0, [r3, #116]	; 0x74
  407e00:	f420 1000 	bic.w	r0, r0, #2097152	; 0x200000
  407e04:	6758      	str	r0, [r3, #116]	; 0x74
	arch_ioport_port_to_base(port)->PIO_PDR = mask;
  407e06:	6059      	str	r1, [r3, #4]
			GPIO_PUSH_BUTTON_1_SENSE);

#ifdef CONF_BOARD_UART_CONSOLE
	/* Configure UART pins */
	ioport_set_pin_peripheral_mode(USART1_RXD_GPIO, USART1_RXD_FLAGS);
	MATRIX->CCFG_SYSIO |= CCFG_SYSIO_SYSIO4;
  407e08:	4859      	ldr	r0, [pc, #356]	; (407f70 <board_init+0x35c>)
  407e0a:	f8d0 1114 	ldr.w	r1, [r0, #276]	; 0x114
  407e0e:	f041 0110 	orr.w	r1, r1, #16
  407e12:	f8c0 1114 	str.w	r1, [r0, #276]	; 0x114
		base->PIO_PUDR = mask;
  407e16:	4957      	ldr	r1, [pc, #348]	; (407f74 <board_init+0x360>)
  407e18:	2010      	movs	r0, #16
  407e1a:	6608      	str	r0, [r1, #96]	; 0x60
		base->PIO_PPDDR = mask;
  407e1c:	f8c1 0090 	str.w	r0, [r1, #144]	; 0x90
		base->PIO_MDDR = mask;
  407e20:	6548      	str	r0, [r1, #84]	; 0x54
		base->PIO_IFDR = mask;
  407e22:	6248      	str	r0, [r1, #36]	; 0x24
		base->PIO_IFSCDR = mask;
  407e24:	f8c1 0080 	str.w	r0, [r1, #128]	; 0x80
		base->PIO_ABCDSR[0] |= mask;
  407e28:	6f0c      	ldr	r4, [r1, #112]	; 0x70
  407e2a:	4304      	orrs	r4, r0
  407e2c:	670c      	str	r4, [r1, #112]	; 0x70
		base->PIO_ABCDSR[1] |= mask;
  407e2e:	6f4c      	ldr	r4, [r1, #116]	; 0x74
  407e30:	4304      	orrs	r4, r0
  407e32:	674c      	str	r4, [r1, #116]	; 0x74
	arch_ioport_port_to_base(port)->PIO_PDR = mask;
  407e34:	6048      	str	r0, [r1, #4]
		base->PIO_PUDR = mask;
  407e36:	f04f 5180 	mov.w	r1, #268435456	; 0x10000000
  407e3a:	6619      	str	r1, [r3, #96]	; 0x60
		base->PIO_PPDDR = mask;
  407e3c:	f8c3 1090 	str.w	r1, [r3, #144]	; 0x90
		base->PIO_MDDR = mask;
  407e40:	6559      	str	r1, [r3, #84]	; 0x54
		base->PIO_IFDR = mask;
  407e42:	6259      	str	r1, [r3, #36]	; 0x24
		base->PIO_IFSCDR = mask;
  407e44:	f8c3 1080 	str.w	r1, [r3, #128]	; 0x80
		base->PIO_ABCDSR[0] &= ~mask;
  407e48:	6f18      	ldr	r0, [r3, #112]	; 0x70
  407e4a:	f020 5080 	bic.w	r0, r0, #268435456	; 0x10000000
  407e4e:	6718      	str	r0, [r3, #112]	; 0x70
		base->PIO_ABCDSR[1] |= mask;
  407e50:	6f58      	ldr	r0, [r3, #116]	; 0x74
  407e52:	4308      	orrs	r0, r1
  407e54:	6758      	str	r0, [r3, #116]	; 0x74
	arch_ioport_port_to_base(port)->PIO_PDR = mask;
  407e56:	6059      	str	r1, [r3, #4]
		base->PIO_PUDR = mask;
  407e58:	f04f 7100 	mov.w	r1, #33554432	; 0x2000000
  407e5c:	6619      	str	r1, [r3, #96]	; 0x60
		base->PIO_PPDDR = mask;
  407e5e:	f8c3 1090 	str.w	r1, [r3, #144]	; 0x90
		base->PIO_MDDR = mask;
  407e62:	6559      	str	r1, [r3, #84]	; 0x54
		base->PIO_IFDR = mask;
  407e64:	6259      	str	r1, [r3, #36]	; 0x24
		base->PIO_IFSCDR = mask;
  407e66:	f8c3 1080 	str.w	r1, [r3, #128]	; 0x80
		base->PIO_ABCDSR[0] |= mask;
  407e6a:	6f18      	ldr	r0, [r3, #112]	; 0x70
  407e6c:	4308      	orrs	r0, r1
  407e6e:	6718      	str	r0, [r3, #112]	; 0x70
		base->PIO_ABCDSR[1] |= mask;
  407e70:	6f58      	ldr	r0, [r3, #116]	; 0x74
  407e72:	4308      	orrs	r0, r1
  407e74:	6758      	str	r0, [r3, #116]	; 0x74
	arch_ioport_port_to_base(port)->PIO_PDR = mask;
  407e76:	6059      	str	r1, [r3, #4]
		base->PIO_PUDR = mask;
  407e78:	f04f 4180 	mov.w	r1, #1073741824	; 0x40000000
  407e7c:	6619      	str	r1, [r3, #96]	; 0x60
		base->PIO_PPDDR = mask;
  407e7e:	f8c3 1090 	str.w	r1, [r3, #144]	; 0x90
		base->PIO_MDDR = mask;
  407e82:	6559      	str	r1, [r3, #84]	; 0x54
		base->PIO_IFDR = mask;
  407e84:	6259      	str	r1, [r3, #36]	; 0x24
		base->PIO_IFSCDR = mask;
  407e86:	f8c3 1080 	str.w	r1, [r3, #128]	; 0x80
		base->PIO_ABCDSR[0] &= ~mask;
  407e8a:	6f18      	ldr	r0, [r3, #112]	; 0x70
  407e8c:	f020 4080 	bic.w	r0, r0, #1073741824	; 0x40000000
  407e90:	6718      	str	r0, [r3, #112]	; 0x70
		base->PIO_ABCDSR[1] |= mask;
  407e92:	6f58      	ldr	r0, [r3, #116]	; 0x74
  407e94:	4308      	orrs	r0, r1
  407e96:	6758      	str	r0, [r3, #116]	; 0x74
	arch_ioport_port_to_base(port)->PIO_PDR = mask;
  407e98:	6059      	str	r1, [r3, #4]
		base->PIO_PUDR = mask;
  407e9a:	f04f 4100 	mov.w	r1, #2147483648	; 0x80000000
  407e9e:	6619      	str	r1, [r3, #96]	; 0x60
		base->PIO_PPDDR = mask;
  407ea0:	f8c3 1090 	str.w	r1, [r3, #144]	; 0x90
		base->PIO_MDDR = mask;
  407ea4:	6559      	str	r1, [r3, #84]	; 0x54
		base->PIO_IFDR = mask;
  407ea6:	6259      	str	r1, [r3, #36]	; 0x24
		base->PIO_IFSCDR = mask;
  407ea8:	f8c3 1080 	str.w	r1, [r3, #128]	; 0x80
		base->PIO_ABCDSR[0] &= ~mask;
  407eac:	6f18      	ldr	r0, [r3, #112]	; 0x70
  407eae:	f020 4000 	bic.w	r0, r0, #2147483648	; 0x80000000
  407eb2:	6718      	str	r0, [r3, #112]	; 0x70
		base->PIO_ABCDSR[1] |= mask;
  407eb4:	6f58      	ldr	r0, [r3, #116]	; 0x74
  407eb6:	4308      	orrs	r0, r1
  407eb8:	6758      	str	r0, [r3, #116]	; 0x74
	arch_ioport_port_to_base(port)->PIO_PDR = mask;
  407eba:	6059      	str	r1, [r3, #4]
		base->PIO_PUDR = mask;
  407ebc:	f04f 6180 	mov.w	r1, #67108864	; 0x4000000
  407ec0:	6619      	str	r1, [r3, #96]	; 0x60
		base->PIO_PPDDR = mask;
  407ec2:	f8c3 1090 	str.w	r1, [r3, #144]	; 0x90
		base->PIO_MDDR = mask;
  407ec6:	6559      	str	r1, [r3, #84]	; 0x54
		base->PIO_IFDR = mask;
  407ec8:	6259      	str	r1, [r3, #36]	; 0x24
		base->PIO_IFSCDR = mask;
  407eca:	f8c3 1080 	str.w	r1, [r3, #128]	; 0x80
		base->PIO_ABCDSR[0] &= ~mask;
  407ece:	6f18      	ldr	r0, [r3, #112]	; 0x70
  407ed0:	f020 6080 	bic.w	r0, r0, #67108864	; 0x4000000
  407ed4:	6718      	str	r0, [r3, #112]	; 0x70
		base->PIO_ABCDSR[1] |= mask;
  407ed6:	6f58      	ldr	r0, [r3, #116]	; 0x74
  407ed8:	4308      	orrs	r0, r1
  407eda:	6758      	str	r0, [r3, #116]	; 0x74
	arch_ioport_port_to_base(port)->PIO_PDR = mask;
  407edc:	6059      	str	r1, [r3, #4]
		base->PIO_PUDR = mask;
  407ede:	f04f 6100 	mov.w	r1, #134217728	; 0x8000000
  407ee2:	6619      	str	r1, [r3, #96]	; 0x60
		base->PIO_PPDDR = mask;
  407ee4:	f8c3 1090 	str.w	r1, [r3, #144]	; 0x90
		base->PIO_MDDR = mask;
  407ee8:	6559      	str	r1, [r3, #84]	; 0x54
		base->PIO_IFDR = mask;
  407eea:	6259      	str	r1, [r3, #36]	; 0x24
		base->PIO_IFSCDR = mask;
  407eec:	f8c3 1080 	str.w	r1, [r3, #128]	; 0x80
		base->PIO_ABCDSR[0] &= ~mask;
  407ef0:	6f18      	ldr	r0, [r3, #112]	; 0x70
  407ef2:	f020 6000 	bic.w	r0, r0, #134217728	; 0x8000000
  407ef6:	6718      	str	r0, [r3, #112]	; 0x70
  407ef8:	e03e      	b.n	407f78 <board_init+0x364>
  407efa:	bf00      	nop
  407efc:	400e1850 	.word	0x400e1850
  407f00:	003fffff 	.word	0x003fffff
  407f04:	00407fc5 	.word	0x00407fc5
  407f08:	01000001 	.word	0x01000001
  407f0c:	00407fb9 	.word	0x00407fb9
  407f10:	001fffff 	.word	0x001fffff
  407f14:	06230001 	.word	0x06230001
  407f18:	00400012 	.word	0x00400012
  407f1c:	20000013 	.word	0x20000013
  407f20:	0003ffff 	.word	0x0003ffff
  407f24:	20400014 	.word	0x20400014
  407f28:	0001ffff 	.word	0x0001ffff
  407f2c:	20440015 	.word	0x20440015
  407f30:	13010001 	.word	0x13010001
  407f34:	40000016 	.word	0x40000016
  407f38:	03000001 	.word	0x03000001
  407f3c:	60000017 	.word	0x60000017
  407f40:	03250001 	.word	0x03250001
  407f44:	70000018 	.word	0x70000018
  407f48:	80000019 	.word	0x80000019
  407f4c:	000fffff 	.word	0x000fffff
  407f50:	a010001a 	.word	0xa010001a
  407f54:	e000ed00 	.word	0xe000ed00
  407f58:	00407fad 	.word	0x00407fad
  407f5c:	400e0c00 	.word	0x400e0c00
  407f60:	5a00080c 	.word	0x5a00080c
  407f64:	00408515 	.word	0x00408515
  407f68:	400e1200 	.word	0x400e1200
  407f6c:	400e0e00 	.word	0x400e0e00
  407f70:	40088000 	.word	0x40088000
  407f74:	400e1000 	.word	0x400e1000
		base->PIO_ABCDSR[1] |= mask;
  407f78:	6f58      	ldr	r0, [r3, #116]	; 0x74
  407f7a:	4308      	orrs	r0, r1
  407f7c:	6758      	str	r0, [r3, #116]	; 0x74
	arch_ioport_port_to_base(port)->PIO_PDR = mask;
  407f7e:	6059      	str	r1, [r3, #4]
		base->PIO_ODR = arch_ioport_pin_to_mask(pin);
  407f80:	f44f 3380 	mov.w	r3, #65536	; 0x10000
  407f84:	6153      	str	r3, [r2, #20]
	base->PIO_OWER = arch_ioport_pin_to_mask(pin);
  407f86:	f8c2 30a0 	str.w	r3, [r2, #160]	; 0xa0
		base->PIO_PUER = mask;
  407f8a:	6653      	str	r3, [r2, #100]	; 0x64
		base->PIO_PPDDR = mask;
  407f8c:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
		base->PIO_MDDR = mask;
  407f90:	6553      	str	r3, [r2, #84]	; 0x54
		base->PIO_IFDR = mask;
  407f92:	6253      	str	r3, [r2, #36]	; 0x24
		base->PIO_IFSCDR = mask;
  407f94:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80
		base->PIO_ABCDSR[0] &= ~mask;
  407f98:	6f13      	ldr	r3, [r2, #112]	; 0x70
  407f9a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
  407f9e:	6713      	str	r3, [r2, #112]	; 0x70
		base->PIO_ABCDSR[1] &= ~mask;
  407fa0:	6f53      	ldr	r3, [r2, #116]	; 0x74
  407fa2:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
  407fa6:	6753      	str	r3, [r2, #116]	; 0x74
  407fa8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  407faa:	bf00      	nop

00407fac <mpu_enable>:
 *
 * \param dwMPUEnable  Enable/Disable the memory region.
 */
void mpu_enable(uint32_t dw_mpu_enable)
{
	MPU->CTRL = dw_mpu_enable ;
  407fac:	4b01      	ldr	r3, [pc, #4]	; (407fb4 <mpu_enable+0x8>)
  407fae:	6058      	str	r0, [r3, #4]
  407fb0:	4770      	bx	lr
  407fb2:	bf00      	nop
  407fb4:	e000ed90 	.word	0xe000ed90

00407fb8 <mpu_set_region>:
 * \param dwRegionBaseAddr  Memory region base address.
 * \param dwRegionAttr  Memory region attributes.
 */
void mpu_set_region(uint32_t dw_region_base_addr, uint32_t dw_region_attr)
{
	MPU->RBAR = dw_region_base_addr;
  407fb8:	4b01      	ldr	r3, [pc, #4]	; (407fc0 <mpu_set_region+0x8>)
  407fba:	60d8      	str	r0, [r3, #12]
	MPU->RASR = dw_region_attr;
  407fbc:	6119      	str	r1, [r3, #16]
  407fbe:	4770      	bx	lr
  407fc0:	e000ed90 	.word	0xe000ed90

00407fc4 <mpu_cal_mpu_region_size>:
{
	uint32_t dwRegionSize = 32;
	uint32_t dwReturnValue = 4;

	while( dwReturnValue < 31 ) {
		if( dw_actual_size_in_bytes <= dwRegionSize ) {
  407fc4:	2820      	cmp	r0, #32
  407fc6:	d909      	bls.n	407fdc <mpu_cal_mpu_region_size+0x18>
  407fc8:	2304      	movs	r3, #4
  407fca:	2220      	movs	r2, #32
			break;
		} else {
			dwReturnValue++;
  407fcc:	3301      	adds	r3, #1
		}
		dwRegionSize <<= 1;
  407fce:	0052      	lsls	r2, r2, #1
		if( dw_actual_size_in_bytes <= dwRegionSize ) {
  407fd0:	4290      	cmp	r0, r2
  407fd2:	d901      	bls.n	407fd8 <mpu_cal_mpu_region_size+0x14>
  407fd4:	2b1e      	cmp	r3, #30
  407fd6:	d9f9      	bls.n	407fcc <mpu_cal_mpu_region_size+0x8>
	}

	return ( dwReturnValue << 1 );
}
  407fd8:	0058      	lsls	r0, r3, #1
  407fda:	4770      	bx	lr
	uint32_t dwReturnValue = 4;
  407fdc:	2304      	movs	r3, #4
  407fde:	e7fb      	b.n	407fd8 <mpu_cal_mpu_region_size+0x14>

00407fe0 <pio_pull_up>:
 */
void pio_pull_up(Pio *p_pio, const uint32_t ul_mask,
		const uint32_t ul_pull_up_enable)
{
	/* Enable the pull-up(s) if necessary */
	if (ul_pull_up_enable) {
  407fe0:	b90a      	cbnz	r2, 407fe6 <pio_pull_up+0x6>
		p_pio->PIO_PUER = ul_mask;
	} else {
		p_pio->PIO_PUDR = ul_mask;
  407fe2:	6601      	str	r1, [r0, #96]	; 0x60
  407fe4:	4770      	bx	lr
		p_pio->PIO_PUER = ul_mask;
  407fe6:	6641      	str	r1, [r0, #100]	; 0x64
  407fe8:	4770      	bx	lr

00407fea <pio_set_peripheral>:
		const uint32_t ul_mask)
{
	uint32_t ul_sr;

	/* Disable interrupts on the pin(s) */
	p_pio->PIO_IDR = ul_mask;
  407fea:	6442      	str	r2, [r0, #68]	; 0x44

#if (SAM3S || SAM3N || SAM4S || SAM4E || SAM4N || SAM4C || SAMG || SAM4CP || SAM4CM || SAMV71 || SAMV70 || SAME70 || SAMS70)
	switch (ul_type) {
  407fec:	f1b1 5fc0 	cmp.w	r1, #402653184	; 0x18000000
  407ff0:	d03a      	beq.n	408068 <pio_set_peripheral+0x7e>
  407ff2:	d813      	bhi.n	40801c <pio_set_peripheral+0x32>
  407ff4:	f1b1 6f00 	cmp.w	r1, #134217728	; 0x8000000
  407ff8:	d025      	beq.n	408046 <pio_set_peripheral+0x5c>
  407ffa:	f1b1 5f80 	cmp.w	r1, #268435456	; 0x10000000
  407ffe:	d10a      	bne.n	408016 <pio_set_peripheral+0x2c>

		ul_sr = p_pio->PIO_ABCDSR[1];
		p_pio->PIO_ABCDSR[1] &= (~ul_mask & ul_sr);
		break;
	case PIO_PERIPH_B:
		ul_sr = p_pio->PIO_ABCDSR[0];
  408000:	6f03      	ldr	r3, [r0, #112]	; 0x70
		p_pio->PIO_ABCDSR[0] = (ul_mask | ul_sr);
  408002:	4313      	orrs	r3, r2
  408004:	6703      	str	r3, [r0, #112]	; 0x70

		ul_sr = p_pio->PIO_ABCDSR[1];
  408006:	6f43      	ldr	r3, [r0, #116]	; 0x74
		p_pio->PIO_ABCDSR[1] &= (~ul_mask & ul_sr);
  408008:	6f41      	ldr	r1, [r0, #116]	; 0x74
  40800a:	400b      	ands	r3, r1
  40800c:	ea23 0302 	bic.w	r3, r3, r2
  408010:	6743      	str	r3, [r0, #116]	; 0x74
#else
#error "Unsupported device"
#endif

	/* Remove the pins from under the control of PIO */
	p_pio->PIO_PDR = ul_mask;
  408012:	6042      	str	r2, [r0, #4]
  408014:	4770      	bx	lr
	switch (ul_type) {
  408016:	2900      	cmp	r1, #0
  408018:	d1fb      	bne.n	408012 <pio_set_peripheral+0x28>
  40801a:	4770      	bx	lr
  40801c:	f1b1 5f20 	cmp.w	r1, #671088640	; 0x28000000
  408020:	d021      	beq.n	408066 <pio_set_peripheral+0x7c>
  408022:	d809      	bhi.n	408038 <pio_set_peripheral+0x4e>
  408024:	f1b1 5f00 	cmp.w	r1, #536870912	; 0x20000000
  408028:	d1f3      	bne.n	408012 <pio_set_peripheral+0x28>
		ul_sr = p_pio->PIO_ABCDSR[0];
  40802a:	6f03      	ldr	r3, [r0, #112]	; 0x70
		p_pio->PIO_ABCDSR[0] = (ul_mask | ul_sr);
  40802c:	4313      	orrs	r3, r2
  40802e:	6703      	str	r3, [r0, #112]	; 0x70
		ul_sr = p_pio->PIO_ABCDSR[1];
  408030:	6f43      	ldr	r3, [r0, #116]	; 0x74
		p_pio->PIO_ABCDSR[1] = (ul_mask | ul_sr);
  408032:	4313      	orrs	r3, r2
  408034:	6743      	str	r3, [r0, #116]	; 0x74
		break;
  408036:	e7ec      	b.n	408012 <pio_set_peripheral+0x28>
	switch (ul_type) {
  408038:	f1b1 5f40 	cmp.w	r1, #805306368	; 0x30000000
  40803c:	d013      	beq.n	408066 <pio_set_peripheral+0x7c>
  40803e:	f1b1 5f60 	cmp.w	r1, #939524096	; 0x38000000
  408042:	d010      	beq.n	408066 <pio_set_peripheral+0x7c>
  408044:	e7e5      	b.n	408012 <pio_set_peripheral+0x28>
{
  408046:	b410      	push	{r4}
		ul_sr = p_pio->PIO_ABCDSR[0];
  408048:	6f01      	ldr	r1, [r0, #112]	; 0x70
		p_pio->PIO_ABCDSR[0] &= (~ul_mask & ul_sr);
  40804a:	6f04      	ldr	r4, [r0, #112]	; 0x70
  40804c:	43d3      	mvns	r3, r2
  40804e:	4021      	ands	r1, r4
  408050:	461c      	mov	r4, r3
  408052:	4019      	ands	r1, r3
  408054:	6701      	str	r1, [r0, #112]	; 0x70
		ul_sr = p_pio->PIO_ABCDSR[1];
  408056:	6f43      	ldr	r3, [r0, #116]	; 0x74
		p_pio->PIO_ABCDSR[1] &= (~ul_mask & ul_sr);
  408058:	6f41      	ldr	r1, [r0, #116]	; 0x74
  40805a:	400b      	ands	r3, r1
  40805c:	4023      	ands	r3, r4
  40805e:	6743      	str	r3, [r0, #116]	; 0x74
	p_pio->PIO_PDR = ul_mask;
  408060:	6042      	str	r2, [r0, #4]
}
  408062:	f85d 4b04 	ldr.w	r4, [sp], #4
  408066:	4770      	bx	lr
		ul_sr = p_pio->PIO_ABCDSR[0];
  408068:	6f03      	ldr	r3, [r0, #112]	; 0x70
		p_pio->PIO_ABCDSR[0] &= (~ul_mask & ul_sr);
  40806a:	6f01      	ldr	r1, [r0, #112]	; 0x70
  40806c:	400b      	ands	r3, r1
  40806e:	ea23 0302 	bic.w	r3, r3, r2
  408072:	6703      	str	r3, [r0, #112]	; 0x70
		ul_sr = p_pio->PIO_ABCDSR[1];
  408074:	6f43      	ldr	r3, [r0, #116]	; 0x74
		p_pio->PIO_ABCDSR[1] = (ul_mask | ul_sr);
  408076:	4313      	orrs	r3, r2
  408078:	6743      	str	r3, [r0, #116]	; 0x74
		break;
  40807a:	e7ca      	b.n	408012 <pio_set_peripheral+0x28>

0040807c <pio_set_input>:
 * \param p_pio Pointer to a PIO instance.
 * \param ul_mask Interrupt sources bit map.
 */
void pio_disable_interrupt(Pio *p_pio, const uint32_t ul_mask)
{
	p_pio->PIO_IDR = ul_mask;
  40807c:	6441      	str	r1, [r0, #68]	; 0x44
	if (ul_pull_up_enable) {
  40807e:	f012 0f01 	tst.w	r2, #1
  408082:	d10d      	bne.n	4080a0 <pio_set_input+0x24>
		p_pio->PIO_PUDR = ul_mask;
  408084:	6601      	str	r1, [r0, #96]	; 0x60
	if (ul_attribute & (PIO_DEGLITCH | PIO_DEBOUNCE)) {
  408086:	f012 0f0a 	tst.w	r2, #10
  40808a:	d00b      	beq.n	4080a4 <pio_set_input+0x28>
		p_pio->PIO_IFER = ul_mask;
  40808c:	6201      	str	r1, [r0, #32]
	if (ul_attribute & PIO_DEGLITCH) {
  40808e:	f012 0f02 	tst.w	r2, #2
  408092:	d109      	bne.n	4080a8 <pio_set_input+0x2c>
		if (ul_attribute & PIO_DEBOUNCE) {
  408094:	f012 0f08 	tst.w	r2, #8
  408098:	d008      	beq.n	4080ac <pio_set_input+0x30>
			p_pio->PIO_IFSCER = ul_mask;
  40809a:	f8c0 1084 	str.w	r1, [r0, #132]	; 0x84
  40809e:	e005      	b.n	4080ac <pio_set_input+0x30>
		p_pio->PIO_PUER = ul_mask;
  4080a0:	6641      	str	r1, [r0, #100]	; 0x64
  4080a2:	e7f0      	b.n	408086 <pio_set_input+0xa>
		p_pio->PIO_IFDR = ul_mask;
  4080a4:	6241      	str	r1, [r0, #36]	; 0x24
  4080a6:	e7f2      	b.n	40808e <pio_set_input+0x12>
		p_pio->PIO_IFSCDR = ul_mask;
  4080a8:	f8c0 1080 	str.w	r1, [r0, #128]	; 0x80
	p_pio->PIO_ODR = ul_mask;
  4080ac:	6141      	str	r1, [r0, #20]
	p_pio->PIO_PER = ul_mask;
  4080ae:	6001      	str	r1, [r0, #0]
  4080b0:	4770      	bx	lr

004080b2 <pio_set_output>:
{
  4080b2:	b410      	push	{r4}
  4080b4:	9c01      	ldr	r4, [sp, #4]
	p_pio->PIO_IDR = ul_mask;
  4080b6:	6441      	str	r1, [r0, #68]	; 0x44
	if (ul_pull_up_enable) {
  4080b8:	b94c      	cbnz	r4, 4080ce <pio_set_output+0x1c>
		p_pio->PIO_PUDR = ul_mask;
  4080ba:	6601      	str	r1, [r0, #96]	; 0x60
	if (ul_multidrive_enable) {
  4080bc:	b14b      	cbz	r3, 4080d2 <pio_set_output+0x20>
		p_pio->PIO_MDER = ul_mask;
  4080be:	6501      	str	r1, [r0, #80]	; 0x50
	if (ul_default_level) {
  4080c0:	b94a      	cbnz	r2, 4080d6 <pio_set_output+0x24>
		p_pio->PIO_CODR = ul_mask;
  4080c2:	6341      	str	r1, [r0, #52]	; 0x34
	p_pio->PIO_OER = ul_mask;
  4080c4:	6101      	str	r1, [r0, #16]
	p_pio->PIO_PER = ul_mask;
  4080c6:	6001      	str	r1, [r0, #0]
}
  4080c8:	f85d 4b04 	ldr.w	r4, [sp], #4
  4080cc:	4770      	bx	lr
		p_pio->PIO_PUER = ul_mask;
  4080ce:	6641      	str	r1, [r0, #100]	; 0x64
  4080d0:	e7f4      	b.n	4080bc <pio_set_output+0xa>
		p_pio->PIO_MDDR = ul_mask;
  4080d2:	6541      	str	r1, [r0, #84]	; 0x54
  4080d4:	e7f4      	b.n	4080c0 <pio_set_output+0xe>
		p_pio->PIO_SODR = ul_mask;
  4080d6:	6301      	str	r1, [r0, #48]	; 0x30
  4080d8:	e7f4      	b.n	4080c4 <pio_set_output+0x12>

004080da <pio_configure_interrupt>:
	if (ul_attr & PIO_IT_AIME) {
  4080da:	f012 0f10 	tst.w	r2, #16
  4080de:	d012      	beq.n	408106 <pio_configure_interrupt+0x2c>
		p_pio->PIO_AIMER = ul_mask;
  4080e0:	f8c0 10b0 	str.w	r1, [r0, #176]	; 0xb0
		if (ul_attr & PIO_IT_RE_OR_HL) {
  4080e4:	f012 0f20 	tst.w	r2, #32
  4080e8:	d007      	beq.n	4080fa <pio_configure_interrupt+0x20>
			p_pio->PIO_REHLSR = ul_mask;
  4080ea:	f8c0 10d4 	str.w	r1, [r0, #212]	; 0xd4
		if (ul_attr & PIO_IT_EDGE) {
  4080ee:	f012 0f40 	tst.w	r2, #64	; 0x40
  4080f2:	d005      	beq.n	408100 <pio_configure_interrupt+0x26>
			p_pio->PIO_ESR = ul_mask;
  4080f4:	f8c0 10c0 	str.w	r1, [r0, #192]	; 0xc0
  4080f8:	4770      	bx	lr
			p_pio->PIO_FELLSR = ul_mask;
  4080fa:	f8c0 10d0 	str.w	r1, [r0, #208]	; 0xd0
  4080fe:	e7f6      	b.n	4080ee <pio_configure_interrupt+0x14>
			p_pio->PIO_LSR = ul_mask;
  408100:	f8c0 10c4 	str.w	r1, [r0, #196]	; 0xc4
  408104:	4770      	bx	lr
		p_pio->PIO_AIMDR = ul_mask;
  408106:	f8c0 10b4 	str.w	r1, [r0, #180]	; 0xb4
  40810a:	4770      	bx	lr

0040810c <pio_enable_interrupt>:
	p_pio->PIO_IER = ul_mask;
  40810c:	6401      	str	r1, [r0, #64]	; 0x40
  40810e:	4770      	bx	lr

00408110 <pio_disable_interrupt>:
	p_pio->PIO_IDR = ul_mask;
  408110:	6441      	str	r1, [r0, #68]	; 0x44
  408112:	4770      	bx	lr

00408114 <pio_get_interrupt_status>:
 *
 * \return The interrupt status value.
 */
uint32_t pio_get_interrupt_status(const Pio *p_pio)
{
	return p_pio->PIO_ISR;
  408114:	6cc0      	ldr	r0, [r0, #76]	; 0x4c
}
  408116:	4770      	bx	lr

00408118 <pio_get_interrupt_mask>:
 *
 * \return The interrupt mask value.
 */
uint32_t pio_get_interrupt_mask(const Pio *p_pio)
{
	return p_pio->PIO_IMR;
  408118:	6c80      	ldr	r0, [r0, #72]	; 0x48
}
  40811a:	4770      	bx	lr

0040811c <pio_configure_pin>:
 * \param ul_flags Pins attributes.
 *
 * \return Whether the pin(s) have been configured properly.
 */
uint32_t pio_configure_pin(uint32_t ul_pin, const uint32_t ul_flags)
{
  40811c:	b570      	push	{r4, r5, r6, lr}
  40811e:	b082      	sub	sp, #8
  408120:	460d      	mov	r5, r1
		p_pio = PIOC;
	} else {
		p_pio = (Pio *)((uint32_t)PIOA + (PIO_DELTA * (ul_pin >> 5)));
	}
#else
	p_pio = (Pio *)((uint32_t)PIOA + (PIO_DELTA * (ul_pin >> 5)));
  408122:	4c46      	ldr	r4, [pc, #280]	; (40823c <pio_configure_pin+0x120>)
  408124:	eb04 1450 	add.w	r4, r4, r0, lsr #5
  408128:	0264      	lsls	r4, r4, #9
	switch (ul_flags & PIO_TYPE_Msk) {
  40812a:	f001 43f0 	and.w	r3, r1, #2013265920	; 0x78000000
  40812e:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
  408132:	d059      	beq.n	4081e8 <pio_configure_pin+0xcc>
  408134:	d80a      	bhi.n	40814c <pio_configure_pin+0x30>
  408136:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
  40813a:	d02f      	beq.n	40819c <pio_configure_pin+0x80>
  40813c:	f1b3 5fc0 	cmp.w	r3, #402653184	; 0x18000000
  408140:	d03f      	beq.n	4081c2 <pio_configure_pin+0xa6>
  408142:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
  408146:	d016      	beq.n	408176 <pio_configure_pin+0x5a>
		return 0;
  408148:	2000      	movs	r0, #0
  40814a:	e012      	b.n	408172 <pio_configure_pin+0x56>
	switch (ul_flags & PIO_TYPE_Msk) {
  40814c:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
  408150:	d05d      	beq.n	40820e <pio_configure_pin+0xf2>
  408152:	f1b3 5f60 	cmp.w	r3, #939524096	; 0x38000000
  408156:	d05a      	beq.n	40820e <pio_configure_pin+0xf2>
  408158:	f1b3 5f20 	cmp.w	r3, #671088640	; 0x28000000
  40815c:	d1f4      	bne.n	408148 <pio_configure_pin+0x2c>
		pio_set_input(p_pio, (1 << (ul_pin & 0x1F)), ul_flags);
  40815e:	f000 011f 	and.w	r1, r0, #31
  408162:	2601      	movs	r6, #1
  408164:	462a      	mov	r2, r5
  408166:	fa06 f101 	lsl.w	r1, r6, r1
  40816a:	4620      	mov	r0, r4
  40816c:	4b34      	ldr	r3, [pc, #208]	; (408240 <pio_configure_pin+0x124>)
  40816e:	4798      	blx	r3
	return 1;
  408170:	4630      	mov	r0, r6
}
  408172:	b002      	add	sp, #8
  408174:	bd70      	pop	{r4, r5, r6, pc}
		pio_set_peripheral(p_pio, PIO_PERIPH_A, (1 << (ul_pin & 0x1F)));
  408176:	f000 001f 	and.w	r0, r0, #31
  40817a:	2601      	movs	r6, #1
  40817c:	4086      	lsls	r6, r0
  40817e:	4632      	mov	r2, r6
  408180:	f04f 6100 	mov.w	r1, #134217728	; 0x8000000
  408184:	4620      	mov	r0, r4
  408186:	4b2f      	ldr	r3, [pc, #188]	; (408244 <pio_configure_pin+0x128>)
  408188:	4798      	blx	r3
	if (ul_pull_up_enable) {
  40818a:	f015 0f01 	tst.w	r5, #1
  40818e:	d102      	bne.n	408196 <pio_configure_pin+0x7a>
		p_pio->PIO_PUDR = ul_mask;
  408190:	6626      	str	r6, [r4, #96]	; 0x60
	return 1;
  408192:	2001      	movs	r0, #1
  408194:	e7ed      	b.n	408172 <pio_configure_pin+0x56>
		p_pio->PIO_PUER = ul_mask;
  408196:	6666      	str	r6, [r4, #100]	; 0x64
	return 1;
  408198:	2001      	movs	r0, #1
  40819a:	e7ea      	b.n	408172 <pio_configure_pin+0x56>
		pio_set_peripheral(p_pio, PIO_PERIPH_B, (1 << (ul_pin & 0x1F)));
  40819c:	f000 001f 	and.w	r0, r0, #31
  4081a0:	2601      	movs	r6, #1
  4081a2:	4086      	lsls	r6, r0
  4081a4:	4632      	mov	r2, r6
  4081a6:	f04f 5180 	mov.w	r1, #268435456	; 0x10000000
  4081aa:	4620      	mov	r0, r4
  4081ac:	4b25      	ldr	r3, [pc, #148]	; (408244 <pio_configure_pin+0x128>)
  4081ae:	4798      	blx	r3
	if (ul_pull_up_enable) {
  4081b0:	f015 0f01 	tst.w	r5, #1
  4081b4:	d102      	bne.n	4081bc <pio_configure_pin+0xa0>
		p_pio->PIO_PUDR = ul_mask;
  4081b6:	6626      	str	r6, [r4, #96]	; 0x60
	return 1;
  4081b8:	2001      	movs	r0, #1
  4081ba:	e7da      	b.n	408172 <pio_configure_pin+0x56>
		p_pio->PIO_PUER = ul_mask;
  4081bc:	6666      	str	r6, [r4, #100]	; 0x64
	return 1;
  4081be:	2001      	movs	r0, #1
  4081c0:	e7d7      	b.n	408172 <pio_configure_pin+0x56>
		pio_set_peripheral(p_pio, PIO_PERIPH_C, (1 << (ul_pin & 0x1F)));
  4081c2:	f000 001f 	and.w	r0, r0, #31
  4081c6:	2601      	movs	r6, #1
  4081c8:	4086      	lsls	r6, r0
  4081ca:	4632      	mov	r2, r6
  4081cc:	f04f 51c0 	mov.w	r1, #402653184	; 0x18000000
  4081d0:	4620      	mov	r0, r4
  4081d2:	4b1c      	ldr	r3, [pc, #112]	; (408244 <pio_configure_pin+0x128>)
  4081d4:	4798      	blx	r3
	if (ul_pull_up_enable) {
  4081d6:	f015 0f01 	tst.w	r5, #1
  4081da:	d102      	bne.n	4081e2 <pio_configure_pin+0xc6>
		p_pio->PIO_PUDR = ul_mask;
  4081dc:	6626      	str	r6, [r4, #96]	; 0x60
	return 1;
  4081de:	2001      	movs	r0, #1
  4081e0:	e7c7      	b.n	408172 <pio_configure_pin+0x56>
		p_pio->PIO_PUER = ul_mask;
  4081e2:	6666      	str	r6, [r4, #100]	; 0x64
	return 1;
  4081e4:	2001      	movs	r0, #1
  4081e6:	e7c4      	b.n	408172 <pio_configure_pin+0x56>
		pio_set_peripheral(p_pio, PIO_PERIPH_D, (1 << (ul_pin & 0x1F)));
  4081e8:	f000 001f 	and.w	r0, r0, #31
  4081ec:	2601      	movs	r6, #1
  4081ee:	4086      	lsls	r6, r0
  4081f0:	4632      	mov	r2, r6
  4081f2:	f04f 5100 	mov.w	r1, #536870912	; 0x20000000
  4081f6:	4620      	mov	r0, r4
  4081f8:	4b12      	ldr	r3, [pc, #72]	; (408244 <pio_configure_pin+0x128>)
  4081fa:	4798      	blx	r3
	if (ul_pull_up_enable) {
  4081fc:	f015 0f01 	tst.w	r5, #1
  408200:	d102      	bne.n	408208 <pio_configure_pin+0xec>
		p_pio->PIO_PUDR = ul_mask;
  408202:	6626      	str	r6, [r4, #96]	; 0x60
	return 1;
  408204:	2001      	movs	r0, #1
  408206:	e7b4      	b.n	408172 <pio_configure_pin+0x56>
		p_pio->PIO_PUER = ul_mask;
  408208:	6666      	str	r6, [r4, #100]	; 0x64
	return 1;
  40820a:	2001      	movs	r0, #1
  40820c:	e7b1      	b.n	408172 <pio_configure_pin+0x56>
				((ul_flags & PIO_TYPE_PIO_OUTPUT_1)
  40820e:	f005 5260 	and.w	r2, r5, #939524096	; 0x38000000
		pio_set_output(p_pio, (1 << (ul_pin & 0x1F)),
  408212:	f000 011f 	and.w	r1, r0, #31
  408216:	2601      	movs	r6, #1
  408218:	ea05 0306 	and.w	r3, r5, r6
  40821c:	9300      	str	r3, [sp, #0]
  40821e:	f3c5 0380 	ubfx	r3, r5, #2, #1
  408222:	f1b2 5f60 	cmp.w	r2, #939524096	; 0x38000000
  408226:	bf14      	ite	ne
  408228:	2200      	movne	r2, #0
  40822a:	2201      	moveq	r2, #1
  40822c:	fa06 f101 	lsl.w	r1, r6, r1
  408230:	4620      	mov	r0, r4
  408232:	4c05      	ldr	r4, [pc, #20]	; (408248 <pio_configure_pin+0x12c>)
  408234:	47a0      	blx	r4
	return 1;
  408236:	4630      	mov	r0, r6
		break;
  408238:	e79b      	b.n	408172 <pio_configure_pin+0x56>
  40823a:	bf00      	nop
  40823c:	00200707 	.word	0x00200707
  408240:	0040807d 	.word	0x0040807d
  408244:	00407feb 	.word	0x00407feb
  408248:	004080b3 	.word	0x004080b3

0040824c <pio_handler_process>:
 *
 * \param p_pio PIO controller base address.
 * \param ul_id PIO controller ID.
 */
void pio_handler_process(Pio *p_pio, uint32_t ul_id)
{
  40824c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  408250:	4604      	mov	r4, r0
  408252:	4688      	mov	r8, r1
	uint32_t status;
	uint32_t i;

	/* Read PIO controller status */
	status = pio_get_interrupt_status(p_pio);
  408254:	4b0e      	ldr	r3, [pc, #56]	; (408290 <pio_handler_process+0x44>)
  408256:	4798      	blx	r3
  408258:	4605      	mov	r5, r0
	status &= pio_get_interrupt_mask(p_pio);
  40825a:	4620      	mov	r0, r4
  40825c:	4b0d      	ldr	r3, [pc, #52]	; (408294 <pio_handler_process+0x48>)
  40825e:	4798      	blx	r3

	/* Check pending events */
	if (status != 0) {
  408260:	4005      	ands	r5, r0
  408262:	d013      	beq.n	40828c <pio_handler_process+0x40>
  408264:	4c0c      	ldr	r4, [pc, #48]	; (408298 <pio_handler_process+0x4c>)
  408266:	f104 0660 	add.w	r6, r4, #96	; 0x60
  40826a:	e003      	b.n	408274 <pio_handler_process+0x28>
							gs_interrupt_sources[i].mask);
					status &= ~(gs_interrupt_sources[i].mask);
				}
			}
			i++;
			if (i >= MAX_INTERRUPT_SOURCES) {
  40826c:	42b4      	cmp	r4, r6
  40826e:	d00d      	beq.n	40828c <pio_handler_process+0x40>
  408270:	3410      	adds	r4, #16
		while (status != 0) {
  408272:	b15d      	cbz	r5, 40828c <pio_handler_process+0x40>
			if (gs_interrupt_sources[i].id == ul_id) {
  408274:	6820      	ldr	r0, [r4, #0]
  408276:	4540      	cmp	r0, r8
  408278:	d1f8      	bne.n	40826c <pio_handler_process+0x20>
				if ((status & gs_interrupt_sources[i].mask) != 0) {
  40827a:	6861      	ldr	r1, [r4, #4]
  40827c:	4229      	tst	r1, r5
  40827e:	d0f5      	beq.n	40826c <pio_handler_process+0x20>
					gs_interrupt_sources[i].handler(gs_interrupt_sources[i].id,
  408280:	68e3      	ldr	r3, [r4, #12]
  408282:	4798      	blx	r3
					status &= ~(gs_interrupt_sources[i].mask);
  408284:	6863      	ldr	r3, [r4, #4]
  408286:	ea25 0503 	bic.w	r5, r5, r3
  40828a:	e7ef      	b.n	40826c <pio_handler_process+0x20>
  40828c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  408290:	00408115 	.word	0x00408115
  408294:	00408119 	.word	0x00408119
  408298:	2040c3c4 	.word	0x2040c3c4

0040829c <pio_handler_set>:
 *
 * \return 0 if successful, 1 if the maximum number of sources has been defined.
 */
uint32_t pio_handler_set(Pio *p_pio, uint32_t ul_id, uint32_t ul_mask,
		uint32_t ul_attr, void (*p_handler) (uint32_t, uint32_t))
{
  40829c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    uint8_t i;
	struct s_interrupt_source *pSource;

	if (gs_ul_nb_sources >= MAX_INTERRUPT_SOURCES)
  40829e:	4c18      	ldr	r4, [pc, #96]	; (408300 <pio_handler_set+0x64>)
  4082a0:	6826      	ldr	r6, [r4, #0]
  4082a2:	2e06      	cmp	r6, #6
  4082a4:	d82a      	bhi.n	4082fc <pio_handler_set+0x60>
  4082a6:	f04f 0c00 	mov.w	ip, #0
  4082aa:	4664      	mov	r4, ip
		return 1;

    /* Check interrupt for this pin, if already defined, redefine it. */
	for (i = 0; i <= gs_ul_nb_sources; i++) {
		pSource = &(gs_interrupt_sources[i]);
		if (pSource->id == ul_id && pSource->mask == ul_mask) {
  4082ac:	4f15      	ldr	r7, [pc, #84]	; (408304 <pio_handler_set+0x68>)
  4082ae:	e004      	b.n	4082ba <pio_handler_set+0x1e>
	for (i = 0; i <= gs_ul_nb_sources; i++) {
  4082b0:	3401      	adds	r4, #1
  4082b2:	b2e4      	uxtb	r4, r4
  4082b4:	46a4      	mov	ip, r4
  4082b6:	42a6      	cmp	r6, r4
  4082b8:	d309      	bcc.n	4082ce <pio_handler_set+0x32>
		pSource = &(gs_interrupt_sources[i]);
  4082ba:	46a6      	mov	lr, r4
		if (pSource->id == ul_id && pSource->mask == ul_mask) {
  4082bc:	0125      	lsls	r5, r4, #4
  4082be:	597d      	ldr	r5, [r7, r5]
  4082c0:	428d      	cmp	r5, r1
  4082c2:	d1f5      	bne.n	4082b0 <pio_handler_set+0x14>
  4082c4:	eb07 1504 	add.w	r5, r7, r4, lsl #4
  4082c8:	686d      	ldr	r5, [r5, #4]
  4082ca:	4295      	cmp	r5, r2
  4082cc:	d1f0      	bne.n	4082b0 <pio_handler_set+0x14>
			break;
		}
	}

	/* Define new source */
	pSource->id = ul_id;
  4082ce:	4d0d      	ldr	r5, [pc, #52]	; (408304 <pio_handler_set+0x68>)
  4082d0:	ea4f 1e0e 	mov.w	lr, lr, lsl #4
  4082d4:	eb05 040e 	add.w	r4, r5, lr
  4082d8:	f845 100e 	str.w	r1, [r5, lr]
	pSource->mask = ul_mask;
  4082dc:	6062      	str	r2, [r4, #4]
	pSource->attr = ul_attr;
  4082de:	60a3      	str	r3, [r4, #8]
	pSource->handler = p_handler;
  4082e0:	9906      	ldr	r1, [sp, #24]
  4082e2:	60e1      	str	r1, [r4, #12]
	if (i == gs_ul_nb_sources + 1) {
  4082e4:	3601      	adds	r6, #1
  4082e6:	4566      	cmp	r6, ip
  4082e8:	d005      	beq.n	4082f6 <pio_handler_set+0x5a>
  4082ea:	4611      	mov	r1, r2
		gs_ul_nb_sources++;
	}

	/* Configure interrupt mode */
	pio_configure_interrupt(p_pio, ul_mask, ul_attr);
  4082ec:	461a      	mov	r2, r3
  4082ee:	4b06      	ldr	r3, [pc, #24]	; (408308 <pio_handler_set+0x6c>)
  4082f0:	4798      	blx	r3

	return 0;
  4082f2:	2000      	movs	r0, #0
  4082f4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		gs_ul_nb_sources++;
  4082f6:	4902      	ldr	r1, [pc, #8]	; (408300 <pio_handler_set+0x64>)
  4082f8:	600e      	str	r6, [r1, #0]
  4082fa:	e7f6      	b.n	4082ea <pio_handler_set+0x4e>
		return 1;
  4082fc:	2001      	movs	r0, #1
}
  4082fe:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  408300:	2040c434 	.word	0x2040c434
  408304:	2040c3c4 	.word	0x2040c3c4
  408308:	004080db 	.word	0x004080db

0040830c <PIOA_Handler>:
/**
 * \brief Parallel IO Controller A interrupt handler.
 * Redefined PIOA interrupt handler for NVIC interrupt table.
 */
void PIOA_Handler(void)
{
  40830c:	b508      	push	{r3, lr}
	pio_handler_process(PIOA, ID_PIOA);
  40830e:	210a      	movs	r1, #10
  408310:	4801      	ldr	r0, [pc, #4]	; (408318 <PIOA_Handler+0xc>)
  408312:	4b02      	ldr	r3, [pc, #8]	; (40831c <PIOA_Handler+0x10>)
  408314:	4798      	blx	r3
  408316:	bd08      	pop	{r3, pc}
  408318:	400e0e00 	.word	0x400e0e00
  40831c:	0040824d 	.word	0x0040824d

00408320 <PIOB_Handler>:
/**
 * \brief Parallel IO Controller B interrupt handler
 * Redefined PIOB interrupt handler for NVIC interrupt table.
 */
void PIOB_Handler(void)
{
  408320:	b508      	push	{r3, lr}
    pio_handler_process(PIOB, ID_PIOB);
  408322:	210b      	movs	r1, #11
  408324:	4801      	ldr	r0, [pc, #4]	; (40832c <PIOB_Handler+0xc>)
  408326:	4b02      	ldr	r3, [pc, #8]	; (408330 <PIOB_Handler+0x10>)
  408328:	4798      	blx	r3
  40832a:	bd08      	pop	{r3, pc}
  40832c:	400e1000 	.word	0x400e1000
  408330:	0040824d 	.word	0x0040824d

00408334 <PIOC_Handler>:
/**
 * \brief Parallel IO Controller C interrupt handler.
 * Redefined PIOC interrupt handler for NVIC interrupt table.
 */
void PIOC_Handler(void)
{
  408334:	b508      	push	{r3, lr}
	pio_handler_process(PIOC, ID_PIOC);
  408336:	210c      	movs	r1, #12
  408338:	4801      	ldr	r0, [pc, #4]	; (408340 <PIOC_Handler+0xc>)
  40833a:	4b02      	ldr	r3, [pc, #8]	; (408344 <PIOC_Handler+0x10>)
  40833c:	4798      	blx	r3
  40833e:	bd08      	pop	{r3, pc}
  408340:	400e1200 	.word	0x400e1200
  408344:	0040824d 	.word	0x0040824d

00408348 <PIOD_Handler>:
/**
 * \brief Parallel IO Controller D interrupt handler.
 * Redefined PIOD interrupt handler for NVIC interrupt table.
 */
void PIOD_Handler(void)
{
  408348:	b508      	push	{r3, lr}
	pio_handler_process(PIOD, ID_PIOD);
  40834a:	2110      	movs	r1, #16
  40834c:	4801      	ldr	r0, [pc, #4]	; (408354 <PIOD_Handler+0xc>)
  40834e:	4b02      	ldr	r3, [pc, #8]	; (408358 <PIOD_Handler+0x10>)
  408350:	4798      	blx	r3
  408352:	bd08      	pop	{r3, pc}
  408354:	400e1400 	.word	0x400e1400
  408358:	0040824d 	.word	0x0040824d

0040835c <PIOE_Handler>:
/**
 * \brief Parallel IO Controller E interrupt handler.
 * Redefined PIOE interrupt handler for NVIC interrupt table.
 */
void PIOE_Handler(void)
{
  40835c:	b508      	push	{r3, lr}
	pio_handler_process(PIOE, ID_PIOE);
  40835e:	2111      	movs	r1, #17
  408360:	4801      	ldr	r0, [pc, #4]	; (408368 <PIOE_Handler+0xc>)
  408362:	4b02      	ldr	r3, [pc, #8]	; (40836c <PIOE_Handler+0x10>)
  408364:	4798      	blx	r3
  408366:	bd08      	pop	{r3, pc}
  408368:	400e1600 	.word	0x400e1600
  40836c:	0040824d 	.word	0x0040824d

00408370 <pio_handler_set_priority>:
 * \param p_pio PIO controller base address.
 * \param ul_irqn NVIC line number.
 * \param ul_priority PIO controller interrupts priority.
 */
void pio_handler_set_priority(Pio *p_pio, IRQn_Type ul_irqn, uint32_t ul_priority)
{
  408370:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  408372:	4606      	mov	r6, r0
  408374:	460d      	mov	r5, r1
  408376:	4614      	mov	r4, r2
	uint32_t bitmask = 0;

	bitmask = pio_get_interrupt_mask(p_pio);
  408378:	4b17      	ldr	r3, [pc, #92]	; (4083d8 <pio_handler_set_priority+0x68>)
  40837a:	4798      	blx	r3
  40837c:	4607      	mov	r7, r0
	pio_disable_interrupt(p_pio, 0xFFFFFFFF);
  40837e:	f04f 31ff 	mov.w	r1, #4294967295
  408382:	4630      	mov	r0, r6
  408384:	4b15      	ldr	r3, [pc, #84]	; (4083dc <pio_handler_set_priority+0x6c>)
  408386:	4798      	blx	r3
	pio_get_interrupt_status(p_pio);
  408388:	4630      	mov	r0, r6
  40838a:	4b15      	ldr	r3, [pc, #84]	; (4083e0 <pio_handler_set_priority+0x70>)
  40838c:	4798      	blx	r3
  NVIC->ICER[((uint32_t)(IRQn) >> 5)] = (1 << ((uint32_t)(IRQn) & 0x1F)); /* disable interrupt */
  40838e:	fa5f fe85 	uxtb.w	lr, r5
  408392:	f00e 031f 	and.w	r3, lr, #31
  408396:	2201      	movs	r2, #1
  408398:	fa02 f303 	lsl.w	r3, r2, r3
  40839c:	0968      	lsrs	r0, r5, #5
  40839e:	4911      	ldr	r1, [pc, #68]	; (4083e4 <pio_handler_set_priority+0x74>)
  4083a0:	eb01 0280 	add.w	r2, r1, r0, lsl #2
  4083a4:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80
  NVIC->ICPR[((uint32_t)(IRQn) >> 5)] = (1 << ((uint32_t)(IRQn) & 0x1F)); /* Clear pending interrupt */
  4083a8:	f8c2 3180 	str.w	r3, [r2, #384]	; 0x180
  if(IRQn < 0) {
  4083ac:	2d00      	cmp	r5, #0
  4083ae:	db0a      	blt.n	4083c6 <pio_handler_set_priority+0x56>
    NVIC->IP[(uint32_t)(IRQn)]            = ((priority << (8 - __NVIC_PRIO_BITS)) & 0xff); } /* set Priority for device specific Interrupts  */
  4083b0:	0164      	lsls	r4, r4, #5
  4083b2:	b2e4      	uxtb	r4, r4
  4083b4:	4a0c      	ldr	r2, [pc, #48]	; (4083e8 <pio_handler_set_priority+0x78>)
  4083b6:	5554      	strb	r4, [r2, r5]
  NVIC->ISER[(uint32_t)((int32_t)IRQn) >> 5] = (uint32_t)(1 << ((uint32_t)((int32_t)IRQn) & (uint32_t)0x1F)); /* enable interrupt */
  4083b8:	f841 3020 	str.w	r3, [r1, r0, lsl #2]
	NVIC_DisableIRQ(ul_irqn);
	NVIC_ClearPendingIRQ(ul_irqn);
	NVIC_SetPriority(ul_irqn, ul_priority);
	NVIC_EnableIRQ(ul_irqn);
	pio_enable_interrupt(p_pio, bitmask);
  4083bc:	4639      	mov	r1, r7
  4083be:	4630      	mov	r0, r6
  4083c0:	4b0a      	ldr	r3, [pc, #40]	; (4083ec <pio_handler_set_priority+0x7c>)
  4083c2:	4798      	blx	r3
  4083c4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    SCB->SHPR[((uint32_t)(IRQn) & 0xF)-4] = ((priority << (8 - __NVIC_PRIO_BITS)) & 0xff); } /* set Priority for Cortex-M  System Interrupts */
  4083c6:	f00e 0e0f 	and.w	lr, lr, #15
  4083ca:	0164      	lsls	r4, r4, #5
  4083cc:	b2e4      	uxtb	r4, r4
  4083ce:	4a08      	ldr	r2, [pc, #32]	; (4083f0 <pio_handler_set_priority+0x80>)
  4083d0:	f802 400e 	strb.w	r4, [r2, lr]
  4083d4:	e7f0      	b.n	4083b8 <pio_handler_set_priority+0x48>
  4083d6:	bf00      	nop
  4083d8:	00408119 	.word	0x00408119
  4083dc:	00408111 	.word	0x00408111
  4083e0:	00408115 	.word	0x00408115
  4083e4:	e000e100 	.word	0xe000e100
  4083e8:	e000e400 	.word	0xe000e400
  4083ec:	0040810d 	.word	0x0040810d
  4083f0:	e000ed14 	.word	0xe000ed14

004083f4 <pmc_mck_set_division>:
 *
 * \param ul_div Division value.
 */
void pmc_mck_set_division(uint32_t ul_div)
{
	switch (ul_div) {
  4083f4:	2803      	cmp	r0, #3
  4083f6:	d011      	beq.n	40841c <pmc_mck_set_division+0x28>
  4083f8:	2804      	cmp	r0, #4
  4083fa:	d012      	beq.n	408422 <pmc_mck_set_division+0x2e>
		case 1:
			ul_div = PMC_MCKR_MDIV_EQ_PCK;
  4083fc:	2802      	cmp	r0, #2
  4083fe:	bf0c      	ite	eq
  408400:	f44f 7180 	moveq.w	r1, #256	; 0x100
  408404:	2100      	movne	r1, #0
		default:
			ul_div = PMC_MCKR_MDIV_EQ_PCK;
			break;
	}
	PMC->PMC_MCKR =
			(PMC->PMC_MCKR & (~PMC_MCKR_MDIV_Msk)) | ul_div;
  408406:	4a08      	ldr	r2, [pc, #32]	; (408428 <pmc_mck_set_division+0x34>)
  408408:	6b13      	ldr	r3, [r2, #48]	; 0x30
  40840a:	f423 7340 	bic.w	r3, r3, #768	; 0x300
  40840e:	430b      	orrs	r3, r1
	PMC->PMC_MCKR =
  408410:	6313      	str	r3, [r2, #48]	; 0x30
	while (!(PMC->PMC_SR & PMC_SR_MCKRDY));
  408412:	6e93      	ldr	r3, [r2, #104]	; 0x68
  408414:	f013 0f08 	tst.w	r3, #8
  408418:	d0fb      	beq.n	408412 <pmc_mck_set_division+0x1e>
}
  40841a:	4770      	bx	lr
			ul_div = PMC_MCKR_MDIV_PCK_DIV3;
  40841c:	f44f 7140 	mov.w	r1, #768	; 0x300
			break;
  408420:	e7f1      	b.n	408406 <pmc_mck_set_division+0x12>
			ul_div = PMC_MCKR_MDIV_PCK_DIV4;
  408422:	f44f 7100 	mov.w	r1, #512	; 0x200
			break;
  408426:	e7ee      	b.n	408406 <pmc_mck_set_division+0x12>
  408428:	400e0600 	.word	0x400e0600

0040842c <pmc_switch_mck_to_pllack>:
 */
uint32_t pmc_switch_mck_to_pllack(uint32_t ul_pres)
{
	uint32_t ul_timeout;

	PMC->PMC_MCKR = (PMC->PMC_MCKR & (~PMC_MCKR_PRES_Msk)) | ul_pres;
  40842c:	4a17      	ldr	r2, [pc, #92]	; (40848c <pmc_switch_mck_to_pllack+0x60>)
  40842e:	6b13      	ldr	r3, [r2, #48]	; 0x30
  408430:	f023 0370 	bic.w	r3, r3, #112	; 0x70
  408434:	4318      	orrs	r0, r3
  408436:	6310      	str	r0, [r2, #48]	; 0x30
	for (ul_timeout = PMC_TIMEOUT; !(PMC->PMC_SR & PMC_SR_MCKRDY);
  408438:	6e93      	ldr	r3, [r2, #104]	; 0x68
  40843a:	f013 0f08 	tst.w	r3, #8
  40843e:	d10a      	bne.n	408456 <pmc_switch_mck_to_pllack+0x2a>
  408440:	f44f 5380 	mov.w	r3, #4096	; 0x1000
  408444:	4911      	ldr	r1, [pc, #68]	; (40848c <pmc_switch_mck_to_pllack+0x60>)
  408446:	6e8a      	ldr	r2, [r1, #104]	; 0x68
  408448:	f012 0f08 	tst.w	r2, #8
  40844c:	d103      	bne.n	408456 <pmc_switch_mck_to_pllack+0x2a>
			--ul_timeout) {
		if (ul_timeout == 0) {
  40844e:	3b01      	subs	r3, #1
  408450:	d1f9      	bne.n	408446 <pmc_switch_mck_to_pllack+0x1a>
			return 1;
  408452:	2001      	movs	r0, #1
  408454:	4770      	bx	lr
		}
	}

	PMC->PMC_MCKR = (PMC->PMC_MCKR & (~PMC_MCKR_CSS_Msk)) |
  408456:	4a0d      	ldr	r2, [pc, #52]	; (40848c <pmc_switch_mck_to_pllack+0x60>)
  408458:	6b13      	ldr	r3, [r2, #48]	; 0x30
  40845a:	f023 0303 	bic.w	r3, r3, #3
  40845e:	f043 0302 	orr.w	r3, r3, #2
  408462:	6313      	str	r3, [r2, #48]	; 0x30
			PMC_MCKR_CSS_PLLA_CLK;

	for (ul_timeout = PMC_TIMEOUT; !(PMC->PMC_SR & PMC_SR_MCKRDY);
  408464:	6e93      	ldr	r3, [r2, #104]	; 0x68
  408466:	f013 0f08 	tst.w	r3, #8
  40846a:	d10a      	bne.n	408482 <pmc_switch_mck_to_pllack+0x56>
  40846c:	f44f 5380 	mov.w	r3, #4096	; 0x1000
  408470:	4906      	ldr	r1, [pc, #24]	; (40848c <pmc_switch_mck_to_pllack+0x60>)
  408472:	6e8a      	ldr	r2, [r1, #104]	; 0x68
  408474:	f012 0f08 	tst.w	r2, #8
  408478:	d105      	bne.n	408486 <pmc_switch_mck_to_pllack+0x5a>
			--ul_timeout) {
		if (ul_timeout == 0) {
  40847a:	3b01      	subs	r3, #1
  40847c:	d1f9      	bne.n	408472 <pmc_switch_mck_to_pllack+0x46>
			return 1;
  40847e:	2001      	movs	r0, #1
		}
	}

	return 0;
}
  408480:	4770      	bx	lr
	return 0;
  408482:	2000      	movs	r0, #0
  408484:	4770      	bx	lr
  408486:	2000      	movs	r0, #0
  408488:	4770      	bx	lr
  40848a:	bf00      	nop
  40848c:	400e0600 	.word	0x400e0600

00408490 <pmc_switch_mainck_to_xtal>:
 */
void pmc_switch_mainck_to_xtal(uint32_t ul_bypass,
		uint32_t ul_xtal_startup_time)
{
	/* Enable Main Xtal oscillator */
	if (ul_bypass) {
  408490:	b9a0      	cbnz	r0, 4084bc <pmc_switch_mainck_to_xtal+0x2c>
		PMC->CKGR_MOR = (PMC->CKGR_MOR & ~CKGR_MOR_MOSCXTEN) |
				CKGR_MOR_KEY_PASSWD | CKGR_MOR_MOSCXTBY |
				CKGR_MOR_MOSCSEL;
	} else {
		PMC->CKGR_MOR = (PMC->CKGR_MOR & ~CKGR_MOR_MOSCXTBY) |
  408492:	480e      	ldr	r0, [pc, #56]	; (4084cc <pmc_switch_mainck_to_xtal+0x3c>)
  408494:	6a03      	ldr	r3, [r0, #32]
				CKGR_MOR_KEY_PASSWD | CKGR_MOR_MOSCXTEN |
				CKGR_MOR_MOSCXTST(ul_xtal_startup_time);
  408496:	0209      	lsls	r1, r1, #8
  408498:	b289      	uxth	r1, r1
				CKGR_MOR_KEY_PASSWD | CKGR_MOR_MOSCXTEN |
  40849a:	4a0d      	ldr	r2, [pc, #52]	; (4084d0 <pmc_switch_mainck_to_xtal+0x40>)
  40849c:	401a      	ands	r2, r3
  40849e:	4b0d      	ldr	r3, [pc, #52]	; (4084d4 <pmc_switch_mainck_to_xtal+0x44>)
  4084a0:	4313      	orrs	r3, r2
  4084a2:	4319      	orrs	r1, r3
		PMC->CKGR_MOR = (PMC->CKGR_MOR & ~CKGR_MOR_MOSCXTBY) |
  4084a4:	6201      	str	r1, [r0, #32]
		/* Wait the Xtal to stabilize */
		while (!(PMC->PMC_SR & PMC_SR_MOSCXTS));
  4084a6:	4602      	mov	r2, r0
  4084a8:	6e93      	ldr	r3, [r2, #104]	; 0x68
  4084aa:	f013 0f01 	tst.w	r3, #1
  4084ae:	d0fb      	beq.n	4084a8 <pmc_switch_mainck_to_xtal+0x18>

		PMC->CKGR_MOR |= CKGR_MOR_KEY_PASSWD | CKGR_MOR_MOSCSEL;
  4084b0:	4a06      	ldr	r2, [pc, #24]	; (4084cc <pmc_switch_mainck_to_xtal+0x3c>)
  4084b2:	6a11      	ldr	r1, [r2, #32]
  4084b4:	4b08      	ldr	r3, [pc, #32]	; (4084d8 <pmc_switch_mainck_to_xtal+0x48>)
  4084b6:	430b      	orrs	r3, r1
  4084b8:	6213      	str	r3, [r2, #32]
  4084ba:	4770      	bx	lr
		PMC->CKGR_MOR = (PMC->CKGR_MOR & ~CKGR_MOR_MOSCXTEN) |
  4084bc:	4903      	ldr	r1, [pc, #12]	; (4084cc <pmc_switch_mainck_to_xtal+0x3c>)
  4084be:	6a0b      	ldr	r3, [r1, #32]
				CKGR_MOR_KEY_PASSWD | CKGR_MOR_MOSCXTBY |
  4084c0:	4a06      	ldr	r2, [pc, #24]	; (4084dc <pmc_switch_mainck_to_xtal+0x4c>)
  4084c2:	401a      	ands	r2, r3
  4084c4:	4b06      	ldr	r3, [pc, #24]	; (4084e0 <pmc_switch_mainck_to_xtal+0x50>)
  4084c6:	4313      	orrs	r3, r2
		PMC->CKGR_MOR = (PMC->CKGR_MOR & ~CKGR_MOR_MOSCXTEN) |
  4084c8:	620b      	str	r3, [r1, #32]
  4084ca:	4770      	bx	lr
  4084cc:	400e0600 	.word	0x400e0600
  4084d0:	ffc8fffc 	.word	0xffc8fffc
  4084d4:	00370001 	.word	0x00370001
  4084d8:	01370000 	.word	0x01370000
  4084dc:	fec8fffc 	.word	0xfec8fffc
  4084e0:	01370002 	.word	0x01370002

004084e4 <pmc_osc_is_ready_mainck>:
 * \retval 1 Xtal is ready.
 * \retval 0 Xtal is not ready.
 */
uint32_t pmc_osc_is_ready_mainck(void)
{
	return PMC->PMC_SR & PMC_SR_MOSCSELS;
  4084e4:	4b02      	ldr	r3, [pc, #8]	; (4084f0 <pmc_osc_is_ready_mainck+0xc>)
  4084e6:	6e98      	ldr	r0, [r3, #104]	; 0x68
}
  4084e8:	f400 3080 	and.w	r0, r0, #65536	; 0x10000
  4084ec:	4770      	bx	lr
  4084ee:	bf00      	nop
  4084f0:	400e0600 	.word	0x400e0600

004084f4 <pmc_disable_pllack>:
void pmc_disable_pllack(void)
{
#if (SAM4C || SAM4CM || SAM4CP || SAMG)
	PMC->CKGR_PLLAR = CKGR_PLLAR_MULA(0);
#else
	PMC->CKGR_PLLAR = CKGR_PLLAR_ONE | CKGR_PLLAR_MULA(0);
  4084f4:	f04f 5200 	mov.w	r2, #536870912	; 0x20000000
  4084f8:	4b01      	ldr	r3, [pc, #4]	; (408500 <pmc_disable_pllack+0xc>)
  4084fa:	629a      	str	r2, [r3, #40]	; 0x28
  4084fc:	4770      	bx	lr
  4084fe:	bf00      	nop
  408500:	400e0600 	.word	0x400e0600

00408504 <pmc_is_locked_pllack>:
 * \retval 0 Not locked.
 * \retval 1 Locked.
 */
uint32_t pmc_is_locked_pllack(void)
{
	return (PMC->PMC_SR & PMC_SR_LOCKA);
  408504:	4b02      	ldr	r3, [pc, #8]	; (408510 <pmc_is_locked_pllack+0xc>)
  408506:	6e98      	ldr	r0, [r3, #104]	; 0x68
}
  408508:	f000 0002 	and.w	r0, r0, #2
  40850c:	4770      	bx	lr
  40850e:	bf00      	nop
  408510:	400e0600 	.word	0x400e0600

00408514 <pmc_enable_periph_clk>:
 * \retval 0 Success.
 * \retval 1 Invalid parameter.
 */
uint32_t pmc_enable_periph_clk(uint32_t ul_id)
{
	if (ul_id > MAX_PERIPH_ID) {
  408514:	283f      	cmp	r0, #63	; 0x3f
  408516:	d81e      	bhi.n	408556 <pmc_enable_periph_clk+0x42>
		return 1;
	}

	if (ul_id < 32) {
  408518:	281f      	cmp	r0, #31
  40851a:	d80c      	bhi.n	408536 <pmc_enable_periph_clk+0x22>
		if ((PMC->PMC_PCSR0 & (1u << ul_id)) != (1u << ul_id)) {
  40851c:	4b11      	ldr	r3, [pc, #68]	; (408564 <pmc_enable_periph_clk+0x50>)
  40851e:	699a      	ldr	r2, [r3, #24]
  408520:	2301      	movs	r3, #1
  408522:	4083      	lsls	r3, r0
  408524:	4393      	bics	r3, r2
  408526:	d018      	beq.n	40855a <pmc_enable_periph_clk+0x46>
			PMC->PMC_PCER0 = 1 << ul_id;
  408528:	2301      	movs	r3, #1
  40852a:	fa03 f000 	lsl.w	r0, r3, r0
  40852e:	4b0d      	ldr	r3, [pc, #52]	; (408564 <pmc_enable_periph_clk+0x50>)
  408530:	6118      	str	r0, [r3, #16]
			PMC->PMC_PCER1 = 1 << ul_id;
		}
#endif
	}

	return 0;
  408532:	2000      	movs	r0, #0
  408534:	4770      	bx	lr
		ul_id -= 32;
  408536:	3820      	subs	r0, #32
		if ((PMC->PMC_PCSR1 & (1u << ul_id)) != (1u << ul_id)) {
  408538:	4b0a      	ldr	r3, [pc, #40]	; (408564 <pmc_enable_periph_clk+0x50>)
  40853a:	f8d3 2108 	ldr.w	r2, [r3, #264]	; 0x108
  40853e:	2301      	movs	r3, #1
  408540:	4083      	lsls	r3, r0
  408542:	4393      	bics	r3, r2
  408544:	d00b      	beq.n	40855e <pmc_enable_periph_clk+0x4a>
			PMC->PMC_PCER1 = 1 << ul_id;
  408546:	2301      	movs	r3, #1
  408548:	fa03 f000 	lsl.w	r0, r3, r0
  40854c:	4b05      	ldr	r3, [pc, #20]	; (408564 <pmc_enable_periph_clk+0x50>)
  40854e:	f8c3 0100 	str.w	r0, [r3, #256]	; 0x100
	return 0;
  408552:	2000      	movs	r0, #0
  408554:	4770      	bx	lr
		return 1;
  408556:	2001      	movs	r0, #1
  408558:	4770      	bx	lr
	return 0;
  40855a:	2000      	movs	r0, #0
  40855c:	4770      	bx	lr
  40855e:	2000      	movs	r0, #0
}
  408560:	4770      	bx	lr
  408562:	bf00      	nop
  408564:	400e0600 	.word	0x400e0600

00408568 <spi_enable_clock>:
 * \brief Enable SPI clock.
 *
 * \param p_spi Pointer to an SPI instance.
 */
void spi_enable_clock(Spi *p_spi)
{
  408568:	b508      	push	{r3, lr}
#if (SAM4S || SAM3S || SAM3N || SAM3U || SAM4E || SAM4N || SAMG51|| SAMG53|| SAMG54)
	UNUSED(p_spi);
	sysclk_enable_peripheral_clock(ID_SPI);
#elif (SAM3XA || SAM4C || SAM4CP || SAM4CM || SAMV71 || SAMV70 || SAME70 || SAMS70)
	if (p_spi == SPI0) {
  40856a:	4b07      	ldr	r3, [pc, #28]	; (408588 <spi_enable_clock+0x20>)
  40856c:	4298      	cmp	r0, r3
  40856e:	d003      	beq.n	408578 <spi_enable_clock+0x10>
		sysclk_enable_peripheral_clock(ID_SPI0);
	}
	#ifdef SPI1
	else if (p_spi == SPI1) {
  408570:	4b06      	ldr	r3, [pc, #24]	; (40858c <spi_enable_clock+0x24>)
  408572:	4298      	cmp	r0, r3
  408574:	d004      	beq.n	408580 <spi_enable_clock+0x18>
  408576:	bd08      	pop	{r3, pc}
  408578:	2015      	movs	r0, #21
  40857a:	4b05      	ldr	r3, [pc, #20]	; (408590 <spi_enable_clock+0x28>)
  40857c:	4798      	blx	r3
  40857e:	bd08      	pop	{r3, pc}
  408580:	202a      	movs	r0, #42	; 0x2a
  408582:	4b03      	ldr	r3, [pc, #12]	; (408590 <spi_enable_clock+0x28>)
  408584:	4798      	blx	r3
	}
	#endif
#elif SAM4L
	sysclk_enable_peripheral_clock(p_spi);
#endif
}
  408586:	e7f6      	b.n	408576 <spi_enable_clock+0xe>
  408588:	40008000 	.word	0x40008000
  40858c:	40058000 	.word	0x40058000
  408590:	00408515 	.word	0x00408515

00408594 <spi_set_peripheral_chip_select_value>:
 *                 \ref spi_enable_peripheral_select_decode,
 *                 \ref spi_disable_peripheral_select_decode.
 */
void spi_set_peripheral_chip_select_value(Spi *p_spi, uint32_t ul_value)
{
	p_spi->SPI_MR &= (~SPI_MR_PCS_Msk);
  408594:	6843      	ldr	r3, [r0, #4]
  408596:	f423 2370 	bic.w	r3, r3, #983040	; 0xf0000
  40859a:	6043      	str	r3, [r0, #4]
	p_spi->SPI_MR |= SPI_MR_PCS(ul_value);
  40859c:	6843      	ldr	r3, [r0, #4]
  40859e:	0409      	lsls	r1, r1, #16
  4085a0:	f401 2170 	and.w	r1, r1, #983040	; 0xf0000
  4085a4:	4319      	orrs	r1, r3
  4085a6:	6041      	str	r1, [r0, #4]
  4085a8:	4770      	bx	lr

004085aa <spi_read>:
 *
 * \retval SPI_OK on Success.
 * \retval SPI_ERROR_TIMEOUT on Time-out.
 */
spi_status_t spi_read(Spi *p_spi, uint16_t *us_data, uint8_t *p_pcs)
{
  4085aa:	b410      	push	{r4}
	uint32_t timeout = SPI_TIMEOUT;
	static uint32_t reg_value;

	while (!(p_spi->SPI_SR & SPI_SR_RDRF)) {
  4085ac:	f643 2399 	movw	r3, #15001	; 0x3a99
  4085b0:	6904      	ldr	r4, [r0, #16]
  4085b2:	f014 0f01 	tst.w	r4, #1
  4085b6:	d103      	bne.n	4085c0 <spi_read+0x16>
		if (!timeout--) {
  4085b8:	3b01      	subs	r3, #1
  4085ba:	d1f9      	bne.n	4085b0 <spi_read+0x6>
			return SPI_ERROR_TIMEOUT;
  4085bc:	2001      	movs	r0, #1
  4085be:	e009      	b.n	4085d4 <spi_read+0x2a>
		}
	}

	reg_value = p_spi->SPI_RDR;
  4085c0:	6883      	ldr	r3, [r0, #8]
	if (p_spi->SPI_MR & SPI_MR_PS) {
  4085c2:	6840      	ldr	r0, [r0, #4]
	if (spi_get_peripheral_select_mode(p_spi)) {
  4085c4:	f010 0f02 	tst.w	r0, #2
  4085c8:	d002      	beq.n	4085d0 <spi_read+0x26>
		*p_pcs = (uint8_t) ((reg_value & SPI_RDR_PCS_Msk) >> SPI_RDR_PCS_Pos);
  4085ca:	f3c3 4003 	ubfx	r0, r3, #16, #4
  4085ce:	7010      	strb	r0, [r2, #0]
	}
	*us_data = (uint16_t) (reg_value & SPI_RDR_RD_Msk);
  4085d0:	800b      	strh	r3, [r1, #0]

	return SPI_OK;
  4085d2:	2000      	movs	r0, #0
}
  4085d4:	f85d 4b04 	ldr.w	r4, [sp], #4
  4085d8:	4770      	bx	lr

004085da <spi_write>:
 * \retval SPI_OK on Success.
 * \retval SPI_ERROR_TIMEOUT on Time-out.
 */
spi_status_t spi_write(Spi *p_spi, uint16_t us_data,
		uint8_t uc_pcs, uint8_t uc_last)
{
  4085da:	b430      	push	{r4, r5}
	uint32_t timeout = SPI_TIMEOUT;
	uint32_t value;

	while (!(p_spi->SPI_SR & SPI_SR_TDRE)) {
  4085dc:	f643 2499 	movw	r4, #15001	; 0x3a99
  4085e0:	6905      	ldr	r5, [r0, #16]
  4085e2:	f015 0f02 	tst.w	r5, #2
  4085e6:	d103      	bne.n	4085f0 <spi_write+0x16>
		if (!timeout--) {
  4085e8:	3c01      	subs	r4, #1
  4085ea:	d1f9      	bne.n	4085e0 <spi_write+0x6>
			return SPI_ERROR_TIMEOUT;
  4085ec:	2001      	movs	r0, #1
  4085ee:	e00c      	b.n	40860a <spi_write+0x30>
  4085f0:	6844      	ldr	r4, [r0, #4]
		}
	}

	if (spi_get_peripheral_select_mode(p_spi)) {
  4085f2:	f014 0f02 	tst.w	r4, #2
  4085f6:	d006      	beq.n	408606 <spi_write+0x2c>
		value = SPI_TDR_TD(us_data) | SPI_TDR_PCS(uc_pcs);
  4085f8:	0412      	lsls	r2, r2, #16
  4085fa:	f402 2270 	and.w	r2, r2, #983040	; 0xf0000
  4085fe:	4311      	orrs	r1, r2
		if (uc_last) {
  408600:	b10b      	cbz	r3, 408606 <spi_write+0x2c>
			value |= SPI_TDR_LASTXFER;
  408602:	f041 7180 	orr.w	r1, r1, #16777216	; 0x1000000
		}
	} else {
		value = SPI_TDR_TD(us_data);
	}

	p_spi->SPI_TDR = value;
  408606:	60c1      	str	r1, [r0, #12]

	return SPI_OK;
  408608:	2000      	movs	r0, #0
}
  40860a:	bc30      	pop	{r4, r5}
  40860c:	4770      	bx	lr

0040860e <spi_set_clock_polarity>:
 * \param ul_polarity Default clock state is logical one(high)/zero(low).
 */
void spi_set_clock_polarity(Spi *p_spi, uint32_t ul_pcs_ch,
		uint32_t ul_polarity)
{
	if (ul_polarity) {
  40860e:	b932      	cbnz	r2, 40861e <spi_set_clock_polarity+0x10>
  408610:	eb00 0081 	add.w	r0, r0, r1, lsl #2
		p_spi->SPI_CSR[ul_pcs_ch] |= SPI_CSR_CPOL;
	} else {
		p_spi->SPI_CSR[ul_pcs_ch] &= (~SPI_CSR_CPOL);
  408614:	6b03      	ldr	r3, [r0, #48]	; 0x30
  408616:	f023 0301 	bic.w	r3, r3, #1
  40861a:	6303      	str	r3, [r0, #48]	; 0x30
  40861c:	4770      	bx	lr
  40861e:	eb00 0081 	add.w	r0, r0, r1, lsl #2
		p_spi->SPI_CSR[ul_pcs_ch] |= SPI_CSR_CPOL;
  408622:	6b03      	ldr	r3, [r0, #48]	; 0x30
  408624:	f043 0301 	orr.w	r3, r3, #1
  408628:	6303      	str	r3, [r0, #48]	; 0x30
  40862a:	4770      	bx	lr

0040862c <spi_set_clock_phase>:
 *  \param ul_pcs_ch Peripheral Chip Select channel (0~3).
 *  \param ul_phase Data capture on the rising/falling edge of clock.
 */
void spi_set_clock_phase(Spi *p_spi, uint32_t ul_pcs_ch, uint32_t ul_phase)
{
	if (ul_phase) {
  40862c:	b932      	cbnz	r2, 40863c <spi_set_clock_phase+0x10>
  40862e:	eb00 0081 	add.w	r0, r0, r1, lsl #2
		p_spi->SPI_CSR[ul_pcs_ch] |= SPI_CSR_NCPHA;
	} else {
		p_spi->SPI_CSR[ul_pcs_ch] &= (~SPI_CSR_NCPHA);
  408632:	6b03      	ldr	r3, [r0, #48]	; 0x30
  408634:	f023 0302 	bic.w	r3, r3, #2
  408638:	6303      	str	r3, [r0, #48]	; 0x30
  40863a:	4770      	bx	lr
  40863c:	eb00 0081 	add.w	r0, r0, r1, lsl #2
		p_spi->SPI_CSR[ul_pcs_ch] |= SPI_CSR_NCPHA;
  408640:	6b03      	ldr	r3, [r0, #48]	; 0x30
  408642:	f043 0302 	orr.w	r3, r3, #2
  408646:	6303      	str	r3, [r0, #48]	; 0x30
  408648:	4770      	bx	lr

0040864a <spi_set_bits_per_transfer>:
 * \param ul_bits Number of bits (8~16), use the pattern defined
 *        in the device header file.
 */
void spi_set_bits_per_transfer(Spi *p_spi, uint32_t ul_pcs_ch,
		uint32_t ul_bits)
{
  40864a:	eb00 0181 	add.w	r1, r0, r1, lsl #2
	p_spi->SPI_CSR[ul_pcs_ch] &= (~SPI_CSR_BITS_Msk);
  40864e:	6b0b      	ldr	r3, [r1, #48]	; 0x30
  408650:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
  408654:	630b      	str	r3, [r1, #48]	; 0x30
	p_spi->SPI_CSR[ul_pcs_ch] |= ul_bits;
  408656:	6b0b      	ldr	r3, [r1, #48]	; 0x30
  408658:	431a      	orrs	r2, r3
  40865a:	630a      	str	r2, [r1, #48]	; 0x30
  40865c:	4770      	bx	lr

0040865e <spi_calc_baudrate_div>:
 *   \retval > 0  Success.
 *   \retval < 0  Error.
 */
int16_t spi_calc_baudrate_div(const uint32_t baudrate, uint32_t mck)
{
	int baud_div = div_ceil(mck, baudrate);
  40865e:	1e43      	subs	r3, r0, #1
  408660:	4419      	add	r1, r3
  408662:	fbb1 f0f0 	udiv	r0, r1, r0

	/* The value of baud_div is from 1 to 255 in the SCBR field. */
	if (baud_div <= 0 || baud_div > 255) {
  408666:	1e43      	subs	r3, r0, #1
  408668:	2bfe      	cmp	r3, #254	; 0xfe
		return -1;
	}

	return baud_div;
  40866a:	bf94      	ite	ls
  40866c:	b200      	sxthls	r0, r0
		return -1;
  40866e:	f04f 30ff 	movhi.w	r0, #4294967295
}
  408672:	4770      	bx	lr

00408674 <spi_set_baudrate_div>:
 */
int16_t spi_set_baudrate_div(Spi *p_spi, uint32_t ul_pcs_ch,
		uint8_t uc_baudrate_divider)
{
    /* Programming the SCBR field to 0 is forbidden */
    if (!uc_baudrate_divider)
  408674:	b17a      	cbz	r2, 408696 <spi_set_baudrate_div+0x22>
{
  408676:	b410      	push	{r4}
  408678:	4614      	mov	r4, r2
  40867a:	eb00 0181 	add.w	r1, r0, r1, lsl #2
        return -1;

	p_spi->SPI_CSR[ul_pcs_ch] &= (~SPI_CSR_SCBR_Msk);
  40867e:	6b0b      	ldr	r3, [r1, #48]	; 0x30
  408680:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
  408684:	630b      	str	r3, [r1, #48]	; 0x30
	p_spi->SPI_CSR[ul_pcs_ch] |= SPI_CSR_SCBR(uc_baudrate_divider);
  408686:	6b0a      	ldr	r2, [r1, #48]	; 0x30
  408688:	ea42 2204 	orr.w	r2, r2, r4, lsl #8
  40868c:	630a      	str	r2, [r1, #48]	; 0x30
    return 0;
  40868e:	2000      	movs	r0, #0
}
  408690:	f85d 4b04 	ldr.w	r4, [sp], #4
  408694:	4770      	bx	lr
        return -1;
  408696:	f04f 30ff 	mov.w	r0, #4294967295
  40869a:	4770      	bx	lr

0040869c <spi_set_transfer_delay>:
 * \param uc_dlybs Delay before SPCK (in number of MCK clocks).
 * \param uc_dlybct Delay between consecutive transfers (in number of MCK clocks).
 */
void spi_set_transfer_delay(Spi *p_spi, uint32_t ul_pcs_ch,
		uint8_t uc_dlybs, uint8_t uc_dlybct)
{
  40869c:	b410      	push	{r4}
  40869e:	eb00 0181 	add.w	r1, r0, r1, lsl #2
	p_spi->SPI_CSR[ul_pcs_ch] &= ~(SPI_CSR_DLYBS_Msk | SPI_CSR_DLYBCT_Msk);
  4086a2:	6b08      	ldr	r0, [r1, #48]	; 0x30
  4086a4:	b280      	uxth	r0, r0
  4086a6:	6308      	str	r0, [r1, #48]	; 0x30
	p_spi->SPI_CSR[ul_pcs_ch] |= SPI_CSR_DLYBS(uc_dlybs)
  4086a8:	6b0c      	ldr	r4, [r1, #48]	; 0x30
  4086aa:	ea44 6303 	orr.w	r3, r4, r3, lsl #24
  4086ae:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
  4086b2:	630b      	str	r3, [r1, #48]	; 0x30
			| SPI_CSR_DLYBCT(uc_dlybct);
}
  4086b4:	f85d 4b04 	ldr.w	r4, [sp], #4
  4086b8:	4770      	bx	lr

004086ba <uart_write>:
 * \retval 1 I/O Failure, UART is not ready.
 */
uint32_t uart_write(Uart *p_uart, const uint8_t uc_data)
{
	/* Check if the transmitter is ready */
	if (!(p_uart->UART_SR & UART_SR_TXRDY))
  4086ba:	6943      	ldr	r3, [r0, #20]
  4086bc:	f013 0f02 	tst.w	r3, #2
  4086c0:	d002      	beq.n	4086c8 <uart_write+0xe>
		return 1;

	/* Send character */
	p_uart->UART_THR = uc_data;
  4086c2:	61c1      	str	r1, [r0, #28]
	return 0;
  4086c4:	2000      	movs	r0, #0
  4086c6:	4770      	bx	lr
		return 1;
  4086c8:	2001      	movs	r0, #1
}
  4086ca:	4770      	bx	lr

004086cc <uart_read>:
 * \retval 1 I/O Failure, UART is not ready.
 */
uint32_t uart_read(Uart *p_uart, uint8_t *puc_data)
{
	/* Check if the receiver is ready */
	if ((p_uart->UART_SR & UART_SR_RXRDY) == 0)
  4086cc:	6943      	ldr	r3, [r0, #20]
  4086ce:	f013 0f01 	tst.w	r3, #1
  4086d2:	d003      	beq.n	4086dc <uart_read+0x10>
		return 1;

	/* Read character */
	*puc_data = (uint8_t) p_uart->UART_RHR;
  4086d4:	6983      	ldr	r3, [r0, #24]
  4086d6:	700b      	strb	r3, [r1, #0]
	return 0;
  4086d8:	2000      	movs	r0, #0
  4086da:	4770      	bx	lr
		return 1;
  4086dc:	2001      	movs	r0, #1
}
  4086de:	4770      	bx	lr

004086e0 <usart_set_async_baudrate>:
 * \retval 1 Baud rate set point is out of range for the given input clock
 * frequency.
 */
uint32_t usart_set_async_baudrate(Usart *p_usart,
		uint32_t baudrate, uint32_t ul_mck)
{
  4086e0:	b410      	push	{r4}
	uint32_t cd_fp;
	uint32_t cd;
	uint32_t fp;

	/* Calculate the receiver sampling divide of baudrate clock. */
	if (ul_mck >= HIGH_FRQ_SAMPLE_DIV * baudrate) {
  4086e2:	010b      	lsls	r3, r1, #4
  4086e4:	4293      	cmp	r3, r2
  4086e6:	d914      	bls.n	408712 <usart_set_async_baudrate+0x32>
	} else {
		over = LOW_FRQ_SAMPLE_DIV;
	}

	/* Calculate clock divider according to the fraction calculated formula. */
	cd_fp = (8 * ul_mck + (over * baudrate) / 2) / (over * baudrate);
  4086e8:	00c9      	lsls	r1, r1, #3
  4086ea:	084b      	lsrs	r3, r1, #1
  4086ec:	eb03 02c2 	add.w	r2, r3, r2, lsl #3
  4086f0:	fbb2 f2f1 	udiv	r2, r2, r1
	cd = cd_fp >> 3;
  4086f4:	08d3      	lsrs	r3, r2, #3
	fp = cd_fp & 0x07;
	if (cd < MIN_CD_VALUE || cd > MAX_CD_VALUE) {
  4086f6:	1e5c      	subs	r4, r3, #1
  4086f8:	f64f 71fe 	movw	r1, #65534	; 0xfffe
  4086fc:	428c      	cmp	r4, r1
  4086fe:	d901      	bls.n	408704 <usart_set_async_baudrate+0x24>
		return 1;
  408700:	2001      	movs	r0, #1
  408702:	e017      	b.n	408734 <usart_set_async_baudrate+0x54>
	}

	/* Configure the OVER bit in MR register. */
	if (over == 8) {
		p_usart->US_MR |= US_MR_OVER;
  408704:	6841      	ldr	r1, [r0, #4]
  408706:	f441 2100 	orr.w	r1, r1, #524288	; 0x80000
  40870a:	6041      	str	r1, [r0, #4]
  40870c:	e00c      	b.n	408728 <usart_set_async_baudrate+0x48>
		return 1;
  40870e:	2001      	movs	r0, #1
  408710:	e010      	b.n	408734 <usart_set_async_baudrate+0x54>
	cd_fp = (8 * ul_mck + (over * baudrate) / 2) / (over * baudrate);
  408712:	0859      	lsrs	r1, r3, #1
  408714:	eb01 02c2 	add.w	r2, r1, r2, lsl #3
  408718:	fbb2 f2f3 	udiv	r2, r2, r3
	cd = cd_fp >> 3;
  40871c:	08d3      	lsrs	r3, r2, #3
	if (cd < MIN_CD_VALUE || cd > MAX_CD_VALUE) {
  40871e:	1e5c      	subs	r4, r3, #1
  408720:	f64f 71fe 	movw	r1, #65534	; 0xfffe
  408724:	428c      	cmp	r4, r1
  408726:	d8f2      	bhi.n	40870e <usart_set_async_baudrate+0x2e>
	}

	/* Configure the baudrate generate register. */
	p_usart->US_BRGR = (cd << US_BRGR_CD_Pos) | (fp << US_BRGR_FP_Pos);
  408728:	0412      	lsls	r2, r2, #16
  40872a:	f402 22e0 	and.w	r2, r2, #458752	; 0x70000
  40872e:	431a      	orrs	r2, r3
  408730:	6202      	str	r2, [r0, #32]

	return 0;
  408732:	2000      	movs	r0, #0
}
  408734:	f85d 4b04 	ldr.w	r4, [sp], #4
  408738:	4770      	bx	lr
	...

0040873c <usart_reset>:
 *
 * \param p_usart Pointer to a USART instance.
 */
void usart_disable_writeprotect(Usart *p_usart)
{
	p_usart->US_WPMR = US_WPMR_WPKEY_PASSWD;
  40873c:	4b08      	ldr	r3, [pc, #32]	; (408760 <usart_reset+0x24>)
  40873e:	f8c0 30e4 	str.w	r3, [r0, #228]	; 0xe4
	p_usart->US_MR = 0;
  408742:	2300      	movs	r3, #0
  408744:	6043      	str	r3, [r0, #4]
	p_usart->US_RTOR = 0;
  408746:	6243      	str	r3, [r0, #36]	; 0x24
	p_usart->US_TTGR = 0;
  408748:	6283      	str	r3, [r0, #40]	; 0x28
	p_usart->US_CR = US_CR_RSTTX | US_CR_TXDIS;
  40874a:	2388      	movs	r3, #136	; 0x88
  40874c:	6003      	str	r3, [r0, #0]
	p_usart->US_CR = US_CR_RSTRX | US_CR_RXDIS;
  40874e:	2324      	movs	r3, #36	; 0x24
  408750:	6003      	str	r3, [r0, #0]
	p_usart->US_CR = US_CR_RSTSTA;
  408752:	f44f 7380 	mov.w	r3, #256	; 0x100
  408756:	6003      	str	r3, [r0, #0]
	p_usart->US_CR = US_CR_RTSDIS;
  408758:	f44f 2300 	mov.w	r3, #524288	; 0x80000
  40875c:	6003      	str	r3, [r0, #0]
  40875e:	4770      	bx	lr
  408760:	55534100 	.word	0x55534100

00408764 <usart_init_rs232>:
{
  408764:	b570      	push	{r4, r5, r6, lr}
  408766:	4605      	mov	r5, r0
  408768:	460c      	mov	r4, r1
  40876a:	4616      	mov	r6, r2
	usart_reset(p_usart);
  40876c:	4b0f      	ldr	r3, [pc, #60]	; (4087ac <usart_init_rs232+0x48>)
  40876e:	4798      	blx	r3
	ul_reg_val = 0;
  408770:	2200      	movs	r2, #0
  408772:	4b0f      	ldr	r3, [pc, #60]	; (4087b0 <usart_init_rs232+0x4c>)
  408774:	601a      	str	r2, [r3, #0]
	if (!p_usart_opt || usart_set_async_baudrate(p_usart,
  408776:	b1a4      	cbz	r4, 4087a2 <usart_init_rs232+0x3e>
  408778:	4632      	mov	r2, r6
  40877a:	6821      	ldr	r1, [r4, #0]
  40877c:	4628      	mov	r0, r5
  40877e:	4b0d      	ldr	r3, [pc, #52]	; (4087b4 <usart_init_rs232+0x50>)
  408780:	4798      	blx	r3
  408782:	4602      	mov	r2, r0
  408784:	b978      	cbnz	r0, 4087a6 <usart_init_rs232+0x42>
	ul_reg_val |= p_usart_opt->char_length | p_usart_opt->parity_type |
  408786:	6863      	ldr	r3, [r4, #4]
  408788:	68a1      	ldr	r1, [r4, #8]
  40878a:	430b      	orrs	r3, r1
  40878c:	6921      	ldr	r1, [r4, #16]
  40878e:	430b      	orrs	r3, r1
			p_usart_opt->channel_mode | p_usart_opt->stop_bits;
  408790:	68e1      	ldr	r1, [r4, #12]
  408792:	430b      	orrs	r3, r1
	ul_reg_val |= p_usart_opt->char_length | p_usart_opt->parity_type |
  408794:	4906      	ldr	r1, [pc, #24]	; (4087b0 <usart_init_rs232+0x4c>)
  408796:	600b      	str	r3, [r1, #0]
	p_usart->US_MR |= ul_reg_val;
  408798:	6869      	ldr	r1, [r5, #4]
  40879a:	430b      	orrs	r3, r1
  40879c:	606b      	str	r3, [r5, #4]
}
  40879e:	4610      	mov	r0, r2
  4087a0:	bd70      	pop	{r4, r5, r6, pc}
		return 1;
  4087a2:	2201      	movs	r2, #1
  4087a4:	e7fb      	b.n	40879e <usart_init_rs232+0x3a>
  4087a6:	2201      	movs	r2, #1
  4087a8:	e7f9      	b.n	40879e <usart_init_rs232+0x3a>
  4087aa:	bf00      	nop
  4087ac:	0040873d 	.word	0x0040873d
  4087b0:	2040c438 	.word	0x2040c438
  4087b4:	004086e1 	.word	0x004086e1

004087b8 <usart_enable_tx>:
	p_usart->US_CR = US_CR_TXEN;
  4087b8:	2340      	movs	r3, #64	; 0x40
  4087ba:	6003      	str	r3, [r0, #0]
  4087bc:	4770      	bx	lr

004087be <usart_enable_rx>:
	p_usart->US_CR = US_CR_RXEN;
  4087be:	2310      	movs	r3, #16
  4087c0:	6003      	str	r3, [r0, #0]
  4087c2:	4770      	bx	lr

004087c4 <usart_write>:
	if (!(p_usart->US_CSR & US_CSR_TXRDY)) {
  4087c4:	6943      	ldr	r3, [r0, #20]
  4087c6:	f013 0f02 	tst.w	r3, #2
  4087ca:	d004      	beq.n	4087d6 <usart_write+0x12>
	p_usart->US_THR = US_THR_TXCHR(c);
  4087cc:	f3c1 0108 	ubfx	r1, r1, #0, #9
  4087d0:	61c1      	str	r1, [r0, #28]
	return 0;
  4087d2:	2000      	movs	r0, #0
  4087d4:	4770      	bx	lr
		return 1;
  4087d6:	2001      	movs	r0, #1
}
  4087d8:	4770      	bx	lr

004087da <usart_read>:
	if (!(p_usart->US_CSR & US_CSR_RXRDY)) {
  4087da:	6943      	ldr	r3, [r0, #20]
  4087dc:	f013 0f01 	tst.w	r3, #1
  4087e0:	d005      	beq.n	4087ee <usart_read+0x14>
	*c = p_usart->US_RHR & US_RHR_RXCHR_Msk;
  4087e2:	6983      	ldr	r3, [r0, #24]
  4087e4:	f3c3 0308 	ubfx	r3, r3, #0, #9
  4087e8:	600b      	str	r3, [r1, #0]
	return 0;
  4087ea:	2000      	movs	r0, #0
  4087ec:	4770      	bx	lr
		return 1;
  4087ee:	2001      	movs	r0, #1
}
  4087f0:	4770      	bx	lr

004087f2 <Dummy_Handler>:

/**
 * \brief Default interrupt handler for unused IRQs.
 */
void Dummy_Handler(void)
{
  4087f2:	e7fe      	b.n	4087f2 <Dummy_Handler>

004087f4 <Reset_Handler>:
{
  4087f4:	b500      	push	{lr}
  4087f6:	b083      	sub	sp, #12
        if (pSrc != pDest) {
  4087f8:	4b25      	ldr	r3, [pc, #148]	; (408890 <Reset_Handler+0x9c>)
  4087fa:	4a26      	ldr	r2, [pc, #152]	; (408894 <Reset_Handler+0xa0>)
  4087fc:	429a      	cmp	r2, r3
  4087fe:	d010      	beq.n	408822 <Reset_Handler+0x2e>
                for (; pDest < &_erelocate;) {
  408800:	4b25      	ldr	r3, [pc, #148]	; (408898 <Reset_Handler+0xa4>)
  408802:	4a23      	ldr	r2, [pc, #140]	; (408890 <Reset_Handler+0x9c>)
  408804:	429a      	cmp	r2, r3
  408806:	d20c      	bcs.n	408822 <Reset_Handler+0x2e>
  408808:	3b01      	subs	r3, #1
  40880a:	1a9b      	subs	r3, r3, r2
  40880c:	f023 0303 	bic.w	r3, r3, #3
  408810:	3304      	adds	r3, #4
  408812:	4413      	add	r3, r2
  408814:	491f      	ldr	r1, [pc, #124]	; (408894 <Reset_Handler+0xa0>)
                        *pDest++ = *pSrc++;
  408816:	f851 0b04 	ldr.w	r0, [r1], #4
  40881a:	f842 0b04 	str.w	r0, [r2], #4
                for (; pDest < &_erelocate;) {
  40881e:	429a      	cmp	r2, r3
  408820:	d1f9      	bne.n	408816 <Reset_Handler+0x22>
        for (pDest = &_szero; pDest < &_ezero;) {
  408822:	4b1e      	ldr	r3, [pc, #120]	; (40889c <Reset_Handler+0xa8>)
  408824:	4a1e      	ldr	r2, [pc, #120]	; (4088a0 <Reset_Handler+0xac>)
  408826:	429a      	cmp	r2, r3
  408828:	d20a      	bcs.n	408840 <Reset_Handler+0x4c>
  40882a:	3b01      	subs	r3, #1
  40882c:	1a9b      	subs	r3, r3, r2
  40882e:	f023 0303 	bic.w	r3, r3, #3
  408832:	3304      	adds	r3, #4
  408834:	4413      	add	r3, r2
                *pDest++ = 0;
  408836:	2100      	movs	r1, #0
  408838:	f842 1b04 	str.w	r1, [r2], #4
        for (pDest = &_szero; pDest < &_ezero;) {
  40883c:	4293      	cmp	r3, r2
  40883e:	d1fb      	bne.n	408838 <Reset_Handler+0x44>
        SCB->VTOR = ((uint32_t) pSrc & SCB_VTOR_TBLOFF_Msk);
  408840:	4a18      	ldr	r2, [pc, #96]	; (4088a4 <Reset_Handler+0xb0>)
  408842:	4b19      	ldr	r3, [pc, #100]	; (4088a8 <Reset_Handler+0xb4>)
  408844:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
  408848:	6093      	str	r3, [r2, #8]
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE uint32_t __get_PRIMASK(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, primask" : "=r" (result) );
  40884a:	f3ef 8310 	mrs	r3, PRIMASK
static volatile uint32_t cpu_irq_critical_section_counter;
static volatile bool     cpu_irq_prev_interrupt_state;

static inline irqflags_t cpu_irq_save(void)
{
	volatile irqflags_t flags = cpu_irq_is_enabled();
  40884e:	fab3 f383 	clz	r3, r3
  408852:	095b      	lsrs	r3, r3, #5
  408854:	9301      	str	r3, [sp, #4]
  __ASM volatile ("cpsid i" : : : "memory");
  408856:	b672      	cpsid	i
  __ASM volatile ("dmb");
  408858:	f3bf 8f5f 	dmb	sy
	cpu_irq_disable();
  40885c:	2200      	movs	r2, #0
  40885e:	4b13      	ldr	r3, [pc, #76]	; (4088ac <Reset_Handler+0xb8>)
  408860:	701a      	strb	r2, [r3, #0]
	return flags;
  408862:	9901      	ldr	r1, [sp, #4]
 */
__always_inline static void fpu_enable(void)
{
	irqflags_t flags;
	flags = cpu_irq_save();
	REG_CPACR |=  (0xFu << 20);
  408864:	4a12      	ldr	r2, [pc, #72]	; (4088b0 <Reset_Handler+0xbc>)
  408866:	6813      	ldr	r3, [r2, #0]
  408868:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
  40886c:	6013      	str	r3, [r2, #0]
  __ASM volatile ("dsb");
  40886e:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb");
  408872:	f3bf 8f6f 	isb	sy
	return (flags);
}

static inline void cpu_irq_restore(irqflags_t flags)
{
	if (cpu_irq_is_enabled_flags(flags))
  408876:	b129      	cbz	r1, 408884 <Reset_Handler+0x90>
		cpu_irq_enable();
  408878:	2201      	movs	r2, #1
  40887a:	4b0c      	ldr	r3, [pc, #48]	; (4088ac <Reset_Handler+0xb8>)
  40887c:	701a      	strb	r2, [r3, #0]
  __ASM volatile ("dmb");
  40887e:	f3bf 8f5f 	dmb	sy
  __ASM volatile ("cpsie i" : : : "memory");
  408882:	b662      	cpsie	i
        __libc_init_array();
  408884:	4b0b      	ldr	r3, [pc, #44]	; (4088b4 <Reset_Handler+0xc0>)
  408886:	4798      	blx	r3
        main();
  408888:	4b0b      	ldr	r3, [pc, #44]	; (4088b8 <Reset_Handler+0xc4>)
  40888a:	4798      	blx	r3
  40888c:	e7fe      	b.n	40888c <Reset_Handler+0x98>
  40888e:	bf00      	nop
  408890:	20400000 	.word	0x20400000
  408894:	0040db5c 	.word	0x0040db5c
  408898:	204009f8 	.word	0x204009f8
  40889c:	2040cb2c 	.word	0x2040cb2c
  4088a0:	204009f8 	.word	0x204009f8
  4088a4:	e000ed00 	.word	0xe000ed00
  4088a8:	00400000 	.word	0x00400000
  4088ac:	2040003c 	.word	0x2040003c
  4088b0:	e000ed88 	.word	0xe000ed88
  4088b4:	004093b5 	.word	0x004093b5
  4088b8:	004092a1 	.word	0x004092a1

004088bc <SystemCoreClockUpdate>:
}

void SystemCoreClockUpdate( void )
{
  /* Determine clock frequency according to clock register values */
  switch (PMC->PMC_MCKR & (uint32_t) PMC_MCKR_CSS_Msk)
  4088bc:	4b3b      	ldr	r3, [pc, #236]	; (4089ac <SystemCoreClockUpdate+0xf0>)
  4088be:	6b1b      	ldr	r3, [r3, #48]	; 0x30
  4088c0:	f003 0303 	and.w	r3, r3, #3
  4088c4:	2b01      	cmp	r3, #1
  4088c6:	d01d      	beq.n	408904 <SystemCoreClockUpdate+0x48>
  4088c8:	b183      	cbz	r3, 4088ec <SystemCoreClockUpdate+0x30>
  4088ca:	2b02      	cmp	r3, #2
  4088cc:	d036      	beq.n	40893c <SystemCoreClockUpdate+0x80>

    default:
    break;
  }

  if ( (PMC->PMC_MCKR & PMC_MCKR_PRES_Msk) == PMC_MCKR_PRES_CLK_3 )
  4088ce:	4b37      	ldr	r3, [pc, #220]	; (4089ac <SystemCoreClockUpdate+0xf0>)
  4088d0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
  4088d2:	f003 0370 	and.w	r3, r3, #112	; 0x70
  4088d6:	2b70      	cmp	r3, #112	; 0x70
  4088d8:	d05f      	beq.n	40899a <SystemCoreClockUpdate+0xde>
  {
    SystemCoreClock /= 3U;
  }
  else
  {
    SystemCoreClock >>= ((PMC->PMC_MCKR & PMC_MCKR_PRES_Msk) >> PMC_MCKR_PRES_Pos);
  4088da:	4b34      	ldr	r3, [pc, #208]	; (4089ac <SystemCoreClockUpdate+0xf0>)
  4088dc:	6b1a      	ldr	r2, [r3, #48]	; 0x30
  4088de:	4934      	ldr	r1, [pc, #208]	; (4089b0 <SystemCoreClockUpdate+0xf4>)
  4088e0:	f3c2 1202 	ubfx	r2, r2, #4, #3
  4088e4:	680b      	ldr	r3, [r1, #0]
  4088e6:	40d3      	lsrs	r3, r2
  4088e8:	600b      	str	r3, [r1, #0]
  4088ea:	4770      	bx	lr
      if ( SUPC->SUPC_SR & SUPC_SR_OSCSEL )
  4088ec:	4b31      	ldr	r3, [pc, #196]	; (4089b4 <SystemCoreClockUpdate+0xf8>)
  4088ee:	695b      	ldr	r3, [r3, #20]
  4088f0:	f013 0f80 	tst.w	r3, #128	; 0x80
        SystemCoreClock = CHIP_FREQ_XTAL_32K;
  4088f4:	bf14      	ite	ne
  4088f6:	f44f 4200 	movne.w	r2, #32768	; 0x8000
        SystemCoreClock = CHIP_FREQ_SLCK_RC;
  4088fa:	f44f 42fa 	moveq.w	r2, #32000	; 0x7d00
  4088fe:	4b2c      	ldr	r3, [pc, #176]	; (4089b0 <SystemCoreClockUpdate+0xf4>)
  408900:	601a      	str	r2, [r3, #0]
  408902:	e7e4      	b.n	4088ce <SystemCoreClockUpdate+0x12>
      if ( PMC->CKGR_MOR & CKGR_MOR_MOSCSEL )
  408904:	4b29      	ldr	r3, [pc, #164]	; (4089ac <SystemCoreClockUpdate+0xf0>)
  408906:	6a1b      	ldr	r3, [r3, #32]
  408908:	f013 7f80 	tst.w	r3, #16777216	; 0x1000000
  40890c:	d003      	beq.n	408916 <SystemCoreClockUpdate+0x5a>
        SystemCoreClock = CHIP_FREQ_XTAL_12M;
  40890e:	4a2a      	ldr	r2, [pc, #168]	; (4089b8 <SystemCoreClockUpdate+0xfc>)
  408910:	4b27      	ldr	r3, [pc, #156]	; (4089b0 <SystemCoreClockUpdate+0xf4>)
  408912:	601a      	str	r2, [r3, #0]
  408914:	e7db      	b.n	4088ce <SystemCoreClockUpdate+0x12>
        SystemCoreClock = CHIP_FREQ_MAINCK_RC_4MHZ;
  408916:	4a29      	ldr	r2, [pc, #164]	; (4089bc <SystemCoreClockUpdate+0x100>)
  408918:	4b25      	ldr	r3, [pc, #148]	; (4089b0 <SystemCoreClockUpdate+0xf4>)
  40891a:	601a      	str	r2, [r3, #0]
        switch ( PMC->CKGR_MOR & CKGR_MOR_MOSCRCF_Msk )
  40891c:	4b23      	ldr	r3, [pc, #140]	; (4089ac <SystemCoreClockUpdate+0xf0>)
  40891e:	6a1b      	ldr	r3, [r3, #32]
  408920:	f003 0370 	and.w	r3, r3, #112	; 0x70
  408924:	2b10      	cmp	r3, #16
  408926:	d005      	beq.n	408934 <SystemCoreClockUpdate+0x78>
  408928:	2b20      	cmp	r3, #32
  40892a:	d1d0      	bne.n	4088ce <SystemCoreClockUpdate+0x12>
            SystemCoreClock *= 3U;
  40892c:	4a22      	ldr	r2, [pc, #136]	; (4089b8 <SystemCoreClockUpdate+0xfc>)
  40892e:	4b20      	ldr	r3, [pc, #128]	; (4089b0 <SystemCoreClockUpdate+0xf4>)
  408930:	601a      	str	r2, [r3, #0]
          break;
  408932:	e7cc      	b.n	4088ce <SystemCoreClockUpdate+0x12>
            SystemCoreClock *= 2U;
  408934:	4a22      	ldr	r2, [pc, #136]	; (4089c0 <SystemCoreClockUpdate+0x104>)
  408936:	4b1e      	ldr	r3, [pc, #120]	; (4089b0 <SystemCoreClockUpdate+0xf4>)
  408938:	601a      	str	r2, [r3, #0]
          break;
  40893a:	e7c8      	b.n	4088ce <SystemCoreClockUpdate+0x12>
      if ( PMC->CKGR_MOR & CKGR_MOR_MOSCSEL )
  40893c:	4b1b      	ldr	r3, [pc, #108]	; (4089ac <SystemCoreClockUpdate+0xf0>)
  40893e:	6a1b      	ldr	r3, [r3, #32]
  408940:	f013 7f80 	tst.w	r3, #16777216	; 0x1000000
  408944:	d016      	beq.n	408974 <SystemCoreClockUpdate+0xb8>
        SystemCoreClock = CHIP_FREQ_XTAL_12M ;
  408946:	4a1c      	ldr	r2, [pc, #112]	; (4089b8 <SystemCoreClockUpdate+0xfc>)
  408948:	4b19      	ldr	r3, [pc, #100]	; (4089b0 <SystemCoreClockUpdate+0xf4>)
  40894a:	601a      	str	r2, [r3, #0]
      if ( (uint32_t) (PMC->PMC_MCKR & (uint32_t) PMC_MCKR_CSS_Msk) == PMC_MCKR_CSS_PLLA_CLK )
  40894c:	4b17      	ldr	r3, [pc, #92]	; (4089ac <SystemCoreClockUpdate+0xf0>)
  40894e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
  408950:	f003 0303 	and.w	r3, r3, #3
  408954:	2b02      	cmp	r3, #2
  408956:	d1ba      	bne.n	4088ce <SystemCoreClockUpdate+0x12>
        SystemCoreClock *= ((((PMC->CKGR_PLLAR) & CKGR_PLLAR_MULA_Msk) >> CKGR_PLLAR_MULA_Pos) + 1U);
  408958:	4a14      	ldr	r2, [pc, #80]	; (4089ac <SystemCoreClockUpdate+0xf0>)
  40895a:	6a91      	ldr	r1, [r2, #40]	; 0x28
        SystemCoreClock /= ((((PMC->CKGR_PLLAR) & CKGR_PLLAR_DIVA_Msk) >> CKGR_PLLAR_DIVA_Pos));
  40895c:	6a92      	ldr	r2, [r2, #40]	; 0x28
  40895e:	4814      	ldr	r0, [pc, #80]	; (4089b0 <SystemCoreClockUpdate+0xf4>)
        SystemCoreClock *= ((((PMC->CKGR_PLLAR) & CKGR_PLLAR_MULA_Msk) >> CKGR_PLLAR_MULA_Pos) + 1U);
  408960:	f3c1 410a 	ubfx	r1, r1, #16, #11
  408964:	6803      	ldr	r3, [r0, #0]
  408966:	fb01 3303 	mla	r3, r1, r3, r3
        SystemCoreClock /= ((((PMC->CKGR_PLLAR) & CKGR_PLLAR_DIVA_Msk) >> CKGR_PLLAR_DIVA_Pos));
  40896a:	b2d2      	uxtb	r2, r2
  40896c:	fbb3 f3f2 	udiv	r3, r3, r2
  408970:	6003      	str	r3, [r0, #0]
  408972:	e7ac      	b.n	4088ce <SystemCoreClockUpdate+0x12>
        SystemCoreClock = CHIP_FREQ_MAINCK_RC_4MHZ;
  408974:	4a11      	ldr	r2, [pc, #68]	; (4089bc <SystemCoreClockUpdate+0x100>)
  408976:	4b0e      	ldr	r3, [pc, #56]	; (4089b0 <SystemCoreClockUpdate+0xf4>)
  408978:	601a      	str	r2, [r3, #0]
        switch ( PMC->CKGR_MOR & CKGR_MOR_MOSCRCF_Msk )
  40897a:	4b0c      	ldr	r3, [pc, #48]	; (4089ac <SystemCoreClockUpdate+0xf0>)
  40897c:	6a1b      	ldr	r3, [r3, #32]
  40897e:	f003 0370 	and.w	r3, r3, #112	; 0x70
  408982:	2b10      	cmp	r3, #16
  408984:	d005      	beq.n	408992 <SystemCoreClockUpdate+0xd6>
  408986:	2b20      	cmp	r3, #32
  408988:	d1e0      	bne.n	40894c <SystemCoreClockUpdate+0x90>
            SystemCoreClock *= 3U;
  40898a:	4a0b      	ldr	r2, [pc, #44]	; (4089b8 <SystemCoreClockUpdate+0xfc>)
  40898c:	4b08      	ldr	r3, [pc, #32]	; (4089b0 <SystemCoreClockUpdate+0xf4>)
  40898e:	601a      	str	r2, [r3, #0]
          break;
  408990:	e7dc      	b.n	40894c <SystemCoreClockUpdate+0x90>
            SystemCoreClock *= 2U;
  408992:	4a0b      	ldr	r2, [pc, #44]	; (4089c0 <SystemCoreClockUpdate+0x104>)
  408994:	4b06      	ldr	r3, [pc, #24]	; (4089b0 <SystemCoreClockUpdate+0xf4>)
  408996:	601a      	str	r2, [r3, #0]
          break;
  408998:	e7d8      	b.n	40894c <SystemCoreClockUpdate+0x90>
    SystemCoreClock /= 3U;
  40899a:	4a05      	ldr	r2, [pc, #20]	; (4089b0 <SystemCoreClockUpdate+0xf4>)
  40899c:	6813      	ldr	r3, [r2, #0]
  40899e:	4909      	ldr	r1, [pc, #36]	; (4089c4 <SystemCoreClockUpdate+0x108>)
  4089a0:	fba1 1303 	umull	r1, r3, r1, r3
  4089a4:	085b      	lsrs	r3, r3, #1
  4089a6:	6013      	str	r3, [r2, #0]
  4089a8:	4770      	bx	lr
  4089aa:	bf00      	nop
  4089ac:	400e0600 	.word	0x400e0600
  4089b0:	20400040 	.word	0x20400040
  4089b4:	400e1810 	.word	0x400e1810
  4089b8:	00b71b00 	.word	0x00b71b00
  4089bc:	003d0900 	.word	0x003d0900
  4089c0:	007a1200 	.word	0x007a1200
  4089c4:	aaaaaaab 	.word	0xaaaaaaab

004089c8 <system_init_flash>:
 * Initialize flash.
 */
void system_init_flash( uint32_t ul_clk )
{
  /* Set FWS for embedded Flash access according to operating frequency */
  if ( ul_clk < CHIP_FREQ_FWS_0 )
  4089c8:	4b12      	ldr	r3, [pc, #72]	; (408a14 <system_init_flash+0x4c>)
  4089ca:	4298      	cmp	r0, r3
  4089cc:	d911      	bls.n	4089f2 <system_init_flash+0x2a>
  {
    EFC->EEFC_FMR = EEFC_FMR_FWS(0)|EEFC_FMR_CLOE;
  }
  else
  {
    if (ul_clk < CHIP_FREQ_FWS_1)
  4089ce:	4b12      	ldr	r3, [pc, #72]	; (408a18 <system_init_flash+0x50>)
  4089d0:	4298      	cmp	r0, r3
  4089d2:	d913      	bls.n	4089fc <system_init_flash+0x34>
    {
      EFC->EEFC_FMR = EEFC_FMR_FWS(1)|EEFC_FMR_CLOE;
    }
    else
    {
      if (ul_clk < CHIP_FREQ_FWS_2)
  4089d4:	4b11      	ldr	r3, [pc, #68]	; (408a1c <system_init_flash+0x54>)
  4089d6:	4298      	cmp	r0, r3
  4089d8:	d914      	bls.n	408a04 <system_init_flash+0x3c>
      {
        EFC->EEFC_FMR = EEFC_FMR_FWS(2)|EEFC_FMR_CLOE;
      }
      else
      {
        if ( ul_clk < CHIP_FREQ_FWS_3 )
  4089da:	4b11      	ldr	r3, [pc, #68]	; (408a20 <system_init_flash+0x58>)
  4089dc:	4298      	cmp	r0, r3
  4089de:	d915      	bls.n	408a0c <system_init_flash+0x44>
        {
          EFC->EEFC_FMR = EEFC_FMR_FWS(3)|EEFC_FMR_CLOE;
        }
        else
        {
          if ( ul_clk < CHIP_FREQ_FWS_4 )
  4089e0:	4b10      	ldr	r3, [pc, #64]	; (408a24 <system_init_flash+0x5c>)
  4089e2:	4298      	cmp	r0, r3
          {
            EFC->EEFC_FMR = EEFC_FMR_FWS(4)|EEFC_FMR_CLOE;
  4089e4:	bf94      	ite	ls
  4089e6:	f04f 2204 	movls.w	r2, #67109888	; 0x4000400
          }
          else
          {
            EFC->EEFC_FMR = EEFC_FMR_FWS(5)|EEFC_FMR_CLOE;
  4089ea:	4a0f      	ldrhi	r2, [pc, #60]	; (408a28 <system_init_flash+0x60>)
  4089ec:	4b0f      	ldr	r3, [pc, #60]	; (408a2c <system_init_flash+0x64>)
  4089ee:	601a      	str	r2, [r3, #0]
  4089f0:	4770      	bx	lr
    EFC->EEFC_FMR = EEFC_FMR_FWS(0)|EEFC_FMR_CLOE;
  4089f2:	f04f 6280 	mov.w	r2, #67108864	; 0x4000000
  4089f6:	4b0d      	ldr	r3, [pc, #52]	; (408a2c <system_init_flash+0x64>)
  4089f8:	601a      	str	r2, [r3, #0]
  4089fa:	4770      	bx	lr
      EFC->EEFC_FMR = EEFC_FMR_FWS(1)|EEFC_FMR_CLOE;
  4089fc:	4a0c      	ldr	r2, [pc, #48]	; (408a30 <system_init_flash+0x68>)
  4089fe:	4b0b      	ldr	r3, [pc, #44]	; (408a2c <system_init_flash+0x64>)
  408a00:	601a      	str	r2, [r3, #0]
  408a02:	4770      	bx	lr
        EFC->EEFC_FMR = EEFC_FMR_FWS(2)|EEFC_FMR_CLOE;
  408a04:	4a0b      	ldr	r2, [pc, #44]	; (408a34 <system_init_flash+0x6c>)
  408a06:	4b09      	ldr	r3, [pc, #36]	; (408a2c <system_init_flash+0x64>)
  408a08:	601a      	str	r2, [r3, #0]
  408a0a:	4770      	bx	lr
          EFC->EEFC_FMR = EEFC_FMR_FWS(3)|EEFC_FMR_CLOE;
  408a0c:	4a0a      	ldr	r2, [pc, #40]	; (408a38 <system_init_flash+0x70>)
  408a0e:	4b07      	ldr	r3, [pc, #28]	; (408a2c <system_init_flash+0x64>)
  408a10:	601a      	str	r2, [r3, #0]
  408a12:	4770      	bx	lr
  408a14:	01312cff 	.word	0x01312cff
  408a18:	026259ff 	.word	0x026259ff
  408a1c:	039386ff 	.word	0x039386ff
  408a20:	04c4b3ff 	.word	0x04c4b3ff
  408a24:	05f5e0ff 	.word	0x05f5e0ff
  408a28:	04000500 	.word	0x04000500
  408a2c:	400e0c00 	.word	0x400e0c00
  408a30:	04000100 	.word	0x04000100
  408a34:	04000200 	.word	0x04000200
  408a38:	04000300 	.word	0x04000300

00408a3c <_sbrk>:
{
	static unsigned char *heap = NULL;
	unsigned char *prev_heap;
	int ramend = (int)&__ram_end__;

	if (heap == NULL) {
  408a3c:	4b0a      	ldr	r3, [pc, #40]	; (408a68 <_sbrk+0x2c>)
  408a3e:	681b      	ldr	r3, [r3, #0]
  408a40:	b153      	cbz	r3, 408a58 <_sbrk+0x1c>
		heap = (unsigned char *)&_end;
	}
	prev_heap = heap;
  408a42:	4b09      	ldr	r3, [pc, #36]	; (408a68 <_sbrk+0x2c>)
  408a44:	681b      	ldr	r3, [r3, #0]

	if (((int)prev_heap + incr) > ramend) {
  408a46:	181a      	adds	r2, r3, r0
  408a48:	4908      	ldr	r1, [pc, #32]	; (408a6c <_sbrk+0x30>)
  408a4a:	4291      	cmp	r1, r2
  408a4c:	db08      	blt.n	408a60 <_sbrk+0x24>
		return (caddr_t) -1;	
	}

	heap += incr;
  408a4e:	4610      	mov	r0, r2
  408a50:	4a05      	ldr	r2, [pc, #20]	; (408a68 <_sbrk+0x2c>)
  408a52:	6010      	str	r0, [r2, #0]

	return (caddr_t) prev_heap;
  408a54:	4618      	mov	r0, r3
  408a56:	4770      	bx	lr
		heap = (unsigned char *)&_end;
  408a58:	4a05      	ldr	r2, [pc, #20]	; (408a70 <_sbrk+0x34>)
  408a5a:	4b03      	ldr	r3, [pc, #12]	; (408a68 <_sbrk+0x2c>)
  408a5c:	601a      	str	r2, [r3, #0]
  408a5e:	e7f0      	b.n	408a42 <_sbrk+0x6>
		return (caddr_t) -1;	
  408a60:	f04f 30ff 	mov.w	r0, #4294967295
}
  408a64:	4770      	bx	lr
  408a66:	bf00      	nop
  408a68:	2040c43c 	.word	0x2040c43c
  408a6c:	2045fffc 	.word	0x2045fffc
  408a70:	2040ed30 	.word	0x2040ed30

00408a74 <_close>:
}

extern int _close(int file)
{
	return -1;
}
  408a74:	f04f 30ff 	mov.w	r0, #4294967295
  408a78:	4770      	bx	lr

00408a7a <_fstat>:

extern int _fstat(int file, struct stat *st)
{
	st->st_mode = S_IFCHR;
  408a7a:	f44f 5300 	mov.w	r3, #8192	; 0x2000
  408a7e:	604b      	str	r3, [r1, #4]

	return 0;
}
  408a80:	2000      	movs	r0, #0
  408a82:	4770      	bx	lr

00408a84 <_isatty>:

extern int _isatty(int file)
{
	return 1;
}
  408a84:	2001      	movs	r0, #1
  408a86:	4770      	bx	lr

00408a88 <_lseek>:

extern int _lseek(int file, int ptr, int dir)
{
	return 0;
}
  408a88:	2000      	movs	r0, #0
  408a8a:	4770      	bx	lr

00408a8c <resolve_cb>:
 * \param[in] hostIp Server IP.
 *
 * \return None.
 */
static void resolve_cb(uint8_t *hostName, uint32_t hostIp)
{
  408a8c:	b510      	push	{r4, lr}
  408a8e:	b082      	sub	sp, #8
	gu32HostIp = hostIp;
  408a90:	4b07      	ldr	r3, [pc, #28]	; (408ab0 <resolve_cb+0x24>)
  408a92:	6019      	str	r1, [r3, #0]
	gbHostIpByName = true;
	printf("resolve_cb: %s IP address is %d.%d.%d.%d\r\n\r\n", hostName,
			(int)IPV4_BYTE(hostIp, 0), (int)IPV4_BYTE(hostIp, 1),
			(int)IPV4_BYTE(hostIp, 2), (int)IPV4_BYTE(hostIp, 3));
  408a94:	0e0b      	lsrs	r3, r1, #24
	printf("resolve_cb: %s IP address is %d.%d.%d.%d\r\n\r\n", hostName,
  408a96:	9301      	str	r3, [sp, #4]
  408a98:	f3c1 4307 	ubfx	r3, r1, #16, #8
  408a9c:	9300      	str	r3, [sp, #0]
  408a9e:	f3c1 2307 	ubfx	r3, r1, #8, #8
  408aa2:	b2ca      	uxtb	r2, r1
  408aa4:	4601      	mov	r1, r0
  408aa6:	4803      	ldr	r0, [pc, #12]	; (408ab4 <resolve_cb+0x28>)
  408aa8:	4c03      	ldr	r4, [pc, #12]	; (408ab8 <resolve_cb+0x2c>)
  408aaa:	47a0      	blx	r4
}
  408aac:	b002      	add	sp, #8
  408aae:	bd10      	pop	{r4, pc}
  408ab0:	2040c9bc 	.word	0x2040c9bc
  408ab4:	0040d638 	.word	0x0040d638
  408ab8:	00409405 	.word	0x00409405

00408abc <socket_cb>:
 */
static void socket_cb(SOCKET sock, uint8_t u8Msg, void *pvMsg)
{
  
	/* Check for socket event on TCP socket. */
	if (sock == tcp_client_socket) {
  408abc:	4b3b      	ldr	r3, [pc, #236]	; (408bac <socket_cb+0xf0>)
  408abe:	f993 3000 	ldrsb.w	r3, [r3]
  408ac2:	4283      	cmp	r3, r0
  408ac4:	d000      	beq.n	408ac8 <socket_cb+0xc>
  408ac6:	4770      	bx	lr
{
  408ac8:	b570      	push	{r4, r5, r6, lr}
  408aca:	4614      	mov	r4, r2
    
		switch (u8Msg) {
  408acc:	2905      	cmp	r1, #5
  408ace:	d002      	beq.n	408ad6 <socket_cb+0x1a>
  408ad0:	2906      	cmp	r1, #6
  408ad2:	d047      	beq.n	408b64 <socket_cb+0xa8>
  408ad4:	bd70      	pop	{r4, r5, r6, pc}
		case SOCKET_MSG_CONNECT:
		{
      printf("socket_msg_connect\n"); 
  408ad6:	4836      	ldr	r0, [pc, #216]	; (408bb0 <socket_cb+0xf4>)
  408ad8:	4b36      	ldr	r3, [pc, #216]	; (408bb4 <socket_cb+0xf8>)
  408ada:	4798      	blx	r3
			if (gbTcpConnection) {
  408adc:	4b36      	ldr	r3, [pc, #216]	; (408bb8 <socket_cb+0xfc>)
  408ade:	781b      	ldrb	r3, [r3, #0]
  408ae0:	2b00      	cmp	r3, #0
  408ae2:	d04e      	beq.n	408b82 <socket_cb+0xc6>
				memset(gau8ReceivedBuffer, 0, sizeof(gau8ReceivedBuffer));
  408ae4:	4d35      	ldr	r5, [pc, #212]	; (408bbc <socket_cb+0x100>)
  408ae6:	f44f 62af 	mov.w	r2, #1400	; 0x578
  408aea:	2100      	movs	r1, #0
  408aec:	4628      	mov	r0, r5
  408aee:	4b34      	ldr	r3, [pc, #208]	; (408bc0 <socket_cb+0x104>)
  408af0:	4798      	blx	r3
				sprintf((char *)gau8ReceivedBuffer, "%s", MAIN_PREFIX_BUFFER);
  408af2:	4e34      	ldr	r6, [pc, #208]	; (408bc4 <socket_cb+0x108>)
  408af4:	ce0f      	ldmia	r6!, {r0, r1, r2, r3}
  408af6:	c50f      	stmia	r5!, {r0, r1, r2, r3}
  408af8:	ce0f      	ldmia	r6!, {r0, r1, r2, r3}
  408afa:	c50f      	stmia	r5!, {r0, r1, r2, r3}
  408afc:	6833      	ldr	r3, [r6, #0]
  408afe:	702b      	strb	r3, [r5, #0]

				tstrSocketConnectMsg *pstrConnect = (tstrSocketConnectMsg *)pvMsg;
				if (pstrConnect && pstrConnect->s8Error >= SOCK_ERR_NO_ERROR) {
  408b00:	b314      	cbz	r4, 408b48 <socket_cb+0x8c>
  408b02:	f994 3001 	ldrsb.w	r3, [r4, #1]
  408b06:	2b00      	cmp	r3, #0
  408b08:	db1e      	blt.n	408b48 <socket_cb+0x8c>
          printf("send \n");
  408b0a:	482f      	ldr	r0, [pc, #188]	; (408bc8 <socket_cb+0x10c>)
  408b0c:	4b29      	ldr	r3, [pc, #164]	; (408bb4 <socket_cb+0xf8>)
  408b0e:	4798      	blx	r3
					send(tcp_client_socket, gau8ReceivedBuffer, strlen((char *)gau8ReceivedBuffer), 0);
  408b10:	f1a5 0420 	sub.w	r4, r5, #32
  408b14:	4620      	mov	r0, r4
  408b16:	4b2d      	ldr	r3, [pc, #180]	; (408bcc <socket_cb+0x110>)
  408b18:	4798      	blx	r3
  408b1a:	4d24      	ldr	r5, [pc, #144]	; (408bac <socket_cb+0xf0>)
  408b1c:	2300      	movs	r3, #0
  408b1e:	b282      	uxth	r2, r0
  408b20:	4621      	mov	r1, r4
  408b22:	f995 0000 	ldrsb.w	r0, [r5]
  408b26:	4e2a      	ldr	r6, [pc, #168]	; (408bd0 <socket_cb+0x114>)
  408b28:	47b0      	blx	r6

					memset(gau8ReceivedBuffer, 0, MAIN_WIFI_M2M_BUFFER_SIZE);
  408b2a:	f44f 66af 	mov.w	r6, #1400	; 0x578
  408b2e:	4632      	mov	r2, r6
  408b30:	2100      	movs	r1, #0
  408b32:	4620      	mov	r0, r4
  408b34:	4b22      	ldr	r3, [pc, #136]	; (408bc0 <socket_cb+0x104>)
  408b36:	4798      	blx	r3
					recv(tcp_client_socket, &gau8ReceivedBuffer[0], MAIN_WIFI_M2M_BUFFER_SIZE, 0);
  408b38:	2300      	movs	r3, #0
  408b3a:	4632      	mov	r2, r6
  408b3c:	4621      	mov	r1, r4
  408b3e:	f995 0000 	ldrsb.w	r0, [r5]
  408b42:	4c24      	ldr	r4, [pc, #144]	; (408bd4 <socket_cb+0x118>)
  408b44:	47a0      	blx	r4
  408b46:	bd70      	pop	{r4, r5, r6, pc}
				} else {
					printf("socket_cb: connect error!\r\n");
  408b48:	4823      	ldr	r0, [pc, #140]	; (408bd8 <socket_cb+0x11c>)
  408b4a:	4b1a      	ldr	r3, [pc, #104]	; (408bb4 <socket_cb+0xf8>)
  408b4c:	4798      	blx	r3
					gbTcpConnection = false;
  408b4e:	2200      	movs	r2, #0
  408b50:	4b19      	ldr	r3, [pc, #100]	; (408bb8 <socket_cb+0xfc>)
  408b52:	701a      	strb	r2, [r3, #0]
					close(tcp_client_socket);
  408b54:	4c15      	ldr	r4, [pc, #84]	; (408bac <socket_cb+0xf0>)
  408b56:	f994 0000 	ldrsb.w	r0, [r4]
  408b5a:	4b20      	ldr	r3, [pc, #128]	; (408bdc <socket_cb+0x120>)
  408b5c:	4798      	blx	r3
					tcp_client_socket = -1;
  408b5e:	23ff      	movs	r3, #255	; 0xff
  408b60:	7023      	strb	r3, [r4, #0]
  408b62:	bd70      	pop	{r4, r5, r6, pc}
		{
			char *pcIndxPtr;
			char *pcEndPtr;

			tstrSocketRecvMsg *pstrRecv = (tstrSocketRecvMsg *)pvMsg;
			if (pstrRecv && pstrRecv->s16BufferSize > 0) {
  408b64:	b11a      	cbz	r2, 408b6e <socket_cb+0xb2>
  408b66:	f9b2 3004 	ldrsh.w	r3, [r2, #4]
  408b6a:	2b00      	cmp	r3, #0
  408b6c:	dc0a      	bgt.n	408b84 <socket_cb+0xc8>
        printf(pstrRecv->pu8Buffer);
				
				memset(gau8ReceivedBuffer, 0, sizeof(gau8ReceivedBuffer));
				recv(tcp_client_socket, &gau8ReceivedBuffer[0], MAIN_WIFI_M2M_BUFFER_SIZE, 0);
			} else {
				printf("socket_cb: recv error!\r\n");
  408b6e:	481c      	ldr	r0, [pc, #112]	; (408be0 <socket_cb+0x124>)
  408b70:	4b10      	ldr	r3, [pc, #64]	; (408bb4 <socket_cb+0xf8>)
  408b72:	4798      	blx	r3
				close(tcp_client_socket);
  408b74:	4c0d      	ldr	r4, [pc, #52]	; (408bac <socket_cb+0xf0>)
  408b76:	f994 0000 	ldrsb.w	r0, [r4]
  408b7a:	4b18      	ldr	r3, [pc, #96]	; (408bdc <socket_cb+0x120>)
  408b7c:	4798      	blx	r3
				tcp_client_socket = -1;
  408b7e:	23ff      	movs	r3, #255	; 0xff
  408b80:	7023      	strb	r3, [r4, #0]
  408b82:	bd70      	pop	{r4, r5, r6, pc}
        printf(pstrRecv->pu8Buffer);
  408b84:	6810      	ldr	r0, [r2, #0]
  408b86:	4b0b      	ldr	r3, [pc, #44]	; (408bb4 <socket_cb+0xf8>)
  408b88:	4798      	blx	r3
				memset(gau8ReceivedBuffer, 0, sizeof(gau8ReceivedBuffer));
  408b8a:	4c0c      	ldr	r4, [pc, #48]	; (408bbc <socket_cb+0x100>)
  408b8c:	f44f 65af 	mov.w	r5, #1400	; 0x578
  408b90:	462a      	mov	r2, r5
  408b92:	2100      	movs	r1, #0
  408b94:	4620      	mov	r0, r4
  408b96:	4b0a      	ldr	r3, [pc, #40]	; (408bc0 <socket_cb+0x104>)
  408b98:	4798      	blx	r3
				recv(tcp_client_socket, &gau8ReceivedBuffer[0], MAIN_WIFI_M2M_BUFFER_SIZE, 0);
  408b9a:	2300      	movs	r3, #0
  408b9c:	462a      	mov	r2, r5
  408b9e:	4621      	mov	r1, r4
  408ba0:	4802      	ldr	r0, [pc, #8]	; (408bac <socket_cb+0xf0>)
  408ba2:	f990 0000 	ldrsb.w	r0, [r0]
  408ba6:	4c0b      	ldr	r4, [pc, #44]	; (408bd4 <socket_cb+0x118>)
  408ba8:	47a0      	blx	r4
  408baa:	bd70      	pop	{r4, r5, r6, pc}
  408bac:	20400044 	.word	0x20400044
  408bb0:	0040d668 	.word	0x0040d668
  408bb4:	00409405 	.word	0x00409405
  408bb8:	2040c9b8 	.word	0x2040c9b8
  408bbc:	2040c440 	.word	0x2040c440
  408bc0:	00409561 	.word	0x00409561
  408bc4:	0040d67c 	.word	0x0040d67c
  408bc8:	0040d6a0 	.word	0x0040d6a0
  408bcc:	004097c1 	.word	0x004097c1
  408bd0:	00407879 	.word	0x00407879
  408bd4:	00407915 	.word	0x00407915
  408bd8:	0040d6a8 	.word	0x0040d6a8
  408bdc:	004079b5 	.word	0x004079b5
  408be0:	0040d6c4 	.word	0x0040d6c4

00408be4 <wifi_cb>:
 * \param[in] pvMsg A pointer to a buffer containing the notification parameters.
 *
 * \return None.
 */
static void wifi_cb(uint8_t u8MsgType, void *pvMsg)
{
  408be4:	b510      	push	{r4, lr}
  408be6:	b082      	sub	sp, #8
	switch (u8MsgType) {
  408be8:	282c      	cmp	r0, #44	; 0x2c
  408bea:	d003      	beq.n	408bf4 <wifi_cb+0x10>
  408bec:	2832      	cmp	r0, #50	; 0x32
  408bee:	d013      	beq.n	408c18 <wifi_cb+0x34>
	default:
	{
		break;
	}
	}
}
  408bf0:	b002      	add	sp, #8
  408bf2:	bd10      	pop	{r4, pc}
		if (pstrWifiState->u8CurrState == M2M_WIFI_CONNECTED) {
  408bf4:	780b      	ldrb	r3, [r1, #0]
  408bf6:	2b01      	cmp	r3, #1
  408bf8:	d008      	beq.n	408c0c <wifi_cb+0x28>
		} else if (pstrWifiState->u8CurrState == M2M_WIFI_DISCONNECTED) {
  408bfa:	2b00      	cmp	r3, #0
  408bfc:	d1f8      	bne.n	408bf0 <wifi_cb+0xc>
			printf("wifi_cb: M2M_WIFI_DISCONNECTED\r\n");
  408bfe:	480d      	ldr	r0, [pc, #52]	; (408c34 <wifi_cb+0x50>)
  408c00:	4b0d      	ldr	r3, [pc, #52]	; (408c38 <wifi_cb+0x54>)
  408c02:	4798      	blx	r3
 			wifi_connected = 0;
  408c04:	2200      	movs	r2, #0
  408c06:	4b0d      	ldr	r3, [pc, #52]	; (408c3c <wifi_cb+0x58>)
  408c08:	701a      	strb	r2, [r3, #0]
  408c0a:	e7f1      	b.n	408bf0 <wifi_cb+0xc>
			printf("wifi_cb: M2M_WIFI_CONNECTED\r\n");
  408c0c:	480c      	ldr	r0, [pc, #48]	; (408c40 <wifi_cb+0x5c>)
  408c0e:	4b0a      	ldr	r3, [pc, #40]	; (408c38 <wifi_cb+0x54>)
  408c10:	4798      	blx	r3
			m2m_wifi_request_dhcp_client();
  408c12:	4b0c      	ldr	r3, [pc, #48]	; (408c44 <wifi_cb+0x60>)
  408c14:	4798      	blx	r3
  408c16:	e7eb      	b.n	408bf0 <wifi_cb+0xc>
		printf("wifi_cb: IP address is %u.%u.%u.%u\r\n",
  408c18:	788b      	ldrb	r3, [r1, #2]
  408c1a:	784a      	ldrb	r2, [r1, #1]
  408c1c:	7808      	ldrb	r0, [r1, #0]
  408c1e:	78c9      	ldrb	r1, [r1, #3]
  408c20:	9100      	str	r1, [sp, #0]
  408c22:	4601      	mov	r1, r0
  408c24:	4808      	ldr	r0, [pc, #32]	; (408c48 <wifi_cb+0x64>)
  408c26:	4c04      	ldr	r4, [pc, #16]	; (408c38 <wifi_cb+0x54>)
  408c28:	47a0      	blx	r4
		wifi_connected = M2M_WIFI_CONNECTED;
  408c2a:	2201      	movs	r2, #1
  408c2c:	4b03      	ldr	r3, [pc, #12]	; (408c3c <wifi_cb+0x58>)
  408c2e:	701a      	strb	r2, [r3, #0]
}
  408c30:	e7de      	b.n	408bf0 <wifi_cb+0xc>
  408c32:	bf00      	nop
  408c34:	0040d890 	.word	0x0040d890
  408c38:	00409405 	.word	0x00409405
  408c3c:	2040c9c0 	.word	0x2040c9c0
  408c40:	0040d870 	.word	0x0040d870
  408c44:	00406275 	.word	0x00406275
  408c48:	0040d8b4 	.word	0x0040d8b4

00408c4c <usart_serial_getchar>:
 * \param p_usart   Base address of the USART instance.
 * \param data   Data to read
 *
 */
static inline void usart_serial_getchar(usart_if p_usart, uint8_t *data)
{
  408c4c:	b5f0      	push	{r4, r5, r6, r7, lr}
  408c4e:	b083      	sub	sp, #12
  408c50:	4605      	mov	r5, r0
  408c52:	460c      	mov	r4, r1
	uint32_t val = 0;
  408c54:	2300      	movs	r3, #0
  408c56:	9301      	str	r3, [sp, #4]
	if (UART == (Uart*)p_usart) {
		while (uart_read((Uart*)p_usart, data));
	}
#else
# ifdef UART0
	if (UART0 == (Uart*)p_usart) {
  408c58:	4b2a      	ldr	r3, [pc, #168]	; (408d04 <usart_serial_getchar+0xb8>)
  408c5a:	4298      	cmp	r0, r3
  408c5c:	d013      	beq.n	408c86 <usart_serial_getchar+0x3a>
		while (uart_read((Uart*)p_usart, data));
	}
# endif
# ifdef UART1
	if (UART1 == (Uart*)p_usart) {
  408c5e:	4b2a      	ldr	r3, [pc, #168]	; (408d08 <usart_serial_getchar+0xbc>)
  408c60:	4298      	cmp	r0, r3
  408c62:	d018      	beq.n	408c96 <usart_serial_getchar+0x4a>
		while (uart_read((Uart*)p_usart, data));
	}
# endif
# ifdef UART2
	if (UART2 == (Uart*)p_usart) {
  408c64:	4b29      	ldr	r3, [pc, #164]	; (408d0c <usart_serial_getchar+0xc0>)
  408c66:	4298      	cmp	r0, r3
  408c68:	d01d      	beq.n	408ca6 <usart_serial_getchar+0x5a>
		while (uart_read((Uart*)p_usart, data));
	}
# endif
# ifdef UART3
	if (UART3 == (Uart*)p_usart) {
  408c6a:	4b29      	ldr	r3, [pc, #164]	; (408d10 <usart_serial_getchar+0xc4>)
  408c6c:	429d      	cmp	r5, r3
  408c6e:	d022      	beq.n	408cb6 <usart_serial_getchar+0x6a>
		while (usart_read(p_usart, &val));
		*data = (uint8_t)(val & 0xFF);
	}
#else
# ifdef USART0
	if (USART0 == p_usart) {
  408c70:	4b28      	ldr	r3, [pc, #160]	; (408d14 <usart_serial_getchar+0xc8>)
  408c72:	429d      	cmp	r5, r3
  408c74:	d027      	beq.n	408cc6 <usart_serial_getchar+0x7a>
		while (usart_read(p_usart, &val));
		*data = (uint8_t)(val & 0xFF);
	}
# endif
# ifdef USART1
	if (USART1 == p_usart) {
  408c76:	4b28      	ldr	r3, [pc, #160]	; (408d18 <usart_serial_getchar+0xcc>)
  408c78:	429d      	cmp	r5, r3
  408c7a:	d02e      	beq.n	408cda <usart_serial_getchar+0x8e>
		while (usart_read(p_usart, &val));
		*data = (uint8_t)(val & 0xFF);
	}
# endif
# ifdef USART2
	if (USART2 == p_usart) {
  408c7c:	4b27      	ldr	r3, [pc, #156]	; (408d1c <usart_serial_getchar+0xd0>)
  408c7e:	429d      	cmp	r5, r3
  408c80:	d035      	beq.n	408cee <usart_serial_getchar+0xa2>
		*data = (uint8_t)(val & 0xFF);
	}
# endif
#endif /* ifdef USART */

}
  408c82:	b003      	add	sp, #12
  408c84:	bdf0      	pop	{r4, r5, r6, r7, pc}
		while (uart_read((Uart*)p_usart, data));
  408c86:	461f      	mov	r7, r3
  408c88:	4e25      	ldr	r6, [pc, #148]	; (408d20 <usart_serial_getchar+0xd4>)
  408c8a:	4621      	mov	r1, r4
  408c8c:	4638      	mov	r0, r7
  408c8e:	47b0      	blx	r6
  408c90:	2800      	cmp	r0, #0
  408c92:	d1fa      	bne.n	408c8a <usart_serial_getchar+0x3e>
  408c94:	e7e9      	b.n	408c6a <usart_serial_getchar+0x1e>
		while (uart_read((Uart*)p_usart, data));
  408c96:	461f      	mov	r7, r3
  408c98:	4e21      	ldr	r6, [pc, #132]	; (408d20 <usart_serial_getchar+0xd4>)
  408c9a:	4621      	mov	r1, r4
  408c9c:	4638      	mov	r0, r7
  408c9e:	47b0      	blx	r6
  408ca0:	2800      	cmp	r0, #0
  408ca2:	d1fa      	bne.n	408c9a <usart_serial_getchar+0x4e>
  408ca4:	e7e4      	b.n	408c70 <usart_serial_getchar+0x24>
		while (uart_read((Uart*)p_usart, data));
  408ca6:	461f      	mov	r7, r3
  408ca8:	4e1d      	ldr	r6, [pc, #116]	; (408d20 <usart_serial_getchar+0xd4>)
  408caa:	4621      	mov	r1, r4
  408cac:	4638      	mov	r0, r7
  408cae:	47b0      	blx	r6
  408cb0:	2800      	cmp	r0, #0
  408cb2:	d1fa      	bne.n	408caa <usart_serial_getchar+0x5e>
  408cb4:	e7df      	b.n	408c76 <usart_serial_getchar+0x2a>
		while (uart_read((Uart*)p_usart, data));
  408cb6:	461f      	mov	r7, r3
  408cb8:	4e19      	ldr	r6, [pc, #100]	; (408d20 <usart_serial_getchar+0xd4>)
  408cba:	4621      	mov	r1, r4
  408cbc:	4638      	mov	r0, r7
  408cbe:	47b0      	blx	r6
  408cc0:	2800      	cmp	r0, #0
  408cc2:	d1fa      	bne.n	408cba <usart_serial_getchar+0x6e>
  408cc4:	e7da      	b.n	408c7c <usart_serial_getchar+0x30>
		while (usart_read(p_usart, &val));
  408cc6:	461e      	mov	r6, r3
  408cc8:	4d16      	ldr	r5, [pc, #88]	; (408d24 <usart_serial_getchar+0xd8>)
  408cca:	a901      	add	r1, sp, #4
  408ccc:	4630      	mov	r0, r6
  408cce:	47a8      	blx	r5
  408cd0:	2800      	cmp	r0, #0
  408cd2:	d1fa      	bne.n	408cca <usart_serial_getchar+0x7e>
		*data = (uint8_t)(val & 0xFF);
  408cd4:	9b01      	ldr	r3, [sp, #4]
  408cd6:	7023      	strb	r3, [r4, #0]
  408cd8:	e7d3      	b.n	408c82 <usart_serial_getchar+0x36>
		while (usart_read(p_usart, &val));
  408cda:	461e      	mov	r6, r3
  408cdc:	4d11      	ldr	r5, [pc, #68]	; (408d24 <usart_serial_getchar+0xd8>)
  408cde:	a901      	add	r1, sp, #4
  408ce0:	4630      	mov	r0, r6
  408ce2:	47a8      	blx	r5
  408ce4:	2800      	cmp	r0, #0
  408ce6:	d1fa      	bne.n	408cde <usart_serial_getchar+0x92>
		*data = (uint8_t)(val & 0xFF);
  408ce8:	9b01      	ldr	r3, [sp, #4]
  408cea:	7023      	strb	r3, [r4, #0]
  408cec:	e7c9      	b.n	408c82 <usart_serial_getchar+0x36>
		while (usart_read(p_usart, &val));
  408cee:	461e      	mov	r6, r3
  408cf0:	4d0c      	ldr	r5, [pc, #48]	; (408d24 <usart_serial_getchar+0xd8>)
  408cf2:	a901      	add	r1, sp, #4
  408cf4:	4630      	mov	r0, r6
  408cf6:	47a8      	blx	r5
  408cf8:	2800      	cmp	r0, #0
  408cfa:	d1fa      	bne.n	408cf2 <usart_serial_getchar+0xa6>
		*data = (uint8_t)(val & 0xFF);
  408cfc:	9b01      	ldr	r3, [sp, #4]
  408cfe:	7023      	strb	r3, [r4, #0]
}
  408d00:	e7bf      	b.n	408c82 <usart_serial_getchar+0x36>
  408d02:	bf00      	nop
  408d04:	400e0800 	.word	0x400e0800
  408d08:	400e0a00 	.word	0x400e0a00
  408d0c:	400e1a00 	.word	0x400e1a00
  408d10:	400e1c00 	.word	0x400e1c00
  408d14:	40024000 	.word	0x40024000
  408d18:	40028000 	.word	0x40028000
  408d1c:	4002c000 	.word	0x4002c000
  408d20:	004086cd 	.word	0x004086cd
  408d24:	004087db 	.word	0x004087db

00408d28 <usart_serial_putchar>:
{
  408d28:	b570      	push	{r4, r5, r6, lr}
  408d2a:	460c      	mov	r4, r1
	if (UART0 == (Uart*)p_usart) {
  408d2c:	4b2a      	ldr	r3, [pc, #168]	; (408dd8 <usart_serial_putchar+0xb0>)
  408d2e:	4298      	cmp	r0, r3
  408d30:	d013      	beq.n	408d5a <usart_serial_putchar+0x32>
	if (UART1 == (Uart*)p_usart) {
  408d32:	4b2a      	ldr	r3, [pc, #168]	; (408ddc <usart_serial_putchar+0xb4>)
  408d34:	4298      	cmp	r0, r3
  408d36:	d019      	beq.n	408d6c <usart_serial_putchar+0x44>
	if (UART2 == (Uart*)p_usart) {
  408d38:	4b29      	ldr	r3, [pc, #164]	; (408de0 <usart_serial_putchar+0xb8>)
  408d3a:	4298      	cmp	r0, r3
  408d3c:	d01f      	beq.n	408d7e <usart_serial_putchar+0x56>
	if (UART3 == (Uart*)p_usart) {
  408d3e:	4b29      	ldr	r3, [pc, #164]	; (408de4 <usart_serial_putchar+0xbc>)
  408d40:	4298      	cmp	r0, r3
  408d42:	d025      	beq.n	408d90 <usart_serial_putchar+0x68>
	if (USART0 == p_usart) {
  408d44:	4b28      	ldr	r3, [pc, #160]	; (408de8 <usart_serial_putchar+0xc0>)
  408d46:	4298      	cmp	r0, r3
  408d48:	d02b      	beq.n	408da2 <usart_serial_putchar+0x7a>
	if (USART1 == p_usart) {
  408d4a:	4b28      	ldr	r3, [pc, #160]	; (408dec <usart_serial_putchar+0xc4>)
  408d4c:	4298      	cmp	r0, r3
  408d4e:	d031      	beq.n	408db4 <usart_serial_putchar+0x8c>
	if (USART2 == p_usart) {
  408d50:	4b27      	ldr	r3, [pc, #156]	; (408df0 <usart_serial_putchar+0xc8>)
  408d52:	4298      	cmp	r0, r3
  408d54:	d037      	beq.n	408dc6 <usart_serial_putchar+0x9e>
	return 0;
  408d56:	2000      	movs	r0, #0
}
  408d58:	bd70      	pop	{r4, r5, r6, pc}
		while (uart_write((Uart*)p_usart, c)!=0);
  408d5a:	461e      	mov	r6, r3
  408d5c:	4d25      	ldr	r5, [pc, #148]	; (408df4 <usart_serial_putchar+0xcc>)
  408d5e:	4621      	mov	r1, r4
  408d60:	4630      	mov	r0, r6
  408d62:	47a8      	blx	r5
  408d64:	2800      	cmp	r0, #0
  408d66:	d1fa      	bne.n	408d5e <usart_serial_putchar+0x36>
		return 1;
  408d68:	2001      	movs	r0, #1
  408d6a:	bd70      	pop	{r4, r5, r6, pc}
		while (uart_write((Uart*)p_usart, c)!=0);
  408d6c:	461e      	mov	r6, r3
  408d6e:	4d21      	ldr	r5, [pc, #132]	; (408df4 <usart_serial_putchar+0xcc>)
  408d70:	4621      	mov	r1, r4
  408d72:	4630      	mov	r0, r6
  408d74:	47a8      	blx	r5
  408d76:	2800      	cmp	r0, #0
  408d78:	d1fa      	bne.n	408d70 <usart_serial_putchar+0x48>
		return 1;
  408d7a:	2001      	movs	r0, #1
  408d7c:	bd70      	pop	{r4, r5, r6, pc}
		while (uart_write((Uart*)p_usart, c)!=0);
  408d7e:	461e      	mov	r6, r3
  408d80:	4d1c      	ldr	r5, [pc, #112]	; (408df4 <usart_serial_putchar+0xcc>)
  408d82:	4621      	mov	r1, r4
  408d84:	4630      	mov	r0, r6
  408d86:	47a8      	blx	r5
  408d88:	2800      	cmp	r0, #0
  408d8a:	d1fa      	bne.n	408d82 <usart_serial_putchar+0x5a>
		return 1;
  408d8c:	2001      	movs	r0, #1
  408d8e:	bd70      	pop	{r4, r5, r6, pc}
		while (uart_write((Uart*)p_usart, c)!=0);
  408d90:	461e      	mov	r6, r3
  408d92:	4d18      	ldr	r5, [pc, #96]	; (408df4 <usart_serial_putchar+0xcc>)
  408d94:	4621      	mov	r1, r4
  408d96:	4630      	mov	r0, r6
  408d98:	47a8      	blx	r5
  408d9a:	2800      	cmp	r0, #0
  408d9c:	d1fa      	bne.n	408d94 <usart_serial_putchar+0x6c>
		return 1;
  408d9e:	2001      	movs	r0, #1
  408da0:	bd70      	pop	{r4, r5, r6, pc}
		while (usart_write(p_usart, c)!=0);
  408da2:	461e      	mov	r6, r3
  408da4:	4d14      	ldr	r5, [pc, #80]	; (408df8 <usart_serial_putchar+0xd0>)
  408da6:	4621      	mov	r1, r4
  408da8:	4630      	mov	r0, r6
  408daa:	47a8      	blx	r5
  408dac:	2800      	cmp	r0, #0
  408dae:	d1fa      	bne.n	408da6 <usart_serial_putchar+0x7e>
		return 1;
  408db0:	2001      	movs	r0, #1
  408db2:	bd70      	pop	{r4, r5, r6, pc}
		while (usart_write(p_usart, c)!=0);
  408db4:	461e      	mov	r6, r3
  408db6:	4d10      	ldr	r5, [pc, #64]	; (408df8 <usart_serial_putchar+0xd0>)
  408db8:	4621      	mov	r1, r4
  408dba:	4630      	mov	r0, r6
  408dbc:	47a8      	blx	r5
  408dbe:	2800      	cmp	r0, #0
  408dc0:	d1fa      	bne.n	408db8 <usart_serial_putchar+0x90>
		return 1;
  408dc2:	2001      	movs	r0, #1
  408dc4:	bd70      	pop	{r4, r5, r6, pc}
		while (usart_write(p_usart, c)!=0);
  408dc6:	461e      	mov	r6, r3
  408dc8:	4d0b      	ldr	r5, [pc, #44]	; (408df8 <usart_serial_putchar+0xd0>)
  408dca:	4621      	mov	r1, r4
  408dcc:	4630      	mov	r0, r6
  408dce:	47a8      	blx	r5
  408dd0:	2800      	cmp	r0, #0
  408dd2:	d1fa      	bne.n	408dca <usart_serial_putchar+0xa2>
		return 1;
  408dd4:	2001      	movs	r0, #1
  408dd6:	bd70      	pop	{r4, r5, r6, pc}
  408dd8:	400e0800 	.word	0x400e0800
  408ddc:	400e0a00 	.word	0x400e0a00
  408de0:	400e1a00 	.word	0x400e1a00
  408de4:	400e1c00 	.word	0x400e1c00
  408de8:	40024000 	.word	0x40024000
  408dec:	40028000 	.word	0x40028000
  408df0:	4002c000 	.word	0x4002c000
  408df4:	004086bb 	.word	0x004086bb
  408df8:	004087c5 	.word	0x004087c5

00408dfc <vApplicationStackOverflowHook>:
{
  408dfc:	b508      	push	{r3, lr}
	printf("stack overflow %x %s\r\n", pxTask, (portCHAR *)pcTaskName);
  408dfe:	460a      	mov	r2, r1
  408e00:	4601      	mov	r1, r0
  408e02:	4802      	ldr	r0, [pc, #8]	; (408e0c <vApplicationStackOverflowHook+0x10>)
  408e04:	4b02      	ldr	r3, [pc, #8]	; (408e10 <vApplicationStackOverflowHook+0x14>)
  408e06:	4798      	blx	r3
  408e08:	e7fe      	b.n	408e08 <vApplicationStackOverflowHook+0xc>
  408e0a:	bf00      	nop
  408e0c:	0040d858 	.word	0x0040d858
  408e10:	00409405 	.word	0x00409405

00408e14 <vApplicationTickHook>:
{
  408e14:	4770      	bx	lr

00408e16 <vApplicationMallocFailedHook>:
  408e16:	f04f 0380 	mov.w	r3, #128	; 0x80
  408e1a:	b672      	cpsid	i
  408e1c:	f383 8811 	msr	BASEPRI, r3
  408e20:	f3bf 8f6f 	isb	sy
  408e24:	f3bf 8f4f 	dsb	sy
  408e28:	b662      	cpsie	i
  408e2a:	e7fe      	b.n	408e2a <vApplicationMallocFailedHook+0x14>

00408e2c <inet_aton>:
{
  408e2c:	b4f0      	push	{r4, r5, r6, r7}
  408e2e:	3801      	subs	r0, #1
  register u_long acc = 0, addr = 0;
  408e30:	2400      	movs	r4, #0
  408e32:	4622      	mov	r2, r4
  int dots = 0;
  408e34:	4625      	mov	r5, r4
	        acc = 0;
  408e36:	4626      	mov	r6, r4
  408e38:	e011      	b.n	408e5e <inet_aton+0x32>
	  switch (cc) {
  408e3a:	f1a3 0730 	sub.w	r7, r3, #48	; 0x30
  408e3e:	2f09      	cmp	r7, #9
  408e40:	d814      	bhi.n	408e6c <inet_aton+0x40>
	        acc = acc * 10 + (cc - '0');
  408e42:	eb02 0282 	add.w	r2, r2, r2, lsl #2
  408e46:	eb07 0242 	add.w	r2, r7, r2, lsl #1
	        break;
  408e4a:	e007      	b.n	408e5c <inet_aton+0x30>
	        if (++dots > 3) {
  408e4c:	3501      	adds	r5, #1
  408e4e:	2d03      	cmp	r5, #3
  408e50:	dc24      	bgt.n	408e9c <inet_aton+0x70>
	        if (acc > 255) {
  408e52:	2aff      	cmp	r2, #255	; 0xff
  408e54:	d824      	bhi.n	408ea0 <inet_aton+0x74>
	        addr = addr << 8 | acc;
  408e56:	ea42 2404 	orr.w	r4, r2, r4, lsl #8
	        acc = 0;
  408e5a:	4632      	mov	r2, r6
  } while (*cp++) ;
  408e5c:	b14b      	cbz	r3, 408e72 <inet_aton+0x46>
	  register char cc = *cp;
  408e5e:	f810 3f01 	ldrb.w	r3, [r0, #1]!
	  switch (cc) {
  408e62:	2b2e      	cmp	r3, #46	; 0x2e
  408e64:	d0f2      	beq.n	408e4c <inet_aton+0x20>
  408e66:	d8e8      	bhi.n	408e3a <inet_aton+0xe>
  408e68:	2b00      	cmp	r3, #0
  408e6a:	d0f2      	beq.n	408e52 <inet_aton+0x26>
	        return 0;
  408e6c:	2000      	movs	r0, #0
}
  408e6e:	bcf0      	pop	{r4, r5, r6, r7}
  408e70:	4770      	bx	lr
  if (dots < 3) {
  408e72:	2d02      	cmp	r5, #2
  408e74:	dc03      	bgt.n	408e7e <inet_aton+0x52>
	  addr <<= 8 * (3 - dots) ;
  408e76:	f1c5 0303 	rsb	r3, r5, #3
  408e7a:	00db      	lsls	r3, r3, #3
  408e7c:	409c      	lsls	r4, r3
  if (ap) {
  408e7e:	b189      	cbz	r1, 408ea4 <inet_aton+0x78>
	  ap->s_addr = _htonl(addr);
  408e80:	0e23      	lsrs	r3, r4, #24
  408e82:	ea43 6304 	orr.w	r3, r3, r4, lsl #24
  408e86:	0222      	lsls	r2, r4, #8
  408e88:	f402 027f 	and.w	r2, r2, #16711680	; 0xff0000
  408e8c:	431a      	orrs	r2, r3
  408e8e:	0a23      	lsrs	r3, r4, #8
  408e90:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
  408e94:	4313      	orrs	r3, r2
  408e96:	600b      	str	r3, [r1, #0]
  return 1;    
  408e98:	2001      	movs	r0, #1
  408e9a:	e7e8      	b.n	408e6e <inet_aton+0x42>
		    return 0;
  408e9c:	2000      	movs	r0, #0
  408e9e:	e7e6      	b.n	408e6e <inet_aton+0x42>
		    return 0;
  408ea0:	2000      	movs	r0, #0
  408ea2:	e7e4      	b.n	408e6e <inet_aton+0x42>
  return 1;    
  408ea4:	2001      	movs	r0, #1
  408ea6:	e7e2      	b.n	408e6e <inet_aton+0x42>

00408ea8 <task_wifi>:
	}
}



static void task_wifi(void *pvParameters) {
  408ea8:	b570      	push	{r4, r5, r6, lr}
  408eaa:	b08c      	sub	sp, #48	; 0x30
	uint8_t mac_addr[6];
	uint8_t u8IsMacAddrValid;
	struct sockaddr_in addr_in;
	
	/* Initialize the BSP. */
	nm_bsp_init();
  408eac:	4b33      	ldr	r3, [pc, #204]	; (408f7c <task_wifi+0xd4>)
  408eae:	4798      	blx	r3
	
	/* Initialize Wi-Fi parameters structure. */
	memset((uint8_t *)&param, 0, sizeof(tstrWifiInitParam));
  408eb0:	2300      	movs	r3, #0
  408eb2:	9307      	str	r3, [sp, #28]
  408eb4:	9308      	str	r3, [sp, #32]
  408eb6:	9309      	str	r3, [sp, #36]	; 0x24
  408eb8:	930a      	str	r3, [sp, #40]	; 0x28
  408eba:	930b      	str	r3, [sp, #44]	; 0x2c

	/* Initialize Wi-Fi driver with data and status callbacks. */
	param.pfAppWifiCb = wifi_cb;
  408ebc:	4b30      	ldr	r3, [pc, #192]	; (408f80 <task_wifi+0xd8>)
  408ebe:	9306      	str	r3, [sp, #24]
	ret = m2m_wifi_init(&param);
  408ec0:	a806      	add	r0, sp, #24
  408ec2:	4b30      	ldr	r3, [pc, #192]	; (408f84 <task_wifi+0xdc>)
  408ec4:	4798      	blx	r3
	if (M2M_SUCCESS != ret) {
  408ec6:	b120      	cbz	r0, 408ed2 <task_wifi+0x2a>
  408ec8:	4601      	mov	r1, r0
		printf("main: m2m_wifi_init call error!(%d)\r\n", ret);
  408eca:	482f      	ldr	r0, [pc, #188]	; (408f88 <task_wifi+0xe0>)
  408ecc:	4b2f      	ldr	r3, [pc, #188]	; (408f8c <task_wifi+0xe4>)
  408ece:	4798      	blx	r3
  408ed0:	e7fe      	b.n	408ed0 <task_wifi+0x28>
		while (1) {
		}
	}
	
	/* Initialize socket module. */
	socketInit();
  408ed2:	4b2f      	ldr	r3, [pc, #188]	; (408f90 <task_wifi+0xe8>)
  408ed4:	4798      	blx	r3

	/* Register socket callback function. */
	registerSocketCallback(socket_cb, resolve_cb);
  408ed6:	492f      	ldr	r1, [pc, #188]	; (408f94 <task_wifi+0xec>)
  408ed8:	482f      	ldr	r0, [pc, #188]	; (408f98 <task_wifi+0xf0>)
  408eda:	4b30      	ldr	r3, [pc, #192]	; (408f9c <task_wifi+0xf4>)
  408edc:	4798      	blx	r3

	/* Connect to router. */
	printf("main: connecting to WiFi AP %s...\r\n", (char *)MAIN_WLAN_SSID);
  408ede:	4d30      	ldr	r5, [pc, #192]	; (408fa0 <task_wifi+0xf8>)
  408ee0:	4629      	mov	r1, r5
  408ee2:	4830      	ldr	r0, [pc, #192]	; (408fa4 <task_wifi+0xfc>)
  408ee4:	4c29      	ldr	r4, [pc, #164]	; (408f8c <task_wifi+0xe4>)
  408ee6:	47a0      	blx	r4
	m2m_wifi_connect((char *)MAIN_WLAN_SSID, sizeof(MAIN_WLAN_SSID), MAIN_WLAN_AUTH, (char *)MAIN_WLAN_PSK, M2M_WIFI_CH_ALL);
  408ee8:	23ff      	movs	r3, #255	; 0xff
  408eea:	9300      	str	r3, [sp, #0]
  408eec:	4b2e      	ldr	r3, [pc, #184]	; (408fa8 <task_wifi+0x100>)
  408eee:	2202      	movs	r2, #2
  408ef0:	2105      	movs	r1, #5
  408ef2:	4628      	mov	r0, r5
  408ef4:	4d2d      	ldr	r5, [pc, #180]	; (408fac <task_wifi+0x104>)
  408ef6:	47a8      	blx	r5

	addr_in.sin_family = AF_INET;
  408ef8:	2302      	movs	r3, #2
  408efa:	f8ad 3008 	strh.w	r3, [sp, #8]
	addr_in.sin_port = _htons(MAIN_SERVER_PORT);
  408efe:	f648 0313 	movw	r3, #34835	; 0x8813
  408f02:	f8ad 300a 	strh.w	r3, [sp, #10]
	inet_aton(MAIN_SERVER_NAME, &addr_in.sin_addr);
  408f06:	a903      	add	r1, sp, #12
  408f08:	4829      	ldr	r0, [pc, #164]	; (408fb0 <task_wifi+0x108>)
  408f0a:	4b2a      	ldr	r3, [pc, #168]	; (408fb4 <task_wifi+0x10c>)
  408f0c:	4798      	blx	r3
	printf("Inet aton : %d", addr_in.sin_addr);
  408f0e:	9903      	ldr	r1, [sp, #12]
  408f10:	4829      	ldr	r0, [pc, #164]	; (408fb8 <task_wifi+0x110>)
  408f12:	47a0      	blx	r4
	
  while(1){
	  m2m_wifi_handle_events(NULL);
  408f14:	4d29      	ldr	r5, [pc, #164]	; (408fbc <task_wifi+0x114>)

	  if (wifi_connected == M2M_WIFI_CONNECTED) {
  408f16:	4c2a      	ldr	r4, [pc, #168]	; (408fc0 <task_wifi+0x118>)
		  /* Open client socket. */
		  if (tcp_client_socket < 0) {
  408f18:	4e2a      	ldr	r6, [pc, #168]	; (408fc4 <task_wifi+0x11c>)
  408f1a:	e002      	b.n	408f22 <task_wifi+0x7a>
			  printf("socket init \n");
			  if ((tcp_client_socket = socket(AF_INET, SOCK_STREAM, 0)) < 0) {
				  printf("main: failed to create TCP client socket error!\r\n");
  408f1c:	482a      	ldr	r0, [pc, #168]	; (408fc8 <task_wifi+0x120>)
  408f1e:	4b1b      	ldr	r3, [pc, #108]	; (408f8c <task_wifi+0xe4>)
  408f20:	4798      	blx	r3
	  m2m_wifi_handle_events(NULL);
  408f22:	2000      	movs	r0, #0
  408f24:	47a8      	blx	r5
	  if (wifi_connected == M2M_WIFI_CONNECTED) {
  408f26:	7823      	ldrb	r3, [r4, #0]
  408f28:	2b01      	cmp	r3, #1
  408f2a:	d1fa      	bne.n	408f22 <task_wifi+0x7a>
		  if (tcp_client_socket < 0) {
  408f2c:	f996 3000 	ldrsb.w	r3, [r6]
  408f30:	2b00      	cmp	r3, #0
  408f32:	daf6      	bge.n	408f22 <task_wifi+0x7a>
			  printf("socket init \n");
  408f34:	4825      	ldr	r0, [pc, #148]	; (408fcc <task_wifi+0x124>)
  408f36:	4b15      	ldr	r3, [pc, #84]	; (408f8c <task_wifi+0xe4>)
  408f38:	4798      	blx	r3
			  if ((tcp_client_socket = socket(AF_INET, SOCK_STREAM, 0)) < 0) {
  408f3a:	2200      	movs	r2, #0
  408f3c:	2101      	movs	r1, #1
  408f3e:	2002      	movs	r0, #2
  408f40:	4b23      	ldr	r3, [pc, #140]	; (408fd0 <task_wifi+0x128>)
  408f42:	4798      	blx	r3
  408f44:	7030      	strb	r0, [r6, #0]
  408f46:	2800      	cmp	r0, #0
  408f48:	dbe8      	blt.n	408f1c <task_wifi+0x74>
				  continue;
			  }

			  /* Connect server */
			  printf("socket connecting\n");
  408f4a:	4822      	ldr	r0, [pc, #136]	; (408fd4 <task_wifi+0x12c>)
  408f4c:	4b0f      	ldr	r3, [pc, #60]	; (408f8c <task_wifi+0xe4>)
  408f4e:	4798      	blx	r3
			  
			  if (connect(tcp_client_socket, (struct sockaddr *)&addr_in, sizeof(struct sockaddr_in)) != SOCK_ERR_NO_ERROR) {
  408f50:	2210      	movs	r2, #16
  408f52:	a902      	add	r1, sp, #8
  408f54:	f996 0000 	ldrsb.w	r0, [r6]
  408f58:	4b1f      	ldr	r3, [pc, #124]	; (408fd8 <task_wifi+0x130>)
  408f5a:	4798      	blx	r3
  408f5c:	b918      	cbnz	r0, 408f66 <task_wifi+0xbe>
				  close(tcp_client_socket);
				  tcp_client_socket = -1;
				  printf("error\n");
				  }else{
				  gbTcpConnection = true;
  408f5e:	2201      	movs	r2, #1
  408f60:	4b1e      	ldr	r3, [pc, #120]	; (408fdc <task_wifi+0x134>)
  408f62:	701a      	strb	r2, [r3, #0]
  408f64:	e7dd      	b.n	408f22 <task_wifi+0x7a>
				  close(tcp_client_socket);
  408f66:	f996 0000 	ldrsb.w	r0, [r6]
  408f6a:	4b1d      	ldr	r3, [pc, #116]	; (408fe0 <task_wifi+0x138>)
  408f6c:	4798      	blx	r3
				  tcp_client_socket = -1;
  408f6e:	23ff      	movs	r3, #255	; 0xff
  408f70:	7033      	strb	r3, [r6, #0]
				  printf("error\n");
  408f72:	481c      	ldr	r0, [pc, #112]	; (408fe4 <task_wifi+0x13c>)
  408f74:	4b05      	ldr	r3, [pc, #20]	; (408f8c <task_wifi+0xe4>)
  408f76:	4798      	blx	r3
  408f78:	e7d3      	b.n	408f22 <task_wifi+0x7a>
  408f7a:	bf00      	nop
  408f7c:	004050c1 	.word	0x004050c1
  408f80:	00408be5 	.word	0x00408be5
  408f84:	00405f01 	.word	0x00405f01
  408f88:	0040d778 	.word	0x0040d778
  408f8c:	00409405 	.word	0x00409405
  408f90:	004076b1 	.word	0x004076b1
  408f94:	00408a8d 	.word	0x00408a8d
  408f98:	00408abd 	.word	0x00408abd
  408f9c:	004076f5 	.word	0x004076f5
  408fa0:	0040d7a0 	.word	0x0040d7a0
  408fa4:	0040d7a8 	.word	0x0040d7a8
  408fa8:	0040d7cc 	.word	0x0040d7cc
  408fac:	00406259 	.word	0x00406259
  408fb0:	0040d7d8 	.word	0x0040d7d8
  408fb4:	00408e2d 	.word	0x00408e2d
  408fb8:	0040d7e8 	.word	0x0040d7e8
  408fbc:	00405ffd 	.word	0x00405ffd
  408fc0:	2040c9c0 	.word	0x2040c9c0
  408fc4:	20400044 	.word	0x20400044
  408fc8:	0040d808 	.word	0x0040d808
  408fcc:	0040d7f8 	.word	0x0040d7f8
  408fd0:	00407709 	.word	0x00407709
  408fd4:	0040d83c 	.word	0x0040d83c
  408fd8:	004077e9 	.word	0x004077e9
  408fdc:	2040c9b8 	.word	0x2040c9b8
  408fe0:	004079b5 	.word	0x004079b5
  408fe4:	0040d850 	.word	0x0040d850

00408fe8 <write_sdcard>:
		  }
	  }
	  }
}

void write_sdcard(void){
  408fe8:	b5f0      	push	{r4, r5, r6, r7, lr}
  408fea:	f5ad 7d1b 	sub.w	sp, sp, #620	; 0x26c
  char test_file_name[] = "0:config.txt";
  408fee:	4b2f      	ldr	r3, [pc, #188]	; (4090ac <write_sdcard+0xc4>)
  408ff0:	ac96      	add	r4, sp, #600	; 0x258
  408ff2:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
  408ff4:	c407      	stmia	r4!, {r0, r1, r2}
  408ff6:	7023      	strb	r3, [r4, #0]
  Ctrl_status status;
  FRESULT res;
  FATFS fs;
  FIL file_object;
  
   printf("Please plug an SD, MMC or SDIO card in slot.\n\r");
  408ff8:	482d      	ldr	r0, [pc, #180]	; (4090b0 <write_sdcard+0xc8>)
  408ffa:	4b2e      	ldr	r3, [pc, #184]	; (4090b4 <write_sdcard+0xcc>)
  408ffc:	4798      	blx	r3

    /* Wait card present and ready */
    do {
      status = sd_mmc_test_unit_ready(0);
  408ffe:	4f2e      	ldr	r7, [pc, #184]	; (4090b8 <write_sdcard+0xd0>)
        printf("Please unplug and re-plug the card.\n\r");
        while (CTRL_NO_PRESENT != sd_mmc_check(0)) {
                vTaskDelay(100);
        }
      }
      vTaskDelay(100);
  409000:	4d2e      	ldr	r5, [pc, #184]	; (4090bc <write_sdcard+0xd4>)
  409002:	e00f      	b.n	409024 <write_sdcard+0x3c>
        printf("Card install FAIL\n\r");
  409004:	482e      	ldr	r0, [pc, #184]	; (4090c0 <write_sdcard+0xd8>)
  409006:	4c2b      	ldr	r4, [pc, #172]	; (4090b4 <write_sdcard+0xcc>)
  409008:	47a0      	blx	r4
        printf("Please unplug and re-plug the card.\n\r");
  40900a:	482e      	ldr	r0, [pc, #184]	; (4090c4 <write_sdcard+0xdc>)
  40900c:	47a0      	blx	r4
        while (CTRL_NO_PRESENT != sd_mmc_check(0)) {
  40900e:	2600      	movs	r6, #0
  409010:	4c2d      	ldr	r4, [pc, #180]	; (4090c8 <write_sdcard+0xe0>)
  409012:	e001      	b.n	409018 <write_sdcard+0x30>
                vTaskDelay(100);
  409014:	2064      	movs	r0, #100	; 0x64
  409016:	47a8      	blx	r5
        while (CTRL_NO_PRESENT != sd_mmc_check(0)) {
  409018:	4630      	mov	r0, r6
  40901a:	47a0      	blx	r4
  40901c:	2802      	cmp	r0, #2
  40901e:	d1f9      	bne.n	409014 <write_sdcard+0x2c>
      vTaskDelay(100);
  409020:	2064      	movs	r0, #100	; 0x64
  409022:	47a8      	blx	r5
      status = sd_mmc_test_unit_ready(0);
  409024:	2000      	movs	r0, #0
  409026:	47b8      	blx	r7
  409028:	4604      	mov	r4, r0
      if (CTRL_FAIL == status) {
  40902a:	2801      	cmp	r0, #1
  40902c:	d0ea      	beq.n	409004 <write_sdcard+0x1c>
      vTaskDelay(100);
  40902e:	2064      	movs	r0, #100	; 0x64
  409030:	47a8      	blx	r5
    } while (CTRL_GOOD != status);
  409032:	2c00      	cmp	r4, #0
  409034:	d1f6      	bne.n	409024 <write_sdcard+0x3c>

    printf("Mount disk (f_mount)...\r\n");
  409036:	4825      	ldr	r0, [pc, #148]	; (4090cc <write_sdcard+0xe4>)
  409038:	4b1e      	ldr	r3, [pc, #120]	; (4090b4 <write_sdcard+0xcc>)
  40903a:	4798      	blx	r3
    memset(&fs, 0, sizeof(FATFS));
  40903c:	f44f 720c 	mov.w	r2, #560	; 0x230
  409040:	2100      	movs	r1, #0
  409042:	a80a      	add	r0, sp, #40	; 0x28
  409044:	4b22      	ldr	r3, [pc, #136]	; (4090d0 <write_sdcard+0xe8>)
  409046:	4798      	blx	r3
    res = f_mount(LUN_ID_SD_MMC_0_MEM, &fs);
  409048:	a90a      	add	r1, sp, #40	; 0x28
  40904a:	2000      	movs	r0, #0
  40904c:	4b21      	ldr	r3, [pc, #132]	; (4090d4 <write_sdcard+0xec>)
  40904e:	4798      	blx	r3
    if (FR_INVALID_DRIVE == res) {
  409050:	280b      	cmp	r0, #11
  409052:	d00f      	beq.n	409074 <write_sdcard+0x8c>
      printf("[FAIL] res %d\r\n", res);
      return 0;
    }

    test_file_name[0] = LUN_ID_SD_MMC_0_MEM + '0';
  409054:	a99a      	add	r1, sp, #616	; 0x268
  409056:	2330      	movs	r3, #48	; 0x30
  409058:	f801 3d10 	strb.w	r3, [r1, #-16]!
    res = f_open(&file_object,	(char const *)test_file_name, 	FA_CREATE_ALWAYS | FA_WRITE);
  40905c:	220a      	movs	r2, #10
  40905e:	a801      	add	r0, sp, #4
  409060:	4b1d      	ldr	r3, [pc, #116]	; (4090d8 <write_sdcard+0xf0>)
  409062:	4798      	blx	r3
    if (res != FR_OK) {
  409064:	4601      	mov	r1, r0
  409066:	b150      	cbz	r0, 40907e <write_sdcard+0x96>
      printf("[FAIL] res %d\r\n", res);
  409068:	481c      	ldr	r0, [pc, #112]	; (4090dc <write_sdcard+0xf4>)
  40906a:	4b12      	ldr	r3, [pc, #72]	; (4090b4 <write_sdcard+0xcc>)
  40906c:	4798      	blx	r3
    printf("write is successful.\n\r");
    printf("Please unplug the card.\n\r");
    while (CTRL_NO_PRESENT != sd_mmc_check(0)) {
      vTaskDelay(200);
    }
 }
  40906e:	f50d 7d1b 	add.w	sp, sp, #620	; 0x26c
  409072:	bdf0      	pop	{r4, r5, r6, r7, pc}
      printf("[FAIL] res %d\r\n", res);
  409074:	210b      	movs	r1, #11
  409076:	4819      	ldr	r0, [pc, #100]	; (4090dc <write_sdcard+0xf4>)
  409078:	4b0e      	ldr	r3, [pc, #56]	; (4090b4 <write_sdcard+0xcc>)
  40907a:	4798      	blx	r3
      return 0;
  40907c:	e7f7      	b.n	40906e <write_sdcard+0x86>
    f_puts("OLA \r\n  OI \r\n", &file_object);
  40907e:	a901      	add	r1, sp, #4
  409080:	4817      	ldr	r0, [pc, #92]	; (4090e0 <write_sdcard+0xf8>)
  409082:	4b18      	ldr	r3, [pc, #96]	; (4090e4 <write_sdcard+0xfc>)
  409084:	4798      	blx	r3
    f_close(&file_object);
  409086:	a801      	add	r0, sp, #4
  409088:	4b17      	ldr	r3, [pc, #92]	; (4090e8 <write_sdcard+0x100>)
  40908a:	4798      	blx	r3
    printf("write is successful.\n\r");
  40908c:	4817      	ldr	r0, [pc, #92]	; (4090ec <write_sdcard+0x104>)
  40908e:	4c09      	ldr	r4, [pc, #36]	; (4090b4 <write_sdcard+0xcc>)
  409090:	47a0      	blx	r4
    printf("Please unplug the card.\n\r");
  409092:	4817      	ldr	r0, [pc, #92]	; (4090f0 <write_sdcard+0x108>)
  409094:	47a0      	blx	r4
    while (CTRL_NO_PRESENT != sd_mmc_check(0)) {
  409096:	2500      	movs	r5, #0
  409098:	4c0b      	ldr	r4, [pc, #44]	; (4090c8 <write_sdcard+0xe0>)
      vTaskDelay(200);
  40909a:	4e08      	ldr	r6, [pc, #32]	; (4090bc <write_sdcard+0xd4>)
    while (CTRL_NO_PRESENT != sd_mmc_check(0)) {
  40909c:	e001      	b.n	4090a2 <write_sdcard+0xba>
      vTaskDelay(200);
  40909e:	20c8      	movs	r0, #200	; 0xc8
  4090a0:	47b0      	blx	r6
    while (CTRL_NO_PRESENT != sd_mmc_check(0)) {
  4090a2:	4628      	mov	r0, r5
  4090a4:	47a0      	blx	r4
  4090a6:	2802      	cmp	r0, #2
  4090a8:	d1f9      	bne.n	40909e <write_sdcard+0xb6>
  4090aa:	e7e0      	b.n	40906e <write_sdcard+0x86>
  4090ac:	0040d9b8 	.word	0x0040d9b8
  4090b0:	0040d8dc 	.word	0x0040d8dc
  4090b4:	00409405 	.word	0x00409405
  4090b8:	00400ed5 	.word	0x00400ed5
  4090bc:	004045e9 	.word	0x004045e9
  4090c0:	0040d90c 	.word	0x0040d90c
  4090c4:	0040d920 	.word	0x0040d920
  4090c8:	00400389 	.word	0x00400389
  4090cc:	0040d948 	.word	0x0040d948
  4090d0:	00409561 	.word	0x00409561
  4090d4:	00402c99 	.word	0x00402c99
  4090d8:	00402cc1 	.word	0x00402cc1
  4090dc:	0040d964 	.word	0x0040d964
  4090e0:	0040d974 	.word	0x0040d974
  4090e4:	0040331d 	.word	0x0040331d
  4090e8:	0040328d 	.word	0x0040328d
  4090ec:	0040d984 	.word	0x0040d984
  4090f0:	0040d99c 	.word	0x0040d99c

004090f4 <read_sdcard>:

uint read_sdcard(void){
  4090f4:	b5f0      	push	{r4, r5, r6, r7, lr}
  4090f6:	f5ad 5d93 	sub.w	sp, sp, #4704	; 0x1260
  4090fa:	b083      	sub	sp, #12
  char test_file_name[] = "0:config.txt";
  4090fc:	4b3a      	ldr	r3, [pc, #232]	; (4091e8 <read_sdcard+0xf4>)
  4090fe:	f241 2458 	movw	r4, #4696	; 0x1258
  409102:	446c      	add	r4, sp
  409104:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
  409106:	c407      	stmia	r4!, {r0, r1, r2}
  409108:	7023      	strb	r3, [r4, #0]
  Ctrl_status status;
  FRESULT res;
  FATFS fs;
  FIL file_object;
  
    printf("Please plug an SD, MMC or SDIO card in slot.\n\r");
  40910a:	4838      	ldr	r0, [pc, #224]	; (4091ec <read_sdcard+0xf8>)
  40910c:	4b38      	ldr	r3, [pc, #224]	; (4091f0 <read_sdcard+0xfc>)
  40910e:	4798      	blx	r3

    /* Wait card present and ready */
    do {
      status = sd_mmc_test_unit_ready(0);
  409110:	4f38      	ldr	r7, [pc, #224]	; (4091f4 <read_sdcard+0x100>)
        printf("Please unplug and re-plug the card.\n\r");
        while (CTRL_NO_PRESENT != sd_mmc_check(0)) {
          vTaskDelay(100);
        }
      }
      vTaskDelay(100);
  409112:	4d39      	ldr	r5, [pc, #228]	; (4091f8 <read_sdcard+0x104>)
  409114:	e00f      	b.n	409136 <read_sdcard+0x42>
        printf("Card install FAIL\n\r");
  409116:	4839      	ldr	r0, [pc, #228]	; (4091fc <read_sdcard+0x108>)
  409118:	4c35      	ldr	r4, [pc, #212]	; (4091f0 <read_sdcard+0xfc>)
  40911a:	47a0      	blx	r4
        printf("Please unplug and re-plug the card.\n\r");
  40911c:	4838      	ldr	r0, [pc, #224]	; (409200 <read_sdcard+0x10c>)
  40911e:	47a0      	blx	r4
        while (CTRL_NO_PRESENT != sd_mmc_check(0)) {
  409120:	2600      	movs	r6, #0
  409122:	4c38      	ldr	r4, [pc, #224]	; (409204 <read_sdcard+0x110>)
  409124:	e001      	b.n	40912a <read_sdcard+0x36>
          vTaskDelay(100);
  409126:	2064      	movs	r0, #100	; 0x64
  409128:	47a8      	blx	r5
        while (CTRL_NO_PRESENT != sd_mmc_check(0)) {
  40912a:	4630      	mov	r0, r6
  40912c:	47a0      	blx	r4
  40912e:	2802      	cmp	r0, #2
  409130:	d1f9      	bne.n	409126 <read_sdcard+0x32>
      vTaskDelay(100);
  409132:	2064      	movs	r0, #100	; 0x64
  409134:	47a8      	blx	r5
      status = sd_mmc_test_unit_ready(0);
  409136:	2000      	movs	r0, #0
  409138:	47b8      	blx	r7
  40913a:	4604      	mov	r4, r0
      if (CTRL_FAIL == status) {
  40913c:	2801      	cmp	r0, #1
  40913e:	d0ea      	beq.n	409116 <read_sdcard+0x22>
      vTaskDelay(100);
  409140:	2064      	movs	r0, #100	; 0x64
  409142:	47a8      	blx	r5
    } while (CTRL_GOOD != status);
  409144:	2c00      	cmp	r4, #0
  409146:	d1f6      	bne.n	409136 <read_sdcard+0x42>

    printf("Mount disk (f_mount)...\r\n");
  409148:	482f      	ldr	r0, [pc, #188]	; (409208 <read_sdcard+0x114>)
  40914a:	4b29      	ldr	r3, [pc, #164]	; (4091f0 <read_sdcard+0xfc>)
  40914c:	4798      	blx	r3
    memset(&fs, 0, sizeof(FATFS));
  40914e:	f44f 720c 	mov.w	r2, #560	; 0x230
  409152:	2100      	movs	r1, #0
  409154:	f241 0028 	movw	r0, #4136	; 0x1028
  409158:	4468      	add	r0, sp
  40915a:	4b2c      	ldr	r3, [pc, #176]	; (40920c <read_sdcard+0x118>)
  40915c:	4798      	blx	r3
    res = f_mount(LUN_ID_SD_MMC_0_MEM, &fs);
  40915e:	f241 0128 	movw	r1, #4136	; 0x1028
  409162:	4469      	add	r1, sp
  409164:	2000      	movs	r0, #0
  409166:	4b2a      	ldr	r3, [pc, #168]	; (409210 <read_sdcard+0x11c>)
  409168:	4798      	blx	r3
    if (FR_INVALID_DRIVE == res) {
  40916a:	280b      	cmp	r0, #11
  40916c:	d030      	beq.n	4091d0 <read_sdcard+0xdc>
      printf("[FAIL] res %d\r\n", res);
      return 1;
    }

    test_file_name[0] = LUN_ID_SD_MMC_0_MEM + '0';
  40916e:	f241 2168 	movw	r1, #4712	; 0x1268
  409172:	4469      	add	r1, sp
  409174:	2330      	movs	r3, #48	; 0x30
  409176:	f801 3d10 	strb.w	r3, [r1, #-16]!
    res = f_open(&file_object,	(char const *)test_file_name,	FA_READ);
  40917a:	2201      	movs	r2, #1
  40917c:	f241 0004 	movw	r0, #4100	; 0x1004
  409180:	4468      	add	r0, sp
  409182:	4b24      	ldr	r3, [pc, #144]	; (409214 <read_sdcard+0x120>)
  409184:	4798      	blx	r3
    if (res != FR_OK) {
  409186:	4601      	mov	r1, r0
  409188:	bb40      	cbnz	r0, 4091dc <read_sdcard+0xe8>
      return 1;
    }
        
    uint buffer[1024];
    
    f_gets(buffer, 1024, &file_object);
  40918a:	f241 0204 	movw	r2, #4100	; 0x1004
  40918e:	446a      	add	r2, sp
  409190:	f44f 6180 	mov.w	r1, #1024	; 0x400
  409194:	a801      	add	r0, sp, #4
  409196:	4e20      	ldr	r6, [pc, #128]	; (409218 <read_sdcard+0x124>)
  409198:	47b0      	blx	r6
    printf("   %s",buffer);
  40919a:	4d20      	ldr	r5, [pc, #128]	; (40921c <read_sdcard+0x128>)
  40919c:	a901      	add	r1, sp, #4
  40919e:	4628      	mov	r0, r5
  4091a0:	4c13      	ldr	r4, [pc, #76]	; (4091f0 <read_sdcard+0xfc>)
  4091a2:	47a0      	blx	r4
    
    f_gets(buffer, 1024, &file_object);
  4091a4:	f241 0204 	movw	r2, #4100	; 0x1004
  4091a8:	446a      	add	r2, sp
  4091aa:	f44f 6180 	mov.w	r1, #1024	; 0x400
  4091ae:	a801      	add	r0, sp, #4
  4091b0:	47b0      	blx	r6
    printf("   %s",buffer);
  4091b2:	a901      	add	r1, sp, #4
  4091b4:	4628      	mov	r0, r5
  4091b6:	47a0      	blx	r4
    
    f_close(&file_object);
  4091b8:	f241 0004 	movw	r0, #4100	; 0x1004
  4091bc:	4468      	add	r0, sp
  4091be:	4b18      	ldr	r3, [pc, #96]	; (409220 <read_sdcard+0x12c>)
  4091c0:	4798      	blx	r3
    printf("Test is successful.\n");
  4091c2:	4818      	ldr	r0, [pc, #96]	; (409224 <read_sdcard+0x130>)
  4091c4:	47a0      	blx	r4
    return 0;
  4091c6:	2000      	movs	r0, #0
}
  4091c8:	f50d 5d93 	add.w	sp, sp, #4704	; 0x1260
  4091cc:	b003      	add	sp, #12
  4091ce:	bdf0      	pop	{r4, r5, r6, r7, pc}
      printf("[FAIL] res %d\r\n", res);
  4091d0:	210b      	movs	r1, #11
  4091d2:	4815      	ldr	r0, [pc, #84]	; (409228 <read_sdcard+0x134>)
  4091d4:	4b06      	ldr	r3, [pc, #24]	; (4091f0 <read_sdcard+0xfc>)
  4091d6:	4798      	blx	r3
      return 1;
  4091d8:	2001      	movs	r0, #1
  4091da:	e7f5      	b.n	4091c8 <read_sdcard+0xd4>
      printf("[FAIL] res %d\r\n", res);
  4091dc:	4812      	ldr	r0, [pc, #72]	; (409228 <read_sdcard+0x134>)
  4091de:	4b04      	ldr	r3, [pc, #16]	; (4091f0 <read_sdcard+0xfc>)
  4091e0:	4798      	blx	r3
      return 1;
  4091e2:	2001      	movs	r0, #1
  4091e4:	e7f0      	b.n	4091c8 <read_sdcard+0xd4>
  4091e6:	bf00      	nop
  4091e8:	0040d9b8 	.word	0x0040d9b8
  4091ec:	0040d8dc 	.word	0x0040d8dc
  4091f0:	00409405 	.word	0x00409405
  4091f4:	00400ed5 	.word	0x00400ed5
  4091f8:	004045e9 	.word	0x004045e9
  4091fc:	0040d90c 	.word	0x0040d90c
  409200:	0040d920 	.word	0x0040d920
  409204:	00400389 	.word	0x00400389
  409208:	0040d948 	.word	0x0040d948
  40920c:	00409561 	.word	0x00409561
  409210:	00402c99 	.word	0x00402c99
  409214:	00402cc1 	.word	0x00402cc1
  409218:	004032a5 	.word	0x004032a5
  40921c:	0040d618 	.word	0x0040d618
  409220:	0040328d 	.word	0x0040328d
  409224:	0040d620 	.word	0x0040d620
  409228:	0040d964 	.word	0x0040d964

0040922c <task_sdcard>:


static void task_sdcard(void *pvParameters){
  40922c:	b508      	push	{r3, lr}
     /* Initialize SD MMC stack */
     printf("\x0C\n\r-- SD/MMC/SDIO Card Example on FatFs --\n\r");
  40922e:	4810      	ldr	r0, [pc, #64]	; (409270 <task_sdcard+0x44>)
  409230:	4c10      	ldr	r4, [pc, #64]	; (409274 <task_sdcard+0x48>)
  409232:	47a0      	blx	r4
     printf("-- Compiled: %s %s --\n\r", __DATE__, __TIME__);
  409234:	4a10      	ldr	r2, [pc, #64]	; (409278 <task_sdcard+0x4c>)
  409236:	4911      	ldr	r1, [pc, #68]	; (40927c <task_sdcard+0x50>)
  409238:	4811      	ldr	r0, [pc, #68]	; (409280 <task_sdcard+0x54>)
  40923a:	47a0      	blx	r4
     
     sd_mmc_init();
  40923c:	4b11      	ldr	r3, [pc, #68]	; (409284 <task_sdcard+0x58>)
  40923e:	4798      	blx	r3
     
     printf("----------------------------------- \n");
  409240:	4d11      	ldr	r5, [pc, #68]	; (409288 <task_sdcard+0x5c>)
  409242:	4628      	mov	r0, r5
  409244:	47a0      	blx	r4
     printf("WRITE \n");
  409246:	4811      	ldr	r0, [pc, #68]	; (40928c <task_sdcard+0x60>)
  409248:	47a0      	blx	r4
     printf("----------------------------------- \n");
  40924a:	4628      	mov	r0, r5
  40924c:	47a0      	blx	r4
     write_sdcard();
  40924e:	4b10      	ldr	r3, [pc, #64]	; (409290 <task_sdcard+0x64>)
  409250:	4798      	blx	r3
     
     while(1){
        printf("----------------------------------- \n");
        printf("READ \n");
  409252:	4e10      	ldr	r6, [pc, #64]	; (409294 <task_sdcard+0x68>)
        printf("----------------------------------- \n");
  409254:	4628      	mov	r0, r5
  409256:	47a0      	blx	r4
        printf("READ \n");
  409258:	4630      	mov	r0, r6
  40925a:	47a0      	blx	r4
        printf("----------------------------------- \n");
  40925c:	4628      	mov	r0, r5
  40925e:	47a0      	blx	r4
        read_sdcard();
  409260:	4b0d      	ldr	r3, [pc, #52]	; (409298 <task_sdcard+0x6c>)
  409262:	4798      	blx	r3
        vTaskDelay(1000);
  409264:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
  409268:	4b0c      	ldr	r3, [pc, #48]	; (40929c <task_sdcard+0x70>)
  40926a:	4798      	blx	r3
  40926c:	e7f2      	b.n	409254 <task_sdcard+0x28>
  40926e:	bf00      	nop
  409270:	0040d6e0 	.word	0x0040d6e0
  409274:	00409405 	.word	0x00409405
  409278:	0040d710 	.word	0x0040d710
  40927c:	0040d71c 	.word	0x0040d71c
  409280:	0040d728 	.word	0x0040d728
  409284:	0040035d 	.word	0x0040035d
  409288:	0040d740 	.word	0x0040d740
  40928c:	0040d768 	.word	0x0040d768
  409290:	00408fe9 	.word	0x00408fe9
  409294:	0040d770 	.word	0x0040d770
  409298:	004090f5 	.word	0x004090f5
  40929c:	004045e9 	.word	0x004045e9

004092a0 <main>:
 * Initialize system, UART console, network then start weather client.
 *
 * \return Program return value.
 */
int main(void)
{
  4092a0:	b500      	push	{lr}
  4092a2:	b08b      	sub	sp, #44	; 0x2c
	/* Initialize the board. */
	sysclk_init();
  4092a4:	4b2b      	ldr	r3, [pc, #172]	; (409354 <main+0xb4>)
  4092a6:	4798      	blx	r3
	board_init();
  4092a8:	4b2b      	ldr	r3, [pc, #172]	; (409358 <main+0xb8>)
  4092aa:	4798      	blx	r3
  4092ac:	200e      	movs	r0, #14
  4092ae:	4e2b      	ldr	r6, [pc, #172]	; (40935c <main+0xbc>)
  4092b0:	47b0      	blx	r6
 * \param opt         Options needed to set up RS232 communication (see \ref usart_options_t).
 *
 */
static inline void stdio_serial_init(volatile void *usart, const usart_serial_options_t *opt)
{
	stdio_base = (void *)usart;
  4092b2:	4d2b      	ldr	r5, [pc, #172]	; (409360 <main+0xc0>)
  4092b4:	4b2b      	ldr	r3, [pc, #172]	; (409364 <main+0xc4>)
  4092b6:	601d      	str	r5, [r3, #0]
	ptr_put = (int (*)(void volatile*,char))&usart_serial_putchar;
  4092b8:	4a2b      	ldr	r2, [pc, #172]	; (409368 <main+0xc8>)
  4092ba:	4b2c      	ldr	r3, [pc, #176]	; (40936c <main+0xcc>)
  4092bc:	601a      	str	r2, [r3, #0]
	ptr_get = (void (*)(void volatile*,char*))&usart_serial_getchar;
  4092be:	4a2c      	ldr	r2, [pc, #176]	; (409370 <main+0xd0>)
  4092c0:	4b2c      	ldr	r3, [pc, #176]	; (409374 <main+0xd4>)
  4092c2:	601a      	str	r2, [r3, #0]
	usart_settings.baudrate = opt->baudrate;
  4092c4:	f44f 33e1 	mov.w	r3, #115200	; 0x1c200
  4092c8:	9304      	str	r3, [sp, #16]
	usart_settings.char_length = opt->charlength;
  4092ca:	23c0      	movs	r3, #192	; 0xc0
  4092cc:	9305      	str	r3, [sp, #20]
	usart_settings.parity_type = opt->paritytype;
  4092ce:	f44f 6300 	mov.w	r3, #2048	; 0x800
  4092d2:	9306      	str	r3, [sp, #24]
	usart_settings.stop_bits= opt->stopbits;
  4092d4:	2400      	movs	r4, #0
  4092d6:	9407      	str	r4, [sp, #28]
	usart_settings.channel_mode= US_MR_CHMODE_NORMAL;
  4092d8:	9408      	str	r4, [sp, #32]
  4092da:	200e      	movs	r0, #14
  4092dc:	47b0      	blx	r6
		usart_init_rs232(p_usart, &usart_settings,
  4092de:	4a26      	ldr	r2, [pc, #152]	; (409378 <main+0xd8>)
  4092e0:	a904      	add	r1, sp, #16
  4092e2:	4628      	mov	r0, r5
  4092e4:	4b25      	ldr	r3, [pc, #148]	; (40937c <main+0xdc>)
  4092e6:	4798      	blx	r3
		usart_enable_tx(p_usart);
  4092e8:	4628      	mov	r0, r5
  4092ea:	4b25      	ldr	r3, [pc, #148]	; (409380 <main+0xe0>)
  4092ec:	4798      	blx	r3
		usart_enable_rx(p_usart);
  4092ee:	4628      	mov	r0, r5
  4092f0:	4b24      	ldr	r3, [pc, #144]	; (409384 <main+0xe4>)
  4092f2:	4798      	blx	r3
	fdevopen((int (*)(char, FILE*))(_write),(int (*)(FILE*))(_read));
#  endif
#  if UC3 || SAM
	// For AVR32 and SAM GCC
	// Specify that stdout and stdin should not be buffered.
	setbuf(stdout, NULL);
  4092f4:	4e24      	ldr	r6, [pc, #144]	; (409388 <main+0xe8>)
  4092f6:	6833      	ldr	r3, [r6, #0]
  4092f8:	4621      	mov	r1, r4
  4092fa:	6898      	ldr	r0, [r3, #8]
  4092fc:	4d23      	ldr	r5, [pc, #140]	; (40938c <main+0xec>)
  4092fe:	47a8      	blx	r5
	setbuf(stdin, NULL);
  409300:	6833      	ldr	r3, [r6, #0]
  409302:	4621      	mov	r1, r4
  409304:	6858      	ldr	r0, [r3, #4]
  409306:	47a8      	blx	r5

	/* Initialize the UART console. */
	configure_console();
	printf(STRING_HEADER);
  409308:	4821      	ldr	r0, [pc, #132]	; (409390 <main+0xf0>)
  40930a:	4b22      	ldr	r3, [pc, #136]	; (409394 <main+0xf4>)
  40930c:	4798      	blx	r3
  
  
	if (xTaskCreate(task_wifi, "Wifi", TASK_WIFI_STACK_SIZE, NULL,
  40930e:	9403      	str	r4, [sp, #12]
  409310:	9402      	str	r4, [sp, #8]
  409312:	9401      	str	r4, [sp, #4]
  409314:	9400      	str	r4, [sp, #0]
  409316:	4623      	mov	r3, r4
  409318:	f44f 6280 	mov.w	r2, #1024	; 0x400
  40931c:	491e      	ldr	r1, [pc, #120]	; (409398 <main+0xf8>)
  40931e:	481f      	ldr	r0, [pc, #124]	; (40939c <main+0xfc>)
  409320:	4c1f      	ldr	r4, [pc, #124]	; (4093a0 <main+0x100>)
  409322:	47a0      	blx	r4
  409324:	2801      	cmp	r0, #1
  409326:	d002      	beq.n	40932e <main+0x8e>
	TASK_WIFI_STACK_PRIORITY, NULL) != pdPASS) {
		printf("Failed to create Wifi task\r\n");
  409328:	481e      	ldr	r0, [pc, #120]	; (4093a4 <main+0x104>)
  40932a:	4b1a      	ldr	r3, [pc, #104]	; (409394 <main+0xf4>)
  40932c:	4798      	blx	r3
	}

  if (xTaskCreate(task_sdcard, "sd", TASK_WIFI_STACK_SIZE, NULL,
  40932e:	2300      	movs	r3, #0
  409330:	9303      	str	r3, [sp, #12]
  409332:	9302      	str	r3, [sp, #8]
  409334:	9301      	str	r3, [sp, #4]
  409336:	9300      	str	r3, [sp, #0]
  409338:	f44f 6280 	mov.w	r2, #1024	; 0x400
  40933c:	491a      	ldr	r1, [pc, #104]	; (4093a8 <main+0x108>)
  40933e:	481b      	ldr	r0, [pc, #108]	; (4093ac <main+0x10c>)
  409340:	4c17      	ldr	r4, [pc, #92]	; (4093a0 <main+0x100>)
  409342:	47a0      	blx	r4
  409344:	2801      	cmp	r0, #1
  409346:	d002      	beq.n	40934e <main+0xae>
  TASK_WIFI_STACK_PRIORITY, NULL) != pdPASS) {
    printf("Failed to create Wifi task\r\n");
  409348:	4816      	ldr	r0, [pc, #88]	; (4093a4 <main+0x104>)
  40934a:	4b12      	ldr	r3, [pc, #72]	; (409394 <main+0xf4>)
  40934c:	4798      	blx	r3
  }


	vTaskStartScheduler();
  40934e:	4b18      	ldr	r3, [pc, #96]	; (4093b0 <main+0x110>)
  409350:	4798      	blx	r3
  409352:	e7fe      	b.n	409352 <main+0xb2>
  409354:	00407b19 	.word	0x00407b19
  409358:	00407c15 	.word	0x00407c15
  40935c:	00408515 	.word	0x00408515
  409360:	40028000 	.word	0x40028000
  409364:	2040cb00 	.word	0x2040cb00
  409368:	00408d29 	.word	0x00408d29
  40936c:	2040cafc 	.word	0x2040cafc
  409370:	00408c4d 	.word	0x00408c4d
  409374:	2040caf8 	.word	0x2040caf8
  409378:	08f0d180 	.word	0x08f0d180
  40937c:	00408765 	.word	0x00408765
  409380:	004087b9 	.word	0x004087b9
  409384:	004087bf 	.word	0x004087bf
  409388:	20400048 	.word	0x20400048
  40938c:	004095fd 	.word	0x004095fd
  409390:	0040d588 	.word	0x0040d588
  409394:	00409405 	.word	0x00409405
  409398:	0040d5ec 	.word	0x0040d5ec
  40939c:	00408ea9 	.word	0x00408ea9
  4093a0:	004040a1 	.word	0x004040a1
  4093a4:	0040d5f4 	.word	0x0040d5f4
  4093a8:	0040d614 	.word	0x0040d614
  4093ac:	0040922d 	.word	0x0040922d
  4093b0:	004042d5 	.word	0x004042d5

004093b4 <__libc_init_array>:
  4093b4:	b570      	push	{r4, r5, r6, lr}
  4093b6:	4e0f      	ldr	r6, [pc, #60]	; (4093f4 <__libc_init_array+0x40>)
  4093b8:	4d0f      	ldr	r5, [pc, #60]	; (4093f8 <__libc_init_array+0x44>)
  4093ba:	1b76      	subs	r6, r6, r5
  4093bc:	10b6      	asrs	r6, r6, #2
  4093be:	bf18      	it	ne
  4093c0:	2400      	movne	r4, #0
  4093c2:	d005      	beq.n	4093d0 <__libc_init_array+0x1c>
  4093c4:	3401      	adds	r4, #1
  4093c6:	f855 3b04 	ldr.w	r3, [r5], #4
  4093ca:	4798      	blx	r3
  4093cc:	42a6      	cmp	r6, r4
  4093ce:	d1f9      	bne.n	4093c4 <__libc_init_array+0x10>
  4093d0:	4e0a      	ldr	r6, [pc, #40]	; (4093fc <__libc_init_array+0x48>)
  4093d2:	4d0b      	ldr	r5, [pc, #44]	; (409400 <__libc_init_array+0x4c>)
  4093d4:	1b76      	subs	r6, r6, r5
  4093d6:	f004 fbab 	bl	40db30 <_init>
  4093da:	10b6      	asrs	r6, r6, #2
  4093dc:	bf18      	it	ne
  4093de:	2400      	movne	r4, #0
  4093e0:	d006      	beq.n	4093f0 <__libc_init_array+0x3c>
  4093e2:	3401      	adds	r4, #1
  4093e4:	f855 3b04 	ldr.w	r3, [r5], #4
  4093e8:	4798      	blx	r3
  4093ea:	42a6      	cmp	r6, r4
  4093ec:	d1f9      	bne.n	4093e2 <__libc_init_array+0x2e>
  4093ee:	bd70      	pop	{r4, r5, r6, pc}
  4093f0:	bd70      	pop	{r4, r5, r6, pc}
  4093f2:	bf00      	nop
  4093f4:	0040db3c 	.word	0x0040db3c
  4093f8:	0040db3c 	.word	0x0040db3c
  4093fc:	0040db44 	.word	0x0040db44
  409400:	0040db3c 	.word	0x0040db3c

00409404 <iprintf>:
  409404:	b40f      	push	{r0, r1, r2, r3}
  409406:	b500      	push	{lr}
  409408:	4907      	ldr	r1, [pc, #28]	; (409428 <iprintf+0x24>)
  40940a:	b083      	sub	sp, #12
  40940c:	ab04      	add	r3, sp, #16
  40940e:	6808      	ldr	r0, [r1, #0]
  409410:	f853 2b04 	ldr.w	r2, [r3], #4
  409414:	6881      	ldr	r1, [r0, #8]
  409416:	9301      	str	r3, [sp, #4]
  409418:	f000 fa80 	bl	40991c <_vfiprintf_r>
  40941c:	b003      	add	sp, #12
  40941e:	f85d eb04 	ldr.w	lr, [sp], #4
  409422:	b004      	add	sp, #16
  409424:	4770      	bx	lr
  409426:	bf00      	nop
  409428:	20400048 	.word	0x20400048

0040942c <memcpy>:
  40942c:	4684      	mov	ip, r0
  40942e:	ea41 0300 	orr.w	r3, r1, r0
  409432:	f013 0303 	ands.w	r3, r3, #3
  409436:	d16d      	bne.n	409514 <memcpy+0xe8>
  409438:	3a40      	subs	r2, #64	; 0x40
  40943a:	d341      	bcc.n	4094c0 <memcpy+0x94>
  40943c:	f851 3b04 	ldr.w	r3, [r1], #4
  409440:	f840 3b04 	str.w	r3, [r0], #4
  409444:	f851 3b04 	ldr.w	r3, [r1], #4
  409448:	f840 3b04 	str.w	r3, [r0], #4
  40944c:	f851 3b04 	ldr.w	r3, [r1], #4
  409450:	f840 3b04 	str.w	r3, [r0], #4
  409454:	f851 3b04 	ldr.w	r3, [r1], #4
  409458:	f840 3b04 	str.w	r3, [r0], #4
  40945c:	f851 3b04 	ldr.w	r3, [r1], #4
  409460:	f840 3b04 	str.w	r3, [r0], #4
  409464:	f851 3b04 	ldr.w	r3, [r1], #4
  409468:	f840 3b04 	str.w	r3, [r0], #4
  40946c:	f851 3b04 	ldr.w	r3, [r1], #4
  409470:	f840 3b04 	str.w	r3, [r0], #4
  409474:	f851 3b04 	ldr.w	r3, [r1], #4
  409478:	f840 3b04 	str.w	r3, [r0], #4
  40947c:	f851 3b04 	ldr.w	r3, [r1], #4
  409480:	f840 3b04 	str.w	r3, [r0], #4
  409484:	f851 3b04 	ldr.w	r3, [r1], #4
  409488:	f840 3b04 	str.w	r3, [r0], #4
  40948c:	f851 3b04 	ldr.w	r3, [r1], #4
  409490:	f840 3b04 	str.w	r3, [r0], #4
  409494:	f851 3b04 	ldr.w	r3, [r1], #4
  409498:	f840 3b04 	str.w	r3, [r0], #4
  40949c:	f851 3b04 	ldr.w	r3, [r1], #4
  4094a0:	f840 3b04 	str.w	r3, [r0], #4
  4094a4:	f851 3b04 	ldr.w	r3, [r1], #4
  4094a8:	f840 3b04 	str.w	r3, [r0], #4
  4094ac:	f851 3b04 	ldr.w	r3, [r1], #4
  4094b0:	f840 3b04 	str.w	r3, [r0], #4
  4094b4:	f851 3b04 	ldr.w	r3, [r1], #4
  4094b8:	f840 3b04 	str.w	r3, [r0], #4
  4094bc:	3a40      	subs	r2, #64	; 0x40
  4094be:	d2bd      	bcs.n	40943c <memcpy+0x10>
  4094c0:	3230      	adds	r2, #48	; 0x30
  4094c2:	d311      	bcc.n	4094e8 <memcpy+0xbc>
  4094c4:	f851 3b04 	ldr.w	r3, [r1], #4
  4094c8:	f840 3b04 	str.w	r3, [r0], #4
  4094cc:	f851 3b04 	ldr.w	r3, [r1], #4
  4094d0:	f840 3b04 	str.w	r3, [r0], #4
  4094d4:	f851 3b04 	ldr.w	r3, [r1], #4
  4094d8:	f840 3b04 	str.w	r3, [r0], #4
  4094dc:	f851 3b04 	ldr.w	r3, [r1], #4
  4094e0:	f840 3b04 	str.w	r3, [r0], #4
  4094e4:	3a10      	subs	r2, #16
  4094e6:	d2ed      	bcs.n	4094c4 <memcpy+0x98>
  4094e8:	320c      	adds	r2, #12
  4094ea:	d305      	bcc.n	4094f8 <memcpy+0xcc>
  4094ec:	f851 3b04 	ldr.w	r3, [r1], #4
  4094f0:	f840 3b04 	str.w	r3, [r0], #4
  4094f4:	3a04      	subs	r2, #4
  4094f6:	d2f9      	bcs.n	4094ec <memcpy+0xc0>
  4094f8:	3204      	adds	r2, #4
  4094fa:	d008      	beq.n	40950e <memcpy+0xe2>
  4094fc:	07d2      	lsls	r2, r2, #31
  4094fe:	bf1c      	itt	ne
  409500:	f811 3b01 	ldrbne.w	r3, [r1], #1
  409504:	f800 3b01 	strbne.w	r3, [r0], #1
  409508:	d301      	bcc.n	40950e <memcpy+0xe2>
  40950a:	880b      	ldrh	r3, [r1, #0]
  40950c:	8003      	strh	r3, [r0, #0]
  40950e:	4660      	mov	r0, ip
  409510:	4770      	bx	lr
  409512:	bf00      	nop
  409514:	2a08      	cmp	r2, #8
  409516:	d313      	bcc.n	409540 <memcpy+0x114>
  409518:	078b      	lsls	r3, r1, #30
  40951a:	d08d      	beq.n	409438 <memcpy+0xc>
  40951c:	f010 0303 	ands.w	r3, r0, #3
  409520:	d08a      	beq.n	409438 <memcpy+0xc>
  409522:	f1c3 0304 	rsb	r3, r3, #4
  409526:	1ad2      	subs	r2, r2, r3
  409528:	07db      	lsls	r3, r3, #31
  40952a:	bf1c      	itt	ne
  40952c:	f811 3b01 	ldrbne.w	r3, [r1], #1
  409530:	f800 3b01 	strbne.w	r3, [r0], #1
  409534:	d380      	bcc.n	409438 <memcpy+0xc>
  409536:	f831 3b02 	ldrh.w	r3, [r1], #2
  40953a:	f820 3b02 	strh.w	r3, [r0], #2
  40953e:	e77b      	b.n	409438 <memcpy+0xc>
  409540:	3a04      	subs	r2, #4
  409542:	d3d9      	bcc.n	4094f8 <memcpy+0xcc>
  409544:	3a01      	subs	r2, #1
  409546:	f811 3b01 	ldrb.w	r3, [r1], #1
  40954a:	f800 3b01 	strb.w	r3, [r0], #1
  40954e:	d2f9      	bcs.n	409544 <memcpy+0x118>
  409550:	780b      	ldrb	r3, [r1, #0]
  409552:	7003      	strb	r3, [r0, #0]
  409554:	784b      	ldrb	r3, [r1, #1]
  409556:	7043      	strb	r3, [r0, #1]
  409558:	788b      	ldrb	r3, [r1, #2]
  40955a:	7083      	strb	r3, [r0, #2]
  40955c:	4660      	mov	r0, ip
  40955e:	4770      	bx	lr

00409560 <memset>:
  409560:	b470      	push	{r4, r5, r6}
  409562:	0786      	lsls	r6, r0, #30
  409564:	d046      	beq.n	4095f4 <memset+0x94>
  409566:	1e54      	subs	r4, r2, #1
  409568:	2a00      	cmp	r2, #0
  40956a:	d041      	beq.n	4095f0 <memset+0x90>
  40956c:	b2ca      	uxtb	r2, r1
  40956e:	4603      	mov	r3, r0
  409570:	e002      	b.n	409578 <memset+0x18>
  409572:	f114 34ff 	adds.w	r4, r4, #4294967295
  409576:	d33b      	bcc.n	4095f0 <memset+0x90>
  409578:	f803 2b01 	strb.w	r2, [r3], #1
  40957c:	079d      	lsls	r5, r3, #30
  40957e:	d1f8      	bne.n	409572 <memset+0x12>
  409580:	2c03      	cmp	r4, #3
  409582:	d92e      	bls.n	4095e2 <memset+0x82>
  409584:	b2cd      	uxtb	r5, r1
  409586:	ea45 2505 	orr.w	r5, r5, r5, lsl #8
  40958a:	2c0f      	cmp	r4, #15
  40958c:	ea45 4505 	orr.w	r5, r5, r5, lsl #16
  409590:	d919      	bls.n	4095c6 <memset+0x66>
  409592:	f103 0210 	add.w	r2, r3, #16
  409596:	4626      	mov	r6, r4
  409598:	3e10      	subs	r6, #16
  40959a:	2e0f      	cmp	r6, #15
  40959c:	f842 5c10 	str.w	r5, [r2, #-16]
  4095a0:	f842 5c0c 	str.w	r5, [r2, #-12]
  4095a4:	f842 5c08 	str.w	r5, [r2, #-8]
  4095a8:	f842 5c04 	str.w	r5, [r2, #-4]
  4095ac:	f102 0210 	add.w	r2, r2, #16
  4095b0:	d8f2      	bhi.n	409598 <memset+0x38>
  4095b2:	f1a4 0210 	sub.w	r2, r4, #16
  4095b6:	f022 020f 	bic.w	r2, r2, #15
  4095ba:	f004 040f 	and.w	r4, r4, #15
  4095be:	3210      	adds	r2, #16
  4095c0:	2c03      	cmp	r4, #3
  4095c2:	4413      	add	r3, r2
  4095c4:	d90d      	bls.n	4095e2 <memset+0x82>
  4095c6:	461e      	mov	r6, r3
  4095c8:	4622      	mov	r2, r4
  4095ca:	3a04      	subs	r2, #4
  4095cc:	2a03      	cmp	r2, #3
  4095ce:	f846 5b04 	str.w	r5, [r6], #4
  4095d2:	d8fa      	bhi.n	4095ca <memset+0x6a>
  4095d4:	1f22      	subs	r2, r4, #4
  4095d6:	f022 0203 	bic.w	r2, r2, #3
  4095da:	3204      	adds	r2, #4
  4095dc:	4413      	add	r3, r2
  4095de:	f004 0403 	and.w	r4, r4, #3
  4095e2:	b12c      	cbz	r4, 4095f0 <memset+0x90>
  4095e4:	b2c9      	uxtb	r1, r1
  4095e6:	441c      	add	r4, r3
  4095e8:	f803 1b01 	strb.w	r1, [r3], #1
  4095ec:	429c      	cmp	r4, r3
  4095ee:	d1fb      	bne.n	4095e8 <memset+0x88>
  4095f0:	bc70      	pop	{r4, r5, r6}
  4095f2:	4770      	bx	lr
  4095f4:	4614      	mov	r4, r2
  4095f6:	4603      	mov	r3, r0
  4095f8:	e7c2      	b.n	409580 <memset+0x20>
  4095fa:	bf00      	nop

004095fc <setbuf>:
  4095fc:	2900      	cmp	r1, #0
  4095fe:	bf0c      	ite	eq
  409600:	2202      	moveq	r2, #2
  409602:	2200      	movne	r2, #0
  409604:	f44f 6380 	mov.w	r3, #1024	; 0x400
  409608:	f000 b800 	b.w	40960c <setvbuf>

0040960c <setvbuf>:
  40960c:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
  409610:	4c61      	ldr	r4, [pc, #388]	; (409798 <setvbuf+0x18c>)
  409612:	6825      	ldr	r5, [r4, #0]
  409614:	b083      	sub	sp, #12
  409616:	4604      	mov	r4, r0
  409618:	460f      	mov	r7, r1
  40961a:	4690      	mov	r8, r2
  40961c:	461e      	mov	r6, r3
  40961e:	b115      	cbz	r5, 409626 <setvbuf+0x1a>
  409620:	6bab      	ldr	r3, [r5, #56]	; 0x38
  409622:	2b00      	cmp	r3, #0
  409624:	d064      	beq.n	4096f0 <setvbuf+0xe4>
  409626:	f1b8 0f02 	cmp.w	r8, #2
  40962a:	d006      	beq.n	40963a <setvbuf+0x2e>
  40962c:	f1b8 0f01 	cmp.w	r8, #1
  409630:	f200 809f 	bhi.w	409772 <setvbuf+0x166>
  409634:	2e00      	cmp	r6, #0
  409636:	f2c0 809c 	blt.w	409772 <setvbuf+0x166>
  40963a:	6e63      	ldr	r3, [r4, #100]	; 0x64
  40963c:	07d8      	lsls	r0, r3, #31
  40963e:	d534      	bpl.n	4096aa <setvbuf+0x9e>
  409640:	4621      	mov	r1, r4
  409642:	4628      	mov	r0, r5
  409644:	f001 f908 	bl	40a858 <_fflush_r>
  409648:	6b21      	ldr	r1, [r4, #48]	; 0x30
  40964a:	b141      	cbz	r1, 40965e <setvbuf+0x52>
  40964c:	f104 0340 	add.w	r3, r4, #64	; 0x40
  409650:	4299      	cmp	r1, r3
  409652:	d002      	beq.n	40965a <setvbuf+0x4e>
  409654:	4628      	mov	r0, r5
  409656:	f001 fa7d 	bl	40ab54 <_free_r>
  40965a:	2300      	movs	r3, #0
  40965c:	6323      	str	r3, [r4, #48]	; 0x30
  40965e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
  409662:	2200      	movs	r2, #0
  409664:	61a2      	str	r2, [r4, #24]
  409666:	6062      	str	r2, [r4, #4]
  409668:	061a      	lsls	r2, r3, #24
  40966a:	d43a      	bmi.n	4096e2 <setvbuf+0xd6>
  40966c:	f423 634a 	bic.w	r3, r3, #3232	; 0xca0
  409670:	f023 0303 	bic.w	r3, r3, #3
  409674:	f1b8 0f02 	cmp.w	r8, #2
  409678:	81a3      	strh	r3, [r4, #12]
  40967a:	d01d      	beq.n	4096b8 <setvbuf+0xac>
  40967c:	ab01      	add	r3, sp, #4
  40967e:	466a      	mov	r2, sp
  409680:	4621      	mov	r1, r4
  409682:	4628      	mov	r0, r5
  409684:	f001 fd04 	bl	40b090 <__swhatbuf_r>
  409688:	89a3      	ldrh	r3, [r4, #12]
  40968a:	4318      	orrs	r0, r3
  40968c:	81a0      	strh	r0, [r4, #12]
  40968e:	2e00      	cmp	r6, #0
  409690:	d132      	bne.n	4096f8 <setvbuf+0xec>
  409692:	9e00      	ldr	r6, [sp, #0]
  409694:	4630      	mov	r0, r6
  409696:	f001 fd73 	bl	40b180 <malloc>
  40969a:	4607      	mov	r7, r0
  40969c:	2800      	cmp	r0, #0
  40969e:	d06b      	beq.n	409778 <setvbuf+0x16c>
  4096a0:	89a3      	ldrh	r3, [r4, #12]
  4096a2:	f043 0380 	orr.w	r3, r3, #128	; 0x80
  4096a6:	81a3      	strh	r3, [r4, #12]
  4096a8:	e028      	b.n	4096fc <setvbuf+0xf0>
  4096aa:	89a3      	ldrh	r3, [r4, #12]
  4096ac:	0599      	lsls	r1, r3, #22
  4096ae:	d4c7      	bmi.n	409640 <setvbuf+0x34>
  4096b0:	6da0      	ldr	r0, [r4, #88]	; 0x58
  4096b2:	f001 fce9 	bl	40b088 <__retarget_lock_acquire_recursive>
  4096b6:	e7c3      	b.n	409640 <setvbuf+0x34>
  4096b8:	2500      	movs	r5, #0
  4096ba:	6e61      	ldr	r1, [r4, #100]	; 0x64
  4096bc:	2600      	movs	r6, #0
  4096be:	f104 0243 	add.w	r2, r4, #67	; 0x43
  4096c2:	f043 0302 	orr.w	r3, r3, #2
  4096c6:	2001      	movs	r0, #1
  4096c8:	60a6      	str	r6, [r4, #8]
  4096ca:	07ce      	lsls	r6, r1, #31
  4096cc:	81a3      	strh	r3, [r4, #12]
  4096ce:	6022      	str	r2, [r4, #0]
  4096d0:	6122      	str	r2, [r4, #16]
  4096d2:	6160      	str	r0, [r4, #20]
  4096d4:	d401      	bmi.n	4096da <setvbuf+0xce>
  4096d6:	0598      	lsls	r0, r3, #22
  4096d8:	d53e      	bpl.n	409758 <setvbuf+0x14c>
  4096da:	4628      	mov	r0, r5
  4096dc:	b003      	add	sp, #12
  4096de:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
  4096e2:	6921      	ldr	r1, [r4, #16]
  4096e4:	4628      	mov	r0, r5
  4096e6:	f001 fa35 	bl	40ab54 <_free_r>
  4096ea:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
  4096ee:	e7bd      	b.n	40966c <setvbuf+0x60>
  4096f0:	4628      	mov	r0, r5
  4096f2:	f001 f909 	bl	40a908 <__sinit>
  4096f6:	e796      	b.n	409626 <setvbuf+0x1a>
  4096f8:	2f00      	cmp	r7, #0
  4096fa:	d0cb      	beq.n	409694 <setvbuf+0x88>
  4096fc:	6bab      	ldr	r3, [r5, #56]	; 0x38
  4096fe:	2b00      	cmp	r3, #0
  409700:	d033      	beq.n	40976a <setvbuf+0x15e>
  409702:	9b00      	ldr	r3, [sp, #0]
  409704:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
  409708:	6027      	str	r7, [r4, #0]
  40970a:	429e      	cmp	r6, r3
  40970c:	bf1c      	itt	ne
  40970e:	f442 6200 	orrne.w	r2, r2, #2048	; 0x800
  409712:	81a2      	strhne	r2, [r4, #12]
  409714:	f1b8 0f01 	cmp.w	r8, #1
  409718:	bf04      	itt	eq
  40971a:	f042 0201 	orreq.w	r2, r2, #1
  40971e:	81a2      	strheq	r2, [r4, #12]
  409720:	b292      	uxth	r2, r2
  409722:	f012 0308 	ands.w	r3, r2, #8
  409726:	6127      	str	r7, [r4, #16]
  409728:	6166      	str	r6, [r4, #20]
  40972a:	d00e      	beq.n	40974a <setvbuf+0x13e>
  40972c:	07d1      	lsls	r1, r2, #31
  40972e:	d51a      	bpl.n	409766 <setvbuf+0x15a>
  409730:	6e65      	ldr	r5, [r4, #100]	; 0x64
  409732:	4276      	negs	r6, r6
  409734:	2300      	movs	r3, #0
  409736:	f015 0501 	ands.w	r5, r5, #1
  40973a:	61a6      	str	r6, [r4, #24]
  40973c:	60a3      	str	r3, [r4, #8]
  40973e:	d009      	beq.n	409754 <setvbuf+0x148>
  409740:	2500      	movs	r5, #0
  409742:	4628      	mov	r0, r5
  409744:	b003      	add	sp, #12
  409746:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
  40974a:	60a3      	str	r3, [r4, #8]
  40974c:	6e65      	ldr	r5, [r4, #100]	; 0x64
  40974e:	f015 0501 	ands.w	r5, r5, #1
  409752:	d1f5      	bne.n	409740 <setvbuf+0x134>
  409754:	0593      	lsls	r3, r2, #22
  409756:	d4c0      	bmi.n	4096da <setvbuf+0xce>
  409758:	6da0      	ldr	r0, [r4, #88]	; 0x58
  40975a:	f001 fc97 	bl	40b08c <__retarget_lock_release_recursive>
  40975e:	4628      	mov	r0, r5
  409760:	b003      	add	sp, #12
  409762:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
  409766:	60a6      	str	r6, [r4, #8]
  409768:	e7f0      	b.n	40974c <setvbuf+0x140>
  40976a:	4628      	mov	r0, r5
  40976c:	f001 f8cc 	bl	40a908 <__sinit>
  409770:	e7c7      	b.n	409702 <setvbuf+0xf6>
  409772:	f04f 35ff 	mov.w	r5, #4294967295
  409776:	e7b0      	b.n	4096da <setvbuf+0xce>
  409778:	f8dd 9000 	ldr.w	r9, [sp]
  40977c:	45b1      	cmp	r9, r6
  40977e:	d004      	beq.n	40978a <setvbuf+0x17e>
  409780:	4648      	mov	r0, r9
  409782:	f001 fcfd 	bl	40b180 <malloc>
  409786:	4607      	mov	r7, r0
  409788:	b920      	cbnz	r0, 409794 <setvbuf+0x188>
  40978a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
  40978e:	f04f 35ff 	mov.w	r5, #4294967295
  409792:	e792      	b.n	4096ba <setvbuf+0xae>
  409794:	464e      	mov	r6, r9
  409796:	e783      	b.n	4096a0 <setvbuf+0x94>
  409798:	20400048 	.word	0x20400048
	...

004097c0 <strlen>:
  4097c0:	f890 f000 	pld	[r0]
  4097c4:	e96d 4502 	strd	r4, r5, [sp, #-8]!
  4097c8:	f020 0107 	bic.w	r1, r0, #7
  4097cc:	f06f 0c00 	mvn.w	ip, #0
  4097d0:	f010 0407 	ands.w	r4, r0, #7
  4097d4:	f891 f020 	pld	[r1, #32]
  4097d8:	f040 8049 	bne.w	40986e <strlen+0xae>
  4097dc:	f04f 0400 	mov.w	r4, #0
  4097e0:	f06f 0007 	mvn.w	r0, #7
  4097e4:	e9d1 2300 	ldrd	r2, r3, [r1]
  4097e8:	f891 f040 	pld	[r1, #64]	; 0x40
  4097ec:	f100 0008 	add.w	r0, r0, #8
  4097f0:	fa82 f24c 	uadd8	r2, r2, ip
  4097f4:	faa4 f28c 	sel	r2, r4, ip
  4097f8:	fa83 f34c 	uadd8	r3, r3, ip
  4097fc:	faa2 f38c 	sel	r3, r2, ip
  409800:	bb4b      	cbnz	r3, 409856 <strlen+0x96>
  409802:	e9d1 2302 	ldrd	r2, r3, [r1, #8]
  409806:	fa82 f24c 	uadd8	r2, r2, ip
  40980a:	f100 0008 	add.w	r0, r0, #8
  40980e:	faa4 f28c 	sel	r2, r4, ip
  409812:	fa83 f34c 	uadd8	r3, r3, ip
  409816:	faa2 f38c 	sel	r3, r2, ip
  40981a:	b9e3      	cbnz	r3, 409856 <strlen+0x96>
  40981c:	e9d1 2304 	ldrd	r2, r3, [r1, #16]
  409820:	fa82 f24c 	uadd8	r2, r2, ip
  409824:	f100 0008 	add.w	r0, r0, #8
  409828:	faa4 f28c 	sel	r2, r4, ip
  40982c:	fa83 f34c 	uadd8	r3, r3, ip
  409830:	faa2 f38c 	sel	r3, r2, ip
  409834:	b97b      	cbnz	r3, 409856 <strlen+0x96>
  409836:	e9d1 2306 	ldrd	r2, r3, [r1, #24]
  40983a:	f101 0120 	add.w	r1, r1, #32
  40983e:	fa82 f24c 	uadd8	r2, r2, ip
  409842:	f100 0008 	add.w	r0, r0, #8
  409846:	faa4 f28c 	sel	r2, r4, ip
  40984a:	fa83 f34c 	uadd8	r3, r3, ip
  40984e:	faa2 f38c 	sel	r3, r2, ip
  409852:	2b00      	cmp	r3, #0
  409854:	d0c6      	beq.n	4097e4 <strlen+0x24>
  409856:	2a00      	cmp	r2, #0
  409858:	bf04      	itt	eq
  40985a:	3004      	addeq	r0, #4
  40985c:	461a      	moveq	r2, r3
  40985e:	ba12      	rev	r2, r2
  409860:	fab2 f282 	clz	r2, r2
  409864:	e8fd 4502 	ldrd	r4, r5, [sp], #8
  409868:	eb00 00d2 	add.w	r0, r0, r2, lsr #3
  40986c:	4770      	bx	lr
  40986e:	e9d1 2300 	ldrd	r2, r3, [r1]
  409872:	f004 0503 	and.w	r5, r4, #3
  409876:	f1c4 0000 	rsb	r0, r4, #0
  40987a:	ea4f 05c5 	mov.w	r5, r5, lsl #3
  40987e:	f014 0f04 	tst.w	r4, #4
  409882:	f891 f040 	pld	[r1, #64]	; 0x40
  409886:	fa0c f505 	lsl.w	r5, ip, r5
  40988a:	ea62 0205 	orn	r2, r2, r5
  40988e:	bf1c      	itt	ne
  409890:	ea63 0305 	ornne	r3, r3, r5
  409894:	4662      	movne	r2, ip
  409896:	f04f 0400 	mov.w	r4, #0
  40989a:	e7a9      	b.n	4097f0 <strlen+0x30>

0040989c <__sprint_r.part.0>:
  40989c:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
  4098a0:	6e4b      	ldr	r3, [r1, #100]	; 0x64
  4098a2:	049c      	lsls	r4, r3, #18
  4098a4:	4693      	mov	fp, r2
  4098a6:	d52f      	bpl.n	409908 <__sprint_r.part.0+0x6c>
  4098a8:	6893      	ldr	r3, [r2, #8]
  4098aa:	6812      	ldr	r2, [r2, #0]
  4098ac:	b353      	cbz	r3, 409904 <__sprint_r.part.0+0x68>
  4098ae:	460e      	mov	r6, r1
  4098b0:	4607      	mov	r7, r0
  4098b2:	f102 0908 	add.w	r9, r2, #8
  4098b6:	e919 0420 	ldmdb	r9, {r5, sl}
  4098ba:	ea5f 089a 	movs.w	r8, sl, lsr #2
  4098be:	d017      	beq.n	4098f0 <__sprint_r.part.0+0x54>
  4098c0:	3d04      	subs	r5, #4
  4098c2:	2400      	movs	r4, #0
  4098c4:	e001      	b.n	4098ca <__sprint_r.part.0+0x2e>
  4098c6:	45a0      	cmp	r8, r4
  4098c8:	d010      	beq.n	4098ec <__sprint_r.part.0+0x50>
  4098ca:	4632      	mov	r2, r6
  4098cc:	f855 1f04 	ldr.w	r1, [r5, #4]!
  4098d0:	4638      	mov	r0, r7
  4098d2:	f001 f8bb 	bl	40aa4c <_fputwc_r>
  4098d6:	1c43      	adds	r3, r0, #1
  4098d8:	f104 0401 	add.w	r4, r4, #1
  4098dc:	d1f3      	bne.n	4098c6 <__sprint_r.part.0+0x2a>
  4098de:	2300      	movs	r3, #0
  4098e0:	f8cb 3008 	str.w	r3, [fp, #8]
  4098e4:	f8cb 3004 	str.w	r3, [fp, #4]
  4098e8:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
  4098ec:	f8db 3008 	ldr.w	r3, [fp, #8]
  4098f0:	f02a 0a03 	bic.w	sl, sl, #3
  4098f4:	eba3 030a 	sub.w	r3, r3, sl
  4098f8:	f8cb 3008 	str.w	r3, [fp, #8]
  4098fc:	f109 0908 	add.w	r9, r9, #8
  409900:	2b00      	cmp	r3, #0
  409902:	d1d8      	bne.n	4098b6 <__sprint_r.part.0+0x1a>
  409904:	2000      	movs	r0, #0
  409906:	e7ea      	b.n	4098de <__sprint_r.part.0+0x42>
  409908:	f001 fa0a 	bl	40ad20 <__sfvwrite_r>
  40990c:	2300      	movs	r3, #0
  40990e:	f8cb 3008 	str.w	r3, [fp, #8]
  409912:	f8cb 3004 	str.w	r3, [fp, #4]
  409916:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
  40991a:	bf00      	nop

0040991c <_vfiprintf_r>:
  40991c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  409920:	b0ad      	sub	sp, #180	; 0xb4
  409922:	461d      	mov	r5, r3
  409924:	468b      	mov	fp, r1
  409926:	4690      	mov	r8, r2
  409928:	9307      	str	r3, [sp, #28]
  40992a:	9006      	str	r0, [sp, #24]
  40992c:	b118      	cbz	r0, 409936 <_vfiprintf_r+0x1a>
  40992e:	6b83      	ldr	r3, [r0, #56]	; 0x38
  409930:	2b00      	cmp	r3, #0
  409932:	f000 80f3 	beq.w	409b1c <_vfiprintf_r+0x200>
  409936:	f8db 3064 	ldr.w	r3, [fp, #100]	; 0x64
  40993a:	f9bb 000c 	ldrsh.w	r0, [fp, #12]
  40993e:	07df      	lsls	r7, r3, #31
  409940:	b281      	uxth	r1, r0
  409942:	d402      	bmi.n	40994a <_vfiprintf_r+0x2e>
  409944:	058e      	lsls	r6, r1, #22
  409946:	f140 80fc 	bpl.w	409b42 <_vfiprintf_r+0x226>
  40994a:	048c      	lsls	r4, r1, #18
  40994c:	d40a      	bmi.n	409964 <_vfiprintf_r+0x48>
  40994e:	f8db 3064 	ldr.w	r3, [fp, #100]	; 0x64
  409952:	f440 5100 	orr.w	r1, r0, #8192	; 0x2000
  409956:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
  40995a:	f8ab 100c 	strh.w	r1, [fp, #12]
  40995e:	f8cb 3064 	str.w	r3, [fp, #100]	; 0x64
  409962:	b289      	uxth	r1, r1
  409964:	0708      	lsls	r0, r1, #28
  409966:	f140 80b3 	bpl.w	409ad0 <_vfiprintf_r+0x1b4>
  40996a:	f8db 3010 	ldr.w	r3, [fp, #16]
  40996e:	2b00      	cmp	r3, #0
  409970:	f000 80ae 	beq.w	409ad0 <_vfiprintf_r+0x1b4>
  409974:	f001 031a 	and.w	r3, r1, #26
  409978:	2b0a      	cmp	r3, #10
  40997a:	f000 80b5 	beq.w	409ae8 <_vfiprintf_r+0x1cc>
  40997e:	2300      	movs	r3, #0
  409980:	f10d 0970 	add.w	r9, sp, #112	; 0x70
  409984:	930b      	str	r3, [sp, #44]	; 0x2c
  409986:	9311      	str	r3, [sp, #68]	; 0x44
  409988:	9310      	str	r3, [sp, #64]	; 0x40
  40998a:	9303      	str	r3, [sp, #12]
  40998c:	f8cd 903c 	str.w	r9, [sp, #60]	; 0x3c
  409990:	46ca      	mov	sl, r9
  409992:	f8cd b010 	str.w	fp, [sp, #16]
  409996:	f898 3000 	ldrb.w	r3, [r8]
  40999a:	4644      	mov	r4, r8
  40999c:	b1fb      	cbz	r3, 4099de <_vfiprintf_r+0xc2>
  40999e:	2b25      	cmp	r3, #37	; 0x25
  4099a0:	d102      	bne.n	4099a8 <_vfiprintf_r+0x8c>
  4099a2:	e01c      	b.n	4099de <_vfiprintf_r+0xc2>
  4099a4:	2b25      	cmp	r3, #37	; 0x25
  4099a6:	d003      	beq.n	4099b0 <_vfiprintf_r+0x94>
  4099a8:	f814 3f01 	ldrb.w	r3, [r4, #1]!
  4099ac:	2b00      	cmp	r3, #0
  4099ae:	d1f9      	bne.n	4099a4 <_vfiprintf_r+0x88>
  4099b0:	eba4 0508 	sub.w	r5, r4, r8
  4099b4:	b19d      	cbz	r5, 4099de <_vfiprintf_r+0xc2>
  4099b6:	9b10      	ldr	r3, [sp, #64]	; 0x40
  4099b8:	9a11      	ldr	r2, [sp, #68]	; 0x44
  4099ba:	f8ca 8000 	str.w	r8, [sl]
  4099be:	3301      	adds	r3, #1
  4099c0:	442a      	add	r2, r5
  4099c2:	2b07      	cmp	r3, #7
  4099c4:	f8ca 5004 	str.w	r5, [sl, #4]
  4099c8:	9211      	str	r2, [sp, #68]	; 0x44
  4099ca:	9310      	str	r3, [sp, #64]	; 0x40
  4099cc:	dd7a      	ble.n	409ac4 <_vfiprintf_r+0x1a8>
  4099ce:	2a00      	cmp	r2, #0
  4099d0:	f040 84b0 	bne.w	40a334 <_vfiprintf_r+0xa18>
  4099d4:	9b03      	ldr	r3, [sp, #12]
  4099d6:	9210      	str	r2, [sp, #64]	; 0x40
  4099d8:	442b      	add	r3, r5
  4099da:	46ca      	mov	sl, r9
  4099dc:	9303      	str	r3, [sp, #12]
  4099de:	7823      	ldrb	r3, [r4, #0]
  4099e0:	2b00      	cmp	r3, #0
  4099e2:	f000 83e0 	beq.w	40a1a6 <_vfiprintf_r+0x88a>
  4099e6:	2000      	movs	r0, #0
  4099e8:	f04f 0300 	mov.w	r3, #0
  4099ec:	f88d 3037 	strb.w	r3, [sp, #55]	; 0x37
  4099f0:	f104 0801 	add.w	r8, r4, #1
  4099f4:	7862      	ldrb	r2, [r4, #1]
  4099f6:	4605      	mov	r5, r0
  4099f8:	4606      	mov	r6, r0
  4099fa:	4603      	mov	r3, r0
  4099fc:	f04f 34ff 	mov.w	r4, #4294967295
  409a00:	f108 0801 	add.w	r8, r8, #1
  409a04:	f1a2 0120 	sub.w	r1, r2, #32
  409a08:	2958      	cmp	r1, #88	; 0x58
  409a0a:	f200 82de 	bhi.w	409fca <_vfiprintf_r+0x6ae>
  409a0e:	e8df f011 	tbh	[pc, r1, lsl #1]
  409a12:	0221      	.short	0x0221
  409a14:	02dc02dc 	.word	0x02dc02dc
  409a18:	02dc0229 	.word	0x02dc0229
  409a1c:	02dc02dc 	.word	0x02dc02dc
  409a20:	02dc02dc 	.word	0x02dc02dc
  409a24:	028902dc 	.word	0x028902dc
  409a28:	02dc0295 	.word	0x02dc0295
  409a2c:	02bd00a2 	.word	0x02bd00a2
  409a30:	019f02dc 	.word	0x019f02dc
  409a34:	01a401a4 	.word	0x01a401a4
  409a38:	01a401a4 	.word	0x01a401a4
  409a3c:	01a401a4 	.word	0x01a401a4
  409a40:	01a401a4 	.word	0x01a401a4
  409a44:	02dc01a4 	.word	0x02dc01a4
  409a48:	02dc02dc 	.word	0x02dc02dc
  409a4c:	02dc02dc 	.word	0x02dc02dc
  409a50:	02dc02dc 	.word	0x02dc02dc
  409a54:	02dc02dc 	.word	0x02dc02dc
  409a58:	01b202dc 	.word	0x01b202dc
  409a5c:	02dc02dc 	.word	0x02dc02dc
  409a60:	02dc02dc 	.word	0x02dc02dc
  409a64:	02dc02dc 	.word	0x02dc02dc
  409a68:	02dc02dc 	.word	0x02dc02dc
  409a6c:	02dc02dc 	.word	0x02dc02dc
  409a70:	02dc0197 	.word	0x02dc0197
  409a74:	02dc02dc 	.word	0x02dc02dc
  409a78:	02dc02dc 	.word	0x02dc02dc
  409a7c:	02dc019b 	.word	0x02dc019b
  409a80:	025302dc 	.word	0x025302dc
  409a84:	02dc02dc 	.word	0x02dc02dc
  409a88:	02dc02dc 	.word	0x02dc02dc
  409a8c:	02dc02dc 	.word	0x02dc02dc
  409a90:	02dc02dc 	.word	0x02dc02dc
  409a94:	02dc02dc 	.word	0x02dc02dc
  409a98:	021b025a 	.word	0x021b025a
  409a9c:	02dc02dc 	.word	0x02dc02dc
  409aa0:	026e02dc 	.word	0x026e02dc
  409aa4:	02dc021b 	.word	0x02dc021b
  409aa8:	027302dc 	.word	0x027302dc
  409aac:	01f502dc 	.word	0x01f502dc
  409ab0:	02090182 	.word	0x02090182
  409ab4:	02dc02d7 	.word	0x02dc02d7
  409ab8:	02dc029a 	.word	0x02dc029a
  409abc:	02dc00a7 	.word	0x02dc00a7
  409ac0:	022e02dc 	.word	0x022e02dc
  409ac4:	f10a 0a08 	add.w	sl, sl, #8
  409ac8:	9b03      	ldr	r3, [sp, #12]
  409aca:	442b      	add	r3, r5
  409acc:	9303      	str	r3, [sp, #12]
  409ace:	e786      	b.n	4099de <_vfiprintf_r+0xc2>
  409ad0:	4659      	mov	r1, fp
  409ad2:	9806      	ldr	r0, [sp, #24]
  409ad4:	f000 fdac 	bl	40a630 <__swsetup_r>
  409ad8:	bb18      	cbnz	r0, 409b22 <_vfiprintf_r+0x206>
  409ada:	f8bb 100c 	ldrh.w	r1, [fp, #12]
  409ade:	f001 031a 	and.w	r3, r1, #26
  409ae2:	2b0a      	cmp	r3, #10
  409ae4:	f47f af4b 	bne.w	40997e <_vfiprintf_r+0x62>
  409ae8:	f9bb 300e 	ldrsh.w	r3, [fp, #14]
  409aec:	2b00      	cmp	r3, #0
  409aee:	f6ff af46 	blt.w	40997e <_vfiprintf_r+0x62>
  409af2:	f8db 3064 	ldr.w	r3, [fp, #100]	; 0x64
  409af6:	07db      	lsls	r3, r3, #31
  409af8:	d405      	bmi.n	409b06 <_vfiprintf_r+0x1ea>
  409afa:	058f      	lsls	r7, r1, #22
  409afc:	d403      	bmi.n	409b06 <_vfiprintf_r+0x1ea>
  409afe:	f8db 0058 	ldr.w	r0, [fp, #88]	; 0x58
  409b02:	f001 fac3 	bl	40b08c <__retarget_lock_release_recursive>
  409b06:	462b      	mov	r3, r5
  409b08:	4642      	mov	r2, r8
  409b0a:	4659      	mov	r1, fp
  409b0c:	9806      	ldr	r0, [sp, #24]
  409b0e:	f000 fd4d 	bl	40a5ac <__sbprintf>
  409b12:	9003      	str	r0, [sp, #12]
  409b14:	9803      	ldr	r0, [sp, #12]
  409b16:	b02d      	add	sp, #180	; 0xb4
  409b18:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  409b1c:	f000 fef4 	bl	40a908 <__sinit>
  409b20:	e709      	b.n	409936 <_vfiprintf_r+0x1a>
  409b22:	f8db 3064 	ldr.w	r3, [fp, #100]	; 0x64
  409b26:	07d9      	lsls	r1, r3, #31
  409b28:	d404      	bmi.n	409b34 <_vfiprintf_r+0x218>
  409b2a:	f8bb 300c 	ldrh.w	r3, [fp, #12]
  409b2e:	059a      	lsls	r2, r3, #22
  409b30:	f140 84aa 	bpl.w	40a488 <_vfiprintf_r+0xb6c>
  409b34:	f04f 33ff 	mov.w	r3, #4294967295
  409b38:	9303      	str	r3, [sp, #12]
  409b3a:	9803      	ldr	r0, [sp, #12]
  409b3c:	b02d      	add	sp, #180	; 0xb4
  409b3e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  409b42:	f8db 0058 	ldr.w	r0, [fp, #88]	; 0x58
  409b46:	f001 fa9f 	bl	40b088 <__retarget_lock_acquire_recursive>
  409b4a:	f9bb 000c 	ldrsh.w	r0, [fp, #12]
  409b4e:	b281      	uxth	r1, r0
  409b50:	e6fb      	b.n	40994a <_vfiprintf_r+0x2e>
  409b52:	4276      	negs	r6, r6
  409b54:	9207      	str	r2, [sp, #28]
  409b56:	f043 0304 	orr.w	r3, r3, #4
  409b5a:	f898 2000 	ldrb.w	r2, [r8]
  409b5e:	e74f      	b.n	409a00 <_vfiprintf_r+0xe4>
  409b60:	9608      	str	r6, [sp, #32]
  409b62:	069e      	lsls	r6, r3, #26
  409b64:	f100 8450 	bmi.w	40a408 <_vfiprintf_r+0xaec>
  409b68:	9907      	ldr	r1, [sp, #28]
  409b6a:	06dd      	lsls	r5, r3, #27
  409b6c:	460a      	mov	r2, r1
  409b6e:	f100 83ef 	bmi.w	40a350 <_vfiprintf_r+0xa34>
  409b72:	0658      	lsls	r0, r3, #25
  409b74:	f140 83ec 	bpl.w	40a350 <_vfiprintf_r+0xa34>
  409b78:	880e      	ldrh	r6, [r1, #0]
  409b7a:	3104      	adds	r1, #4
  409b7c:	2700      	movs	r7, #0
  409b7e:	2201      	movs	r2, #1
  409b80:	9107      	str	r1, [sp, #28]
  409b82:	f04f 0100 	mov.w	r1, #0
  409b86:	f88d 1037 	strb.w	r1, [sp, #55]	; 0x37
  409b8a:	2500      	movs	r5, #0
  409b8c:	1c61      	adds	r1, r4, #1
  409b8e:	f000 8116 	beq.w	409dbe <_vfiprintf_r+0x4a2>
  409b92:	f023 0180 	bic.w	r1, r3, #128	; 0x80
  409b96:	9102      	str	r1, [sp, #8]
  409b98:	ea56 0107 	orrs.w	r1, r6, r7
  409b9c:	f040 8114 	bne.w	409dc8 <_vfiprintf_r+0x4ac>
  409ba0:	2c00      	cmp	r4, #0
  409ba2:	f040 835c 	bne.w	40a25e <_vfiprintf_r+0x942>
  409ba6:	2a00      	cmp	r2, #0
  409ba8:	f040 83b7 	bne.w	40a31a <_vfiprintf_r+0x9fe>
  409bac:	f013 0301 	ands.w	r3, r3, #1
  409bb0:	9305      	str	r3, [sp, #20]
  409bb2:	f000 8457 	beq.w	40a464 <_vfiprintf_r+0xb48>
  409bb6:	f10d 0bb0 	add.w	fp, sp, #176	; 0xb0
  409bba:	2330      	movs	r3, #48	; 0x30
  409bbc:	f80b 3d41 	strb.w	r3, [fp, #-65]!
  409bc0:	9b05      	ldr	r3, [sp, #20]
  409bc2:	42a3      	cmp	r3, r4
  409bc4:	bfb8      	it	lt
  409bc6:	4623      	movlt	r3, r4
  409bc8:	9301      	str	r3, [sp, #4]
  409bca:	b10d      	cbz	r5, 409bd0 <_vfiprintf_r+0x2b4>
  409bcc:	3301      	adds	r3, #1
  409bce:	9301      	str	r3, [sp, #4]
  409bd0:	9b02      	ldr	r3, [sp, #8]
  409bd2:	f013 0302 	ands.w	r3, r3, #2
  409bd6:	9309      	str	r3, [sp, #36]	; 0x24
  409bd8:	d002      	beq.n	409be0 <_vfiprintf_r+0x2c4>
  409bda:	9b01      	ldr	r3, [sp, #4]
  409bdc:	3302      	adds	r3, #2
  409bde:	9301      	str	r3, [sp, #4]
  409be0:	9b02      	ldr	r3, [sp, #8]
  409be2:	f013 0384 	ands.w	r3, r3, #132	; 0x84
  409be6:	930a      	str	r3, [sp, #40]	; 0x28
  409be8:	f040 8217 	bne.w	40a01a <_vfiprintf_r+0x6fe>
  409bec:	9b08      	ldr	r3, [sp, #32]
  409bee:	9a01      	ldr	r2, [sp, #4]
  409bf0:	1a9d      	subs	r5, r3, r2
  409bf2:	2d00      	cmp	r5, #0
  409bf4:	f340 8211 	ble.w	40a01a <_vfiprintf_r+0x6fe>
  409bf8:	2d10      	cmp	r5, #16
  409bfa:	f340 8490 	ble.w	40a51e <_vfiprintf_r+0xc02>
  409bfe:	9b10      	ldr	r3, [sp, #64]	; 0x40
  409c00:	9a11      	ldr	r2, [sp, #68]	; 0x44
  409c02:	4ec4      	ldr	r6, [pc, #784]	; (409f14 <_vfiprintf_r+0x5f8>)
  409c04:	46d6      	mov	lr, sl
  409c06:	2710      	movs	r7, #16
  409c08:	46a2      	mov	sl, r4
  409c0a:	4619      	mov	r1, r3
  409c0c:	9c06      	ldr	r4, [sp, #24]
  409c0e:	e007      	b.n	409c20 <_vfiprintf_r+0x304>
  409c10:	f101 0c02 	add.w	ip, r1, #2
  409c14:	f10e 0e08 	add.w	lr, lr, #8
  409c18:	4601      	mov	r1, r0
  409c1a:	3d10      	subs	r5, #16
  409c1c:	2d10      	cmp	r5, #16
  409c1e:	dd11      	ble.n	409c44 <_vfiprintf_r+0x328>
  409c20:	1c48      	adds	r0, r1, #1
  409c22:	3210      	adds	r2, #16
  409c24:	2807      	cmp	r0, #7
  409c26:	9211      	str	r2, [sp, #68]	; 0x44
  409c28:	e88e 00c0 	stmia.w	lr, {r6, r7}
  409c2c:	9010      	str	r0, [sp, #64]	; 0x40
  409c2e:	ddef      	ble.n	409c10 <_vfiprintf_r+0x2f4>
  409c30:	2a00      	cmp	r2, #0
  409c32:	f040 81e4 	bne.w	409ffe <_vfiprintf_r+0x6e2>
  409c36:	3d10      	subs	r5, #16
  409c38:	2d10      	cmp	r5, #16
  409c3a:	4611      	mov	r1, r2
  409c3c:	f04f 0c01 	mov.w	ip, #1
  409c40:	46ce      	mov	lr, r9
  409c42:	dced      	bgt.n	409c20 <_vfiprintf_r+0x304>
  409c44:	4654      	mov	r4, sl
  409c46:	4661      	mov	r1, ip
  409c48:	46f2      	mov	sl, lr
  409c4a:	442a      	add	r2, r5
  409c4c:	2907      	cmp	r1, #7
  409c4e:	9211      	str	r2, [sp, #68]	; 0x44
  409c50:	f8ca 6000 	str.w	r6, [sl]
  409c54:	f8ca 5004 	str.w	r5, [sl, #4]
  409c58:	9110      	str	r1, [sp, #64]	; 0x40
  409c5a:	f300 82ec 	bgt.w	40a236 <_vfiprintf_r+0x91a>
  409c5e:	f89d 5037 	ldrb.w	r5, [sp, #55]	; 0x37
  409c62:	f10a 0a08 	add.w	sl, sl, #8
  409c66:	1c48      	adds	r0, r1, #1
  409c68:	2d00      	cmp	r5, #0
  409c6a:	f040 81de 	bne.w	40a02a <_vfiprintf_r+0x70e>
  409c6e:	9b09      	ldr	r3, [sp, #36]	; 0x24
  409c70:	2b00      	cmp	r3, #0
  409c72:	f000 81f8 	beq.w	40a066 <_vfiprintf_r+0x74a>
  409c76:	3202      	adds	r2, #2
  409c78:	a90e      	add	r1, sp, #56	; 0x38
  409c7a:	2302      	movs	r3, #2
  409c7c:	2807      	cmp	r0, #7
  409c7e:	9211      	str	r2, [sp, #68]	; 0x44
  409c80:	9010      	str	r0, [sp, #64]	; 0x40
  409c82:	e88a 000a 	stmia.w	sl, {r1, r3}
  409c86:	f340 81ea 	ble.w	40a05e <_vfiprintf_r+0x742>
  409c8a:	2a00      	cmp	r2, #0
  409c8c:	f040 838c 	bne.w	40a3a8 <_vfiprintf_r+0xa8c>
  409c90:	9b0a      	ldr	r3, [sp, #40]	; 0x28
  409c92:	2b80      	cmp	r3, #128	; 0x80
  409c94:	f04f 0001 	mov.w	r0, #1
  409c98:	4611      	mov	r1, r2
  409c9a:	46ca      	mov	sl, r9
  409c9c:	f040 81e7 	bne.w	40a06e <_vfiprintf_r+0x752>
  409ca0:	9b08      	ldr	r3, [sp, #32]
  409ca2:	9d01      	ldr	r5, [sp, #4]
  409ca4:	1b5e      	subs	r6, r3, r5
  409ca6:	2e00      	cmp	r6, #0
  409ca8:	f340 81e1 	ble.w	40a06e <_vfiprintf_r+0x752>
  409cac:	2e10      	cmp	r6, #16
  409cae:	4d9a      	ldr	r5, [pc, #616]	; (409f18 <_vfiprintf_r+0x5fc>)
  409cb0:	f340 8450 	ble.w	40a554 <_vfiprintf_r+0xc38>
  409cb4:	46d4      	mov	ip, sl
  409cb6:	2710      	movs	r7, #16
  409cb8:	46a2      	mov	sl, r4
  409cba:	9c06      	ldr	r4, [sp, #24]
  409cbc:	e007      	b.n	409cce <_vfiprintf_r+0x3b2>
  409cbe:	f101 0e02 	add.w	lr, r1, #2
  409cc2:	f10c 0c08 	add.w	ip, ip, #8
  409cc6:	4601      	mov	r1, r0
  409cc8:	3e10      	subs	r6, #16
  409cca:	2e10      	cmp	r6, #16
  409ccc:	dd11      	ble.n	409cf2 <_vfiprintf_r+0x3d6>
  409cce:	1c48      	adds	r0, r1, #1
  409cd0:	3210      	adds	r2, #16
  409cd2:	2807      	cmp	r0, #7
  409cd4:	9211      	str	r2, [sp, #68]	; 0x44
  409cd6:	e88c 00a0 	stmia.w	ip, {r5, r7}
  409cda:	9010      	str	r0, [sp, #64]	; 0x40
  409cdc:	ddef      	ble.n	409cbe <_vfiprintf_r+0x3a2>
  409cde:	2a00      	cmp	r2, #0
  409ce0:	f040 829d 	bne.w	40a21e <_vfiprintf_r+0x902>
  409ce4:	3e10      	subs	r6, #16
  409ce6:	2e10      	cmp	r6, #16
  409ce8:	f04f 0e01 	mov.w	lr, #1
  409cec:	4611      	mov	r1, r2
  409cee:	46cc      	mov	ip, r9
  409cf0:	dced      	bgt.n	409cce <_vfiprintf_r+0x3b2>
  409cf2:	4654      	mov	r4, sl
  409cf4:	46e2      	mov	sl, ip
  409cf6:	4432      	add	r2, r6
  409cf8:	f1be 0f07 	cmp.w	lr, #7
  409cfc:	9211      	str	r2, [sp, #68]	; 0x44
  409cfe:	e88a 0060 	stmia.w	sl, {r5, r6}
  409d02:	f8cd e040 	str.w	lr, [sp, #64]	; 0x40
  409d06:	f300 8369 	bgt.w	40a3dc <_vfiprintf_r+0xac0>
  409d0a:	f10a 0a08 	add.w	sl, sl, #8
  409d0e:	f10e 0001 	add.w	r0, lr, #1
  409d12:	4671      	mov	r1, lr
  409d14:	e1ab      	b.n	40a06e <_vfiprintf_r+0x752>
  409d16:	9608      	str	r6, [sp, #32]
  409d18:	f013 0220 	ands.w	r2, r3, #32
  409d1c:	f040 838c 	bne.w	40a438 <_vfiprintf_r+0xb1c>
  409d20:	f013 0110 	ands.w	r1, r3, #16
  409d24:	f040 831a 	bne.w	40a35c <_vfiprintf_r+0xa40>
  409d28:	f013 0240 	ands.w	r2, r3, #64	; 0x40
  409d2c:	f000 8316 	beq.w	40a35c <_vfiprintf_r+0xa40>
  409d30:	9807      	ldr	r0, [sp, #28]
  409d32:	460a      	mov	r2, r1
  409d34:	4601      	mov	r1, r0
  409d36:	3104      	adds	r1, #4
  409d38:	8806      	ldrh	r6, [r0, #0]
  409d3a:	9107      	str	r1, [sp, #28]
  409d3c:	2700      	movs	r7, #0
  409d3e:	e720      	b.n	409b82 <_vfiprintf_r+0x266>
  409d40:	9608      	str	r6, [sp, #32]
  409d42:	f043 0310 	orr.w	r3, r3, #16
  409d46:	e7e7      	b.n	409d18 <_vfiprintf_r+0x3fc>
  409d48:	9608      	str	r6, [sp, #32]
  409d4a:	f043 0310 	orr.w	r3, r3, #16
  409d4e:	e708      	b.n	409b62 <_vfiprintf_r+0x246>
  409d50:	f043 0380 	orr.w	r3, r3, #128	; 0x80
  409d54:	f898 2000 	ldrb.w	r2, [r8]
  409d58:	e652      	b.n	409a00 <_vfiprintf_r+0xe4>
  409d5a:	f1a2 0130 	sub.w	r1, r2, #48	; 0x30
  409d5e:	2600      	movs	r6, #0
  409d60:	f818 2b01 	ldrb.w	r2, [r8], #1
  409d64:	eb06 0686 	add.w	r6, r6, r6, lsl #2
  409d68:	eb01 0646 	add.w	r6, r1, r6, lsl #1
  409d6c:	f1a2 0130 	sub.w	r1, r2, #48	; 0x30
  409d70:	2909      	cmp	r1, #9
  409d72:	d9f5      	bls.n	409d60 <_vfiprintf_r+0x444>
  409d74:	e646      	b.n	409a04 <_vfiprintf_r+0xe8>
  409d76:	9608      	str	r6, [sp, #32]
  409d78:	2800      	cmp	r0, #0
  409d7a:	f040 8408 	bne.w	40a58e <_vfiprintf_r+0xc72>
  409d7e:	f043 0310 	orr.w	r3, r3, #16
  409d82:	069e      	lsls	r6, r3, #26
  409d84:	f100 834c 	bmi.w	40a420 <_vfiprintf_r+0xb04>
  409d88:	06dd      	lsls	r5, r3, #27
  409d8a:	f100 82f3 	bmi.w	40a374 <_vfiprintf_r+0xa58>
  409d8e:	0658      	lsls	r0, r3, #25
  409d90:	f140 82f0 	bpl.w	40a374 <_vfiprintf_r+0xa58>
  409d94:	9d07      	ldr	r5, [sp, #28]
  409d96:	f9b5 6000 	ldrsh.w	r6, [r5]
  409d9a:	462a      	mov	r2, r5
  409d9c:	17f7      	asrs	r7, r6, #31
  409d9e:	3204      	adds	r2, #4
  409da0:	4630      	mov	r0, r6
  409da2:	4639      	mov	r1, r7
  409da4:	9207      	str	r2, [sp, #28]
  409da6:	2800      	cmp	r0, #0
  409da8:	f171 0200 	sbcs.w	r2, r1, #0
  409dac:	f2c0 835d 	blt.w	40a46a <_vfiprintf_r+0xb4e>
  409db0:	1c61      	adds	r1, r4, #1
  409db2:	f89d 5037 	ldrb.w	r5, [sp, #55]	; 0x37
  409db6:	f04f 0201 	mov.w	r2, #1
  409dba:	f47f aeea 	bne.w	409b92 <_vfiprintf_r+0x276>
  409dbe:	ea56 0107 	orrs.w	r1, r6, r7
  409dc2:	f000 824d 	beq.w	40a260 <_vfiprintf_r+0x944>
  409dc6:	9302      	str	r3, [sp, #8]
  409dc8:	2a01      	cmp	r2, #1
  409dca:	f000 828c 	beq.w	40a2e6 <_vfiprintf_r+0x9ca>
  409dce:	2a02      	cmp	r2, #2
  409dd0:	f040 825c 	bne.w	40a28c <_vfiprintf_r+0x970>
  409dd4:	980b      	ldr	r0, [sp, #44]	; 0x2c
  409dd6:	46cb      	mov	fp, r9
  409dd8:	0933      	lsrs	r3, r6, #4
  409dda:	f006 010f 	and.w	r1, r6, #15
  409dde:	ea43 7307 	orr.w	r3, r3, r7, lsl #28
  409de2:	093a      	lsrs	r2, r7, #4
  409de4:	461e      	mov	r6, r3
  409de6:	4617      	mov	r7, r2
  409de8:	5c43      	ldrb	r3, [r0, r1]
  409dea:	f80b 3d01 	strb.w	r3, [fp, #-1]!
  409dee:	ea56 0307 	orrs.w	r3, r6, r7
  409df2:	d1f1      	bne.n	409dd8 <_vfiprintf_r+0x4bc>
  409df4:	eba9 030b 	sub.w	r3, r9, fp
  409df8:	9305      	str	r3, [sp, #20]
  409dfa:	e6e1      	b.n	409bc0 <_vfiprintf_r+0x2a4>
  409dfc:	2800      	cmp	r0, #0
  409dfe:	f040 83c0 	bne.w	40a582 <_vfiprintf_r+0xc66>
  409e02:	0699      	lsls	r1, r3, #26
  409e04:	f100 8367 	bmi.w	40a4d6 <_vfiprintf_r+0xbba>
  409e08:	06da      	lsls	r2, r3, #27
  409e0a:	f100 80f1 	bmi.w	409ff0 <_vfiprintf_r+0x6d4>
  409e0e:	065b      	lsls	r3, r3, #25
  409e10:	f140 80ee 	bpl.w	409ff0 <_vfiprintf_r+0x6d4>
  409e14:	9a07      	ldr	r2, [sp, #28]
  409e16:	6813      	ldr	r3, [r2, #0]
  409e18:	3204      	adds	r2, #4
  409e1a:	9207      	str	r2, [sp, #28]
  409e1c:	f8bd 200c 	ldrh.w	r2, [sp, #12]
  409e20:	801a      	strh	r2, [r3, #0]
  409e22:	e5b8      	b.n	409996 <_vfiprintf_r+0x7a>
  409e24:	9807      	ldr	r0, [sp, #28]
  409e26:	4a3d      	ldr	r2, [pc, #244]	; (409f1c <_vfiprintf_r+0x600>)
  409e28:	9608      	str	r6, [sp, #32]
  409e2a:	920b      	str	r2, [sp, #44]	; 0x2c
  409e2c:	6806      	ldr	r6, [r0, #0]
  409e2e:	2278      	movs	r2, #120	; 0x78
  409e30:	2130      	movs	r1, #48	; 0x30
  409e32:	3004      	adds	r0, #4
  409e34:	f88d 2039 	strb.w	r2, [sp, #57]	; 0x39
  409e38:	f043 0302 	orr.w	r3, r3, #2
  409e3c:	9007      	str	r0, [sp, #28]
  409e3e:	2700      	movs	r7, #0
  409e40:	f88d 1038 	strb.w	r1, [sp, #56]	; 0x38
  409e44:	2202      	movs	r2, #2
  409e46:	e69c      	b.n	409b82 <_vfiprintf_r+0x266>
  409e48:	9608      	str	r6, [sp, #32]
  409e4a:	2800      	cmp	r0, #0
  409e4c:	d099      	beq.n	409d82 <_vfiprintf_r+0x466>
  409e4e:	f88d 5037 	strb.w	r5, [sp, #55]	; 0x37
  409e52:	e796      	b.n	409d82 <_vfiprintf_r+0x466>
  409e54:	f898 2000 	ldrb.w	r2, [r8]
  409e58:	2d00      	cmp	r5, #0
  409e5a:	f47f add1 	bne.w	409a00 <_vfiprintf_r+0xe4>
  409e5e:	2001      	movs	r0, #1
  409e60:	2520      	movs	r5, #32
  409e62:	e5cd      	b.n	409a00 <_vfiprintf_r+0xe4>
  409e64:	f043 0301 	orr.w	r3, r3, #1
  409e68:	f898 2000 	ldrb.w	r2, [r8]
  409e6c:	e5c8      	b.n	409a00 <_vfiprintf_r+0xe4>
  409e6e:	9608      	str	r6, [sp, #32]
  409e70:	2800      	cmp	r0, #0
  409e72:	f040 8393 	bne.w	40a59c <_vfiprintf_r+0xc80>
  409e76:	4929      	ldr	r1, [pc, #164]	; (409f1c <_vfiprintf_r+0x600>)
  409e78:	910b      	str	r1, [sp, #44]	; 0x2c
  409e7a:	069f      	lsls	r7, r3, #26
  409e7c:	f100 82e8 	bmi.w	40a450 <_vfiprintf_r+0xb34>
  409e80:	9807      	ldr	r0, [sp, #28]
  409e82:	06de      	lsls	r6, r3, #27
  409e84:	4601      	mov	r1, r0
  409e86:	f100 8270 	bmi.w	40a36a <_vfiprintf_r+0xa4e>
  409e8a:	065d      	lsls	r5, r3, #25
  409e8c:	f140 826d 	bpl.w	40a36a <_vfiprintf_r+0xa4e>
  409e90:	3104      	adds	r1, #4
  409e92:	8806      	ldrh	r6, [r0, #0]
  409e94:	9107      	str	r1, [sp, #28]
  409e96:	2700      	movs	r7, #0
  409e98:	07d8      	lsls	r0, r3, #31
  409e9a:	f140 8222 	bpl.w	40a2e2 <_vfiprintf_r+0x9c6>
  409e9e:	ea56 0107 	orrs.w	r1, r6, r7
  409ea2:	f000 821e 	beq.w	40a2e2 <_vfiprintf_r+0x9c6>
  409ea6:	2130      	movs	r1, #48	; 0x30
  409ea8:	f88d 2039 	strb.w	r2, [sp, #57]	; 0x39
  409eac:	f043 0302 	orr.w	r3, r3, #2
  409eb0:	f88d 1038 	strb.w	r1, [sp, #56]	; 0x38
  409eb4:	2202      	movs	r2, #2
  409eb6:	e664      	b.n	409b82 <_vfiprintf_r+0x266>
  409eb8:	9608      	str	r6, [sp, #32]
  409eba:	2800      	cmp	r0, #0
  409ebc:	f040 836b 	bne.w	40a596 <_vfiprintf_r+0xc7a>
  409ec0:	4917      	ldr	r1, [pc, #92]	; (409f20 <_vfiprintf_r+0x604>)
  409ec2:	910b      	str	r1, [sp, #44]	; 0x2c
  409ec4:	e7d9      	b.n	409e7a <_vfiprintf_r+0x55e>
  409ec6:	9907      	ldr	r1, [sp, #28]
  409ec8:	9608      	str	r6, [sp, #32]
  409eca:	680a      	ldr	r2, [r1, #0]
  409ecc:	f88d 2048 	strb.w	r2, [sp, #72]	; 0x48
  409ed0:	f04f 0000 	mov.w	r0, #0
  409ed4:	460a      	mov	r2, r1
  409ed6:	f88d 0037 	strb.w	r0, [sp, #55]	; 0x37
  409eda:	3204      	adds	r2, #4
  409edc:	2001      	movs	r0, #1
  409ede:	9001      	str	r0, [sp, #4]
  409ee0:	9207      	str	r2, [sp, #28]
  409ee2:	9005      	str	r0, [sp, #20]
  409ee4:	f10d 0b48 	add.w	fp, sp, #72	; 0x48
  409ee8:	9302      	str	r3, [sp, #8]
  409eea:	2400      	movs	r4, #0
  409eec:	e670      	b.n	409bd0 <_vfiprintf_r+0x2b4>
  409eee:	f043 0340 	orr.w	r3, r3, #64	; 0x40
  409ef2:	f898 2000 	ldrb.w	r2, [r8]
  409ef6:	e583      	b.n	409a00 <_vfiprintf_r+0xe4>
  409ef8:	f898 2000 	ldrb.w	r2, [r8]
  409efc:	2a6c      	cmp	r2, #108	; 0x6c
  409efe:	bf03      	ittte	eq
  409f00:	f898 2001 	ldrbeq.w	r2, [r8, #1]
  409f04:	f043 0320 	orreq.w	r3, r3, #32
  409f08:	f108 0801 	addeq.w	r8, r8, #1
  409f0c:	f043 0310 	orrne.w	r3, r3, #16
  409f10:	e576      	b.n	409a00 <_vfiprintf_r+0xe4>
  409f12:	bf00      	nop
  409f14:	0040d9fc 	.word	0x0040d9fc
  409f18:	0040da0c 	.word	0x0040da0c
  409f1c:	0040d9e0 	.word	0x0040d9e0
  409f20:	0040d9cc 	.word	0x0040d9cc
  409f24:	9907      	ldr	r1, [sp, #28]
  409f26:	680e      	ldr	r6, [r1, #0]
  409f28:	460a      	mov	r2, r1
  409f2a:	2e00      	cmp	r6, #0
  409f2c:	f102 0204 	add.w	r2, r2, #4
  409f30:	f6ff ae0f 	blt.w	409b52 <_vfiprintf_r+0x236>
  409f34:	9207      	str	r2, [sp, #28]
  409f36:	f898 2000 	ldrb.w	r2, [r8]
  409f3a:	e561      	b.n	409a00 <_vfiprintf_r+0xe4>
  409f3c:	f898 2000 	ldrb.w	r2, [r8]
  409f40:	2001      	movs	r0, #1
  409f42:	252b      	movs	r5, #43	; 0x2b
  409f44:	e55c      	b.n	409a00 <_vfiprintf_r+0xe4>
  409f46:	9907      	ldr	r1, [sp, #28]
  409f48:	9608      	str	r6, [sp, #32]
  409f4a:	f8d1 b000 	ldr.w	fp, [r1]
  409f4e:	f04f 0200 	mov.w	r2, #0
  409f52:	f88d 2037 	strb.w	r2, [sp, #55]	; 0x37
  409f56:	1d0e      	adds	r6, r1, #4
  409f58:	f1bb 0f00 	cmp.w	fp, #0
  409f5c:	f000 82e5 	beq.w	40a52a <_vfiprintf_r+0xc0e>
  409f60:	1c67      	adds	r7, r4, #1
  409f62:	f000 82c4 	beq.w	40a4ee <_vfiprintf_r+0xbd2>
  409f66:	4622      	mov	r2, r4
  409f68:	2100      	movs	r1, #0
  409f6a:	4658      	mov	r0, fp
  409f6c:	9301      	str	r3, [sp, #4]
  409f6e:	f001 fbd7 	bl	40b720 <memchr>
  409f72:	9b01      	ldr	r3, [sp, #4]
  409f74:	2800      	cmp	r0, #0
  409f76:	f000 82e5 	beq.w	40a544 <_vfiprintf_r+0xc28>
  409f7a:	eba0 020b 	sub.w	r2, r0, fp
  409f7e:	9205      	str	r2, [sp, #20]
  409f80:	9607      	str	r6, [sp, #28]
  409f82:	9302      	str	r3, [sp, #8]
  409f84:	f89d 5037 	ldrb.w	r5, [sp, #55]	; 0x37
  409f88:	2400      	movs	r4, #0
  409f8a:	e619      	b.n	409bc0 <_vfiprintf_r+0x2a4>
  409f8c:	f898 2000 	ldrb.w	r2, [r8]
  409f90:	2a2a      	cmp	r2, #42	; 0x2a
  409f92:	f108 0701 	add.w	r7, r8, #1
  409f96:	f000 82e9 	beq.w	40a56c <_vfiprintf_r+0xc50>
  409f9a:	f1a2 0130 	sub.w	r1, r2, #48	; 0x30
  409f9e:	2909      	cmp	r1, #9
  409fa0:	46b8      	mov	r8, r7
  409fa2:	f04f 0400 	mov.w	r4, #0
  409fa6:	f63f ad2d 	bhi.w	409a04 <_vfiprintf_r+0xe8>
  409faa:	f818 2b01 	ldrb.w	r2, [r8], #1
  409fae:	eb04 0484 	add.w	r4, r4, r4, lsl #2
  409fb2:	eb01 0444 	add.w	r4, r1, r4, lsl #1
  409fb6:	f1a2 0130 	sub.w	r1, r2, #48	; 0x30
  409fba:	2909      	cmp	r1, #9
  409fbc:	d9f5      	bls.n	409faa <_vfiprintf_r+0x68e>
  409fbe:	e521      	b.n	409a04 <_vfiprintf_r+0xe8>
  409fc0:	f043 0320 	orr.w	r3, r3, #32
  409fc4:	f898 2000 	ldrb.w	r2, [r8]
  409fc8:	e51a      	b.n	409a00 <_vfiprintf_r+0xe4>
  409fca:	9608      	str	r6, [sp, #32]
  409fcc:	2800      	cmp	r0, #0
  409fce:	f040 82db 	bne.w	40a588 <_vfiprintf_r+0xc6c>
  409fd2:	2a00      	cmp	r2, #0
  409fd4:	f000 80e7 	beq.w	40a1a6 <_vfiprintf_r+0x88a>
  409fd8:	2101      	movs	r1, #1
  409fda:	f88d 2048 	strb.w	r2, [sp, #72]	; 0x48
  409fde:	f04f 0200 	mov.w	r2, #0
  409fe2:	9101      	str	r1, [sp, #4]
  409fe4:	f88d 2037 	strb.w	r2, [sp, #55]	; 0x37
  409fe8:	9105      	str	r1, [sp, #20]
  409fea:	f10d 0b48 	add.w	fp, sp, #72	; 0x48
  409fee:	e77b      	b.n	409ee8 <_vfiprintf_r+0x5cc>
  409ff0:	9a07      	ldr	r2, [sp, #28]
  409ff2:	6813      	ldr	r3, [r2, #0]
  409ff4:	3204      	adds	r2, #4
  409ff6:	9207      	str	r2, [sp, #28]
  409ff8:	9a03      	ldr	r2, [sp, #12]
  409ffa:	601a      	str	r2, [r3, #0]
  409ffc:	e4cb      	b.n	409996 <_vfiprintf_r+0x7a>
  409ffe:	aa0f      	add	r2, sp, #60	; 0x3c
  40a000:	9904      	ldr	r1, [sp, #16]
  40a002:	4620      	mov	r0, r4
  40a004:	f7ff fc4a 	bl	40989c <__sprint_r.part.0>
  40a008:	2800      	cmp	r0, #0
  40a00a:	f040 8139 	bne.w	40a280 <_vfiprintf_r+0x964>
  40a00e:	9910      	ldr	r1, [sp, #64]	; 0x40
  40a010:	9a11      	ldr	r2, [sp, #68]	; 0x44
  40a012:	f101 0c01 	add.w	ip, r1, #1
  40a016:	46ce      	mov	lr, r9
  40a018:	e5ff      	b.n	409c1a <_vfiprintf_r+0x2fe>
  40a01a:	9910      	ldr	r1, [sp, #64]	; 0x40
  40a01c:	9a11      	ldr	r2, [sp, #68]	; 0x44
  40a01e:	1c48      	adds	r0, r1, #1
  40a020:	f89d 5037 	ldrb.w	r5, [sp, #55]	; 0x37
  40a024:	2d00      	cmp	r5, #0
  40a026:	f43f ae22 	beq.w	409c6e <_vfiprintf_r+0x352>
  40a02a:	3201      	adds	r2, #1
  40a02c:	f10d 0537 	add.w	r5, sp, #55	; 0x37
  40a030:	2101      	movs	r1, #1
  40a032:	2807      	cmp	r0, #7
  40a034:	9211      	str	r2, [sp, #68]	; 0x44
  40a036:	9010      	str	r0, [sp, #64]	; 0x40
  40a038:	f8ca 5000 	str.w	r5, [sl]
  40a03c:	f8ca 1004 	str.w	r1, [sl, #4]
  40a040:	f340 8108 	ble.w	40a254 <_vfiprintf_r+0x938>
  40a044:	2a00      	cmp	r2, #0
  40a046:	f040 81bc 	bne.w	40a3c2 <_vfiprintf_r+0xaa6>
  40a04a:	9b09      	ldr	r3, [sp, #36]	; 0x24
  40a04c:	2b00      	cmp	r3, #0
  40a04e:	f43f ae1f 	beq.w	409c90 <_vfiprintf_r+0x374>
  40a052:	ab0e      	add	r3, sp, #56	; 0x38
  40a054:	2202      	movs	r2, #2
  40a056:	4608      	mov	r0, r1
  40a058:	931c      	str	r3, [sp, #112]	; 0x70
  40a05a:	921d      	str	r2, [sp, #116]	; 0x74
  40a05c:	46ca      	mov	sl, r9
  40a05e:	4601      	mov	r1, r0
  40a060:	f10a 0a08 	add.w	sl, sl, #8
  40a064:	3001      	adds	r0, #1
  40a066:	9b0a      	ldr	r3, [sp, #40]	; 0x28
  40a068:	2b80      	cmp	r3, #128	; 0x80
  40a06a:	f43f ae19 	beq.w	409ca0 <_vfiprintf_r+0x384>
  40a06e:	9b05      	ldr	r3, [sp, #20]
  40a070:	1ae4      	subs	r4, r4, r3
  40a072:	2c00      	cmp	r4, #0
  40a074:	dd2e      	ble.n	40a0d4 <_vfiprintf_r+0x7b8>
  40a076:	2c10      	cmp	r4, #16
  40a078:	4db3      	ldr	r5, [pc, #716]	; (40a348 <_vfiprintf_r+0xa2c>)
  40a07a:	dd1e      	ble.n	40a0ba <_vfiprintf_r+0x79e>
  40a07c:	46d6      	mov	lr, sl
  40a07e:	2610      	movs	r6, #16
  40a080:	9f06      	ldr	r7, [sp, #24]
  40a082:	f8dd a010 	ldr.w	sl, [sp, #16]
  40a086:	e006      	b.n	40a096 <_vfiprintf_r+0x77a>
  40a088:	1c88      	adds	r0, r1, #2
  40a08a:	f10e 0e08 	add.w	lr, lr, #8
  40a08e:	4619      	mov	r1, r3
  40a090:	3c10      	subs	r4, #16
  40a092:	2c10      	cmp	r4, #16
  40a094:	dd10      	ble.n	40a0b8 <_vfiprintf_r+0x79c>
  40a096:	1c4b      	adds	r3, r1, #1
  40a098:	3210      	adds	r2, #16
  40a09a:	2b07      	cmp	r3, #7
  40a09c:	9211      	str	r2, [sp, #68]	; 0x44
  40a09e:	e88e 0060 	stmia.w	lr, {r5, r6}
  40a0a2:	9310      	str	r3, [sp, #64]	; 0x40
  40a0a4:	ddf0      	ble.n	40a088 <_vfiprintf_r+0x76c>
  40a0a6:	2a00      	cmp	r2, #0
  40a0a8:	d165      	bne.n	40a176 <_vfiprintf_r+0x85a>
  40a0aa:	3c10      	subs	r4, #16
  40a0ac:	2c10      	cmp	r4, #16
  40a0ae:	f04f 0001 	mov.w	r0, #1
  40a0b2:	4611      	mov	r1, r2
  40a0b4:	46ce      	mov	lr, r9
  40a0b6:	dcee      	bgt.n	40a096 <_vfiprintf_r+0x77a>
  40a0b8:	46f2      	mov	sl, lr
  40a0ba:	4422      	add	r2, r4
  40a0bc:	2807      	cmp	r0, #7
  40a0be:	9211      	str	r2, [sp, #68]	; 0x44
  40a0c0:	f8ca 5000 	str.w	r5, [sl]
  40a0c4:	f8ca 4004 	str.w	r4, [sl, #4]
  40a0c8:	9010      	str	r0, [sp, #64]	; 0x40
  40a0ca:	f300 8085 	bgt.w	40a1d8 <_vfiprintf_r+0x8bc>
  40a0ce:	f10a 0a08 	add.w	sl, sl, #8
  40a0d2:	3001      	adds	r0, #1
  40a0d4:	9905      	ldr	r1, [sp, #20]
  40a0d6:	f8ca b000 	str.w	fp, [sl]
  40a0da:	440a      	add	r2, r1
  40a0dc:	2807      	cmp	r0, #7
  40a0de:	9211      	str	r2, [sp, #68]	; 0x44
  40a0e0:	f8ca 1004 	str.w	r1, [sl, #4]
  40a0e4:	9010      	str	r0, [sp, #64]	; 0x40
  40a0e6:	f340 8082 	ble.w	40a1ee <_vfiprintf_r+0x8d2>
  40a0ea:	2a00      	cmp	r2, #0
  40a0ec:	f040 8118 	bne.w	40a320 <_vfiprintf_r+0xa04>
  40a0f0:	9b02      	ldr	r3, [sp, #8]
  40a0f2:	9210      	str	r2, [sp, #64]	; 0x40
  40a0f4:	0758      	lsls	r0, r3, #29
  40a0f6:	d535      	bpl.n	40a164 <_vfiprintf_r+0x848>
  40a0f8:	9b08      	ldr	r3, [sp, #32]
  40a0fa:	9901      	ldr	r1, [sp, #4]
  40a0fc:	1a5c      	subs	r4, r3, r1
  40a0fe:	2c00      	cmp	r4, #0
  40a100:	f340 80e7 	ble.w	40a2d2 <_vfiprintf_r+0x9b6>
  40a104:	46ca      	mov	sl, r9
  40a106:	2c10      	cmp	r4, #16
  40a108:	f340 8218 	ble.w	40a53c <_vfiprintf_r+0xc20>
  40a10c:	9910      	ldr	r1, [sp, #64]	; 0x40
  40a10e:	4e8f      	ldr	r6, [pc, #572]	; (40a34c <_vfiprintf_r+0xa30>)
  40a110:	9f06      	ldr	r7, [sp, #24]
  40a112:	f8dd b010 	ldr.w	fp, [sp, #16]
  40a116:	2510      	movs	r5, #16
  40a118:	e006      	b.n	40a128 <_vfiprintf_r+0x80c>
  40a11a:	1c88      	adds	r0, r1, #2
  40a11c:	f10a 0a08 	add.w	sl, sl, #8
  40a120:	4619      	mov	r1, r3
  40a122:	3c10      	subs	r4, #16
  40a124:	2c10      	cmp	r4, #16
  40a126:	dd11      	ble.n	40a14c <_vfiprintf_r+0x830>
  40a128:	1c4b      	adds	r3, r1, #1
  40a12a:	3210      	adds	r2, #16
  40a12c:	2b07      	cmp	r3, #7
  40a12e:	9211      	str	r2, [sp, #68]	; 0x44
  40a130:	f8ca 6000 	str.w	r6, [sl]
  40a134:	f8ca 5004 	str.w	r5, [sl, #4]
  40a138:	9310      	str	r3, [sp, #64]	; 0x40
  40a13a:	ddee      	ble.n	40a11a <_vfiprintf_r+0x7fe>
  40a13c:	bb42      	cbnz	r2, 40a190 <_vfiprintf_r+0x874>
  40a13e:	3c10      	subs	r4, #16
  40a140:	2c10      	cmp	r4, #16
  40a142:	f04f 0001 	mov.w	r0, #1
  40a146:	4611      	mov	r1, r2
  40a148:	46ca      	mov	sl, r9
  40a14a:	dced      	bgt.n	40a128 <_vfiprintf_r+0x80c>
  40a14c:	4422      	add	r2, r4
  40a14e:	2807      	cmp	r0, #7
  40a150:	9211      	str	r2, [sp, #68]	; 0x44
  40a152:	f8ca 6000 	str.w	r6, [sl]
  40a156:	f8ca 4004 	str.w	r4, [sl, #4]
  40a15a:	9010      	str	r0, [sp, #64]	; 0x40
  40a15c:	dd51      	ble.n	40a202 <_vfiprintf_r+0x8e6>
  40a15e:	2a00      	cmp	r2, #0
  40a160:	f040 819b 	bne.w	40a49a <_vfiprintf_r+0xb7e>
  40a164:	9b03      	ldr	r3, [sp, #12]
  40a166:	9a08      	ldr	r2, [sp, #32]
  40a168:	9901      	ldr	r1, [sp, #4]
  40a16a:	428a      	cmp	r2, r1
  40a16c:	bfac      	ite	ge
  40a16e:	189b      	addge	r3, r3, r2
  40a170:	185b      	addlt	r3, r3, r1
  40a172:	9303      	str	r3, [sp, #12]
  40a174:	e04e      	b.n	40a214 <_vfiprintf_r+0x8f8>
  40a176:	aa0f      	add	r2, sp, #60	; 0x3c
  40a178:	4651      	mov	r1, sl
  40a17a:	4638      	mov	r0, r7
  40a17c:	f7ff fb8e 	bl	40989c <__sprint_r.part.0>
  40a180:	2800      	cmp	r0, #0
  40a182:	f040 813f 	bne.w	40a404 <_vfiprintf_r+0xae8>
  40a186:	9910      	ldr	r1, [sp, #64]	; 0x40
  40a188:	9a11      	ldr	r2, [sp, #68]	; 0x44
  40a18a:	1c48      	adds	r0, r1, #1
  40a18c:	46ce      	mov	lr, r9
  40a18e:	e77f      	b.n	40a090 <_vfiprintf_r+0x774>
  40a190:	aa0f      	add	r2, sp, #60	; 0x3c
  40a192:	4659      	mov	r1, fp
  40a194:	4638      	mov	r0, r7
  40a196:	f7ff fb81 	bl	40989c <__sprint_r.part.0>
  40a19a:	b960      	cbnz	r0, 40a1b6 <_vfiprintf_r+0x89a>
  40a19c:	9910      	ldr	r1, [sp, #64]	; 0x40
  40a19e:	9a11      	ldr	r2, [sp, #68]	; 0x44
  40a1a0:	1c48      	adds	r0, r1, #1
  40a1a2:	46ca      	mov	sl, r9
  40a1a4:	e7bd      	b.n	40a122 <_vfiprintf_r+0x806>
  40a1a6:	9b11      	ldr	r3, [sp, #68]	; 0x44
  40a1a8:	f8dd b010 	ldr.w	fp, [sp, #16]
  40a1ac:	2b00      	cmp	r3, #0
  40a1ae:	f040 81d4 	bne.w	40a55a <_vfiprintf_r+0xc3e>
  40a1b2:	2300      	movs	r3, #0
  40a1b4:	9310      	str	r3, [sp, #64]	; 0x40
  40a1b6:	f8db 3064 	ldr.w	r3, [fp, #100]	; 0x64
  40a1ba:	f013 0f01 	tst.w	r3, #1
  40a1be:	f8bb 300c 	ldrh.w	r3, [fp, #12]
  40a1c2:	d102      	bne.n	40a1ca <_vfiprintf_r+0x8ae>
  40a1c4:	059a      	lsls	r2, r3, #22
  40a1c6:	f140 80de 	bpl.w	40a386 <_vfiprintf_r+0xa6a>
  40a1ca:	065b      	lsls	r3, r3, #25
  40a1cc:	f53f acb2 	bmi.w	409b34 <_vfiprintf_r+0x218>
  40a1d0:	9803      	ldr	r0, [sp, #12]
  40a1d2:	b02d      	add	sp, #180	; 0xb4
  40a1d4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  40a1d8:	2a00      	cmp	r2, #0
  40a1da:	f040 8106 	bne.w	40a3ea <_vfiprintf_r+0xace>
  40a1de:	9a05      	ldr	r2, [sp, #20]
  40a1e0:	921d      	str	r2, [sp, #116]	; 0x74
  40a1e2:	2301      	movs	r3, #1
  40a1e4:	9211      	str	r2, [sp, #68]	; 0x44
  40a1e6:	f8cd b070 	str.w	fp, [sp, #112]	; 0x70
  40a1ea:	9310      	str	r3, [sp, #64]	; 0x40
  40a1ec:	46ca      	mov	sl, r9
  40a1ee:	f10a 0a08 	add.w	sl, sl, #8
  40a1f2:	9b02      	ldr	r3, [sp, #8]
  40a1f4:	0759      	lsls	r1, r3, #29
  40a1f6:	d504      	bpl.n	40a202 <_vfiprintf_r+0x8e6>
  40a1f8:	9b08      	ldr	r3, [sp, #32]
  40a1fa:	9901      	ldr	r1, [sp, #4]
  40a1fc:	1a5c      	subs	r4, r3, r1
  40a1fe:	2c00      	cmp	r4, #0
  40a200:	dc81      	bgt.n	40a106 <_vfiprintf_r+0x7ea>
  40a202:	9b03      	ldr	r3, [sp, #12]
  40a204:	9908      	ldr	r1, [sp, #32]
  40a206:	9801      	ldr	r0, [sp, #4]
  40a208:	4281      	cmp	r1, r0
  40a20a:	bfac      	ite	ge
  40a20c:	185b      	addge	r3, r3, r1
  40a20e:	181b      	addlt	r3, r3, r0
  40a210:	9303      	str	r3, [sp, #12]
  40a212:	bb72      	cbnz	r2, 40a272 <_vfiprintf_r+0x956>
  40a214:	2300      	movs	r3, #0
  40a216:	9310      	str	r3, [sp, #64]	; 0x40
  40a218:	46ca      	mov	sl, r9
  40a21a:	f7ff bbbc 	b.w	409996 <_vfiprintf_r+0x7a>
  40a21e:	aa0f      	add	r2, sp, #60	; 0x3c
  40a220:	9904      	ldr	r1, [sp, #16]
  40a222:	4620      	mov	r0, r4
  40a224:	f7ff fb3a 	bl	40989c <__sprint_r.part.0>
  40a228:	bb50      	cbnz	r0, 40a280 <_vfiprintf_r+0x964>
  40a22a:	9910      	ldr	r1, [sp, #64]	; 0x40
  40a22c:	9a11      	ldr	r2, [sp, #68]	; 0x44
  40a22e:	f101 0e01 	add.w	lr, r1, #1
  40a232:	46cc      	mov	ip, r9
  40a234:	e548      	b.n	409cc8 <_vfiprintf_r+0x3ac>
  40a236:	2a00      	cmp	r2, #0
  40a238:	f040 8140 	bne.w	40a4bc <_vfiprintf_r+0xba0>
  40a23c:	f89d 1037 	ldrb.w	r1, [sp, #55]	; 0x37
  40a240:	2900      	cmp	r1, #0
  40a242:	f000 811b 	beq.w	40a47c <_vfiprintf_r+0xb60>
  40a246:	2201      	movs	r2, #1
  40a248:	f10d 0137 	add.w	r1, sp, #55	; 0x37
  40a24c:	4610      	mov	r0, r2
  40a24e:	921d      	str	r2, [sp, #116]	; 0x74
  40a250:	911c      	str	r1, [sp, #112]	; 0x70
  40a252:	46ca      	mov	sl, r9
  40a254:	4601      	mov	r1, r0
  40a256:	f10a 0a08 	add.w	sl, sl, #8
  40a25a:	3001      	adds	r0, #1
  40a25c:	e507      	b.n	409c6e <_vfiprintf_r+0x352>
  40a25e:	9b02      	ldr	r3, [sp, #8]
  40a260:	2a01      	cmp	r2, #1
  40a262:	f000 8098 	beq.w	40a396 <_vfiprintf_r+0xa7a>
  40a266:	2a02      	cmp	r2, #2
  40a268:	d10d      	bne.n	40a286 <_vfiprintf_r+0x96a>
  40a26a:	9302      	str	r3, [sp, #8]
  40a26c:	2600      	movs	r6, #0
  40a26e:	2700      	movs	r7, #0
  40a270:	e5b0      	b.n	409dd4 <_vfiprintf_r+0x4b8>
  40a272:	aa0f      	add	r2, sp, #60	; 0x3c
  40a274:	9904      	ldr	r1, [sp, #16]
  40a276:	9806      	ldr	r0, [sp, #24]
  40a278:	f7ff fb10 	bl	40989c <__sprint_r.part.0>
  40a27c:	2800      	cmp	r0, #0
  40a27e:	d0c9      	beq.n	40a214 <_vfiprintf_r+0x8f8>
  40a280:	f8dd b010 	ldr.w	fp, [sp, #16]
  40a284:	e797      	b.n	40a1b6 <_vfiprintf_r+0x89a>
  40a286:	9302      	str	r3, [sp, #8]
  40a288:	2600      	movs	r6, #0
  40a28a:	2700      	movs	r7, #0
  40a28c:	4649      	mov	r1, r9
  40a28e:	e000      	b.n	40a292 <_vfiprintf_r+0x976>
  40a290:	4659      	mov	r1, fp
  40a292:	08f2      	lsrs	r2, r6, #3
  40a294:	ea42 7247 	orr.w	r2, r2, r7, lsl #29
  40a298:	08f8      	lsrs	r0, r7, #3
  40a29a:	f006 0307 	and.w	r3, r6, #7
  40a29e:	4607      	mov	r7, r0
  40a2a0:	4616      	mov	r6, r2
  40a2a2:	3330      	adds	r3, #48	; 0x30
  40a2a4:	ea56 0207 	orrs.w	r2, r6, r7
  40a2a8:	f801 3c01 	strb.w	r3, [r1, #-1]
  40a2ac:	f101 3bff 	add.w	fp, r1, #4294967295
  40a2b0:	d1ee      	bne.n	40a290 <_vfiprintf_r+0x974>
  40a2b2:	9a02      	ldr	r2, [sp, #8]
  40a2b4:	07d6      	lsls	r6, r2, #31
  40a2b6:	f57f ad9d 	bpl.w	409df4 <_vfiprintf_r+0x4d8>
  40a2ba:	2b30      	cmp	r3, #48	; 0x30
  40a2bc:	f43f ad9a 	beq.w	409df4 <_vfiprintf_r+0x4d8>
  40a2c0:	3902      	subs	r1, #2
  40a2c2:	2330      	movs	r3, #48	; 0x30
  40a2c4:	f80b 3c01 	strb.w	r3, [fp, #-1]
  40a2c8:	eba9 0301 	sub.w	r3, r9, r1
  40a2cc:	9305      	str	r3, [sp, #20]
  40a2ce:	468b      	mov	fp, r1
  40a2d0:	e476      	b.n	409bc0 <_vfiprintf_r+0x2a4>
  40a2d2:	9b03      	ldr	r3, [sp, #12]
  40a2d4:	9a08      	ldr	r2, [sp, #32]
  40a2d6:	428a      	cmp	r2, r1
  40a2d8:	bfac      	ite	ge
  40a2da:	189b      	addge	r3, r3, r2
  40a2dc:	185b      	addlt	r3, r3, r1
  40a2de:	9303      	str	r3, [sp, #12]
  40a2e0:	e798      	b.n	40a214 <_vfiprintf_r+0x8f8>
  40a2e2:	2202      	movs	r2, #2
  40a2e4:	e44d      	b.n	409b82 <_vfiprintf_r+0x266>
  40a2e6:	2f00      	cmp	r7, #0
  40a2e8:	bf08      	it	eq
  40a2ea:	2e0a      	cmpeq	r6, #10
  40a2ec:	d352      	bcc.n	40a394 <_vfiprintf_r+0xa78>
  40a2ee:	46cb      	mov	fp, r9
  40a2f0:	4630      	mov	r0, r6
  40a2f2:	4639      	mov	r1, r7
  40a2f4:	220a      	movs	r2, #10
  40a2f6:	2300      	movs	r3, #0
  40a2f8:	f001 fe9c 	bl	40c034 <__aeabi_uldivmod>
  40a2fc:	3230      	adds	r2, #48	; 0x30
  40a2fe:	f80b 2d01 	strb.w	r2, [fp, #-1]!
  40a302:	4630      	mov	r0, r6
  40a304:	4639      	mov	r1, r7
  40a306:	2300      	movs	r3, #0
  40a308:	220a      	movs	r2, #10
  40a30a:	f001 fe93 	bl	40c034 <__aeabi_uldivmod>
  40a30e:	4606      	mov	r6, r0
  40a310:	460f      	mov	r7, r1
  40a312:	ea56 0307 	orrs.w	r3, r6, r7
  40a316:	d1eb      	bne.n	40a2f0 <_vfiprintf_r+0x9d4>
  40a318:	e56c      	b.n	409df4 <_vfiprintf_r+0x4d8>
  40a31a:	9405      	str	r4, [sp, #20]
  40a31c:	46cb      	mov	fp, r9
  40a31e:	e44f      	b.n	409bc0 <_vfiprintf_r+0x2a4>
  40a320:	aa0f      	add	r2, sp, #60	; 0x3c
  40a322:	9904      	ldr	r1, [sp, #16]
  40a324:	9806      	ldr	r0, [sp, #24]
  40a326:	f7ff fab9 	bl	40989c <__sprint_r.part.0>
  40a32a:	2800      	cmp	r0, #0
  40a32c:	d1a8      	bne.n	40a280 <_vfiprintf_r+0x964>
  40a32e:	9a11      	ldr	r2, [sp, #68]	; 0x44
  40a330:	46ca      	mov	sl, r9
  40a332:	e75e      	b.n	40a1f2 <_vfiprintf_r+0x8d6>
  40a334:	aa0f      	add	r2, sp, #60	; 0x3c
  40a336:	9904      	ldr	r1, [sp, #16]
  40a338:	9806      	ldr	r0, [sp, #24]
  40a33a:	f7ff faaf 	bl	40989c <__sprint_r.part.0>
  40a33e:	2800      	cmp	r0, #0
  40a340:	d19e      	bne.n	40a280 <_vfiprintf_r+0x964>
  40a342:	46ca      	mov	sl, r9
  40a344:	f7ff bbc0 	b.w	409ac8 <_vfiprintf_r+0x1ac>
  40a348:	0040da0c 	.word	0x0040da0c
  40a34c:	0040d9fc 	.word	0x0040d9fc
  40a350:	3104      	adds	r1, #4
  40a352:	6816      	ldr	r6, [r2, #0]
  40a354:	9107      	str	r1, [sp, #28]
  40a356:	2201      	movs	r2, #1
  40a358:	2700      	movs	r7, #0
  40a35a:	e412      	b.n	409b82 <_vfiprintf_r+0x266>
  40a35c:	9807      	ldr	r0, [sp, #28]
  40a35e:	4601      	mov	r1, r0
  40a360:	3104      	adds	r1, #4
  40a362:	6806      	ldr	r6, [r0, #0]
  40a364:	9107      	str	r1, [sp, #28]
  40a366:	2700      	movs	r7, #0
  40a368:	e40b      	b.n	409b82 <_vfiprintf_r+0x266>
  40a36a:	680e      	ldr	r6, [r1, #0]
  40a36c:	3104      	adds	r1, #4
  40a36e:	9107      	str	r1, [sp, #28]
  40a370:	2700      	movs	r7, #0
  40a372:	e591      	b.n	409e98 <_vfiprintf_r+0x57c>
  40a374:	9907      	ldr	r1, [sp, #28]
  40a376:	680e      	ldr	r6, [r1, #0]
  40a378:	460a      	mov	r2, r1
  40a37a:	17f7      	asrs	r7, r6, #31
  40a37c:	3204      	adds	r2, #4
  40a37e:	9207      	str	r2, [sp, #28]
  40a380:	4630      	mov	r0, r6
  40a382:	4639      	mov	r1, r7
  40a384:	e50f      	b.n	409da6 <_vfiprintf_r+0x48a>
  40a386:	f8db 0058 	ldr.w	r0, [fp, #88]	; 0x58
  40a38a:	f000 fe7f 	bl	40b08c <__retarget_lock_release_recursive>
  40a38e:	f8bb 300c 	ldrh.w	r3, [fp, #12]
  40a392:	e71a      	b.n	40a1ca <_vfiprintf_r+0x8ae>
  40a394:	9b02      	ldr	r3, [sp, #8]
  40a396:	9302      	str	r3, [sp, #8]
  40a398:	f10d 0bb0 	add.w	fp, sp, #176	; 0xb0
  40a39c:	3630      	adds	r6, #48	; 0x30
  40a39e:	2301      	movs	r3, #1
  40a3a0:	f80b 6d41 	strb.w	r6, [fp, #-65]!
  40a3a4:	9305      	str	r3, [sp, #20]
  40a3a6:	e40b      	b.n	409bc0 <_vfiprintf_r+0x2a4>
  40a3a8:	aa0f      	add	r2, sp, #60	; 0x3c
  40a3aa:	9904      	ldr	r1, [sp, #16]
  40a3ac:	9806      	ldr	r0, [sp, #24]
  40a3ae:	f7ff fa75 	bl	40989c <__sprint_r.part.0>
  40a3b2:	2800      	cmp	r0, #0
  40a3b4:	f47f af64 	bne.w	40a280 <_vfiprintf_r+0x964>
  40a3b8:	9910      	ldr	r1, [sp, #64]	; 0x40
  40a3ba:	9a11      	ldr	r2, [sp, #68]	; 0x44
  40a3bc:	1c48      	adds	r0, r1, #1
  40a3be:	46ca      	mov	sl, r9
  40a3c0:	e651      	b.n	40a066 <_vfiprintf_r+0x74a>
  40a3c2:	aa0f      	add	r2, sp, #60	; 0x3c
  40a3c4:	9904      	ldr	r1, [sp, #16]
  40a3c6:	9806      	ldr	r0, [sp, #24]
  40a3c8:	f7ff fa68 	bl	40989c <__sprint_r.part.0>
  40a3cc:	2800      	cmp	r0, #0
  40a3ce:	f47f af57 	bne.w	40a280 <_vfiprintf_r+0x964>
  40a3d2:	9910      	ldr	r1, [sp, #64]	; 0x40
  40a3d4:	9a11      	ldr	r2, [sp, #68]	; 0x44
  40a3d6:	1c48      	adds	r0, r1, #1
  40a3d8:	46ca      	mov	sl, r9
  40a3da:	e448      	b.n	409c6e <_vfiprintf_r+0x352>
  40a3dc:	2a00      	cmp	r2, #0
  40a3de:	f040 8091 	bne.w	40a504 <_vfiprintf_r+0xbe8>
  40a3e2:	2001      	movs	r0, #1
  40a3e4:	4611      	mov	r1, r2
  40a3e6:	46ca      	mov	sl, r9
  40a3e8:	e641      	b.n	40a06e <_vfiprintf_r+0x752>
  40a3ea:	aa0f      	add	r2, sp, #60	; 0x3c
  40a3ec:	9904      	ldr	r1, [sp, #16]
  40a3ee:	9806      	ldr	r0, [sp, #24]
  40a3f0:	f7ff fa54 	bl	40989c <__sprint_r.part.0>
  40a3f4:	2800      	cmp	r0, #0
  40a3f6:	f47f af43 	bne.w	40a280 <_vfiprintf_r+0x964>
  40a3fa:	9810      	ldr	r0, [sp, #64]	; 0x40
  40a3fc:	9a11      	ldr	r2, [sp, #68]	; 0x44
  40a3fe:	3001      	adds	r0, #1
  40a400:	46ca      	mov	sl, r9
  40a402:	e667      	b.n	40a0d4 <_vfiprintf_r+0x7b8>
  40a404:	46d3      	mov	fp, sl
  40a406:	e6d6      	b.n	40a1b6 <_vfiprintf_r+0x89a>
  40a408:	9e07      	ldr	r6, [sp, #28]
  40a40a:	3607      	adds	r6, #7
  40a40c:	f026 0207 	bic.w	r2, r6, #7
  40a410:	f102 0108 	add.w	r1, r2, #8
  40a414:	e9d2 6700 	ldrd	r6, r7, [r2]
  40a418:	9107      	str	r1, [sp, #28]
  40a41a:	2201      	movs	r2, #1
  40a41c:	f7ff bbb1 	b.w	409b82 <_vfiprintf_r+0x266>
  40a420:	9e07      	ldr	r6, [sp, #28]
  40a422:	3607      	adds	r6, #7
  40a424:	f026 0607 	bic.w	r6, r6, #7
  40a428:	e9d6 0100 	ldrd	r0, r1, [r6]
  40a42c:	f106 0208 	add.w	r2, r6, #8
  40a430:	9207      	str	r2, [sp, #28]
  40a432:	4606      	mov	r6, r0
  40a434:	460f      	mov	r7, r1
  40a436:	e4b6      	b.n	409da6 <_vfiprintf_r+0x48a>
  40a438:	9e07      	ldr	r6, [sp, #28]
  40a43a:	3607      	adds	r6, #7
  40a43c:	f026 0207 	bic.w	r2, r6, #7
  40a440:	f102 0108 	add.w	r1, r2, #8
  40a444:	e9d2 6700 	ldrd	r6, r7, [r2]
  40a448:	9107      	str	r1, [sp, #28]
  40a44a:	2200      	movs	r2, #0
  40a44c:	f7ff bb99 	b.w	409b82 <_vfiprintf_r+0x266>
  40a450:	9e07      	ldr	r6, [sp, #28]
  40a452:	3607      	adds	r6, #7
  40a454:	f026 0107 	bic.w	r1, r6, #7
  40a458:	f101 0008 	add.w	r0, r1, #8
  40a45c:	9007      	str	r0, [sp, #28]
  40a45e:	e9d1 6700 	ldrd	r6, r7, [r1]
  40a462:	e519      	b.n	409e98 <_vfiprintf_r+0x57c>
  40a464:	46cb      	mov	fp, r9
  40a466:	f7ff bbab 	b.w	409bc0 <_vfiprintf_r+0x2a4>
  40a46a:	252d      	movs	r5, #45	; 0x2d
  40a46c:	4276      	negs	r6, r6
  40a46e:	eb67 0747 	sbc.w	r7, r7, r7, lsl #1
  40a472:	f88d 5037 	strb.w	r5, [sp, #55]	; 0x37
  40a476:	2201      	movs	r2, #1
  40a478:	f7ff bb88 	b.w	409b8c <_vfiprintf_r+0x270>
  40a47c:	9b09      	ldr	r3, [sp, #36]	; 0x24
  40a47e:	b9b3      	cbnz	r3, 40a4ae <_vfiprintf_r+0xb92>
  40a480:	4611      	mov	r1, r2
  40a482:	2001      	movs	r0, #1
  40a484:	46ca      	mov	sl, r9
  40a486:	e5f2      	b.n	40a06e <_vfiprintf_r+0x752>
  40a488:	f8db 0058 	ldr.w	r0, [fp, #88]	; 0x58
  40a48c:	f000 fdfe 	bl	40b08c <__retarget_lock_release_recursive>
  40a490:	f04f 33ff 	mov.w	r3, #4294967295
  40a494:	9303      	str	r3, [sp, #12]
  40a496:	f7ff bb50 	b.w	409b3a <_vfiprintf_r+0x21e>
  40a49a:	aa0f      	add	r2, sp, #60	; 0x3c
  40a49c:	9904      	ldr	r1, [sp, #16]
  40a49e:	9806      	ldr	r0, [sp, #24]
  40a4a0:	f7ff f9fc 	bl	40989c <__sprint_r.part.0>
  40a4a4:	2800      	cmp	r0, #0
  40a4a6:	f47f aeeb 	bne.w	40a280 <_vfiprintf_r+0x964>
  40a4aa:	9a11      	ldr	r2, [sp, #68]	; 0x44
  40a4ac:	e6a9      	b.n	40a202 <_vfiprintf_r+0x8e6>
  40a4ae:	ab0e      	add	r3, sp, #56	; 0x38
  40a4b0:	2202      	movs	r2, #2
  40a4b2:	931c      	str	r3, [sp, #112]	; 0x70
  40a4b4:	921d      	str	r2, [sp, #116]	; 0x74
  40a4b6:	2001      	movs	r0, #1
  40a4b8:	46ca      	mov	sl, r9
  40a4ba:	e5d0      	b.n	40a05e <_vfiprintf_r+0x742>
  40a4bc:	aa0f      	add	r2, sp, #60	; 0x3c
  40a4be:	9904      	ldr	r1, [sp, #16]
  40a4c0:	9806      	ldr	r0, [sp, #24]
  40a4c2:	f7ff f9eb 	bl	40989c <__sprint_r.part.0>
  40a4c6:	2800      	cmp	r0, #0
  40a4c8:	f47f aeda 	bne.w	40a280 <_vfiprintf_r+0x964>
  40a4cc:	9910      	ldr	r1, [sp, #64]	; 0x40
  40a4ce:	9a11      	ldr	r2, [sp, #68]	; 0x44
  40a4d0:	1c48      	adds	r0, r1, #1
  40a4d2:	46ca      	mov	sl, r9
  40a4d4:	e5a4      	b.n	40a020 <_vfiprintf_r+0x704>
  40a4d6:	9a07      	ldr	r2, [sp, #28]
  40a4d8:	9903      	ldr	r1, [sp, #12]
  40a4da:	6813      	ldr	r3, [r2, #0]
  40a4dc:	17cd      	asrs	r5, r1, #31
  40a4de:	4608      	mov	r0, r1
  40a4e0:	3204      	adds	r2, #4
  40a4e2:	4629      	mov	r1, r5
  40a4e4:	9207      	str	r2, [sp, #28]
  40a4e6:	e9c3 0100 	strd	r0, r1, [r3]
  40a4ea:	f7ff ba54 	b.w	409996 <_vfiprintf_r+0x7a>
  40a4ee:	4658      	mov	r0, fp
  40a4f0:	9607      	str	r6, [sp, #28]
  40a4f2:	9302      	str	r3, [sp, #8]
  40a4f4:	f7ff f964 	bl	4097c0 <strlen>
  40a4f8:	2400      	movs	r4, #0
  40a4fa:	9005      	str	r0, [sp, #20]
  40a4fc:	f89d 5037 	ldrb.w	r5, [sp, #55]	; 0x37
  40a500:	f7ff bb5e 	b.w	409bc0 <_vfiprintf_r+0x2a4>
  40a504:	aa0f      	add	r2, sp, #60	; 0x3c
  40a506:	9904      	ldr	r1, [sp, #16]
  40a508:	9806      	ldr	r0, [sp, #24]
  40a50a:	f7ff f9c7 	bl	40989c <__sprint_r.part.0>
  40a50e:	2800      	cmp	r0, #0
  40a510:	f47f aeb6 	bne.w	40a280 <_vfiprintf_r+0x964>
  40a514:	9910      	ldr	r1, [sp, #64]	; 0x40
  40a516:	9a11      	ldr	r2, [sp, #68]	; 0x44
  40a518:	1c48      	adds	r0, r1, #1
  40a51a:	46ca      	mov	sl, r9
  40a51c:	e5a7      	b.n	40a06e <_vfiprintf_r+0x752>
  40a51e:	9910      	ldr	r1, [sp, #64]	; 0x40
  40a520:	9a11      	ldr	r2, [sp, #68]	; 0x44
  40a522:	4e20      	ldr	r6, [pc, #128]	; (40a5a4 <_vfiprintf_r+0xc88>)
  40a524:	3101      	adds	r1, #1
  40a526:	f7ff bb90 	b.w	409c4a <_vfiprintf_r+0x32e>
  40a52a:	2c06      	cmp	r4, #6
  40a52c:	bf28      	it	cs
  40a52e:	2406      	movcs	r4, #6
  40a530:	9405      	str	r4, [sp, #20]
  40a532:	9607      	str	r6, [sp, #28]
  40a534:	9401      	str	r4, [sp, #4]
  40a536:	f8df b070 	ldr.w	fp, [pc, #112]	; 40a5a8 <_vfiprintf_r+0xc8c>
  40a53a:	e4d5      	b.n	409ee8 <_vfiprintf_r+0x5cc>
  40a53c:	9810      	ldr	r0, [sp, #64]	; 0x40
  40a53e:	4e19      	ldr	r6, [pc, #100]	; (40a5a4 <_vfiprintf_r+0xc88>)
  40a540:	3001      	adds	r0, #1
  40a542:	e603      	b.n	40a14c <_vfiprintf_r+0x830>
  40a544:	9405      	str	r4, [sp, #20]
  40a546:	f89d 5037 	ldrb.w	r5, [sp, #55]	; 0x37
  40a54a:	9607      	str	r6, [sp, #28]
  40a54c:	9302      	str	r3, [sp, #8]
  40a54e:	4604      	mov	r4, r0
  40a550:	f7ff bb36 	b.w	409bc0 <_vfiprintf_r+0x2a4>
  40a554:	4686      	mov	lr, r0
  40a556:	f7ff bbce 	b.w	409cf6 <_vfiprintf_r+0x3da>
  40a55a:	9806      	ldr	r0, [sp, #24]
  40a55c:	aa0f      	add	r2, sp, #60	; 0x3c
  40a55e:	4659      	mov	r1, fp
  40a560:	f7ff f99c 	bl	40989c <__sprint_r.part.0>
  40a564:	2800      	cmp	r0, #0
  40a566:	f43f ae24 	beq.w	40a1b2 <_vfiprintf_r+0x896>
  40a56a:	e624      	b.n	40a1b6 <_vfiprintf_r+0x89a>
  40a56c:	9907      	ldr	r1, [sp, #28]
  40a56e:	f898 2001 	ldrb.w	r2, [r8, #1]
  40a572:	680c      	ldr	r4, [r1, #0]
  40a574:	3104      	adds	r1, #4
  40a576:	ea44 74e4 	orr.w	r4, r4, r4, asr #31
  40a57a:	46b8      	mov	r8, r7
  40a57c:	9107      	str	r1, [sp, #28]
  40a57e:	f7ff ba3f 	b.w	409a00 <_vfiprintf_r+0xe4>
  40a582:	f88d 5037 	strb.w	r5, [sp, #55]	; 0x37
  40a586:	e43c      	b.n	409e02 <_vfiprintf_r+0x4e6>
  40a588:	f88d 5037 	strb.w	r5, [sp, #55]	; 0x37
  40a58c:	e521      	b.n	409fd2 <_vfiprintf_r+0x6b6>
  40a58e:	f88d 5037 	strb.w	r5, [sp, #55]	; 0x37
  40a592:	f7ff bbf4 	b.w	409d7e <_vfiprintf_r+0x462>
  40a596:	f88d 5037 	strb.w	r5, [sp, #55]	; 0x37
  40a59a:	e491      	b.n	409ec0 <_vfiprintf_r+0x5a4>
  40a59c:	f88d 5037 	strb.w	r5, [sp, #55]	; 0x37
  40a5a0:	e469      	b.n	409e76 <_vfiprintf_r+0x55a>
  40a5a2:	bf00      	nop
  40a5a4:	0040d9fc 	.word	0x0040d9fc
  40a5a8:	0040d9f4 	.word	0x0040d9f4

0040a5ac <__sbprintf>:
  40a5ac:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  40a5b0:	460c      	mov	r4, r1
  40a5b2:	f5ad 6d8d 	sub.w	sp, sp, #1128	; 0x468
  40a5b6:	8989      	ldrh	r1, [r1, #12]
  40a5b8:	6e66      	ldr	r6, [r4, #100]	; 0x64
  40a5ba:	89e5      	ldrh	r5, [r4, #14]
  40a5bc:	9619      	str	r6, [sp, #100]	; 0x64
  40a5be:	f021 0102 	bic.w	r1, r1, #2
  40a5c2:	4606      	mov	r6, r0
  40a5c4:	69e0      	ldr	r0, [r4, #28]
  40a5c6:	f8ad 100c 	strh.w	r1, [sp, #12]
  40a5ca:	4617      	mov	r7, r2
  40a5cc:	f44f 6180 	mov.w	r1, #1024	; 0x400
  40a5d0:	6a62      	ldr	r2, [r4, #36]	; 0x24
  40a5d2:	f8ad 500e 	strh.w	r5, [sp, #14]
  40a5d6:	4698      	mov	r8, r3
  40a5d8:	ad1a      	add	r5, sp, #104	; 0x68
  40a5da:	2300      	movs	r3, #0
  40a5dc:	9007      	str	r0, [sp, #28]
  40a5de:	a816      	add	r0, sp, #88	; 0x58
  40a5e0:	9209      	str	r2, [sp, #36]	; 0x24
  40a5e2:	9306      	str	r3, [sp, #24]
  40a5e4:	9500      	str	r5, [sp, #0]
  40a5e6:	9504      	str	r5, [sp, #16]
  40a5e8:	9102      	str	r1, [sp, #8]
  40a5ea:	9105      	str	r1, [sp, #20]
  40a5ec:	f000 fd48 	bl	40b080 <__retarget_lock_init_recursive>
  40a5f0:	4643      	mov	r3, r8
  40a5f2:	463a      	mov	r2, r7
  40a5f4:	4669      	mov	r1, sp
  40a5f6:	4630      	mov	r0, r6
  40a5f8:	f7ff f990 	bl	40991c <_vfiprintf_r>
  40a5fc:	1e05      	subs	r5, r0, #0
  40a5fe:	db07      	blt.n	40a610 <__sbprintf+0x64>
  40a600:	4630      	mov	r0, r6
  40a602:	4669      	mov	r1, sp
  40a604:	f000 f928 	bl	40a858 <_fflush_r>
  40a608:	2800      	cmp	r0, #0
  40a60a:	bf18      	it	ne
  40a60c:	f04f 35ff 	movne.w	r5, #4294967295
  40a610:	f8bd 300c 	ldrh.w	r3, [sp, #12]
  40a614:	065b      	lsls	r3, r3, #25
  40a616:	d503      	bpl.n	40a620 <__sbprintf+0x74>
  40a618:	89a3      	ldrh	r3, [r4, #12]
  40a61a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
  40a61e:	81a3      	strh	r3, [r4, #12]
  40a620:	9816      	ldr	r0, [sp, #88]	; 0x58
  40a622:	f000 fd2f 	bl	40b084 <__retarget_lock_close_recursive>
  40a626:	4628      	mov	r0, r5
  40a628:	f50d 6d8d 	add.w	sp, sp, #1128	; 0x468
  40a62c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

0040a630 <__swsetup_r>:
  40a630:	b538      	push	{r3, r4, r5, lr}
  40a632:	4b30      	ldr	r3, [pc, #192]	; (40a6f4 <__swsetup_r+0xc4>)
  40a634:	681b      	ldr	r3, [r3, #0]
  40a636:	4605      	mov	r5, r0
  40a638:	460c      	mov	r4, r1
  40a63a:	b113      	cbz	r3, 40a642 <__swsetup_r+0x12>
  40a63c:	6b9a      	ldr	r2, [r3, #56]	; 0x38
  40a63e:	2a00      	cmp	r2, #0
  40a640:	d038      	beq.n	40a6b4 <__swsetup_r+0x84>
  40a642:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
  40a646:	b293      	uxth	r3, r2
  40a648:	0718      	lsls	r0, r3, #28
  40a64a:	d50c      	bpl.n	40a666 <__swsetup_r+0x36>
  40a64c:	6920      	ldr	r0, [r4, #16]
  40a64e:	b1a8      	cbz	r0, 40a67c <__swsetup_r+0x4c>
  40a650:	f013 0201 	ands.w	r2, r3, #1
  40a654:	d01e      	beq.n	40a694 <__swsetup_r+0x64>
  40a656:	6963      	ldr	r3, [r4, #20]
  40a658:	2200      	movs	r2, #0
  40a65a:	425b      	negs	r3, r3
  40a65c:	61a3      	str	r3, [r4, #24]
  40a65e:	60a2      	str	r2, [r4, #8]
  40a660:	b1f0      	cbz	r0, 40a6a0 <__swsetup_r+0x70>
  40a662:	2000      	movs	r0, #0
  40a664:	bd38      	pop	{r3, r4, r5, pc}
  40a666:	06d9      	lsls	r1, r3, #27
  40a668:	d53c      	bpl.n	40a6e4 <__swsetup_r+0xb4>
  40a66a:	0758      	lsls	r0, r3, #29
  40a66c:	d426      	bmi.n	40a6bc <__swsetup_r+0x8c>
  40a66e:	6920      	ldr	r0, [r4, #16]
  40a670:	f042 0308 	orr.w	r3, r2, #8
  40a674:	81a3      	strh	r3, [r4, #12]
  40a676:	b29b      	uxth	r3, r3
  40a678:	2800      	cmp	r0, #0
  40a67a:	d1e9      	bne.n	40a650 <__swsetup_r+0x20>
  40a67c:	f403 7220 	and.w	r2, r3, #640	; 0x280
  40a680:	f5b2 7f00 	cmp.w	r2, #512	; 0x200
  40a684:	d0e4      	beq.n	40a650 <__swsetup_r+0x20>
  40a686:	4628      	mov	r0, r5
  40a688:	4621      	mov	r1, r4
  40a68a:	f000 fd2f 	bl	40b0ec <__smakebuf_r>
  40a68e:	89a3      	ldrh	r3, [r4, #12]
  40a690:	6920      	ldr	r0, [r4, #16]
  40a692:	e7dd      	b.n	40a650 <__swsetup_r+0x20>
  40a694:	0799      	lsls	r1, r3, #30
  40a696:	bf58      	it	pl
  40a698:	6962      	ldrpl	r2, [r4, #20]
  40a69a:	60a2      	str	r2, [r4, #8]
  40a69c:	2800      	cmp	r0, #0
  40a69e:	d1e0      	bne.n	40a662 <__swsetup_r+0x32>
  40a6a0:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
  40a6a4:	061a      	lsls	r2, r3, #24
  40a6a6:	d5dd      	bpl.n	40a664 <__swsetup_r+0x34>
  40a6a8:	f043 0340 	orr.w	r3, r3, #64	; 0x40
  40a6ac:	81a3      	strh	r3, [r4, #12]
  40a6ae:	f04f 30ff 	mov.w	r0, #4294967295
  40a6b2:	bd38      	pop	{r3, r4, r5, pc}
  40a6b4:	4618      	mov	r0, r3
  40a6b6:	f000 f927 	bl	40a908 <__sinit>
  40a6ba:	e7c2      	b.n	40a642 <__swsetup_r+0x12>
  40a6bc:	6b21      	ldr	r1, [r4, #48]	; 0x30
  40a6be:	b151      	cbz	r1, 40a6d6 <__swsetup_r+0xa6>
  40a6c0:	f104 0340 	add.w	r3, r4, #64	; 0x40
  40a6c4:	4299      	cmp	r1, r3
  40a6c6:	d004      	beq.n	40a6d2 <__swsetup_r+0xa2>
  40a6c8:	4628      	mov	r0, r5
  40a6ca:	f000 fa43 	bl	40ab54 <_free_r>
  40a6ce:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
  40a6d2:	2300      	movs	r3, #0
  40a6d4:	6323      	str	r3, [r4, #48]	; 0x30
  40a6d6:	2300      	movs	r3, #0
  40a6d8:	6920      	ldr	r0, [r4, #16]
  40a6da:	6063      	str	r3, [r4, #4]
  40a6dc:	f022 0224 	bic.w	r2, r2, #36	; 0x24
  40a6e0:	6020      	str	r0, [r4, #0]
  40a6e2:	e7c5      	b.n	40a670 <__swsetup_r+0x40>
  40a6e4:	f042 0240 	orr.w	r2, r2, #64	; 0x40
  40a6e8:	2309      	movs	r3, #9
  40a6ea:	602b      	str	r3, [r5, #0]
  40a6ec:	f04f 30ff 	mov.w	r0, #4294967295
  40a6f0:	81a2      	strh	r2, [r4, #12]
  40a6f2:	bd38      	pop	{r3, r4, r5, pc}
  40a6f4:	20400048 	.word	0x20400048

0040a6f8 <register_fini>:
  40a6f8:	4b02      	ldr	r3, [pc, #8]	; (40a704 <register_fini+0xc>)
  40a6fa:	b113      	cbz	r3, 40a702 <register_fini+0xa>
  40a6fc:	4802      	ldr	r0, [pc, #8]	; (40a708 <register_fini+0x10>)
  40a6fe:	f000 b805 	b.w	40a70c <atexit>
  40a702:	4770      	bx	lr
  40a704:	00000000 	.word	0x00000000
  40a708:	0040a979 	.word	0x0040a979

0040a70c <atexit>:
  40a70c:	2300      	movs	r3, #0
  40a70e:	4601      	mov	r1, r0
  40a710:	461a      	mov	r2, r3
  40a712:	4618      	mov	r0, r3
  40a714:	f001 bb66 	b.w	40bde4 <__register_exitproc>

0040a718 <__sflush_r>:
  40a718:	f9b1 300c 	ldrsh.w	r3, [r1, #12]
  40a71c:	b29a      	uxth	r2, r3
  40a71e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  40a722:	460d      	mov	r5, r1
  40a724:	0711      	lsls	r1, r2, #28
  40a726:	4680      	mov	r8, r0
  40a728:	d43a      	bmi.n	40a7a0 <__sflush_r+0x88>
  40a72a:	686a      	ldr	r2, [r5, #4]
  40a72c:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
  40a730:	2a00      	cmp	r2, #0
  40a732:	81ab      	strh	r3, [r5, #12]
  40a734:	dd6f      	ble.n	40a816 <__sflush_r+0xfe>
  40a736:	6aac      	ldr	r4, [r5, #40]	; 0x28
  40a738:	2c00      	cmp	r4, #0
  40a73a:	d049      	beq.n	40a7d0 <__sflush_r+0xb8>
  40a73c:	2200      	movs	r2, #0
  40a73e:	b29b      	uxth	r3, r3
  40a740:	f8d8 6000 	ldr.w	r6, [r8]
  40a744:	f8c8 2000 	str.w	r2, [r8]
  40a748:	f413 5280 	ands.w	r2, r3, #4096	; 0x1000
  40a74c:	d067      	beq.n	40a81e <__sflush_r+0x106>
  40a74e:	6d2a      	ldr	r2, [r5, #80]	; 0x50
  40a750:	075f      	lsls	r7, r3, #29
  40a752:	d505      	bpl.n	40a760 <__sflush_r+0x48>
  40a754:	6869      	ldr	r1, [r5, #4]
  40a756:	6b2b      	ldr	r3, [r5, #48]	; 0x30
  40a758:	1a52      	subs	r2, r2, r1
  40a75a:	b10b      	cbz	r3, 40a760 <__sflush_r+0x48>
  40a75c:	6beb      	ldr	r3, [r5, #60]	; 0x3c
  40a75e:	1ad2      	subs	r2, r2, r3
  40a760:	2300      	movs	r3, #0
  40a762:	69e9      	ldr	r1, [r5, #28]
  40a764:	4640      	mov	r0, r8
  40a766:	47a0      	blx	r4
  40a768:	1c44      	adds	r4, r0, #1
  40a76a:	d03c      	beq.n	40a7e6 <__sflush_r+0xce>
  40a76c:	f9b5 300c 	ldrsh.w	r3, [r5, #12]
  40a770:	692a      	ldr	r2, [r5, #16]
  40a772:	602a      	str	r2, [r5, #0]
  40a774:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
  40a778:	2200      	movs	r2, #0
  40a77a:	81ab      	strh	r3, [r5, #12]
  40a77c:	04db      	lsls	r3, r3, #19
  40a77e:	606a      	str	r2, [r5, #4]
  40a780:	d447      	bmi.n	40a812 <__sflush_r+0xfa>
  40a782:	6b29      	ldr	r1, [r5, #48]	; 0x30
  40a784:	f8c8 6000 	str.w	r6, [r8]
  40a788:	b311      	cbz	r1, 40a7d0 <__sflush_r+0xb8>
  40a78a:	f105 0340 	add.w	r3, r5, #64	; 0x40
  40a78e:	4299      	cmp	r1, r3
  40a790:	d002      	beq.n	40a798 <__sflush_r+0x80>
  40a792:	4640      	mov	r0, r8
  40a794:	f000 f9de 	bl	40ab54 <_free_r>
  40a798:	2000      	movs	r0, #0
  40a79a:	6328      	str	r0, [r5, #48]	; 0x30
  40a79c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  40a7a0:	692e      	ldr	r6, [r5, #16]
  40a7a2:	b1ae      	cbz	r6, 40a7d0 <__sflush_r+0xb8>
  40a7a4:	682c      	ldr	r4, [r5, #0]
  40a7a6:	602e      	str	r6, [r5, #0]
  40a7a8:	0791      	lsls	r1, r2, #30
  40a7aa:	bf0c      	ite	eq
  40a7ac:	696b      	ldreq	r3, [r5, #20]
  40a7ae:	2300      	movne	r3, #0
  40a7b0:	1ba4      	subs	r4, r4, r6
  40a7b2:	60ab      	str	r3, [r5, #8]
  40a7b4:	e00a      	b.n	40a7cc <__sflush_r+0xb4>
  40a7b6:	4623      	mov	r3, r4
  40a7b8:	4632      	mov	r2, r6
  40a7ba:	6a6f      	ldr	r7, [r5, #36]	; 0x24
  40a7bc:	69e9      	ldr	r1, [r5, #28]
  40a7be:	4640      	mov	r0, r8
  40a7c0:	47b8      	blx	r7
  40a7c2:	2800      	cmp	r0, #0
  40a7c4:	eba4 0400 	sub.w	r4, r4, r0
  40a7c8:	4406      	add	r6, r0
  40a7ca:	dd04      	ble.n	40a7d6 <__sflush_r+0xbe>
  40a7cc:	2c00      	cmp	r4, #0
  40a7ce:	dcf2      	bgt.n	40a7b6 <__sflush_r+0x9e>
  40a7d0:	2000      	movs	r0, #0
  40a7d2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  40a7d6:	89ab      	ldrh	r3, [r5, #12]
  40a7d8:	f043 0340 	orr.w	r3, r3, #64	; 0x40
  40a7dc:	81ab      	strh	r3, [r5, #12]
  40a7de:	f04f 30ff 	mov.w	r0, #4294967295
  40a7e2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  40a7e6:	f8d8 4000 	ldr.w	r4, [r8]
  40a7ea:	2c1d      	cmp	r4, #29
  40a7ec:	d8f3      	bhi.n	40a7d6 <__sflush_r+0xbe>
  40a7ee:	4b19      	ldr	r3, [pc, #100]	; (40a854 <__sflush_r+0x13c>)
  40a7f0:	40e3      	lsrs	r3, r4
  40a7f2:	43db      	mvns	r3, r3
  40a7f4:	f013 0301 	ands.w	r3, r3, #1
  40a7f8:	d1ed      	bne.n	40a7d6 <__sflush_r+0xbe>
  40a7fa:	f9b5 200c 	ldrsh.w	r2, [r5, #12]
  40a7fe:	606b      	str	r3, [r5, #4]
  40a800:	f422 6300 	bic.w	r3, r2, #2048	; 0x800
  40a804:	6929      	ldr	r1, [r5, #16]
  40a806:	81ab      	strh	r3, [r5, #12]
  40a808:	04da      	lsls	r2, r3, #19
  40a80a:	6029      	str	r1, [r5, #0]
  40a80c:	d5b9      	bpl.n	40a782 <__sflush_r+0x6a>
  40a80e:	2c00      	cmp	r4, #0
  40a810:	d1b7      	bne.n	40a782 <__sflush_r+0x6a>
  40a812:	6528      	str	r0, [r5, #80]	; 0x50
  40a814:	e7b5      	b.n	40a782 <__sflush_r+0x6a>
  40a816:	6bea      	ldr	r2, [r5, #60]	; 0x3c
  40a818:	2a00      	cmp	r2, #0
  40a81a:	dc8c      	bgt.n	40a736 <__sflush_r+0x1e>
  40a81c:	e7d8      	b.n	40a7d0 <__sflush_r+0xb8>
  40a81e:	2301      	movs	r3, #1
  40a820:	69e9      	ldr	r1, [r5, #28]
  40a822:	4640      	mov	r0, r8
  40a824:	47a0      	blx	r4
  40a826:	1c43      	adds	r3, r0, #1
  40a828:	4602      	mov	r2, r0
  40a82a:	d002      	beq.n	40a832 <__sflush_r+0x11a>
  40a82c:	89ab      	ldrh	r3, [r5, #12]
  40a82e:	6aac      	ldr	r4, [r5, #40]	; 0x28
  40a830:	e78e      	b.n	40a750 <__sflush_r+0x38>
  40a832:	f8d8 3000 	ldr.w	r3, [r8]
  40a836:	2b00      	cmp	r3, #0
  40a838:	d0f8      	beq.n	40a82c <__sflush_r+0x114>
  40a83a:	2b1d      	cmp	r3, #29
  40a83c:	d001      	beq.n	40a842 <__sflush_r+0x12a>
  40a83e:	2b16      	cmp	r3, #22
  40a840:	d102      	bne.n	40a848 <__sflush_r+0x130>
  40a842:	f8c8 6000 	str.w	r6, [r8]
  40a846:	e7c3      	b.n	40a7d0 <__sflush_r+0xb8>
  40a848:	89ab      	ldrh	r3, [r5, #12]
  40a84a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
  40a84e:	81ab      	strh	r3, [r5, #12]
  40a850:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  40a854:	20400001 	.word	0x20400001

0040a858 <_fflush_r>:
  40a858:	b538      	push	{r3, r4, r5, lr}
  40a85a:	460d      	mov	r5, r1
  40a85c:	4604      	mov	r4, r0
  40a85e:	b108      	cbz	r0, 40a864 <_fflush_r+0xc>
  40a860:	6b83      	ldr	r3, [r0, #56]	; 0x38
  40a862:	b1bb      	cbz	r3, 40a894 <_fflush_r+0x3c>
  40a864:	f9b5 000c 	ldrsh.w	r0, [r5, #12]
  40a868:	b188      	cbz	r0, 40a88e <_fflush_r+0x36>
  40a86a:	6e6b      	ldr	r3, [r5, #100]	; 0x64
  40a86c:	07db      	lsls	r3, r3, #31
  40a86e:	d401      	bmi.n	40a874 <_fflush_r+0x1c>
  40a870:	0581      	lsls	r1, r0, #22
  40a872:	d517      	bpl.n	40a8a4 <_fflush_r+0x4c>
  40a874:	4620      	mov	r0, r4
  40a876:	4629      	mov	r1, r5
  40a878:	f7ff ff4e 	bl	40a718 <__sflush_r>
  40a87c:	6e6b      	ldr	r3, [r5, #100]	; 0x64
  40a87e:	07da      	lsls	r2, r3, #31
  40a880:	4604      	mov	r4, r0
  40a882:	d402      	bmi.n	40a88a <_fflush_r+0x32>
  40a884:	89ab      	ldrh	r3, [r5, #12]
  40a886:	059b      	lsls	r3, r3, #22
  40a888:	d507      	bpl.n	40a89a <_fflush_r+0x42>
  40a88a:	4620      	mov	r0, r4
  40a88c:	bd38      	pop	{r3, r4, r5, pc}
  40a88e:	4604      	mov	r4, r0
  40a890:	4620      	mov	r0, r4
  40a892:	bd38      	pop	{r3, r4, r5, pc}
  40a894:	f000 f838 	bl	40a908 <__sinit>
  40a898:	e7e4      	b.n	40a864 <_fflush_r+0xc>
  40a89a:	6da8      	ldr	r0, [r5, #88]	; 0x58
  40a89c:	f000 fbf6 	bl	40b08c <__retarget_lock_release_recursive>
  40a8a0:	4620      	mov	r0, r4
  40a8a2:	bd38      	pop	{r3, r4, r5, pc}
  40a8a4:	6da8      	ldr	r0, [r5, #88]	; 0x58
  40a8a6:	f000 fbef 	bl	40b088 <__retarget_lock_acquire_recursive>
  40a8aa:	e7e3      	b.n	40a874 <_fflush_r+0x1c>

0040a8ac <_cleanup_r>:
  40a8ac:	4901      	ldr	r1, [pc, #4]	; (40a8b4 <_cleanup_r+0x8>)
  40a8ae:	f000 bbaf 	b.w	40b010 <_fwalk_reent>
  40a8b2:	bf00      	nop
  40a8b4:	0040becd 	.word	0x0040becd

0040a8b8 <std.isra.0>:
  40a8b8:	b510      	push	{r4, lr}
  40a8ba:	2300      	movs	r3, #0
  40a8bc:	4604      	mov	r4, r0
  40a8be:	8181      	strh	r1, [r0, #12]
  40a8c0:	81c2      	strh	r2, [r0, #14]
  40a8c2:	6003      	str	r3, [r0, #0]
  40a8c4:	6043      	str	r3, [r0, #4]
  40a8c6:	6083      	str	r3, [r0, #8]
  40a8c8:	6643      	str	r3, [r0, #100]	; 0x64
  40a8ca:	6103      	str	r3, [r0, #16]
  40a8cc:	6143      	str	r3, [r0, #20]
  40a8ce:	6183      	str	r3, [r0, #24]
  40a8d0:	4619      	mov	r1, r3
  40a8d2:	2208      	movs	r2, #8
  40a8d4:	305c      	adds	r0, #92	; 0x5c
  40a8d6:	f7fe fe43 	bl	409560 <memset>
  40a8da:	4807      	ldr	r0, [pc, #28]	; (40a8f8 <std.isra.0+0x40>)
  40a8dc:	4907      	ldr	r1, [pc, #28]	; (40a8fc <std.isra.0+0x44>)
  40a8de:	4a08      	ldr	r2, [pc, #32]	; (40a900 <std.isra.0+0x48>)
  40a8e0:	4b08      	ldr	r3, [pc, #32]	; (40a904 <std.isra.0+0x4c>)
  40a8e2:	6220      	str	r0, [r4, #32]
  40a8e4:	61e4      	str	r4, [r4, #28]
  40a8e6:	6261      	str	r1, [r4, #36]	; 0x24
  40a8e8:	62a2      	str	r2, [r4, #40]	; 0x28
  40a8ea:	62e3      	str	r3, [r4, #44]	; 0x2c
  40a8ec:	f104 0058 	add.w	r0, r4, #88	; 0x58
  40a8f0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  40a8f4:	f000 bbc4 	b.w	40b080 <__retarget_lock_init_recursive>
  40a8f8:	0040bc11 	.word	0x0040bc11
  40a8fc:	0040bc35 	.word	0x0040bc35
  40a900:	0040bc71 	.word	0x0040bc71
  40a904:	0040bc91 	.word	0x0040bc91

0040a908 <__sinit>:
  40a908:	b510      	push	{r4, lr}
  40a90a:	4604      	mov	r4, r0
  40a90c:	4812      	ldr	r0, [pc, #72]	; (40a958 <__sinit+0x50>)
  40a90e:	f000 fbbb 	bl	40b088 <__retarget_lock_acquire_recursive>
  40a912:	6ba2      	ldr	r2, [r4, #56]	; 0x38
  40a914:	b9d2      	cbnz	r2, 40a94c <__sinit+0x44>
  40a916:	f504 733b 	add.w	r3, r4, #748	; 0x2ec
  40a91a:	4810      	ldr	r0, [pc, #64]	; (40a95c <__sinit+0x54>)
  40a91c:	f8c4 32e8 	str.w	r3, [r4, #744]	; 0x2e8
  40a920:	2103      	movs	r1, #3
  40a922:	f8c4 22e0 	str.w	r2, [r4, #736]	; 0x2e0
  40a926:	63e0      	str	r0, [r4, #60]	; 0x3c
  40a928:	f8c4 12e4 	str.w	r1, [r4, #740]	; 0x2e4
  40a92c:	6860      	ldr	r0, [r4, #4]
  40a92e:	2104      	movs	r1, #4
  40a930:	f7ff ffc2 	bl	40a8b8 <std.isra.0>
  40a934:	2201      	movs	r2, #1
  40a936:	2109      	movs	r1, #9
  40a938:	68a0      	ldr	r0, [r4, #8]
  40a93a:	f7ff ffbd 	bl	40a8b8 <std.isra.0>
  40a93e:	2202      	movs	r2, #2
  40a940:	2112      	movs	r1, #18
  40a942:	68e0      	ldr	r0, [r4, #12]
  40a944:	f7ff ffb8 	bl	40a8b8 <std.isra.0>
  40a948:	2301      	movs	r3, #1
  40a94a:	63a3      	str	r3, [r4, #56]	; 0x38
  40a94c:	4802      	ldr	r0, [pc, #8]	; (40a958 <__sinit+0x50>)
  40a94e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  40a952:	f000 bb9b 	b.w	40b08c <__retarget_lock_release_recursive>
  40a956:	bf00      	nop
  40a958:	2040cb10 	.word	0x2040cb10
  40a95c:	0040a8ad 	.word	0x0040a8ad

0040a960 <__sfp_lock_acquire>:
  40a960:	4801      	ldr	r0, [pc, #4]	; (40a968 <__sfp_lock_acquire+0x8>)
  40a962:	f000 bb91 	b.w	40b088 <__retarget_lock_acquire_recursive>
  40a966:	bf00      	nop
  40a968:	2040cb24 	.word	0x2040cb24

0040a96c <__sfp_lock_release>:
  40a96c:	4801      	ldr	r0, [pc, #4]	; (40a974 <__sfp_lock_release+0x8>)
  40a96e:	f000 bb8d 	b.w	40b08c <__retarget_lock_release_recursive>
  40a972:	bf00      	nop
  40a974:	2040cb24 	.word	0x2040cb24

0040a978 <__libc_fini_array>:
  40a978:	b538      	push	{r3, r4, r5, lr}
  40a97a:	4c0a      	ldr	r4, [pc, #40]	; (40a9a4 <__libc_fini_array+0x2c>)
  40a97c:	4d0a      	ldr	r5, [pc, #40]	; (40a9a8 <__libc_fini_array+0x30>)
  40a97e:	1b64      	subs	r4, r4, r5
  40a980:	10a4      	asrs	r4, r4, #2
  40a982:	d00a      	beq.n	40a99a <__libc_fini_array+0x22>
  40a984:	f104 4380 	add.w	r3, r4, #1073741824	; 0x40000000
  40a988:	3b01      	subs	r3, #1
  40a98a:	eb05 0583 	add.w	r5, r5, r3, lsl #2
  40a98e:	3c01      	subs	r4, #1
  40a990:	f855 3904 	ldr.w	r3, [r5], #-4
  40a994:	4798      	blx	r3
  40a996:	2c00      	cmp	r4, #0
  40a998:	d1f9      	bne.n	40a98e <__libc_fini_array+0x16>
  40a99a:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
  40a99e:	f003 b8d1 	b.w	40db44 <_fini>
  40a9a2:	bf00      	nop
  40a9a4:	0040db54 	.word	0x0040db54
  40a9a8:	0040db50 	.word	0x0040db50

0040a9ac <__fputwc>:
  40a9ac:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
  40a9b0:	b082      	sub	sp, #8
  40a9b2:	4680      	mov	r8, r0
  40a9b4:	4689      	mov	r9, r1
  40a9b6:	4614      	mov	r4, r2
  40a9b8:	f000 fb54 	bl	40b064 <__locale_mb_cur_max>
  40a9bc:	2801      	cmp	r0, #1
  40a9be:	d036      	beq.n	40aa2e <__fputwc+0x82>
  40a9c0:	464a      	mov	r2, r9
  40a9c2:	f104 035c 	add.w	r3, r4, #92	; 0x5c
  40a9c6:	a901      	add	r1, sp, #4
  40a9c8:	4640      	mov	r0, r8
  40a9ca:	f001 f9bd 	bl	40bd48 <_wcrtomb_r>
  40a9ce:	1c42      	adds	r2, r0, #1
  40a9d0:	4606      	mov	r6, r0
  40a9d2:	d025      	beq.n	40aa20 <__fputwc+0x74>
  40a9d4:	b3a8      	cbz	r0, 40aa42 <__fputwc+0x96>
  40a9d6:	f89d e004 	ldrb.w	lr, [sp, #4]
  40a9da:	2500      	movs	r5, #0
  40a9dc:	f10d 0a04 	add.w	sl, sp, #4
  40a9e0:	e009      	b.n	40a9f6 <__fputwc+0x4a>
  40a9e2:	6823      	ldr	r3, [r4, #0]
  40a9e4:	1c5a      	adds	r2, r3, #1
  40a9e6:	6022      	str	r2, [r4, #0]
  40a9e8:	f883 e000 	strb.w	lr, [r3]
  40a9ec:	3501      	adds	r5, #1
  40a9ee:	42b5      	cmp	r5, r6
  40a9f0:	d227      	bcs.n	40aa42 <__fputwc+0x96>
  40a9f2:	f815 e00a 	ldrb.w	lr, [r5, sl]
  40a9f6:	68a3      	ldr	r3, [r4, #8]
  40a9f8:	3b01      	subs	r3, #1
  40a9fa:	2b00      	cmp	r3, #0
  40a9fc:	60a3      	str	r3, [r4, #8]
  40a9fe:	daf0      	bge.n	40a9e2 <__fputwc+0x36>
  40aa00:	69a7      	ldr	r7, [r4, #24]
  40aa02:	42bb      	cmp	r3, r7
  40aa04:	4671      	mov	r1, lr
  40aa06:	4622      	mov	r2, r4
  40aa08:	4640      	mov	r0, r8
  40aa0a:	db02      	blt.n	40aa12 <__fputwc+0x66>
  40aa0c:	f1be 0f0a 	cmp.w	lr, #10
  40aa10:	d1e7      	bne.n	40a9e2 <__fputwc+0x36>
  40aa12:	f001 f941 	bl	40bc98 <__swbuf_r>
  40aa16:	1c43      	adds	r3, r0, #1
  40aa18:	d1e8      	bne.n	40a9ec <__fputwc+0x40>
  40aa1a:	b002      	add	sp, #8
  40aa1c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
  40aa20:	89a3      	ldrh	r3, [r4, #12]
  40aa22:	f043 0340 	orr.w	r3, r3, #64	; 0x40
  40aa26:	81a3      	strh	r3, [r4, #12]
  40aa28:	b002      	add	sp, #8
  40aa2a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
  40aa2e:	f109 33ff 	add.w	r3, r9, #4294967295
  40aa32:	2bfe      	cmp	r3, #254	; 0xfe
  40aa34:	d8c4      	bhi.n	40a9c0 <__fputwc+0x14>
  40aa36:	fa5f fe89 	uxtb.w	lr, r9
  40aa3a:	4606      	mov	r6, r0
  40aa3c:	f88d e004 	strb.w	lr, [sp, #4]
  40aa40:	e7cb      	b.n	40a9da <__fputwc+0x2e>
  40aa42:	4648      	mov	r0, r9
  40aa44:	b002      	add	sp, #8
  40aa46:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
  40aa4a:	bf00      	nop

0040aa4c <_fputwc_r>:
  40aa4c:	b530      	push	{r4, r5, lr}
  40aa4e:	6e53      	ldr	r3, [r2, #100]	; 0x64
  40aa50:	f013 0f01 	tst.w	r3, #1
  40aa54:	f9b2 300c 	ldrsh.w	r3, [r2, #12]
  40aa58:	4614      	mov	r4, r2
  40aa5a:	b083      	sub	sp, #12
  40aa5c:	4605      	mov	r5, r0
  40aa5e:	b29a      	uxth	r2, r3
  40aa60:	d101      	bne.n	40aa66 <_fputwc_r+0x1a>
  40aa62:	0590      	lsls	r0, r2, #22
  40aa64:	d51c      	bpl.n	40aaa0 <_fputwc_r+0x54>
  40aa66:	0490      	lsls	r0, r2, #18
  40aa68:	d406      	bmi.n	40aa78 <_fputwc_r+0x2c>
  40aa6a:	6e62      	ldr	r2, [r4, #100]	; 0x64
  40aa6c:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
  40aa70:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
  40aa74:	81a3      	strh	r3, [r4, #12]
  40aa76:	6662      	str	r2, [r4, #100]	; 0x64
  40aa78:	4628      	mov	r0, r5
  40aa7a:	4622      	mov	r2, r4
  40aa7c:	f7ff ff96 	bl	40a9ac <__fputwc>
  40aa80:	6e63      	ldr	r3, [r4, #100]	; 0x64
  40aa82:	07da      	lsls	r2, r3, #31
  40aa84:	4605      	mov	r5, r0
  40aa86:	d402      	bmi.n	40aa8e <_fputwc_r+0x42>
  40aa88:	89a3      	ldrh	r3, [r4, #12]
  40aa8a:	059b      	lsls	r3, r3, #22
  40aa8c:	d502      	bpl.n	40aa94 <_fputwc_r+0x48>
  40aa8e:	4628      	mov	r0, r5
  40aa90:	b003      	add	sp, #12
  40aa92:	bd30      	pop	{r4, r5, pc}
  40aa94:	6da0      	ldr	r0, [r4, #88]	; 0x58
  40aa96:	f000 faf9 	bl	40b08c <__retarget_lock_release_recursive>
  40aa9a:	4628      	mov	r0, r5
  40aa9c:	b003      	add	sp, #12
  40aa9e:	bd30      	pop	{r4, r5, pc}
  40aaa0:	6da0      	ldr	r0, [r4, #88]	; 0x58
  40aaa2:	9101      	str	r1, [sp, #4]
  40aaa4:	f000 faf0 	bl	40b088 <__retarget_lock_acquire_recursive>
  40aaa8:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
  40aaac:	9901      	ldr	r1, [sp, #4]
  40aaae:	b29a      	uxth	r2, r3
  40aab0:	e7d9      	b.n	40aa66 <_fputwc_r+0x1a>
  40aab2:	bf00      	nop

0040aab4 <_malloc_trim_r>:
  40aab4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  40aab6:	4f24      	ldr	r7, [pc, #144]	; (40ab48 <_malloc_trim_r+0x94>)
  40aab8:	460c      	mov	r4, r1
  40aaba:	4606      	mov	r6, r0
  40aabc:	f000 fee4 	bl	40b888 <__malloc_lock>
  40aac0:	68bb      	ldr	r3, [r7, #8]
  40aac2:	685d      	ldr	r5, [r3, #4]
  40aac4:	f5c4 617e 	rsb	r1, r4, #4064	; 0xfe0
  40aac8:	310f      	adds	r1, #15
  40aaca:	f025 0503 	bic.w	r5, r5, #3
  40aace:	4429      	add	r1, r5
  40aad0:	f421 617f 	bic.w	r1, r1, #4080	; 0xff0
  40aad4:	f021 010f 	bic.w	r1, r1, #15
  40aad8:	f5a1 5480 	sub.w	r4, r1, #4096	; 0x1000
  40aadc:	f5b4 5f80 	cmp.w	r4, #4096	; 0x1000
  40aae0:	db07      	blt.n	40aaf2 <_malloc_trim_r+0x3e>
  40aae2:	2100      	movs	r1, #0
  40aae4:	4630      	mov	r0, r6
  40aae6:	f001 f881 	bl	40bbec <_sbrk_r>
  40aaea:	68bb      	ldr	r3, [r7, #8]
  40aaec:	442b      	add	r3, r5
  40aaee:	4298      	cmp	r0, r3
  40aaf0:	d004      	beq.n	40aafc <_malloc_trim_r+0x48>
  40aaf2:	4630      	mov	r0, r6
  40aaf4:	f000 fece 	bl	40b894 <__malloc_unlock>
  40aaf8:	2000      	movs	r0, #0
  40aafa:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  40aafc:	4261      	negs	r1, r4
  40aafe:	4630      	mov	r0, r6
  40ab00:	f001 f874 	bl	40bbec <_sbrk_r>
  40ab04:	3001      	adds	r0, #1
  40ab06:	d00d      	beq.n	40ab24 <_malloc_trim_r+0x70>
  40ab08:	4b10      	ldr	r3, [pc, #64]	; (40ab4c <_malloc_trim_r+0x98>)
  40ab0a:	68ba      	ldr	r2, [r7, #8]
  40ab0c:	6819      	ldr	r1, [r3, #0]
  40ab0e:	1b2d      	subs	r5, r5, r4
  40ab10:	f045 0501 	orr.w	r5, r5, #1
  40ab14:	4630      	mov	r0, r6
  40ab16:	1b09      	subs	r1, r1, r4
  40ab18:	6055      	str	r5, [r2, #4]
  40ab1a:	6019      	str	r1, [r3, #0]
  40ab1c:	f000 feba 	bl	40b894 <__malloc_unlock>
  40ab20:	2001      	movs	r0, #1
  40ab22:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  40ab24:	2100      	movs	r1, #0
  40ab26:	4630      	mov	r0, r6
  40ab28:	f001 f860 	bl	40bbec <_sbrk_r>
  40ab2c:	68ba      	ldr	r2, [r7, #8]
  40ab2e:	1a83      	subs	r3, r0, r2
  40ab30:	2b0f      	cmp	r3, #15
  40ab32:	ddde      	ble.n	40aaf2 <_malloc_trim_r+0x3e>
  40ab34:	4c06      	ldr	r4, [pc, #24]	; (40ab50 <_malloc_trim_r+0x9c>)
  40ab36:	4905      	ldr	r1, [pc, #20]	; (40ab4c <_malloc_trim_r+0x98>)
  40ab38:	6824      	ldr	r4, [r4, #0]
  40ab3a:	f043 0301 	orr.w	r3, r3, #1
  40ab3e:	1b00      	subs	r0, r0, r4
  40ab40:	6053      	str	r3, [r2, #4]
  40ab42:	6008      	str	r0, [r1, #0]
  40ab44:	e7d5      	b.n	40aaf2 <_malloc_trim_r+0x3e>
  40ab46:	bf00      	nop
  40ab48:	204005e8 	.word	0x204005e8
  40ab4c:	2040c9c4 	.word	0x2040c9c4
  40ab50:	204009f0 	.word	0x204009f0

0040ab54 <_free_r>:
  40ab54:	2900      	cmp	r1, #0
  40ab56:	d044      	beq.n	40abe2 <_free_r+0x8e>
  40ab58:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  40ab5c:	460d      	mov	r5, r1
  40ab5e:	4680      	mov	r8, r0
  40ab60:	f000 fe92 	bl	40b888 <__malloc_lock>
  40ab64:	f855 7c04 	ldr.w	r7, [r5, #-4]
  40ab68:	4969      	ldr	r1, [pc, #420]	; (40ad10 <_free_r+0x1bc>)
  40ab6a:	f027 0301 	bic.w	r3, r7, #1
  40ab6e:	f1a5 0408 	sub.w	r4, r5, #8
  40ab72:	18e2      	adds	r2, r4, r3
  40ab74:	688e      	ldr	r6, [r1, #8]
  40ab76:	6850      	ldr	r0, [r2, #4]
  40ab78:	42b2      	cmp	r2, r6
  40ab7a:	f020 0003 	bic.w	r0, r0, #3
  40ab7e:	d05e      	beq.n	40ac3e <_free_r+0xea>
  40ab80:	07fe      	lsls	r6, r7, #31
  40ab82:	6050      	str	r0, [r2, #4]
  40ab84:	d40b      	bmi.n	40ab9e <_free_r+0x4a>
  40ab86:	f855 7c08 	ldr.w	r7, [r5, #-8]
  40ab8a:	1be4      	subs	r4, r4, r7
  40ab8c:	f101 0e08 	add.w	lr, r1, #8
  40ab90:	68a5      	ldr	r5, [r4, #8]
  40ab92:	4575      	cmp	r5, lr
  40ab94:	443b      	add	r3, r7
  40ab96:	d06d      	beq.n	40ac74 <_free_r+0x120>
  40ab98:	68e7      	ldr	r7, [r4, #12]
  40ab9a:	60ef      	str	r7, [r5, #12]
  40ab9c:	60bd      	str	r5, [r7, #8]
  40ab9e:	1815      	adds	r5, r2, r0
  40aba0:	686d      	ldr	r5, [r5, #4]
  40aba2:	07ed      	lsls	r5, r5, #31
  40aba4:	d53e      	bpl.n	40ac24 <_free_r+0xd0>
  40aba6:	f043 0201 	orr.w	r2, r3, #1
  40abaa:	6062      	str	r2, [r4, #4]
  40abac:	50e3      	str	r3, [r4, r3]
  40abae:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
  40abb2:	d217      	bcs.n	40abe4 <_free_r+0x90>
  40abb4:	08db      	lsrs	r3, r3, #3
  40abb6:	1c58      	adds	r0, r3, #1
  40abb8:	109a      	asrs	r2, r3, #2
  40abba:	684d      	ldr	r5, [r1, #4]
  40abbc:	f851 7030 	ldr.w	r7, [r1, r0, lsl #3]
  40abc0:	60a7      	str	r7, [r4, #8]
  40abc2:	2301      	movs	r3, #1
  40abc4:	4093      	lsls	r3, r2
  40abc6:	eb01 02c0 	add.w	r2, r1, r0, lsl #3
  40abca:	432b      	orrs	r3, r5
  40abcc:	3a08      	subs	r2, #8
  40abce:	60e2      	str	r2, [r4, #12]
  40abd0:	604b      	str	r3, [r1, #4]
  40abd2:	f841 4030 	str.w	r4, [r1, r0, lsl #3]
  40abd6:	60fc      	str	r4, [r7, #12]
  40abd8:	4640      	mov	r0, r8
  40abda:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
  40abde:	f000 be59 	b.w	40b894 <__malloc_unlock>
  40abe2:	4770      	bx	lr
  40abe4:	0a5a      	lsrs	r2, r3, #9
  40abe6:	2a04      	cmp	r2, #4
  40abe8:	d852      	bhi.n	40ac90 <_free_r+0x13c>
  40abea:	099a      	lsrs	r2, r3, #6
  40abec:	f102 0739 	add.w	r7, r2, #57	; 0x39
  40abf0:	00ff      	lsls	r7, r7, #3
  40abf2:	f102 0538 	add.w	r5, r2, #56	; 0x38
  40abf6:	19c8      	adds	r0, r1, r7
  40abf8:	59ca      	ldr	r2, [r1, r7]
  40abfa:	3808      	subs	r0, #8
  40abfc:	4290      	cmp	r0, r2
  40abfe:	d04f      	beq.n	40aca0 <_free_r+0x14c>
  40ac00:	6851      	ldr	r1, [r2, #4]
  40ac02:	f021 0103 	bic.w	r1, r1, #3
  40ac06:	428b      	cmp	r3, r1
  40ac08:	d232      	bcs.n	40ac70 <_free_r+0x11c>
  40ac0a:	6892      	ldr	r2, [r2, #8]
  40ac0c:	4290      	cmp	r0, r2
  40ac0e:	d1f7      	bne.n	40ac00 <_free_r+0xac>
  40ac10:	68c3      	ldr	r3, [r0, #12]
  40ac12:	60a0      	str	r0, [r4, #8]
  40ac14:	60e3      	str	r3, [r4, #12]
  40ac16:	609c      	str	r4, [r3, #8]
  40ac18:	60c4      	str	r4, [r0, #12]
  40ac1a:	4640      	mov	r0, r8
  40ac1c:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
  40ac20:	f000 be38 	b.w	40b894 <__malloc_unlock>
  40ac24:	6895      	ldr	r5, [r2, #8]
  40ac26:	4f3b      	ldr	r7, [pc, #236]	; (40ad14 <_free_r+0x1c0>)
  40ac28:	42bd      	cmp	r5, r7
  40ac2a:	4403      	add	r3, r0
  40ac2c:	d040      	beq.n	40acb0 <_free_r+0x15c>
  40ac2e:	68d0      	ldr	r0, [r2, #12]
  40ac30:	60e8      	str	r0, [r5, #12]
  40ac32:	f043 0201 	orr.w	r2, r3, #1
  40ac36:	6085      	str	r5, [r0, #8]
  40ac38:	6062      	str	r2, [r4, #4]
  40ac3a:	50e3      	str	r3, [r4, r3]
  40ac3c:	e7b7      	b.n	40abae <_free_r+0x5a>
  40ac3e:	07ff      	lsls	r7, r7, #31
  40ac40:	4403      	add	r3, r0
  40ac42:	d407      	bmi.n	40ac54 <_free_r+0x100>
  40ac44:	f855 2c08 	ldr.w	r2, [r5, #-8]
  40ac48:	1aa4      	subs	r4, r4, r2
  40ac4a:	4413      	add	r3, r2
  40ac4c:	68a0      	ldr	r0, [r4, #8]
  40ac4e:	68e2      	ldr	r2, [r4, #12]
  40ac50:	60c2      	str	r2, [r0, #12]
  40ac52:	6090      	str	r0, [r2, #8]
  40ac54:	4a30      	ldr	r2, [pc, #192]	; (40ad18 <_free_r+0x1c4>)
  40ac56:	6812      	ldr	r2, [r2, #0]
  40ac58:	f043 0001 	orr.w	r0, r3, #1
  40ac5c:	4293      	cmp	r3, r2
  40ac5e:	6060      	str	r0, [r4, #4]
  40ac60:	608c      	str	r4, [r1, #8]
  40ac62:	d3b9      	bcc.n	40abd8 <_free_r+0x84>
  40ac64:	4b2d      	ldr	r3, [pc, #180]	; (40ad1c <_free_r+0x1c8>)
  40ac66:	4640      	mov	r0, r8
  40ac68:	6819      	ldr	r1, [r3, #0]
  40ac6a:	f7ff ff23 	bl	40aab4 <_malloc_trim_r>
  40ac6e:	e7b3      	b.n	40abd8 <_free_r+0x84>
  40ac70:	4610      	mov	r0, r2
  40ac72:	e7cd      	b.n	40ac10 <_free_r+0xbc>
  40ac74:	1811      	adds	r1, r2, r0
  40ac76:	6849      	ldr	r1, [r1, #4]
  40ac78:	07c9      	lsls	r1, r1, #31
  40ac7a:	d444      	bmi.n	40ad06 <_free_r+0x1b2>
  40ac7c:	6891      	ldr	r1, [r2, #8]
  40ac7e:	68d2      	ldr	r2, [r2, #12]
  40ac80:	60ca      	str	r2, [r1, #12]
  40ac82:	4403      	add	r3, r0
  40ac84:	f043 0001 	orr.w	r0, r3, #1
  40ac88:	6091      	str	r1, [r2, #8]
  40ac8a:	6060      	str	r0, [r4, #4]
  40ac8c:	50e3      	str	r3, [r4, r3]
  40ac8e:	e7a3      	b.n	40abd8 <_free_r+0x84>
  40ac90:	2a14      	cmp	r2, #20
  40ac92:	d816      	bhi.n	40acc2 <_free_r+0x16e>
  40ac94:	f102 075c 	add.w	r7, r2, #92	; 0x5c
  40ac98:	00ff      	lsls	r7, r7, #3
  40ac9a:	f102 055b 	add.w	r5, r2, #91	; 0x5b
  40ac9e:	e7aa      	b.n	40abf6 <_free_r+0xa2>
  40aca0:	10aa      	asrs	r2, r5, #2
  40aca2:	2301      	movs	r3, #1
  40aca4:	684d      	ldr	r5, [r1, #4]
  40aca6:	4093      	lsls	r3, r2
  40aca8:	432b      	orrs	r3, r5
  40acaa:	604b      	str	r3, [r1, #4]
  40acac:	4603      	mov	r3, r0
  40acae:	e7b0      	b.n	40ac12 <_free_r+0xbe>
  40acb0:	f043 0201 	orr.w	r2, r3, #1
  40acb4:	614c      	str	r4, [r1, #20]
  40acb6:	610c      	str	r4, [r1, #16]
  40acb8:	60e5      	str	r5, [r4, #12]
  40acba:	60a5      	str	r5, [r4, #8]
  40acbc:	6062      	str	r2, [r4, #4]
  40acbe:	50e3      	str	r3, [r4, r3]
  40acc0:	e78a      	b.n	40abd8 <_free_r+0x84>
  40acc2:	2a54      	cmp	r2, #84	; 0x54
  40acc4:	d806      	bhi.n	40acd4 <_free_r+0x180>
  40acc6:	0b1a      	lsrs	r2, r3, #12
  40acc8:	f102 076f 	add.w	r7, r2, #111	; 0x6f
  40accc:	00ff      	lsls	r7, r7, #3
  40acce:	f102 056e 	add.w	r5, r2, #110	; 0x6e
  40acd2:	e790      	b.n	40abf6 <_free_r+0xa2>
  40acd4:	f5b2 7faa 	cmp.w	r2, #340	; 0x154
  40acd8:	d806      	bhi.n	40ace8 <_free_r+0x194>
  40acda:	0bda      	lsrs	r2, r3, #15
  40acdc:	f102 0778 	add.w	r7, r2, #120	; 0x78
  40ace0:	00ff      	lsls	r7, r7, #3
  40ace2:	f102 0577 	add.w	r5, r2, #119	; 0x77
  40ace6:	e786      	b.n	40abf6 <_free_r+0xa2>
  40ace8:	f240 5054 	movw	r0, #1364	; 0x554
  40acec:	4282      	cmp	r2, r0
  40acee:	d806      	bhi.n	40acfe <_free_r+0x1aa>
  40acf0:	0c9a      	lsrs	r2, r3, #18
  40acf2:	f102 077d 	add.w	r7, r2, #125	; 0x7d
  40acf6:	00ff      	lsls	r7, r7, #3
  40acf8:	f102 057c 	add.w	r5, r2, #124	; 0x7c
  40acfc:	e77b      	b.n	40abf6 <_free_r+0xa2>
  40acfe:	f44f 777e 	mov.w	r7, #1016	; 0x3f8
  40ad02:	257e      	movs	r5, #126	; 0x7e
  40ad04:	e777      	b.n	40abf6 <_free_r+0xa2>
  40ad06:	f043 0101 	orr.w	r1, r3, #1
  40ad0a:	6061      	str	r1, [r4, #4]
  40ad0c:	6013      	str	r3, [r2, #0]
  40ad0e:	e763      	b.n	40abd8 <_free_r+0x84>
  40ad10:	204005e8 	.word	0x204005e8
  40ad14:	204005f0 	.word	0x204005f0
  40ad18:	204009f4 	.word	0x204009f4
  40ad1c:	2040c9f4 	.word	0x2040c9f4

0040ad20 <__sfvwrite_r>:
  40ad20:	6893      	ldr	r3, [r2, #8]
  40ad22:	2b00      	cmp	r3, #0
  40ad24:	d073      	beq.n	40ae0e <__sfvwrite_r+0xee>
  40ad26:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  40ad2a:	898b      	ldrh	r3, [r1, #12]
  40ad2c:	b083      	sub	sp, #12
  40ad2e:	460c      	mov	r4, r1
  40ad30:	0719      	lsls	r1, r3, #28
  40ad32:	9000      	str	r0, [sp, #0]
  40ad34:	4616      	mov	r6, r2
  40ad36:	d526      	bpl.n	40ad86 <__sfvwrite_r+0x66>
  40ad38:	6922      	ldr	r2, [r4, #16]
  40ad3a:	b322      	cbz	r2, 40ad86 <__sfvwrite_r+0x66>
  40ad3c:	f013 0002 	ands.w	r0, r3, #2
  40ad40:	6835      	ldr	r5, [r6, #0]
  40ad42:	d02c      	beq.n	40ad9e <__sfvwrite_r+0x7e>
  40ad44:	f04f 0900 	mov.w	r9, #0
  40ad48:	4fb0      	ldr	r7, [pc, #704]	; (40b00c <__sfvwrite_r+0x2ec>)
  40ad4a:	46c8      	mov	r8, r9
  40ad4c:	46b2      	mov	sl, r6
  40ad4e:	45b8      	cmp	r8, r7
  40ad50:	4643      	mov	r3, r8
  40ad52:	464a      	mov	r2, r9
  40ad54:	bf28      	it	cs
  40ad56:	463b      	movcs	r3, r7
  40ad58:	9800      	ldr	r0, [sp, #0]
  40ad5a:	f1b8 0f00 	cmp.w	r8, #0
  40ad5e:	d050      	beq.n	40ae02 <__sfvwrite_r+0xe2>
  40ad60:	69e1      	ldr	r1, [r4, #28]
  40ad62:	6a66      	ldr	r6, [r4, #36]	; 0x24
  40ad64:	47b0      	blx	r6
  40ad66:	2800      	cmp	r0, #0
  40ad68:	dd58      	ble.n	40ae1c <__sfvwrite_r+0xfc>
  40ad6a:	f8da 3008 	ldr.w	r3, [sl, #8]
  40ad6e:	1a1b      	subs	r3, r3, r0
  40ad70:	4481      	add	r9, r0
  40ad72:	eba8 0800 	sub.w	r8, r8, r0
  40ad76:	f8ca 3008 	str.w	r3, [sl, #8]
  40ad7a:	2b00      	cmp	r3, #0
  40ad7c:	d1e7      	bne.n	40ad4e <__sfvwrite_r+0x2e>
  40ad7e:	2000      	movs	r0, #0
  40ad80:	b003      	add	sp, #12
  40ad82:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  40ad86:	4621      	mov	r1, r4
  40ad88:	9800      	ldr	r0, [sp, #0]
  40ad8a:	f7ff fc51 	bl	40a630 <__swsetup_r>
  40ad8e:	2800      	cmp	r0, #0
  40ad90:	f040 8133 	bne.w	40affa <__sfvwrite_r+0x2da>
  40ad94:	89a3      	ldrh	r3, [r4, #12]
  40ad96:	6835      	ldr	r5, [r6, #0]
  40ad98:	f013 0002 	ands.w	r0, r3, #2
  40ad9c:	d1d2      	bne.n	40ad44 <__sfvwrite_r+0x24>
  40ad9e:	f013 0901 	ands.w	r9, r3, #1
  40ada2:	d145      	bne.n	40ae30 <__sfvwrite_r+0x110>
  40ada4:	464f      	mov	r7, r9
  40ada6:	9601      	str	r6, [sp, #4]
  40ada8:	b337      	cbz	r7, 40adf8 <__sfvwrite_r+0xd8>
  40adaa:	059a      	lsls	r2, r3, #22
  40adac:	f8d4 8008 	ldr.w	r8, [r4, #8]
  40adb0:	f140 8083 	bpl.w	40aeba <__sfvwrite_r+0x19a>
  40adb4:	4547      	cmp	r7, r8
  40adb6:	46c3      	mov	fp, r8
  40adb8:	f0c0 80ab 	bcc.w	40af12 <__sfvwrite_r+0x1f2>
  40adbc:	f413 6f90 	tst.w	r3, #1152	; 0x480
  40adc0:	f040 80ac 	bne.w	40af1c <__sfvwrite_r+0x1fc>
  40adc4:	6820      	ldr	r0, [r4, #0]
  40adc6:	46ba      	mov	sl, r7
  40adc8:	465a      	mov	r2, fp
  40adca:	4649      	mov	r1, r9
  40adcc:	f000 fcf8 	bl	40b7c0 <memmove>
  40add0:	68a2      	ldr	r2, [r4, #8]
  40add2:	6823      	ldr	r3, [r4, #0]
  40add4:	eba2 0208 	sub.w	r2, r2, r8
  40add8:	445b      	add	r3, fp
  40adda:	60a2      	str	r2, [r4, #8]
  40addc:	6023      	str	r3, [r4, #0]
  40adde:	9a01      	ldr	r2, [sp, #4]
  40ade0:	6893      	ldr	r3, [r2, #8]
  40ade2:	eba3 030a 	sub.w	r3, r3, sl
  40ade6:	44d1      	add	r9, sl
  40ade8:	eba7 070a 	sub.w	r7, r7, sl
  40adec:	6093      	str	r3, [r2, #8]
  40adee:	2b00      	cmp	r3, #0
  40adf0:	d0c5      	beq.n	40ad7e <__sfvwrite_r+0x5e>
  40adf2:	89a3      	ldrh	r3, [r4, #12]
  40adf4:	2f00      	cmp	r7, #0
  40adf6:	d1d8      	bne.n	40adaa <__sfvwrite_r+0x8a>
  40adf8:	f8d5 9000 	ldr.w	r9, [r5]
  40adfc:	686f      	ldr	r7, [r5, #4]
  40adfe:	3508      	adds	r5, #8
  40ae00:	e7d2      	b.n	40ada8 <__sfvwrite_r+0x88>
  40ae02:	f8d5 9000 	ldr.w	r9, [r5]
  40ae06:	f8d5 8004 	ldr.w	r8, [r5, #4]
  40ae0a:	3508      	adds	r5, #8
  40ae0c:	e79f      	b.n	40ad4e <__sfvwrite_r+0x2e>
  40ae0e:	2000      	movs	r0, #0
  40ae10:	4770      	bx	lr
  40ae12:	4621      	mov	r1, r4
  40ae14:	9800      	ldr	r0, [sp, #0]
  40ae16:	f7ff fd1f 	bl	40a858 <_fflush_r>
  40ae1a:	b370      	cbz	r0, 40ae7a <__sfvwrite_r+0x15a>
  40ae1c:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
  40ae20:	f043 0340 	orr.w	r3, r3, #64	; 0x40
  40ae24:	f04f 30ff 	mov.w	r0, #4294967295
  40ae28:	81a3      	strh	r3, [r4, #12]
  40ae2a:	b003      	add	sp, #12
  40ae2c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  40ae30:	4681      	mov	r9, r0
  40ae32:	4633      	mov	r3, r6
  40ae34:	464e      	mov	r6, r9
  40ae36:	46a8      	mov	r8, r5
  40ae38:	469a      	mov	sl, r3
  40ae3a:	464d      	mov	r5, r9
  40ae3c:	b34e      	cbz	r6, 40ae92 <__sfvwrite_r+0x172>
  40ae3e:	b380      	cbz	r0, 40aea2 <__sfvwrite_r+0x182>
  40ae40:	6820      	ldr	r0, [r4, #0]
  40ae42:	6923      	ldr	r3, [r4, #16]
  40ae44:	6962      	ldr	r2, [r4, #20]
  40ae46:	45b1      	cmp	r9, r6
  40ae48:	46cb      	mov	fp, r9
  40ae4a:	bf28      	it	cs
  40ae4c:	46b3      	movcs	fp, r6
  40ae4e:	4298      	cmp	r0, r3
  40ae50:	465f      	mov	r7, fp
  40ae52:	d904      	bls.n	40ae5e <__sfvwrite_r+0x13e>
  40ae54:	68a3      	ldr	r3, [r4, #8]
  40ae56:	4413      	add	r3, r2
  40ae58:	459b      	cmp	fp, r3
  40ae5a:	f300 80a6 	bgt.w	40afaa <__sfvwrite_r+0x28a>
  40ae5e:	4593      	cmp	fp, r2
  40ae60:	db4b      	blt.n	40aefa <__sfvwrite_r+0x1da>
  40ae62:	4613      	mov	r3, r2
  40ae64:	6a67      	ldr	r7, [r4, #36]	; 0x24
  40ae66:	69e1      	ldr	r1, [r4, #28]
  40ae68:	9800      	ldr	r0, [sp, #0]
  40ae6a:	462a      	mov	r2, r5
  40ae6c:	47b8      	blx	r7
  40ae6e:	1e07      	subs	r7, r0, #0
  40ae70:	ddd4      	ble.n	40ae1c <__sfvwrite_r+0xfc>
  40ae72:	ebb9 0907 	subs.w	r9, r9, r7
  40ae76:	d0cc      	beq.n	40ae12 <__sfvwrite_r+0xf2>
  40ae78:	2001      	movs	r0, #1
  40ae7a:	f8da 3008 	ldr.w	r3, [sl, #8]
  40ae7e:	1bdb      	subs	r3, r3, r7
  40ae80:	443d      	add	r5, r7
  40ae82:	1bf6      	subs	r6, r6, r7
  40ae84:	f8ca 3008 	str.w	r3, [sl, #8]
  40ae88:	2b00      	cmp	r3, #0
  40ae8a:	f43f af78 	beq.w	40ad7e <__sfvwrite_r+0x5e>
  40ae8e:	2e00      	cmp	r6, #0
  40ae90:	d1d5      	bne.n	40ae3e <__sfvwrite_r+0x11e>
  40ae92:	f108 0308 	add.w	r3, r8, #8
  40ae96:	e913 0060 	ldmdb	r3, {r5, r6}
  40ae9a:	4698      	mov	r8, r3
  40ae9c:	3308      	adds	r3, #8
  40ae9e:	2e00      	cmp	r6, #0
  40aea0:	d0f9      	beq.n	40ae96 <__sfvwrite_r+0x176>
  40aea2:	4632      	mov	r2, r6
  40aea4:	210a      	movs	r1, #10
  40aea6:	4628      	mov	r0, r5
  40aea8:	f000 fc3a 	bl	40b720 <memchr>
  40aeac:	2800      	cmp	r0, #0
  40aeae:	f000 80a1 	beq.w	40aff4 <__sfvwrite_r+0x2d4>
  40aeb2:	3001      	adds	r0, #1
  40aeb4:	eba0 0905 	sub.w	r9, r0, r5
  40aeb8:	e7c2      	b.n	40ae40 <__sfvwrite_r+0x120>
  40aeba:	6820      	ldr	r0, [r4, #0]
  40aebc:	6923      	ldr	r3, [r4, #16]
  40aebe:	4298      	cmp	r0, r3
  40aec0:	d802      	bhi.n	40aec8 <__sfvwrite_r+0x1a8>
  40aec2:	6963      	ldr	r3, [r4, #20]
  40aec4:	429f      	cmp	r7, r3
  40aec6:	d25d      	bcs.n	40af84 <__sfvwrite_r+0x264>
  40aec8:	45b8      	cmp	r8, r7
  40aeca:	bf28      	it	cs
  40aecc:	46b8      	movcs	r8, r7
  40aece:	4642      	mov	r2, r8
  40aed0:	4649      	mov	r1, r9
  40aed2:	f000 fc75 	bl	40b7c0 <memmove>
  40aed6:	68a3      	ldr	r3, [r4, #8]
  40aed8:	6822      	ldr	r2, [r4, #0]
  40aeda:	eba3 0308 	sub.w	r3, r3, r8
  40aede:	4442      	add	r2, r8
  40aee0:	60a3      	str	r3, [r4, #8]
  40aee2:	6022      	str	r2, [r4, #0]
  40aee4:	b10b      	cbz	r3, 40aeea <__sfvwrite_r+0x1ca>
  40aee6:	46c2      	mov	sl, r8
  40aee8:	e779      	b.n	40adde <__sfvwrite_r+0xbe>
  40aeea:	4621      	mov	r1, r4
  40aeec:	9800      	ldr	r0, [sp, #0]
  40aeee:	f7ff fcb3 	bl	40a858 <_fflush_r>
  40aef2:	2800      	cmp	r0, #0
  40aef4:	d192      	bne.n	40ae1c <__sfvwrite_r+0xfc>
  40aef6:	46c2      	mov	sl, r8
  40aef8:	e771      	b.n	40adde <__sfvwrite_r+0xbe>
  40aefa:	465a      	mov	r2, fp
  40aefc:	4629      	mov	r1, r5
  40aefe:	f000 fc5f 	bl	40b7c0 <memmove>
  40af02:	68a2      	ldr	r2, [r4, #8]
  40af04:	6823      	ldr	r3, [r4, #0]
  40af06:	eba2 020b 	sub.w	r2, r2, fp
  40af0a:	445b      	add	r3, fp
  40af0c:	60a2      	str	r2, [r4, #8]
  40af0e:	6023      	str	r3, [r4, #0]
  40af10:	e7af      	b.n	40ae72 <__sfvwrite_r+0x152>
  40af12:	6820      	ldr	r0, [r4, #0]
  40af14:	46b8      	mov	r8, r7
  40af16:	46ba      	mov	sl, r7
  40af18:	46bb      	mov	fp, r7
  40af1a:	e755      	b.n	40adc8 <__sfvwrite_r+0xa8>
  40af1c:	6962      	ldr	r2, [r4, #20]
  40af1e:	6820      	ldr	r0, [r4, #0]
  40af20:	6921      	ldr	r1, [r4, #16]
  40af22:	eb02 0842 	add.w	r8, r2, r2, lsl #1
  40af26:	eba0 0a01 	sub.w	sl, r0, r1
  40af2a:	eb08 78d8 	add.w	r8, r8, r8, lsr #31
  40af2e:	f10a 0001 	add.w	r0, sl, #1
  40af32:	ea4f 0868 	mov.w	r8, r8, asr #1
  40af36:	4438      	add	r0, r7
  40af38:	4540      	cmp	r0, r8
  40af3a:	4642      	mov	r2, r8
  40af3c:	bf84      	itt	hi
  40af3e:	4680      	movhi	r8, r0
  40af40:	4642      	movhi	r2, r8
  40af42:	055b      	lsls	r3, r3, #21
  40af44:	d544      	bpl.n	40afd0 <__sfvwrite_r+0x2b0>
  40af46:	4611      	mov	r1, r2
  40af48:	9800      	ldr	r0, [sp, #0]
  40af4a:	f000 f921 	bl	40b190 <_malloc_r>
  40af4e:	4683      	mov	fp, r0
  40af50:	2800      	cmp	r0, #0
  40af52:	d055      	beq.n	40b000 <__sfvwrite_r+0x2e0>
  40af54:	4652      	mov	r2, sl
  40af56:	6921      	ldr	r1, [r4, #16]
  40af58:	f7fe fa68 	bl	40942c <memcpy>
  40af5c:	89a3      	ldrh	r3, [r4, #12]
  40af5e:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
  40af62:	f043 0380 	orr.w	r3, r3, #128	; 0x80
  40af66:	81a3      	strh	r3, [r4, #12]
  40af68:	eb0b 000a 	add.w	r0, fp, sl
  40af6c:	eba8 030a 	sub.w	r3, r8, sl
  40af70:	f8c4 b010 	str.w	fp, [r4, #16]
  40af74:	f8c4 8014 	str.w	r8, [r4, #20]
  40af78:	6020      	str	r0, [r4, #0]
  40af7a:	60a3      	str	r3, [r4, #8]
  40af7c:	46b8      	mov	r8, r7
  40af7e:	46ba      	mov	sl, r7
  40af80:	46bb      	mov	fp, r7
  40af82:	e721      	b.n	40adc8 <__sfvwrite_r+0xa8>
  40af84:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
  40af88:	42b9      	cmp	r1, r7
  40af8a:	bf28      	it	cs
  40af8c:	4639      	movcs	r1, r7
  40af8e:	464a      	mov	r2, r9
  40af90:	fb91 f1f3 	sdiv	r1, r1, r3
  40af94:	9800      	ldr	r0, [sp, #0]
  40af96:	6a66      	ldr	r6, [r4, #36]	; 0x24
  40af98:	fb03 f301 	mul.w	r3, r3, r1
  40af9c:	69e1      	ldr	r1, [r4, #28]
  40af9e:	47b0      	blx	r6
  40afa0:	f1b0 0a00 	subs.w	sl, r0, #0
  40afa4:	f73f af1b 	bgt.w	40adde <__sfvwrite_r+0xbe>
  40afa8:	e738      	b.n	40ae1c <__sfvwrite_r+0xfc>
  40afaa:	461a      	mov	r2, r3
  40afac:	4629      	mov	r1, r5
  40afae:	9301      	str	r3, [sp, #4]
  40afb0:	f000 fc06 	bl	40b7c0 <memmove>
  40afb4:	6822      	ldr	r2, [r4, #0]
  40afb6:	9b01      	ldr	r3, [sp, #4]
  40afb8:	9800      	ldr	r0, [sp, #0]
  40afba:	441a      	add	r2, r3
  40afbc:	6022      	str	r2, [r4, #0]
  40afbe:	4621      	mov	r1, r4
  40afc0:	f7ff fc4a 	bl	40a858 <_fflush_r>
  40afc4:	9b01      	ldr	r3, [sp, #4]
  40afc6:	2800      	cmp	r0, #0
  40afc8:	f47f af28 	bne.w	40ae1c <__sfvwrite_r+0xfc>
  40afcc:	461f      	mov	r7, r3
  40afce:	e750      	b.n	40ae72 <__sfvwrite_r+0x152>
  40afd0:	9800      	ldr	r0, [sp, #0]
  40afd2:	f000 fc65 	bl	40b8a0 <_realloc_r>
  40afd6:	4683      	mov	fp, r0
  40afd8:	2800      	cmp	r0, #0
  40afda:	d1c5      	bne.n	40af68 <__sfvwrite_r+0x248>
  40afdc:	9d00      	ldr	r5, [sp, #0]
  40afde:	6921      	ldr	r1, [r4, #16]
  40afe0:	4628      	mov	r0, r5
  40afe2:	f7ff fdb7 	bl	40ab54 <_free_r>
  40afe6:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
  40afea:	220c      	movs	r2, #12
  40afec:	f023 0380 	bic.w	r3, r3, #128	; 0x80
  40aff0:	602a      	str	r2, [r5, #0]
  40aff2:	e715      	b.n	40ae20 <__sfvwrite_r+0x100>
  40aff4:	f106 0901 	add.w	r9, r6, #1
  40aff8:	e722      	b.n	40ae40 <__sfvwrite_r+0x120>
  40affa:	f04f 30ff 	mov.w	r0, #4294967295
  40affe:	e6bf      	b.n	40ad80 <__sfvwrite_r+0x60>
  40b000:	9a00      	ldr	r2, [sp, #0]
  40b002:	230c      	movs	r3, #12
  40b004:	6013      	str	r3, [r2, #0]
  40b006:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
  40b00a:	e709      	b.n	40ae20 <__sfvwrite_r+0x100>
  40b00c:	7ffffc00 	.word	0x7ffffc00

0040b010 <_fwalk_reent>:
  40b010:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
  40b014:	f510 7738 	adds.w	r7, r0, #736	; 0x2e0
  40b018:	d01f      	beq.n	40b05a <_fwalk_reent+0x4a>
  40b01a:	4688      	mov	r8, r1
  40b01c:	4606      	mov	r6, r0
  40b01e:	f04f 0900 	mov.w	r9, #0
  40b022:	687d      	ldr	r5, [r7, #4]
  40b024:	68bc      	ldr	r4, [r7, #8]
  40b026:	3d01      	subs	r5, #1
  40b028:	d411      	bmi.n	40b04e <_fwalk_reent+0x3e>
  40b02a:	89a3      	ldrh	r3, [r4, #12]
  40b02c:	2b01      	cmp	r3, #1
  40b02e:	f105 35ff 	add.w	r5, r5, #4294967295
  40b032:	d908      	bls.n	40b046 <_fwalk_reent+0x36>
  40b034:	f9b4 300e 	ldrsh.w	r3, [r4, #14]
  40b038:	3301      	adds	r3, #1
  40b03a:	4621      	mov	r1, r4
  40b03c:	4630      	mov	r0, r6
  40b03e:	d002      	beq.n	40b046 <_fwalk_reent+0x36>
  40b040:	47c0      	blx	r8
  40b042:	ea49 0900 	orr.w	r9, r9, r0
  40b046:	1c6b      	adds	r3, r5, #1
  40b048:	f104 0468 	add.w	r4, r4, #104	; 0x68
  40b04c:	d1ed      	bne.n	40b02a <_fwalk_reent+0x1a>
  40b04e:	683f      	ldr	r7, [r7, #0]
  40b050:	2f00      	cmp	r7, #0
  40b052:	d1e6      	bne.n	40b022 <_fwalk_reent+0x12>
  40b054:	4648      	mov	r0, r9
  40b056:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
  40b05a:	46b9      	mov	r9, r7
  40b05c:	4648      	mov	r0, r9
  40b05e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
  40b062:	bf00      	nop

0040b064 <__locale_mb_cur_max>:
  40b064:	4b04      	ldr	r3, [pc, #16]	; (40b078 <__locale_mb_cur_max+0x14>)
  40b066:	4a05      	ldr	r2, [pc, #20]	; (40b07c <__locale_mb_cur_max+0x18>)
  40b068:	681b      	ldr	r3, [r3, #0]
  40b06a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
  40b06c:	2b00      	cmp	r3, #0
  40b06e:	bf08      	it	eq
  40b070:	4613      	moveq	r3, r2
  40b072:	f893 0128 	ldrb.w	r0, [r3, #296]	; 0x128
  40b076:	4770      	bx	lr
  40b078:	20400048 	.word	0x20400048
  40b07c:	2040047c 	.word	0x2040047c

0040b080 <__retarget_lock_init_recursive>:
  40b080:	4770      	bx	lr
  40b082:	bf00      	nop

0040b084 <__retarget_lock_close_recursive>:
  40b084:	4770      	bx	lr
  40b086:	bf00      	nop

0040b088 <__retarget_lock_acquire_recursive>:
  40b088:	4770      	bx	lr
  40b08a:	bf00      	nop

0040b08c <__retarget_lock_release_recursive>:
  40b08c:	4770      	bx	lr
  40b08e:	bf00      	nop

0040b090 <__swhatbuf_r>:
  40b090:	b570      	push	{r4, r5, r6, lr}
  40b092:	460c      	mov	r4, r1
  40b094:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
  40b098:	2900      	cmp	r1, #0
  40b09a:	b090      	sub	sp, #64	; 0x40
  40b09c:	4615      	mov	r5, r2
  40b09e:	461e      	mov	r6, r3
  40b0a0:	db14      	blt.n	40b0cc <__swhatbuf_r+0x3c>
  40b0a2:	aa01      	add	r2, sp, #4
  40b0a4:	f000 ff74 	bl	40bf90 <_fstat_r>
  40b0a8:	2800      	cmp	r0, #0
  40b0aa:	db0f      	blt.n	40b0cc <__swhatbuf_r+0x3c>
  40b0ac:	9a02      	ldr	r2, [sp, #8]
  40b0ae:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
  40b0b2:	f5a2 5200 	sub.w	r2, r2, #8192	; 0x2000
  40b0b6:	fab2 f282 	clz	r2, r2
  40b0ba:	0952      	lsrs	r2, r2, #5
  40b0bc:	f44f 6380 	mov.w	r3, #1024	; 0x400
  40b0c0:	f44f 6000 	mov.w	r0, #2048	; 0x800
  40b0c4:	6032      	str	r2, [r6, #0]
  40b0c6:	602b      	str	r3, [r5, #0]
  40b0c8:	b010      	add	sp, #64	; 0x40
  40b0ca:	bd70      	pop	{r4, r5, r6, pc}
  40b0cc:	89a2      	ldrh	r2, [r4, #12]
  40b0ce:	2300      	movs	r3, #0
  40b0d0:	f012 0080 	ands.w	r0, r2, #128	; 0x80
  40b0d4:	6033      	str	r3, [r6, #0]
  40b0d6:	d004      	beq.n	40b0e2 <__swhatbuf_r+0x52>
  40b0d8:	2240      	movs	r2, #64	; 0x40
  40b0da:	4618      	mov	r0, r3
  40b0dc:	602a      	str	r2, [r5, #0]
  40b0de:	b010      	add	sp, #64	; 0x40
  40b0e0:	bd70      	pop	{r4, r5, r6, pc}
  40b0e2:	f44f 6380 	mov.w	r3, #1024	; 0x400
  40b0e6:	602b      	str	r3, [r5, #0]
  40b0e8:	b010      	add	sp, #64	; 0x40
  40b0ea:	bd70      	pop	{r4, r5, r6, pc}

0040b0ec <__smakebuf_r>:
  40b0ec:	898a      	ldrh	r2, [r1, #12]
  40b0ee:	0792      	lsls	r2, r2, #30
  40b0f0:	460b      	mov	r3, r1
  40b0f2:	d506      	bpl.n	40b102 <__smakebuf_r+0x16>
  40b0f4:	f101 0243 	add.w	r2, r1, #67	; 0x43
  40b0f8:	2101      	movs	r1, #1
  40b0fa:	601a      	str	r2, [r3, #0]
  40b0fc:	611a      	str	r2, [r3, #16]
  40b0fe:	6159      	str	r1, [r3, #20]
  40b100:	4770      	bx	lr
  40b102:	b5f0      	push	{r4, r5, r6, r7, lr}
  40b104:	b083      	sub	sp, #12
  40b106:	ab01      	add	r3, sp, #4
  40b108:	466a      	mov	r2, sp
  40b10a:	460c      	mov	r4, r1
  40b10c:	4606      	mov	r6, r0
  40b10e:	f7ff ffbf 	bl	40b090 <__swhatbuf_r>
  40b112:	9900      	ldr	r1, [sp, #0]
  40b114:	4605      	mov	r5, r0
  40b116:	4630      	mov	r0, r6
  40b118:	f000 f83a 	bl	40b190 <_malloc_r>
  40b11c:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
  40b120:	b1d8      	cbz	r0, 40b15a <__smakebuf_r+0x6e>
  40b122:	9a01      	ldr	r2, [sp, #4]
  40b124:	4f15      	ldr	r7, [pc, #84]	; (40b17c <__smakebuf_r+0x90>)
  40b126:	9900      	ldr	r1, [sp, #0]
  40b128:	63f7      	str	r7, [r6, #60]	; 0x3c
  40b12a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
  40b12e:	81a3      	strh	r3, [r4, #12]
  40b130:	6020      	str	r0, [r4, #0]
  40b132:	6120      	str	r0, [r4, #16]
  40b134:	6161      	str	r1, [r4, #20]
  40b136:	b91a      	cbnz	r2, 40b140 <__smakebuf_r+0x54>
  40b138:	432b      	orrs	r3, r5
  40b13a:	81a3      	strh	r3, [r4, #12]
  40b13c:	b003      	add	sp, #12
  40b13e:	bdf0      	pop	{r4, r5, r6, r7, pc}
  40b140:	4630      	mov	r0, r6
  40b142:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
  40b146:	f000 ff37 	bl	40bfb8 <_isatty_r>
  40b14a:	b1a0      	cbz	r0, 40b176 <__smakebuf_r+0x8a>
  40b14c:	89a3      	ldrh	r3, [r4, #12]
  40b14e:	f023 0303 	bic.w	r3, r3, #3
  40b152:	f043 0301 	orr.w	r3, r3, #1
  40b156:	b21b      	sxth	r3, r3
  40b158:	e7ee      	b.n	40b138 <__smakebuf_r+0x4c>
  40b15a:	059a      	lsls	r2, r3, #22
  40b15c:	d4ee      	bmi.n	40b13c <__smakebuf_r+0x50>
  40b15e:	f023 0303 	bic.w	r3, r3, #3
  40b162:	f104 0243 	add.w	r2, r4, #67	; 0x43
  40b166:	f043 0302 	orr.w	r3, r3, #2
  40b16a:	2101      	movs	r1, #1
  40b16c:	81a3      	strh	r3, [r4, #12]
  40b16e:	6022      	str	r2, [r4, #0]
  40b170:	6122      	str	r2, [r4, #16]
  40b172:	6161      	str	r1, [r4, #20]
  40b174:	e7e2      	b.n	40b13c <__smakebuf_r+0x50>
  40b176:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
  40b17a:	e7dd      	b.n	40b138 <__smakebuf_r+0x4c>
  40b17c:	0040a8ad 	.word	0x0040a8ad

0040b180 <malloc>:
  40b180:	4b02      	ldr	r3, [pc, #8]	; (40b18c <malloc+0xc>)
  40b182:	4601      	mov	r1, r0
  40b184:	6818      	ldr	r0, [r3, #0]
  40b186:	f000 b803 	b.w	40b190 <_malloc_r>
  40b18a:	bf00      	nop
  40b18c:	20400048 	.word	0x20400048

0040b190 <_malloc_r>:
  40b190:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  40b194:	f101 060b 	add.w	r6, r1, #11
  40b198:	2e16      	cmp	r6, #22
  40b19a:	b083      	sub	sp, #12
  40b19c:	4605      	mov	r5, r0
  40b19e:	f240 809e 	bls.w	40b2de <_malloc_r+0x14e>
  40b1a2:	f036 0607 	bics.w	r6, r6, #7
  40b1a6:	f100 80bd 	bmi.w	40b324 <_malloc_r+0x194>
  40b1aa:	42b1      	cmp	r1, r6
  40b1ac:	f200 80ba 	bhi.w	40b324 <_malloc_r+0x194>
  40b1b0:	f000 fb6a 	bl	40b888 <__malloc_lock>
  40b1b4:	f5b6 7ffc 	cmp.w	r6, #504	; 0x1f8
  40b1b8:	f0c0 8293 	bcc.w	40b6e2 <_malloc_r+0x552>
  40b1bc:	0a73      	lsrs	r3, r6, #9
  40b1be:	f000 80b8 	beq.w	40b332 <_malloc_r+0x1a2>
  40b1c2:	2b04      	cmp	r3, #4
  40b1c4:	f200 8179 	bhi.w	40b4ba <_malloc_r+0x32a>
  40b1c8:	09b3      	lsrs	r3, r6, #6
  40b1ca:	f103 0039 	add.w	r0, r3, #57	; 0x39
  40b1ce:	f103 0e38 	add.w	lr, r3, #56	; 0x38
  40b1d2:	00c3      	lsls	r3, r0, #3
  40b1d4:	4fbf      	ldr	r7, [pc, #764]	; (40b4d4 <_malloc_r+0x344>)
  40b1d6:	443b      	add	r3, r7
  40b1d8:	f1a3 0108 	sub.w	r1, r3, #8
  40b1dc:	685c      	ldr	r4, [r3, #4]
  40b1de:	42a1      	cmp	r1, r4
  40b1e0:	d106      	bne.n	40b1f0 <_malloc_r+0x60>
  40b1e2:	e00c      	b.n	40b1fe <_malloc_r+0x6e>
  40b1e4:	2a00      	cmp	r2, #0
  40b1e6:	f280 80aa 	bge.w	40b33e <_malloc_r+0x1ae>
  40b1ea:	68e4      	ldr	r4, [r4, #12]
  40b1ec:	42a1      	cmp	r1, r4
  40b1ee:	d006      	beq.n	40b1fe <_malloc_r+0x6e>
  40b1f0:	6863      	ldr	r3, [r4, #4]
  40b1f2:	f023 0303 	bic.w	r3, r3, #3
  40b1f6:	1b9a      	subs	r2, r3, r6
  40b1f8:	2a0f      	cmp	r2, #15
  40b1fa:	ddf3      	ble.n	40b1e4 <_malloc_r+0x54>
  40b1fc:	4670      	mov	r0, lr
  40b1fe:	693c      	ldr	r4, [r7, #16]
  40b200:	f8df e2e4 	ldr.w	lr, [pc, #740]	; 40b4e8 <_malloc_r+0x358>
  40b204:	4574      	cmp	r4, lr
  40b206:	f000 81ab 	beq.w	40b560 <_malloc_r+0x3d0>
  40b20a:	6863      	ldr	r3, [r4, #4]
  40b20c:	f023 0303 	bic.w	r3, r3, #3
  40b210:	1b9a      	subs	r2, r3, r6
  40b212:	2a0f      	cmp	r2, #15
  40b214:	f300 8190 	bgt.w	40b538 <_malloc_r+0x3a8>
  40b218:	2a00      	cmp	r2, #0
  40b21a:	f8c7 e014 	str.w	lr, [r7, #20]
  40b21e:	f8c7 e010 	str.w	lr, [r7, #16]
  40b222:	f280 809d 	bge.w	40b360 <_malloc_r+0x1d0>
  40b226:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
  40b22a:	f080 8161 	bcs.w	40b4f0 <_malloc_r+0x360>
  40b22e:	08db      	lsrs	r3, r3, #3
  40b230:	f103 0c01 	add.w	ip, r3, #1
  40b234:	1099      	asrs	r1, r3, #2
  40b236:	687a      	ldr	r2, [r7, #4]
  40b238:	f857 803c 	ldr.w	r8, [r7, ip, lsl #3]
  40b23c:	f8c4 8008 	str.w	r8, [r4, #8]
  40b240:	2301      	movs	r3, #1
  40b242:	408b      	lsls	r3, r1
  40b244:	eb07 01cc 	add.w	r1, r7, ip, lsl #3
  40b248:	4313      	orrs	r3, r2
  40b24a:	3908      	subs	r1, #8
  40b24c:	60e1      	str	r1, [r4, #12]
  40b24e:	607b      	str	r3, [r7, #4]
  40b250:	f847 403c 	str.w	r4, [r7, ip, lsl #3]
  40b254:	f8c8 400c 	str.w	r4, [r8, #12]
  40b258:	1082      	asrs	r2, r0, #2
  40b25a:	2401      	movs	r4, #1
  40b25c:	4094      	lsls	r4, r2
  40b25e:	429c      	cmp	r4, r3
  40b260:	f200 808b 	bhi.w	40b37a <_malloc_r+0x1ea>
  40b264:	421c      	tst	r4, r3
  40b266:	d106      	bne.n	40b276 <_malloc_r+0xe6>
  40b268:	f020 0003 	bic.w	r0, r0, #3
  40b26c:	0064      	lsls	r4, r4, #1
  40b26e:	421c      	tst	r4, r3
  40b270:	f100 0004 	add.w	r0, r0, #4
  40b274:	d0fa      	beq.n	40b26c <_malloc_r+0xdc>
  40b276:	eb07 09c0 	add.w	r9, r7, r0, lsl #3
  40b27a:	46cc      	mov	ip, r9
  40b27c:	4680      	mov	r8, r0
  40b27e:	f8dc 300c 	ldr.w	r3, [ip, #12]
  40b282:	459c      	cmp	ip, r3
  40b284:	d107      	bne.n	40b296 <_malloc_r+0x106>
  40b286:	e16d      	b.n	40b564 <_malloc_r+0x3d4>
  40b288:	2a00      	cmp	r2, #0
  40b28a:	f280 817b 	bge.w	40b584 <_malloc_r+0x3f4>
  40b28e:	68db      	ldr	r3, [r3, #12]
  40b290:	459c      	cmp	ip, r3
  40b292:	f000 8167 	beq.w	40b564 <_malloc_r+0x3d4>
  40b296:	6859      	ldr	r1, [r3, #4]
  40b298:	f021 0103 	bic.w	r1, r1, #3
  40b29c:	1b8a      	subs	r2, r1, r6
  40b29e:	2a0f      	cmp	r2, #15
  40b2a0:	ddf2      	ble.n	40b288 <_malloc_r+0xf8>
  40b2a2:	f8d3 c00c 	ldr.w	ip, [r3, #12]
  40b2a6:	f8d3 8008 	ldr.w	r8, [r3, #8]
  40b2aa:	9300      	str	r3, [sp, #0]
  40b2ac:	199c      	adds	r4, r3, r6
  40b2ae:	4628      	mov	r0, r5
  40b2b0:	f046 0601 	orr.w	r6, r6, #1
  40b2b4:	f042 0501 	orr.w	r5, r2, #1
  40b2b8:	605e      	str	r6, [r3, #4]
  40b2ba:	f8c8 c00c 	str.w	ip, [r8, #12]
  40b2be:	f8cc 8008 	str.w	r8, [ip, #8]
  40b2c2:	617c      	str	r4, [r7, #20]
  40b2c4:	613c      	str	r4, [r7, #16]
  40b2c6:	f8c4 e00c 	str.w	lr, [r4, #12]
  40b2ca:	f8c4 e008 	str.w	lr, [r4, #8]
  40b2ce:	6065      	str	r5, [r4, #4]
  40b2d0:	505a      	str	r2, [r3, r1]
  40b2d2:	f000 fadf 	bl	40b894 <__malloc_unlock>
  40b2d6:	9b00      	ldr	r3, [sp, #0]
  40b2d8:	f103 0408 	add.w	r4, r3, #8
  40b2dc:	e01e      	b.n	40b31c <_malloc_r+0x18c>
  40b2de:	2910      	cmp	r1, #16
  40b2e0:	d820      	bhi.n	40b324 <_malloc_r+0x194>
  40b2e2:	f000 fad1 	bl	40b888 <__malloc_lock>
  40b2e6:	2610      	movs	r6, #16
  40b2e8:	2318      	movs	r3, #24
  40b2ea:	2002      	movs	r0, #2
  40b2ec:	4f79      	ldr	r7, [pc, #484]	; (40b4d4 <_malloc_r+0x344>)
  40b2ee:	443b      	add	r3, r7
  40b2f0:	f1a3 0208 	sub.w	r2, r3, #8
  40b2f4:	685c      	ldr	r4, [r3, #4]
  40b2f6:	4294      	cmp	r4, r2
  40b2f8:	f000 813d 	beq.w	40b576 <_malloc_r+0x3e6>
  40b2fc:	6863      	ldr	r3, [r4, #4]
  40b2fe:	68e1      	ldr	r1, [r4, #12]
  40b300:	68a6      	ldr	r6, [r4, #8]
  40b302:	f023 0303 	bic.w	r3, r3, #3
  40b306:	4423      	add	r3, r4
  40b308:	4628      	mov	r0, r5
  40b30a:	685a      	ldr	r2, [r3, #4]
  40b30c:	60f1      	str	r1, [r6, #12]
  40b30e:	f042 0201 	orr.w	r2, r2, #1
  40b312:	608e      	str	r6, [r1, #8]
  40b314:	605a      	str	r2, [r3, #4]
  40b316:	f000 fabd 	bl	40b894 <__malloc_unlock>
  40b31a:	3408      	adds	r4, #8
  40b31c:	4620      	mov	r0, r4
  40b31e:	b003      	add	sp, #12
  40b320:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  40b324:	2400      	movs	r4, #0
  40b326:	230c      	movs	r3, #12
  40b328:	4620      	mov	r0, r4
  40b32a:	602b      	str	r3, [r5, #0]
  40b32c:	b003      	add	sp, #12
  40b32e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  40b332:	2040      	movs	r0, #64	; 0x40
  40b334:	f44f 7300 	mov.w	r3, #512	; 0x200
  40b338:	f04f 0e3f 	mov.w	lr, #63	; 0x3f
  40b33c:	e74a      	b.n	40b1d4 <_malloc_r+0x44>
  40b33e:	4423      	add	r3, r4
  40b340:	68e1      	ldr	r1, [r4, #12]
  40b342:	685a      	ldr	r2, [r3, #4]
  40b344:	68a6      	ldr	r6, [r4, #8]
  40b346:	f042 0201 	orr.w	r2, r2, #1
  40b34a:	60f1      	str	r1, [r6, #12]
  40b34c:	4628      	mov	r0, r5
  40b34e:	608e      	str	r6, [r1, #8]
  40b350:	605a      	str	r2, [r3, #4]
  40b352:	f000 fa9f 	bl	40b894 <__malloc_unlock>
  40b356:	3408      	adds	r4, #8
  40b358:	4620      	mov	r0, r4
  40b35a:	b003      	add	sp, #12
  40b35c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  40b360:	4423      	add	r3, r4
  40b362:	4628      	mov	r0, r5
  40b364:	685a      	ldr	r2, [r3, #4]
  40b366:	f042 0201 	orr.w	r2, r2, #1
  40b36a:	605a      	str	r2, [r3, #4]
  40b36c:	f000 fa92 	bl	40b894 <__malloc_unlock>
  40b370:	3408      	adds	r4, #8
  40b372:	4620      	mov	r0, r4
  40b374:	b003      	add	sp, #12
  40b376:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  40b37a:	68bc      	ldr	r4, [r7, #8]
  40b37c:	6863      	ldr	r3, [r4, #4]
  40b37e:	f023 0803 	bic.w	r8, r3, #3
  40b382:	45b0      	cmp	r8, r6
  40b384:	d304      	bcc.n	40b390 <_malloc_r+0x200>
  40b386:	eba8 0306 	sub.w	r3, r8, r6
  40b38a:	2b0f      	cmp	r3, #15
  40b38c:	f300 8085 	bgt.w	40b49a <_malloc_r+0x30a>
  40b390:	f8df 9158 	ldr.w	r9, [pc, #344]	; 40b4ec <_malloc_r+0x35c>
  40b394:	4b50      	ldr	r3, [pc, #320]	; (40b4d8 <_malloc_r+0x348>)
  40b396:	f8d9 2000 	ldr.w	r2, [r9]
  40b39a:	681b      	ldr	r3, [r3, #0]
  40b39c:	3201      	adds	r2, #1
  40b39e:	4433      	add	r3, r6
  40b3a0:	eb04 0a08 	add.w	sl, r4, r8
  40b3a4:	f000 8155 	beq.w	40b652 <_malloc_r+0x4c2>
  40b3a8:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
  40b3ac:	330f      	adds	r3, #15
  40b3ae:	f423 6b7f 	bic.w	fp, r3, #4080	; 0xff0
  40b3b2:	f02b 0b0f 	bic.w	fp, fp, #15
  40b3b6:	4659      	mov	r1, fp
  40b3b8:	4628      	mov	r0, r5
  40b3ba:	f000 fc17 	bl	40bbec <_sbrk_r>
  40b3be:	1c41      	adds	r1, r0, #1
  40b3c0:	4602      	mov	r2, r0
  40b3c2:	f000 80fc 	beq.w	40b5be <_malloc_r+0x42e>
  40b3c6:	4582      	cmp	sl, r0
  40b3c8:	f200 80f7 	bhi.w	40b5ba <_malloc_r+0x42a>
  40b3cc:	4b43      	ldr	r3, [pc, #268]	; (40b4dc <_malloc_r+0x34c>)
  40b3ce:	6819      	ldr	r1, [r3, #0]
  40b3d0:	4459      	add	r1, fp
  40b3d2:	6019      	str	r1, [r3, #0]
  40b3d4:	f000 814d 	beq.w	40b672 <_malloc_r+0x4e2>
  40b3d8:	f8d9 0000 	ldr.w	r0, [r9]
  40b3dc:	3001      	adds	r0, #1
  40b3de:	bf1b      	ittet	ne
  40b3e0:	eba2 0a0a 	subne.w	sl, r2, sl
  40b3e4:	4451      	addne	r1, sl
  40b3e6:	f8c9 2000 	streq.w	r2, [r9]
  40b3ea:	6019      	strne	r1, [r3, #0]
  40b3ec:	f012 0107 	ands.w	r1, r2, #7
  40b3f0:	f000 8115 	beq.w	40b61e <_malloc_r+0x48e>
  40b3f4:	f1c1 0008 	rsb	r0, r1, #8
  40b3f8:	f5c1 5180 	rsb	r1, r1, #4096	; 0x1000
  40b3fc:	4402      	add	r2, r0
  40b3fe:	3108      	adds	r1, #8
  40b400:	eb02 090b 	add.w	r9, r2, fp
  40b404:	f3c9 090b 	ubfx	r9, r9, #0, #12
  40b408:	eba1 0909 	sub.w	r9, r1, r9
  40b40c:	4649      	mov	r1, r9
  40b40e:	4628      	mov	r0, r5
  40b410:	9301      	str	r3, [sp, #4]
  40b412:	9200      	str	r2, [sp, #0]
  40b414:	f000 fbea 	bl	40bbec <_sbrk_r>
  40b418:	1c43      	adds	r3, r0, #1
  40b41a:	e89d 000c 	ldmia.w	sp, {r2, r3}
  40b41e:	f000 8143 	beq.w	40b6a8 <_malloc_r+0x518>
  40b422:	1a80      	subs	r0, r0, r2
  40b424:	4448      	add	r0, r9
  40b426:	f040 0001 	orr.w	r0, r0, #1
  40b42a:	6819      	ldr	r1, [r3, #0]
  40b42c:	60ba      	str	r2, [r7, #8]
  40b42e:	4449      	add	r1, r9
  40b430:	42bc      	cmp	r4, r7
  40b432:	6050      	str	r0, [r2, #4]
  40b434:	6019      	str	r1, [r3, #0]
  40b436:	d017      	beq.n	40b468 <_malloc_r+0x2d8>
  40b438:	f1b8 0f0f 	cmp.w	r8, #15
  40b43c:	f240 80fb 	bls.w	40b636 <_malloc_r+0x4a6>
  40b440:	6860      	ldr	r0, [r4, #4]
  40b442:	f1a8 020c 	sub.w	r2, r8, #12
  40b446:	f022 0207 	bic.w	r2, r2, #7
  40b44a:	eb04 0e02 	add.w	lr, r4, r2
  40b44e:	f000 0001 	and.w	r0, r0, #1
  40b452:	f04f 0c05 	mov.w	ip, #5
  40b456:	4310      	orrs	r0, r2
  40b458:	2a0f      	cmp	r2, #15
  40b45a:	6060      	str	r0, [r4, #4]
  40b45c:	f8ce c004 	str.w	ip, [lr, #4]
  40b460:	f8ce c008 	str.w	ip, [lr, #8]
  40b464:	f200 8117 	bhi.w	40b696 <_malloc_r+0x506>
  40b468:	4b1d      	ldr	r3, [pc, #116]	; (40b4e0 <_malloc_r+0x350>)
  40b46a:	68bc      	ldr	r4, [r7, #8]
  40b46c:	681a      	ldr	r2, [r3, #0]
  40b46e:	4291      	cmp	r1, r2
  40b470:	bf88      	it	hi
  40b472:	6019      	strhi	r1, [r3, #0]
  40b474:	4b1b      	ldr	r3, [pc, #108]	; (40b4e4 <_malloc_r+0x354>)
  40b476:	681a      	ldr	r2, [r3, #0]
  40b478:	4291      	cmp	r1, r2
  40b47a:	6862      	ldr	r2, [r4, #4]
  40b47c:	bf88      	it	hi
  40b47e:	6019      	strhi	r1, [r3, #0]
  40b480:	f022 0203 	bic.w	r2, r2, #3
  40b484:	4296      	cmp	r6, r2
  40b486:	eba2 0306 	sub.w	r3, r2, r6
  40b48a:	d801      	bhi.n	40b490 <_malloc_r+0x300>
  40b48c:	2b0f      	cmp	r3, #15
  40b48e:	dc04      	bgt.n	40b49a <_malloc_r+0x30a>
  40b490:	4628      	mov	r0, r5
  40b492:	f000 f9ff 	bl	40b894 <__malloc_unlock>
  40b496:	2400      	movs	r4, #0
  40b498:	e740      	b.n	40b31c <_malloc_r+0x18c>
  40b49a:	19a2      	adds	r2, r4, r6
  40b49c:	f043 0301 	orr.w	r3, r3, #1
  40b4a0:	f046 0601 	orr.w	r6, r6, #1
  40b4a4:	6066      	str	r6, [r4, #4]
  40b4a6:	4628      	mov	r0, r5
  40b4a8:	60ba      	str	r2, [r7, #8]
  40b4aa:	6053      	str	r3, [r2, #4]
  40b4ac:	f000 f9f2 	bl	40b894 <__malloc_unlock>
  40b4b0:	3408      	adds	r4, #8
  40b4b2:	4620      	mov	r0, r4
  40b4b4:	b003      	add	sp, #12
  40b4b6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  40b4ba:	2b14      	cmp	r3, #20
  40b4bc:	d971      	bls.n	40b5a2 <_malloc_r+0x412>
  40b4be:	2b54      	cmp	r3, #84	; 0x54
  40b4c0:	f200 80a3 	bhi.w	40b60a <_malloc_r+0x47a>
  40b4c4:	0b33      	lsrs	r3, r6, #12
  40b4c6:	f103 006f 	add.w	r0, r3, #111	; 0x6f
  40b4ca:	f103 0e6e 	add.w	lr, r3, #110	; 0x6e
  40b4ce:	00c3      	lsls	r3, r0, #3
  40b4d0:	e680      	b.n	40b1d4 <_malloc_r+0x44>
  40b4d2:	bf00      	nop
  40b4d4:	204005e8 	.word	0x204005e8
  40b4d8:	2040c9f4 	.word	0x2040c9f4
  40b4dc:	2040c9c4 	.word	0x2040c9c4
  40b4e0:	2040c9ec 	.word	0x2040c9ec
  40b4e4:	2040c9f0 	.word	0x2040c9f0
  40b4e8:	204005f0 	.word	0x204005f0
  40b4ec:	204009f0 	.word	0x204009f0
  40b4f0:	0a5a      	lsrs	r2, r3, #9
  40b4f2:	2a04      	cmp	r2, #4
  40b4f4:	d95b      	bls.n	40b5ae <_malloc_r+0x41e>
  40b4f6:	2a14      	cmp	r2, #20
  40b4f8:	f200 80ae 	bhi.w	40b658 <_malloc_r+0x4c8>
  40b4fc:	f102 015c 	add.w	r1, r2, #92	; 0x5c
  40b500:	00c9      	lsls	r1, r1, #3
  40b502:	325b      	adds	r2, #91	; 0x5b
  40b504:	eb07 0c01 	add.w	ip, r7, r1
  40b508:	5879      	ldr	r1, [r7, r1]
  40b50a:	f1ac 0c08 	sub.w	ip, ip, #8
  40b50e:	458c      	cmp	ip, r1
  40b510:	f000 8088 	beq.w	40b624 <_malloc_r+0x494>
  40b514:	684a      	ldr	r2, [r1, #4]
  40b516:	f022 0203 	bic.w	r2, r2, #3
  40b51a:	4293      	cmp	r3, r2
  40b51c:	d273      	bcs.n	40b606 <_malloc_r+0x476>
  40b51e:	6889      	ldr	r1, [r1, #8]
  40b520:	458c      	cmp	ip, r1
  40b522:	d1f7      	bne.n	40b514 <_malloc_r+0x384>
  40b524:	f8dc 200c 	ldr.w	r2, [ip, #12]
  40b528:	687b      	ldr	r3, [r7, #4]
  40b52a:	60e2      	str	r2, [r4, #12]
  40b52c:	f8c4 c008 	str.w	ip, [r4, #8]
  40b530:	6094      	str	r4, [r2, #8]
  40b532:	f8cc 400c 	str.w	r4, [ip, #12]
  40b536:	e68f      	b.n	40b258 <_malloc_r+0xc8>
  40b538:	19a1      	adds	r1, r4, r6
  40b53a:	f046 0c01 	orr.w	ip, r6, #1
  40b53e:	f042 0601 	orr.w	r6, r2, #1
  40b542:	f8c4 c004 	str.w	ip, [r4, #4]
  40b546:	4628      	mov	r0, r5
  40b548:	6179      	str	r1, [r7, #20]
  40b54a:	6139      	str	r1, [r7, #16]
  40b54c:	f8c1 e00c 	str.w	lr, [r1, #12]
  40b550:	f8c1 e008 	str.w	lr, [r1, #8]
  40b554:	604e      	str	r6, [r1, #4]
  40b556:	50e2      	str	r2, [r4, r3]
  40b558:	f000 f99c 	bl	40b894 <__malloc_unlock>
  40b55c:	3408      	adds	r4, #8
  40b55e:	e6dd      	b.n	40b31c <_malloc_r+0x18c>
  40b560:	687b      	ldr	r3, [r7, #4]
  40b562:	e679      	b.n	40b258 <_malloc_r+0xc8>
  40b564:	f108 0801 	add.w	r8, r8, #1
  40b568:	f018 0f03 	tst.w	r8, #3
  40b56c:	f10c 0c08 	add.w	ip, ip, #8
  40b570:	f47f ae85 	bne.w	40b27e <_malloc_r+0xee>
  40b574:	e02d      	b.n	40b5d2 <_malloc_r+0x442>
  40b576:	68dc      	ldr	r4, [r3, #12]
  40b578:	42a3      	cmp	r3, r4
  40b57a:	bf08      	it	eq
  40b57c:	3002      	addeq	r0, #2
  40b57e:	f43f ae3e 	beq.w	40b1fe <_malloc_r+0x6e>
  40b582:	e6bb      	b.n	40b2fc <_malloc_r+0x16c>
  40b584:	4419      	add	r1, r3
  40b586:	461c      	mov	r4, r3
  40b588:	684a      	ldr	r2, [r1, #4]
  40b58a:	68db      	ldr	r3, [r3, #12]
  40b58c:	f854 6f08 	ldr.w	r6, [r4, #8]!
  40b590:	f042 0201 	orr.w	r2, r2, #1
  40b594:	604a      	str	r2, [r1, #4]
  40b596:	4628      	mov	r0, r5
  40b598:	60f3      	str	r3, [r6, #12]
  40b59a:	609e      	str	r6, [r3, #8]
  40b59c:	f000 f97a 	bl	40b894 <__malloc_unlock>
  40b5a0:	e6bc      	b.n	40b31c <_malloc_r+0x18c>
  40b5a2:	f103 005c 	add.w	r0, r3, #92	; 0x5c
  40b5a6:	f103 0e5b 	add.w	lr, r3, #91	; 0x5b
  40b5aa:	00c3      	lsls	r3, r0, #3
  40b5ac:	e612      	b.n	40b1d4 <_malloc_r+0x44>
  40b5ae:	099a      	lsrs	r2, r3, #6
  40b5b0:	f102 0139 	add.w	r1, r2, #57	; 0x39
  40b5b4:	00c9      	lsls	r1, r1, #3
  40b5b6:	3238      	adds	r2, #56	; 0x38
  40b5b8:	e7a4      	b.n	40b504 <_malloc_r+0x374>
  40b5ba:	42bc      	cmp	r4, r7
  40b5bc:	d054      	beq.n	40b668 <_malloc_r+0x4d8>
  40b5be:	68bc      	ldr	r4, [r7, #8]
  40b5c0:	6862      	ldr	r2, [r4, #4]
  40b5c2:	f022 0203 	bic.w	r2, r2, #3
  40b5c6:	e75d      	b.n	40b484 <_malloc_r+0x2f4>
  40b5c8:	f859 3908 	ldr.w	r3, [r9], #-8
  40b5cc:	4599      	cmp	r9, r3
  40b5ce:	f040 8086 	bne.w	40b6de <_malloc_r+0x54e>
  40b5d2:	f010 0f03 	tst.w	r0, #3
  40b5d6:	f100 30ff 	add.w	r0, r0, #4294967295
  40b5da:	d1f5      	bne.n	40b5c8 <_malloc_r+0x438>
  40b5dc:	687b      	ldr	r3, [r7, #4]
  40b5de:	ea23 0304 	bic.w	r3, r3, r4
  40b5e2:	607b      	str	r3, [r7, #4]
  40b5e4:	0064      	lsls	r4, r4, #1
  40b5e6:	429c      	cmp	r4, r3
  40b5e8:	f63f aec7 	bhi.w	40b37a <_malloc_r+0x1ea>
  40b5ec:	2c00      	cmp	r4, #0
  40b5ee:	f43f aec4 	beq.w	40b37a <_malloc_r+0x1ea>
  40b5f2:	421c      	tst	r4, r3
  40b5f4:	4640      	mov	r0, r8
  40b5f6:	f47f ae3e 	bne.w	40b276 <_malloc_r+0xe6>
  40b5fa:	0064      	lsls	r4, r4, #1
  40b5fc:	421c      	tst	r4, r3
  40b5fe:	f100 0004 	add.w	r0, r0, #4
  40b602:	d0fa      	beq.n	40b5fa <_malloc_r+0x46a>
  40b604:	e637      	b.n	40b276 <_malloc_r+0xe6>
  40b606:	468c      	mov	ip, r1
  40b608:	e78c      	b.n	40b524 <_malloc_r+0x394>
  40b60a:	f5b3 7faa 	cmp.w	r3, #340	; 0x154
  40b60e:	d815      	bhi.n	40b63c <_malloc_r+0x4ac>
  40b610:	0bf3      	lsrs	r3, r6, #15
  40b612:	f103 0078 	add.w	r0, r3, #120	; 0x78
  40b616:	f103 0e77 	add.w	lr, r3, #119	; 0x77
  40b61a:	00c3      	lsls	r3, r0, #3
  40b61c:	e5da      	b.n	40b1d4 <_malloc_r+0x44>
  40b61e:	f44f 5180 	mov.w	r1, #4096	; 0x1000
  40b622:	e6ed      	b.n	40b400 <_malloc_r+0x270>
  40b624:	687b      	ldr	r3, [r7, #4]
  40b626:	1092      	asrs	r2, r2, #2
  40b628:	2101      	movs	r1, #1
  40b62a:	fa01 f202 	lsl.w	r2, r1, r2
  40b62e:	4313      	orrs	r3, r2
  40b630:	607b      	str	r3, [r7, #4]
  40b632:	4662      	mov	r2, ip
  40b634:	e779      	b.n	40b52a <_malloc_r+0x39a>
  40b636:	2301      	movs	r3, #1
  40b638:	6053      	str	r3, [r2, #4]
  40b63a:	e729      	b.n	40b490 <_malloc_r+0x300>
  40b63c:	f240 5254 	movw	r2, #1364	; 0x554
  40b640:	4293      	cmp	r3, r2
  40b642:	d822      	bhi.n	40b68a <_malloc_r+0x4fa>
  40b644:	0cb3      	lsrs	r3, r6, #18
  40b646:	f103 007d 	add.w	r0, r3, #125	; 0x7d
  40b64a:	f103 0e7c 	add.w	lr, r3, #124	; 0x7c
  40b64e:	00c3      	lsls	r3, r0, #3
  40b650:	e5c0      	b.n	40b1d4 <_malloc_r+0x44>
  40b652:	f103 0b10 	add.w	fp, r3, #16
  40b656:	e6ae      	b.n	40b3b6 <_malloc_r+0x226>
  40b658:	2a54      	cmp	r2, #84	; 0x54
  40b65a:	d829      	bhi.n	40b6b0 <_malloc_r+0x520>
  40b65c:	0b1a      	lsrs	r2, r3, #12
  40b65e:	f102 016f 	add.w	r1, r2, #111	; 0x6f
  40b662:	00c9      	lsls	r1, r1, #3
  40b664:	326e      	adds	r2, #110	; 0x6e
  40b666:	e74d      	b.n	40b504 <_malloc_r+0x374>
  40b668:	4b20      	ldr	r3, [pc, #128]	; (40b6ec <_malloc_r+0x55c>)
  40b66a:	6819      	ldr	r1, [r3, #0]
  40b66c:	4459      	add	r1, fp
  40b66e:	6019      	str	r1, [r3, #0]
  40b670:	e6b2      	b.n	40b3d8 <_malloc_r+0x248>
  40b672:	f3ca 000b 	ubfx	r0, sl, #0, #12
  40b676:	2800      	cmp	r0, #0
  40b678:	f47f aeae 	bne.w	40b3d8 <_malloc_r+0x248>
  40b67c:	eb08 030b 	add.w	r3, r8, fp
  40b680:	68ba      	ldr	r2, [r7, #8]
  40b682:	f043 0301 	orr.w	r3, r3, #1
  40b686:	6053      	str	r3, [r2, #4]
  40b688:	e6ee      	b.n	40b468 <_malloc_r+0x2d8>
  40b68a:	207f      	movs	r0, #127	; 0x7f
  40b68c:	f44f 737e 	mov.w	r3, #1016	; 0x3f8
  40b690:	f04f 0e7e 	mov.w	lr, #126	; 0x7e
  40b694:	e59e      	b.n	40b1d4 <_malloc_r+0x44>
  40b696:	f104 0108 	add.w	r1, r4, #8
  40b69a:	4628      	mov	r0, r5
  40b69c:	9300      	str	r3, [sp, #0]
  40b69e:	f7ff fa59 	bl	40ab54 <_free_r>
  40b6a2:	9b00      	ldr	r3, [sp, #0]
  40b6a4:	6819      	ldr	r1, [r3, #0]
  40b6a6:	e6df      	b.n	40b468 <_malloc_r+0x2d8>
  40b6a8:	2001      	movs	r0, #1
  40b6aa:	f04f 0900 	mov.w	r9, #0
  40b6ae:	e6bc      	b.n	40b42a <_malloc_r+0x29a>
  40b6b0:	f5b2 7faa 	cmp.w	r2, #340	; 0x154
  40b6b4:	d805      	bhi.n	40b6c2 <_malloc_r+0x532>
  40b6b6:	0bda      	lsrs	r2, r3, #15
  40b6b8:	f102 0178 	add.w	r1, r2, #120	; 0x78
  40b6bc:	00c9      	lsls	r1, r1, #3
  40b6be:	3277      	adds	r2, #119	; 0x77
  40b6c0:	e720      	b.n	40b504 <_malloc_r+0x374>
  40b6c2:	f240 5154 	movw	r1, #1364	; 0x554
  40b6c6:	428a      	cmp	r2, r1
  40b6c8:	d805      	bhi.n	40b6d6 <_malloc_r+0x546>
  40b6ca:	0c9a      	lsrs	r2, r3, #18
  40b6cc:	f102 017d 	add.w	r1, r2, #125	; 0x7d
  40b6d0:	00c9      	lsls	r1, r1, #3
  40b6d2:	327c      	adds	r2, #124	; 0x7c
  40b6d4:	e716      	b.n	40b504 <_malloc_r+0x374>
  40b6d6:	f44f 717e 	mov.w	r1, #1016	; 0x3f8
  40b6da:	227e      	movs	r2, #126	; 0x7e
  40b6dc:	e712      	b.n	40b504 <_malloc_r+0x374>
  40b6de:	687b      	ldr	r3, [r7, #4]
  40b6e0:	e780      	b.n	40b5e4 <_malloc_r+0x454>
  40b6e2:	08f0      	lsrs	r0, r6, #3
  40b6e4:	f106 0308 	add.w	r3, r6, #8
  40b6e8:	e600      	b.n	40b2ec <_malloc_r+0x15c>
  40b6ea:	bf00      	nop
  40b6ec:	2040c9c4 	.word	0x2040c9c4

0040b6f0 <__ascii_mbtowc>:
  40b6f0:	b082      	sub	sp, #8
  40b6f2:	b149      	cbz	r1, 40b708 <__ascii_mbtowc+0x18>
  40b6f4:	b15a      	cbz	r2, 40b70e <__ascii_mbtowc+0x1e>
  40b6f6:	b16b      	cbz	r3, 40b714 <__ascii_mbtowc+0x24>
  40b6f8:	7813      	ldrb	r3, [r2, #0]
  40b6fa:	600b      	str	r3, [r1, #0]
  40b6fc:	7812      	ldrb	r2, [r2, #0]
  40b6fe:	1c10      	adds	r0, r2, #0
  40b700:	bf18      	it	ne
  40b702:	2001      	movne	r0, #1
  40b704:	b002      	add	sp, #8
  40b706:	4770      	bx	lr
  40b708:	a901      	add	r1, sp, #4
  40b70a:	2a00      	cmp	r2, #0
  40b70c:	d1f3      	bne.n	40b6f6 <__ascii_mbtowc+0x6>
  40b70e:	4610      	mov	r0, r2
  40b710:	b002      	add	sp, #8
  40b712:	4770      	bx	lr
  40b714:	f06f 0001 	mvn.w	r0, #1
  40b718:	e7f4      	b.n	40b704 <__ascii_mbtowc+0x14>
  40b71a:	bf00      	nop
  40b71c:	0000      	movs	r0, r0
	...

0040b720 <memchr>:
  40b720:	f001 01ff 	and.w	r1, r1, #255	; 0xff
  40b724:	2a10      	cmp	r2, #16
  40b726:	db2b      	blt.n	40b780 <memchr+0x60>
  40b728:	f010 0f07 	tst.w	r0, #7
  40b72c:	d008      	beq.n	40b740 <memchr+0x20>
  40b72e:	f810 3b01 	ldrb.w	r3, [r0], #1
  40b732:	3a01      	subs	r2, #1
  40b734:	428b      	cmp	r3, r1
  40b736:	d02d      	beq.n	40b794 <memchr+0x74>
  40b738:	f010 0f07 	tst.w	r0, #7
  40b73c:	b342      	cbz	r2, 40b790 <memchr+0x70>
  40b73e:	d1f6      	bne.n	40b72e <memchr+0xe>
  40b740:	b4f0      	push	{r4, r5, r6, r7}
  40b742:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
  40b746:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
  40b74a:	f022 0407 	bic.w	r4, r2, #7
  40b74e:	f07f 0700 	mvns.w	r7, #0
  40b752:	2300      	movs	r3, #0
  40b754:	e8f0 5602 	ldrd	r5, r6, [r0], #8
  40b758:	3c08      	subs	r4, #8
  40b75a:	ea85 0501 	eor.w	r5, r5, r1
  40b75e:	ea86 0601 	eor.w	r6, r6, r1
  40b762:	fa85 f547 	uadd8	r5, r5, r7
  40b766:	faa3 f587 	sel	r5, r3, r7
  40b76a:	fa86 f647 	uadd8	r6, r6, r7
  40b76e:	faa5 f687 	sel	r6, r5, r7
  40b772:	b98e      	cbnz	r6, 40b798 <memchr+0x78>
  40b774:	d1ee      	bne.n	40b754 <memchr+0x34>
  40b776:	bcf0      	pop	{r4, r5, r6, r7}
  40b778:	f001 01ff 	and.w	r1, r1, #255	; 0xff
  40b77c:	f002 0207 	and.w	r2, r2, #7
  40b780:	b132      	cbz	r2, 40b790 <memchr+0x70>
  40b782:	f810 3b01 	ldrb.w	r3, [r0], #1
  40b786:	3a01      	subs	r2, #1
  40b788:	ea83 0301 	eor.w	r3, r3, r1
  40b78c:	b113      	cbz	r3, 40b794 <memchr+0x74>
  40b78e:	d1f8      	bne.n	40b782 <memchr+0x62>
  40b790:	2000      	movs	r0, #0
  40b792:	4770      	bx	lr
  40b794:	3801      	subs	r0, #1
  40b796:	4770      	bx	lr
  40b798:	2d00      	cmp	r5, #0
  40b79a:	bf06      	itte	eq
  40b79c:	4635      	moveq	r5, r6
  40b79e:	3803      	subeq	r0, #3
  40b7a0:	3807      	subne	r0, #7
  40b7a2:	f015 0f01 	tst.w	r5, #1
  40b7a6:	d107      	bne.n	40b7b8 <memchr+0x98>
  40b7a8:	3001      	adds	r0, #1
  40b7aa:	f415 7f80 	tst.w	r5, #256	; 0x100
  40b7ae:	bf02      	ittt	eq
  40b7b0:	3001      	addeq	r0, #1
  40b7b2:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
  40b7b6:	3001      	addeq	r0, #1
  40b7b8:	bcf0      	pop	{r4, r5, r6, r7}
  40b7ba:	3801      	subs	r0, #1
  40b7bc:	4770      	bx	lr
  40b7be:	bf00      	nop

0040b7c0 <memmove>:
  40b7c0:	4288      	cmp	r0, r1
  40b7c2:	b5f0      	push	{r4, r5, r6, r7, lr}
  40b7c4:	d90d      	bls.n	40b7e2 <memmove+0x22>
  40b7c6:	188b      	adds	r3, r1, r2
  40b7c8:	4298      	cmp	r0, r3
  40b7ca:	d20a      	bcs.n	40b7e2 <memmove+0x22>
  40b7cc:	1884      	adds	r4, r0, r2
  40b7ce:	2a00      	cmp	r2, #0
  40b7d0:	d051      	beq.n	40b876 <memmove+0xb6>
  40b7d2:	4622      	mov	r2, r4
  40b7d4:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
  40b7d8:	f802 4d01 	strb.w	r4, [r2, #-1]!
  40b7dc:	4299      	cmp	r1, r3
  40b7de:	d1f9      	bne.n	40b7d4 <memmove+0x14>
  40b7e0:	bdf0      	pop	{r4, r5, r6, r7, pc}
  40b7e2:	2a0f      	cmp	r2, #15
  40b7e4:	d948      	bls.n	40b878 <memmove+0xb8>
  40b7e6:	ea41 0300 	orr.w	r3, r1, r0
  40b7ea:	079b      	lsls	r3, r3, #30
  40b7ec:	d146      	bne.n	40b87c <memmove+0xbc>
  40b7ee:	f100 0410 	add.w	r4, r0, #16
  40b7f2:	f101 0310 	add.w	r3, r1, #16
  40b7f6:	4615      	mov	r5, r2
  40b7f8:	f853 6c10 	ldr.w	r6, [r3, #-16]
  40b7fc:	f844 6c10 	str.w	r6, [r4, #-16]
  40b800:	f853 6c0c 	ldr.w	r6, [r3, #-12]
  40b804:	f844 6c0c 	str.w	r6, [r4, #-12]
  40b808:	f853 6c08 	ldr.w	r6, [r3, #-8]
  40b80c:	f844 6c08 	str.w	r6, [r4, #-8]
  40b810:	3d10      	subs	r5, #16
  40b812:	f853 6c04 	ldr.w	r6, [r3, #-4]
  40b816:	f844 6c04 	str.w	r6, [r4, #-4]
  40b81a:	2d0f      	cmp	r5, #15
  40b81c:	f103 0310 	add.w	r3, r3, #16
  40b820:	f104 0410 	add.w	r4, r4, #16
  40b824:	d8e8      	bhi.n	40b7f8 <memmove+0x38>
  40b826:	f1a2 0310 	sub.w	r3, r2, #16
  40b82a:	f023 030f 	bic.w	r3, r3, #15
  40b82e:	f002 0e0f 	and.w	lr, r2, #15
  40b832:	3310      	adds	r3, #16
  40b834:	f1be 0f03 	cmp.w	lr, #3
  40b838:	4419      	add	r1, r3
  40b83a:	4403      	add	r3, r0
  40b83c:	d921      	bls.n	40b882 <memmove+0xc2>
  40b83e:	1f1e      	subs	r6, r3, #4
  40b840:	460d      	mov	r5, r1
  40b842:	4674      	mov	r4, lr
  40b844:	3c04      	subs	r4, #4
  40b846:	f855 7b04 	ldr.w	r7, [r5], #4
  40b84a:	f846 7f04 	str.w	r7, [r6, #4]!
  40b84e:	2c03      	cmp	r4, #3
  40b850:	d8f8      	bhi.n	40b844 <memmove+0x84>
  40b852:	f1ae 0404 	sub.w	r4, lr, #4
  40b856:	f024 0403 	bic.w	r4, r4, #3
  40b85a:	3404      	adds	r4, #4
  40b85c:	4421      	add	r1, r4
  40b85e:	4423      	add	r3, r4
  40b860:	f002 0203 	and.w	r2, r2, #3
  40b864:	b162      	cbz	r2, 40b880 <memmove+0xc0>
  40b866:	3b01      	subs	r3, #1
  40b868:	440a      	add	r2, r1
  40b86a:	f811 4b01 	ldrb.w	r4, [r1], #1
  40b86e:	f803 4f01 	strb.w	r4, [r3, #1]!
  40b872:	428a      	cmp	r2, r1
  40b874:	d1f9      	bne.n	40b86a <memmove+0xaa>
  40b876:	bdf0      	pop	{r4, r5, r6, r7, pc}
  40b878:	4603      	mov	r3, r0
  40b87a:	e7f3      	b.n	40b864 <memmove+0xa4>
  40b87c:	4603      	mov	r3, r0
  40b87e:	e7f2      	b.n	40b866 <memmove+0xa6>
  40b880:	bdf0      	pop	{r4, r5, r6, r7, pc}
  40b882:	4672      	mov	r2, lr
  40b884:	e7ee      	b.n	40b864 <memmove+0xa4>
  40b886:	bf00      	nop

0040b888 <__malloc_lock>:
  40b888:	4801      	ldr	r0, [pc, #4]	; (40b890 <__malloc_lock+0x8>)
  40b88a:	f7ff bbfd 	b.w	40b088 <__retarget_lock_acquire_recursive>
  40b88e:	bf00      	nop
  40b890:	2040cb14 	.word	0x2040cb14

0040b894 <__malloc_unlock>:
  40b894:	4801      	ldr	r0, [pc, #4]	; (40b89c <__malloc_unlock+0x8>)
  40b896:	f7ff bbf9 	b.w	40b08c <__retarget_lock_release_recursive>
  40b89a:	bf00      	nop
  40b89c:	2040cb14 	.word	0x2040cb14

0040b8a0 <_realloc_r>:
  40b8a0:	2900      	cmp	r1, #0
  40b8a2:	f000 8095 	beq.w	40b9d0 <_realloc_r+0x130>
  40b8a6:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  40b8aa:	460d      	mov	r5, r1
  40b8ac:	4616      	mov	r6, r2
  40b8ae:	b083      	sub	sp, #12
  40b8b0:	4680      	mov	r8, r0
  40b8b2:	f106 070b 	add.w	r7, r6, #11
  40b8b6:	f7ff ffe7 	bl	40b888 <__malloc_lock>
  40b8ba:	f855 ec04 	ldr.w	lr, [r5, #-4]
  40b8be:	2f16      	cmp	r7, #22
  40b8c0:	f02e 0403 	bic.w	r4, lr, #3
  40b8c4:	f1a5 0908 	sub.w	r9, r5, #8
  40b8c8:	d83c      	bhi.n	40b944 <_realloc_r+0xa4>
  40b8ca:	2210      	movs	r2, #16
  40b8cc:	4617      	mov	r7, r2
  40b8ce:	42be      	cmp	r6, r7
  40b8d0:	d83d      	bhi.n	40b94e <_realloc_r+0xae>
  40b8d2:	4294      	cmp	r4, r2
  40b8d4:	da43      	bge.n	40b95e <_realloc_r+0xbe>
  40b8d6:	4bc4      	ldr	r3, [pc, #784]	; (40bbe8 <_realloc_r+0x348>)
  40b8d8:	6899      	ldr	r1, [r3, #8]
  40b8da:	eb09 0004 	add.w	r0, r9, r4
  40b8de:	4288      	cmp	r0, r1
  40b8e0:	f000 80b4 	beq.w	40ba4c <_realloc_r+0x1ac>
  40b8e4:	6843      	ldr	r3, [r0, #4]
  40b8e6:	f023 0101 	bic.w	r1, r3, #1
  40b8ea:	4401      	add	r1, r0
  40b8ec:	6849      	ldr	r1, [r1, #4]
  40b8ee:	07c9      	lsls	r1, r1, #31
  40b8f0:	d54c      	bpl.n	40b98c <_realloc_r+0xec>
  40b8f2:	f01e 0f01 	tst.w	lr, #1
  40b8f6:	f000 809b 	beq.w	40ba30 <_realloc_r+0x190>
  40b8fa:	4631      	mov	r1, r6
  40b8fc:	4640      	mov	r0, r8
  40b8fe:	f7ff fc47 	bl	40b190 <_malloc_r>
  40b902:	4606      	mov	r6, r0
  40b904:	2800      	cmp	r0, #0
  40b906:	d03a      	beq.n	40b97e <_realloc_r+0xde>
  40b908:	f855 3c04 	ldr.w	r3, [r5, #-4]
  40b90c:	f023 0301 	bic.w	r3, r3, #1
  40b910:	444b      	add	r3, r9
  40b912:	f1a0 0208 	sub.w	r2, r0, #8
  40b916:	429a      	cmp	r2, r3
  40b918:	f000 8121 	beq.w	40bb5e <_realloc_r+0x2be>
  40b91c:	1f22      	subs	r2, r4, #4
  40b91e:	2a24      	cmp	r2, #36	; 0x24
  40b920:	f200 8107 	bhi.w	40bb32 <_realloc_r+0x292>
  40b924:	2a13      	cmp	r2, #19
  40b926:	f200 80db 	bhi.w	40bae0 <_realloc_r+0x240>
  40b92a:	4603      	mov	r3, r0
  40b92c:	462a      	mov	r2, r5
  40b92e:	6811      	ldr	r1, [r2, #0]
  40b930:	6019      	str	r1, [r3, #0]
  40b932:	6851      	ldr	r1, [r2, #4]
  40b934:	6059      	str	r1, [r3, #4]
  40b936:	6892      	ldr	r2, [r2, #8]
  40b938:	609a      	str	r2, [r3, #8]
  40b93a:	4629      	mov	r1, r5
  40b93c:	4640      	mov	r0, r8
  40b93e:	f7ff f909 	bl	40ab54 <_free_r>
  40b942:	e01c      	b.n	40b97e <_realloc_r+0xde>
  40b944:	f027 0707 	bic.w	r7, r7, #7
  40b948:	2f00      	cmp	r7, #0
  40b94a:	463a      	mov	r2, r7
  40b94c:	dabf      	bge.n	40b8ce <_realloc_r+0x2e>
  40b94e:	2600      	movs	r6, #0
  40b950:	230c      	movs	r3, #12
  40b952:	4630      	mov	r0, r6
  40b954:	f8c8 3000 	str.w	r3, [r8]
  40b958:	b003      	add	sp, #12
  40b95a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  40b95e:	462e      	mov	r6, r5
  40b960:	1be3      	subs	r3, r4, r7
  40b962:	2b0f      	cmp	r3, #15
  40b964:	d81e      	bhi.n	40b9a4 <_realloc_r+0x104>
  40b966:	f8d9 3004 	ldr.w	r3, [r9, #4]
  40b96a:	f003 0301 	and.w	r3, r3, #1
  40b96e:	4323      	orrs	r3, r4
  40b970:	444c      	add	r4, r9
  40b972:	f8c9 3004 	str.w	r3, [r9, #4]
  40b976:	6863      	ldr	r3, [r4, #4]
  40b978:	f043 0301 	orr.w	r3, r3, #1
  40b97c:	6063      	str	r3, [r4, #4]
  40b97e:	4640      	mov	r0, r8
  40b980:	f7ff ff88 	bl	40b894 <__malloc_unlock>
  40b984:	4630      	mov	r0, r6
  40b986:	b003      	add	sp, #12
  40b988:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  40b98c:	f023 0303 	bic.w	r3, r3, #3
  40b990:	18e1      	adds	r1, r4, r3
  40b992:	4291      	cmp	r1, r2
  40b994:	db1f      	blt.n	40b9d6 <_realloc_r+0x136>
  40b996:	68c3      	ldr	r3, [r0, #12]
  40b998:	6882      	ldr	r2, [r0, #8]
  40b99a:	462e      	mov	r6, r5
  40b99c:	60d3      	str	r3, [r2, #12]
  40b99e:	460c      	mov	r4, r1
  40b9a0:	609a      	str	r2, [r3, #8]
  40b9a2:	e7dd      	b.n	40b960 <_realloc_r+0xc0>
  40b9a4:	f8d9 2004 	ldr.w	r2, [r9, #4]
  40b9a8:	eb09 0107 	add.w	r1, r9, r7
  40b9ac:	f002 0201 	and.w	r2, r2, #1
  40b9b0:	444c      	add	r4, r9
  40b9b2:	f043 0301 	orr.w	r3, r3, #1
  40b9b6:	4317      	orrs	r7, r2
  40b9b8:	f8c9 7004 	str.w	r7, [r9, #4]
  40b9bc:	604b      	str	r3, [r1, #4]
  40b9be:	6863      	ldr	r3, [r4, #4]
  40b9c0:	f043 0301 	orr.w	r3, r3, #1
  40b9c4:	3108      	adds	r1, #8
  40b9c6:	6063      	str	r3, [r4, #4]
  40b9c8:	4640      	mov	r0, r8
  40b9ca:	f7ff f8c3 	bl	40ab54 <_free_r>
  40b9ce:	e7d6      	b.n	40b97e <_realloc_r+0xde>
  40b9d0:	4611      	mov	r1, r2
  40b9d2:	f7ff bbdd 	b.w	40b190 <_malloc_r>
  40b9d6:	f01e 0f01 	tst.w	lr, #1
  40b9da:	d18e      	bne.n	40b8fa <_realloc_r+0x5a>
  40b9dc:	f855 1c08 	ldr.w	r1, [r5, #-8]
  40b9e0:	eba9 0a01 	sub.w	sl, r9, r1
  40b9e4:	f8da 1004 	ldr.w	r1, [sl, #4]
  40b9e8:	f021 0103 	bic.w	r1, r1, #3
  40b9ec:	440b      	add	r3, r1
  40b9ee:	4423      	add	r3, r4
  40b9f0:	4293      	cmp	r3, r2
  40b9f2:	db25      	blt.n	40ba40 <_realloc_r+0x1a0>
  40b9f4:	68c2      	ldr	r2, [r0, #12]
  40b9f6:	6881      	ldr	r1, [r0, #8]
  40b9f8:	4656      	mov	r6, sl
  40b9fa:	60ca      	str	r2, [r1, #12]
  40b9fc:	6091      	str	r1, [r2, #8]
  40b9fe:	f8da 100c 	ldr.w	r1, [sl, #12]
  40ba02:	f856 0f08 	ldr.w	r0, [r6, #8]!
  40ba06:	1f22      	subs	r2, r4, #4
  40ba08:	2a24      	cmp	r2, #36	; 0x24
  40ba0a:	60c1      	str	r1, [r0, #12]
  40ba0c:	6088      	str	r0, [r1, #8]
  40ba0e:	f200 8094 	bhi.w	40bb3a <_realloc_r+0x29a>
  40ba12:	2a13      	cmp	r2, #19
  40ba14:	d96f      	bls.n	40baf6 <_realloc_r+0x256>
  40ba16:	6829      	ldr	r1, [r5, #0]
  40ba18:	f8ca 1008 	str.w	r1, [sl, #8]
  40ba1c:	6869      	ldr	r1, [r5, #4]
  40ba1e:	f8ca 100c 	str.w	r1, [sl, #12]
  40ba22:	2a1b      	cmp	r2, #27
  40ba24:	f200 80a2 	bhi.w	40bb6c <_realloc_r+0x2cc>
  40ba28:	3508      	adds	r5, #8
  40ba2a:	f10a 0210 	add.w	r2, sl, #16
  40ba2e:	e063      	b.n	40baf8 <_realloc_r+0x258>
  40ba30:	f855 3c08 	ldr.w	r3, [r5, #-8]
  40ba34:	eba9 0a03 	sub.w	sl, r9, r3
  40ba38:	f8da 1004 	ldr.w	r1, [sl, #4]
  40ba3c:	f021 0103 	bic.w	r1, r1, #3
  40ba40:	1863      	adds	r3, r4, r1
  40ba42:	4293      	cmp	r3, r2
  40ba44:	f6ff af59 	blt.w	40b8fa <_realloc_r+0x5a>
  40ba48:	4656      	mov	r6, sl
  40ba4a:	e7d8      	b.n	40b9fe <_realloc_r+0x15e>
  40ba4c:	6841      	ldr	r1, [r0, #4]
  40ba4e:	f021 0b03 	bic.w	fp, r1, #3
  40ba52:	44a3      	add	fp, r4
  40ba54:	f107 0010 	add.w	r0, r7, #16
  40ba58:	4583      	cmp	fp, r0
  40ba5a:	da56      	bge.n	40bb0a <_realloc_r+0x26a>
  40ba5c:	f01e 0f01 	tst.w	lr, #1
  40ba60:	f47f af4b 	bne.w	40b8fa <_realloc_r+0x5a>
  40ba64:	f855 1c08 	ldr.w	r1, [r5, #-8]
  40ba68:	eba9 0a01 	sub.w	sl, r9, r1
  40ba6c:	f8da 1004 	ldr.w	r1, [sl, #4]
  40ba70:	f021 0103 	bic.w	r1, r1, #3
  40ba74:	448b      	add	fp, r1
  40ba76:	4558      	cmp	r0, fp
  40ba78:	dce2      	bgt.n	40ba40 <_realloc_r+0x1a0>
  40ba7a:	4656      	mov	r6, sl
  40ba7c:	f8da 100c 	ldr.w	r1, [sl, #12]
  40ba80:	f856 0f08 	ldr.w	r0, [r6, #8]!
  40ba84:	1f22      	subs	r2, r4, #4
  40ba86:	2a24      	cmp	r2, #36	; 0x24
  40ba88:	60c1      	str	r1, [r0, #12]
  40ba8a:	6088      	str	r0, [r1, #8]
  40ba8c:	f200 808f 	bhi.w	40bbae <_realloc_r+0x30e>
  40ba90:	2a13      	cmp	r2, #19
  40ba92:	f240 808a 	bls.w	40bbaa <_realloc_r+0x30a>
  40ba96:	6829      	ldr	r1, [r5, #0]
  40ba98:	f8ca 1008 	str.w	r1, [sl, #8]
  40ba9c:	6869      	ldr	r1, [r5, #4]
  40ba9e:	f8ca 100c 	str.w	r1, [sl, #12]
  40baa2:	2a1b      	cmp	r2, #27
  40baa4:	f200 808a 	bhi.w	40bbbc <_realloc_r+0x31c>
  40baa8:	3508      	adds	r5, #8
  40baaa:	f10a 0210 	add.w	r2, sl, #16
  40baae:	6829      	ldr	r1, [r5, #0]
  40bab0:	6011      	str	r1, [r2, #0]
  40bab2:	6869      	ldr	r1, [r5, #4]
  40bab4:	6051      	str	r1, [r2, #4]
  40bab6:	68a9      	ldr	r1, [r5, #8]
  40bab8:	6091      	str	r1, [r2, #8]
  40baba:	eb0a 0107 	add.w	r1, sl, r7
  40babe:	ebab 0207 	sub.w	r2, fp, r7
  40bac2:	f042 0201 	orr.w	r2, r2, #1
  40bac6:	6099      	str	r1, [r3, #8]
  40bac8:	604a      	str	r2, [r1, #4]
  40baca:	f8da 3004 	ldr.w	r3, [sl, #4]
  40bace:	f003 0301 	and.w	r3, r3, #1
  40bad2:	431f      	orrs	r7, r3
  40bad4:	4640      	mov	r0, r8
  40bad6:	f8ca 7004 	str.w	r7, [sl, #4]
  40bada:	f7ff fedb 	bl	40b894 <__malloc_unlock>
  40bade:	e751      	b.n	40b984 <_realloc_r+0xe4>
  40bae0:	682b      	ldr	r3, [r5, #0]
  40bae2:	6003      	str	r3, [r0, #0]
  40bae4:	686b      	ldr	r3, [r5, #4]
  40bae6:	6043      	str	r3, [r0, #4]
  40bae8:	2a1b      	cmp	r2, #27
  40baea:	d82d      	bhi.n	40bb48 <_realloc_r+0x2a8>
  40baec:	f100 0308 	add.w	r3, r0, #8
  40baf0:	f105 0208 	add.w	r2, r5, #8
  40baf4:	e71b      	b.n	40b92e <_realloc_r+0x8e>
  40baf6:	4632      	mov	r2, r6
  40baf8:	6829      	ldr	r1, [r5, #0]
  40bafa:	6011      	str	r1, [r2, #0]
  40bafc:	6869      	ldr	r1, [r5, #4]
  40bafe:	6051      	str	r1, [r2, #4]
  40bb00:	68a9      	ldr	r1, [r5, #8]
  40bb02:	6091      	str	r1, [r2, #8]
  40bb04:	461c      	mov	r4, r3
  40bb06:	46d1      	mov	r9, sl
  40bb08:	e72a      	b.n	40b960 <_realloc_r+0xc0>
  40bb0a:	eb09 0107 	add.w	r1, r9, r7
  40bb0e:	ebab 0b07 	sub.w	fp, fp, r7
  40bb12:	f04b 0201 	orr.w	r2, fp, #1
  40bb16:	6099      	str	r1, [r3, #8]
  40bb18:	604a      	str	r2, [r1, #4]
  40bb1a:	f855 3c04 	ldr.w	r3, [r5, #-4]
  40bb1e:	f003 0301 	and.w	r3, r3, #1
  40bb22:	431f      	orrs	r7, r3
  40bb24:	4640      	mov	r0, r8
  40bb26:	f845 7c04 	str.w	r7, [r5, #-4]
  40bb2a:	f7ff feb3 	bl	40b894 <__malloc_unlock>
  40bb2e:	462e      	mov	r6, r5
  40bb30:	e728      	b.n	40b984 <_realloc_r+0xe4>
  40bb32:	4629      	mov	r1, r5
  40bb34:	f7ff fe44 	bl	40b7c0 <memmove>
  40bb38:	e6ff      	b.n	40b93a <_realloc_r+0x9a>
  40bb3a:	4629      	mov	r1, r5
  40bb3c:	4630      	mov	r0, r6
  40bb3e:	461c      	mov	r4, r3
  40bb40:	46d1      	mov	r9, sl
  40bb42:	f7ff fe3d 	bl	40b7c0 <memmove>
  40bb46:	e70b      	b.n	40b960 <_realloc_r+0xc0>
  40bb48:	68ab      	ldr	r3, [r5, #8]
  40bb4a:	6083      	str	r3, [r0, #8]
  40bb4c:	68eb      	ldr	r3, [r5, #12]
  40bb4e:	60c3      	str	r3, [r0, #12]
  40bb50:	2a24      	cmp	r2, #36	; 0x24
  40bb52:	d017      	beq.n	40bb84 <_realloc_r+0x2e4>
  40bb54:	f100 0310 	add.w	r3, r0, #16
  40bb58:	f105 0210 	add.w	r2, r5, #16
  40bb5c:	e6e7      	b.n	40b92e <_realloc_r+0x8e>
  40bb5e:	f850 3c04 	ldr.w	r3, [r0, #-4]
  40bb62:	f023 0303 	bic.w	r3, r3, #3
  40bb66:	441c      	add	r4, r3
  40bb68:	462e      	mov	r6, r5
  40bb6a:	e6f9      	b.n	40b960 <_realloc_r+0xc0>
  40bb6c:	68a9      	ldr	r1, [r5, #8]
  40bb6e:	f8ca 1010 	str.w	r1, [sl, #16]
  40bb72:	68e9      	ldr	r1, [r5, #12]
  40bb74:	f8ca 1014 	str.w	r1, [sl, #20]
  40bb78:	2a24      	cmp	r2, #36	; 0x24
  40bb7a:	d00c      	beq.n	40bb96 <_realloc_r+0x2f6>
  40bb7c:	3510      	adds	r5, #16
  40bb7e:	f10a 0218 	add.w	r2, sl, #24
  40bb82:	e7b9      	b.n	40baf8 <_realloc_r+0x258>
  40bb84:	692b      	ldr	r3, [r5, #16]
  40bb86:	6103      	str	r3, [r0, #16]
  40bb88:	696b      	ldr	r3, [r5, #20]
  40bb8a:	6143      	str	r3, [r0, #20]
  40bb8c:	f105 0218 	add.w	r2, r5, #24
  40bb90:	f100 0318 	add.w	r3, r0, #24
  40bb94:	e6cb      	b.n	40b92e <_realloc_r+0x8e>
  40bb96:	692a      	ldr	r2, [r5, #16]
  40bb98:	f8ca 2018 	str.w	r2, [sl, #24]
  40bb9c:	696a      	ldr	r2, [r5, #20]
  40bb9e:	f8ca 201c 	str.w	r2, [sl, #28]
  40bba2:	3518      	adds	r5, #24
  40bba4:	f10a 0220 	add.w	r2, sl, #32
  40bba8:	e7a6      	b.n	40baf8 <_realloc_r+0x258>
  40bbaa:	4632      	mov	r2, r6
  40bbac:	e77f      	b.n	40baae <_realloc_r+0x20e>
  40bbae:	4629      	mov	r1, r5
  40bbb0:	4630      	mov	r0, r6
  40bbb2:	9301      	str	r3, [sp, #4]
  40bbb4:	f7ff fe04 	bl	40b7c0 <memmove>
  40bbb8:	9b01      	ldr	r3, [sp, #4]
  40bbba:	e77e      	b.n	40baba <_realloc_r+0x21a>
  40bbbc:	68a9      	ldr	r1, [r5, #8]
  40bbbe:	f8ca 1010 	str.w	r1, [sl, #16]
  40bbc2:	68e9      	ldr	r1, [r5, #12]
  40bbc4:	f8ca 1014 	str.w	r1, [sl, #20]
  40bbc8:	2a24      	cmp	r2, #36	; 0x24
  40bbca:	d003      	beq.n	40bbd4 <_realloc_r+0x334>
  40bbcc:	3510      	adds	r5, #16
  40bbce:	f10a 0218 	add.w	r2, sl, #24
  40bbd2:	e76c      	b.n	40baae <_realloc_r+0x20e>
  40bbd4:	692a      	ldr	r2, [r5, #16]
  40bbd6:	f8ca 2018 	str.w	r2, [sl, #24]
  40bbda:	696a      	ldr	r2, [r5, #20]
  40bbdc:	f8ca 201c 	str.w	r2, [sl, #28]
  40bbe0:	3518      	adds	r5, #24
  40bbe2:	f10a 0220 	add.w	r2, sl, #32
  40bbe6:	e762      	b.n	40baae <_realloc_r+0x20e>
  40bbe8:	204005e8 	.word	0x204005e8

0040bbec <_sbrk_r>:
  40bbec:	b538      	push	{r3, r4, r5, lr}
  40bbee:	4c07      	ldr	r4, [pc, #28]	; (40bc0c <_sbrk_r+0x20>)
  40bbf0:	2300      	movs	r3, #0
  40bbf2:	4605      	mov	r5, r0
  40bbf4:	4608      	mov	r0, r1
  40bbf6:	6023      	str	r3, [r4, #0]
  40bbf8:	f7fc ff20 	bl	408a3c <_sbrk>
  40bbfc:	1c43      	adds	r3, r0, #1
  40bbfe:	d000      	beq.n	40bc02 <_sbrk_r+0x16>
  40bc00:	bd38      	pop	{r3, r4, r5, pc}
  40bc02:	6823      	ldr	r3, [r4, #0]
  40bc04:	2b00      	cmp	r3, #0
  40bc06:	d0fb      	beq.n	40bc00 <_sbrk_r+0x14>
  40bc08:	602b      	str	r3, [r5, #0]
  40bc0a:	bd38      	pop	{r3, r4, r5, pc}
  40bc0c:	2040cb28 	.word	0x2040cb28

0040bc10 <__sread>:
  40bc10:	b510      	push	{r4, lr}
  40bc12:	460c      	mov	r4, r1
  40bc14:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
  40bc18:	f000 f9f6 	bl	40c008 <_read_r>
  40bc1c:	2800      	cmp	r0, #0
  40bc1e:	db03      	blt.n	40bc28 <__sread+0x18>
  40bc20:	6d23      	ldr	r3, [r4, #80]	; 0x50
  40bc22:	4403      	add	r3, r0
  40bc24:	6523      	str	r3, [r4, #80]	; 0x50
  40bc26:	bd10      	pop	{r4, pc}
  40bc28:	89a3      	ldrh	r3, [r4, #12]
  40bc2a:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
  40bc2e:	81a3      	strh	r3, [r4, #12]
  40bc30:	bd10      	pop	{r4, pc}
  40bc32:	bf00      	nop

0040bc34 <__swrite>:
  40bc34:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  40bc38:	4616      	mov	r6, r2
  40bc3a:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
  40bc3e:	461f      	mov	r7, r3
  40bc40:	05d3      	lsls	r3, r2, #23
  40bc42:	460c      	mov	r4, r1
  40bc44:	4605      	mov	r5, r0
  40bc46:	d507      	bpl.n	40bc58 <__swrite+0x24>
  40bc48:	2200      	movs	r2, #0
  40bc4a:	2302      	movs	r3, #2
  40bc4c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
  40bc50:	f000 f9c4 	bl	40bfdc <_lseek_r>
  40bc54:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
  40bc58:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
  40bc5c:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
  40bc60:	81a2      	strh	r2, [r4, #12]
  40bc62:	463b      	mov	r3, r7
  40bc64:	4632      	mov	r2, r6
  40bc66:	4628      	mov	r0, r5
  40bc68:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
  40bc6c:	f000 b8a4 	b.w	40bdb8 <_write_r>

0040bc70 <__sseek>:
  40bc70:	b510      	push	{r4, lr}
  40bc72:	460c      	mov	r4, r1
  40bc74:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
  40bc78:	f000 f9b0 	bl	40bfdc <_lseek_r>
  40bc7c:	89a3      	ldrh	r3, [r4, #12]
  40bc7e:	1c42      	adds	r2, r0, #1
  40bc80:	bf0e      	itee	eq
  40bc82:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
  40bc86:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
  40bc8a:	6520      	strne	r0, [r4, #80]	; 0x50
  40bc8c:	81a3      	strh	r3, [r4, #12]
  40bc8e:	bd10      	pop	{r4, pc}

0040bc90 <__sclose>:
  40bc90:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
  40bc94:	f000 b908 	b.w	40bea8 <_close_r>

0040bc98 <__swbuf_r>:
  40bc98:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  40bc9a:	460d      	mov	r5, r1
  40bc9c:	4614      	mov	r4, r2
  40bc9e:	4606      	mov	r6, r0
  40bca0:	b110      	cbz	r0, 40bca8 <__swbuf_r+0x10>
  40bca2:	6b83      	ldr	r3, [r0, #56]	; 0x38
  40bca4:	2b00      	cmp	r3, #0
  40bca6:	d04b      	beq.n	40bd40 <__swbuf_r+0xa8>
  40bca8:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
  40bcac:	69a3      	ldr	r3, [r4, #24]
  40bcae:	60a3      	str	r3, [r4, #8]
  40bcb0:	b291      	uxth	r1, r2
  40bcb2:	0708      	lsls	r0, r1, #28
  40bcb4:	d539      	bpl.n	40bd2a <__swbuf_r+0x92>
  40bcb6:	6923      	ldr	r3, [r4, #16]
  40bcb8:	2b00      	cmp	r3, #0
  40bcba:	d036      	beq.n	40bd2a <__swbuf_r+0x92>
  40bcbc:	b2ed      	uxtb	r5, r5
  40bcbe:	0489      	lsls	r1, r1, #18
  40bcc0:	462f      	mov	r7, r5
  40bcc2:	d515      	bpl.n	40bcf0 <__swbuf_r+0x58>
  40bcc4:	6822      	ldr	r2, [r4, #0]
  40bcc6:	6961      	ldr	r1, [r4, #20]
  40bcc8:	1ad3      	subs	r3, r2, r3
  40bcca:	428b      	cmp	r3, r1
  40bccc:	da1c      	bge.n	40bd08 <__swbuf_r+0x70>
  40bcce:	3301      	adds	r3, #1
  40bcd0:	68a1      	ldr	r1, [r4, #8]
  40bcd2:	1c50      	adds	r0, r2, #1
  40bcd4:	3901      	subs	r1, #1
  40bcd6:	60a1      	str	r1, [r4, #8]
  40bcd8:	6020      	str	r0, [r4, #0]
  40bcda:	7015      	strb	r5, [r2, #0]
  40bcdc:	6962      	ldr	r2, [r4, #20]
  40bcde:	429a      	cmp	r2, r3
  40bce0:	d01a      	beq.n	40bd18 <__swbuf_r+0x80>
  40bce2:	89a3      	ldrh	r3, [r4, #12]
  40bce4:	07db      	lsls	r3, r3, #31
  40bce6:	d501      	bpl.n	40bcec <__swbuf_r+0x54>
  40bce8:	2d0a      	cmp	r5, #10
  40bcea:	d015      	beq.n	40bd18 <__swbuf_r+0x80>
  40bcec:	4638      	mov	r0, r7
  40bcee:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  40bcf0:	6e61      	ldr	r1, [r4, #100]	; 0x64
  40bcf2:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
  40bcf6:	f421 5100 	bic.w	r1, r1, #8192	; 0x2000
  40bcfa:	81a2      	strh	r2, [r4, #12]
  40bcfc:	6822      	ldr	r2, [r4, #0]
  40bcfe:	6661      	str	r1, [r4, #100]	; 0x64
  40bd00:	6961      	ldr	r1, [r4, #20]
  40bd02:	1ad3      	subs	r3, r2, r3
  40bd04:	428b      	cmp	r3, r1
  40bd06:	dbe2      	blt.n	40bcce <__swbuf_r+0x36>
  40bd08:	4621      	mov	r1, r4
  40bd0a:	4630      	mov	r0, r6
  40bd0c:	f7fe fda4 	bl	40a858 <_fflush_r>
  40bd10:	b940      	cbnz	r0, 40bd24 <__swbuf_r+0x8c>
  40bd12:	6822      	ldr	r2, [r4, #0]
  40bd14:	2301      	movs	r3, #1
  40bd16:	e7db      	b.n	40bcd0 <__swbuf_r+0x38>
  40bd18:	4621      	mov	r1, r4
  40bd1a:	4630      	mov	r0, r6
  40bd1c:	f7fe fd9c 	bl	40a858 <_fflush_r>
  40bd20:	2800      	cmp	r0, #0
  40bd22:	d0e3      	beq.n	40bcec <__swbuf_r+0x54>
  40bd24:	f04f 37ff 	mov.w	r7, #4294967295
  40bd28:	e7e0      	b.n	40bcec <__swbuf_r+0x54>
  40bd2a:	4621      	mov	r1, r4
  40bd2c:	4630      	mov	r0, r6
  40bd2e:	f7fe fc7f 	bl	40a630 <__swsetup_r>
  40bd32:	2800      	cmp	r0, #0
  40bd34:	d1f6      	bne.n	40bd24 <__swbuf_r+0x8c>
  40bd36:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
  40bd3a:	6923      	ldr	r3, [r4, #16]
  40bd3c:	b291      	uxth	r1, r2
  40bd3e:	e7bd      	b.n	40bcbc <__swbuf_r+0x24>
  40bd40:	f7fe fde2 	bl	40a908 <__sinit>
  40bd44:	e7b0      	b.n	40bca8 <__swbuf_r+0x10>
  40bd46:	bf00      	nop

0040bd48 <_wcrtomb_r>:
  40bd48:	b5f0      	push	{r4, r5, r6, r7, lr}
  40bd4a:	4606      	mov	r6, r0
  40bd4c:	b085      	sub	sp, #20
  40bd4e:	461f      	mov	r7, r3
  40bd50:	b189      	cbz	r1, 40bd76 <_wcrtomb_r+0x2e>
  40bd52:	4c10      	ldr	r4, [pc, #64]	; (40bd94 <_wcrtomb_r+0x4c>)
  40bd54:	4d10      	ldr	r5, [pc, #64]	; (40bd98 <_wcrtomb_r+0x50>)
  40bd56:	6824      	ldr	r4, [r4, #0]
  40bd58:	6b64      	ldr	r4, [r4, #52]	; 0x34
  40bd5a:	2c00      	cmp	r4, #0
  40bd5c:	bf08      	it	eq
  40bd5e:	462c      	moveq	r4, r5
  40bd60:	f8d4 40e0 	ldr.w	r4, [r4, #224]	; 0xe0
  40bd64:	47a0      	blx	r4
  40bd66:	1c43      	adds	r3, r0, #1
  40bd68:	d103      	bne.n	40bd72 <_wcrtomb_r+0x2a>
  40bd6a:	2200      	movs	r2, #0
  40bd6c:	238a      	movs	r3, #138	; 0x8a
  40bd6e:	603a      	str	r2, [r7, #0]
  40bd70:	6033      	str	r3, [r6, #0]
  40bd72:	b005      	add	sp, #20
  40bd74:	bdf0      	pop	{r4, r5, r6, r7, pc}
  40bd76:	460c      	mov	r4, r1
  40bd78:	4906      	ldr	r1, [pc, #24]	; (40bd94 <_wcrtomb_r+0x4c>)
  40bd7a:	4a07      	ldr	r2, [pc, #28]	; (40bd98 <_wcrtomb_r+0x50>)
  40bd7c:	6809      	ldr	r1, [r1, #0]
  40bd7e:	6b49      	ldr	r1, [r1, #52]	; 0x34
  40bd80:	2900      	cmp	r1, #0
  40bd82:	bf08      	it	eq
  40bd84:	4611      	moveq	r1, r2
  40bd86:	4622      	mov	r2, r4
  40bd88:	f8d1 40e0 	ldr.w	r4, [r1, #224]	; 0xe0
  40bd8c:	a901      	add	r1, sp, #4
  40bd8e:	47a0      	blx	r4
  40bd90:	e7e9      	b.n	40bd66 <_wcrtomb_r+0x1e>
  40bd92:	bf00      	nop
  40bd94:	20400048 	.word	0x20400048
  40bd98:	2040047c 	.word	0x2040047c

0040bd9c <__ascii_wctomb>:
  40bd9c:	b121      	cbz	r1, 40bda8 <__ascii_wctomb+0xc>
  40bd9e:	2aff      	cmp	r2, #255	; 0xff
  40bda0:	d804      	bhi.n	40bdac <__ascii_wctomb+0x10>
  40bda2:	700a      	strb	r2, [r1, #0]
  40bda4:	2001      	movs	r0, #1
  40bda6:	4770      	bx	lr
  40bda8:	4608      	mov	r0, r1
  40bdaa:	4770      	bx	lr
  40bdac:	238a      	movs	r3, #138	; 0x8a
  40bdae:	6003      	str	r3, [r0, #0]
  40bdb0:	f04f 30ff 	mov.w	r0, #4294967295
  40bdb4:	4770      	bx	lr
  40bdb6:	bf00      	nop

0040bdb8 <_write_r>:
  40bdb8:	b570      	push	{r4, r5, r6, lr}
  40bdba:	460d      	mov	r5, r1
  40bdbc:	4c08      	ldr	r4, [pc, #32]	; (40bde0 <_write_r+0x28>)
  40bdbe:	4611      	mov	r1, r2
  40bdc0:	4606      	mov	r6, r0
  40bdc2:	461a      	mov	r2, r3
  40bdc4:	4628      	mov	r0, r5
  40bdc6:	2300      	movs	r3, #0
  40bdc8:	6023      	str	r3, [r4, #0]
  40bdca:	f7fb fefb 	bl	407bc4 <_write>
  40bdce:	1c43      	adds	r3, r0, #1
  40bdd0:	d000      	beq.n	40bdd4 <_write_r+0x1c>
  40bdd2:	bd70      	pop	{r4, r5, r6, pc}
  40bdd4:	6823      	ldr	r3, [r4, #0]
  40bdd6:	2b00      	cmp	r3, #0
  40bdd8:	d0fb      	beq.n	40bdd2 <_write_r+0x1a>
  40bdda:	6033      	str	r3, [r6, #0]
  40bddc:	bd70      	pop	{r4, r5, r6, pc}
  40bdde:	bf00      	nop
  40bde0:	2040cb28 	.word	0x2040cb28

0040bde4 <__register_exitproc>:
  40bde4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
  40bde8:	4d2c      	ldr	r5, [pc, #176]	; (40be9c <__register_exitproc+0xb8>)
  40bdea:	4606      	mov	r6, r0
  40bdec:	6828      	ldr	r0, [r5, #0]
  40bdee:	4698      	mov	r8, r3
  40bdf0:	460f      	mov	r7, r1
  40bdf2:	4691      	mov	r9, r2
  40bdf4:	f7ff f948 	bl	40b088 <__retarget_lock_acquire_recursive>
  40bdf8:	4b29      	ldr	r3, [pc, #164]	; (40bea0 <__register_exitproc+0xbc>)
  40bdfa:	681c      	ldr	r4, [r3, #0]
  40bdfc:	f8d4 3148 	ldr.w	r3, [r4, #328]	; 0x148
  40be00:	2b00      	cmp	r3, #0
  40be02:	d03e      	beq.n	40be82 <__register_exitproc+0x9e>
  40be04:	685a      	ldr	r2, [r3, #4]
  40be06:	2a1f      	cmp	r2, #31
  40be08:	dc1c      	bgt.n	40be44 <__register_exitproc+0x60>
  40be0a:	f102 0e01 	add.w	lr, r2, #1
  40be0e:	b176      	cbz	r6, 40be2e <__register_exitproc+0x4a>
  40be10:	eb03 0182 	add.w	r1, r3, r2, lsl #2
  40be14:	2401      	movs	r4, #1
  40be16:	f8c1 9088 	str.w	r9, [r1, #136]	; 0x88
  40be1a:	f8d3 0188 	ldr.w	r0, [r3, #392]	; 0x188
  40be1e:	4094      	lsls	r4, r2
  40be20:	4320      	orrs	r0, r4
  40be22:	2e02      	cmp	r6, #2
  40be24:	f8c3 0188 	str.w	r0, [r3, #392]	; 0x188
  40be28:	f8c1 8108 	str.w	r8, [r1, #264]	; 0x108
  40be2c:	d023      	beq.n	40be76 <__register_exitproc+0x92>
  40be2e:	3202      	adds	r2, #2
  40be30:	f8c3 e004 	str.w	lr, [r3, #4]
  40be34:	6828      	ldr	r0, [r5, #0]
  40be36:	f843 7022 	str.w	r7, [r3, r2, lsl #2]
  40be3a:	f7ff f927 	bl	40b08c <__retarget_lock_release_recursive>
  40be3e:	2000      	movs	r0, #0
  40be40:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
  40be44:	4b17      	ldr	r3, [pc, #92]	; (40bea4 <__register_exitproc+0xc0>)
  40be46:	b30b      	cbz	r3, 40be8c <__register_exitproc+0xa8>
  40be48:	f44f 70c8 	mov.w	r0, #400	; 0x190
  40be4c:	f7ff f998 	bl	40b180 <malloc>
  40be50:	4603      	mov	r3, r0
  40be52:	b1d8      	cbz	r0, 40be8c <__register_exitproc+0xa8>
  40be54:	f8d4 2148 	ldr.w	r2, [r4, #328]	; 0x148
  40be58:	6002      	str	r2, [r0, #0]
  40be5a:	2100      	movs	r1, #0
  40be5c:	6041      	str	r1, [r0, #4]
  40be5e:	460a      	mov	r2, r1
  40be60:	f8c4 0148 	str.w	r0, [r4, #328]	; 0x148
  40be64:	f04f 0e01 	mov.w	lr, #1
  40be68:	f8c0 1188 	str.w	r1, [r0, #392]	; 0x188
  40be6c:	f8c0 118c 	str.w	r1, [r0, #396]	; 0x18c
  40be70:	2e00      	cmp	r6, #0
  40be72:	d0dc      	beq.n	40be2e <__register_exitproc+0x4a>
  40be74:	e7cc      	b.n	40be10 <__register_exitproc+0x2c>
  40be76:	f8d3 118c 	ldr.w	r1, [r3, #396]	; 0x18c
  40be7a:	430c      	orrs	r4, r1
  40be7c:	f8c3 418c 	str.w	r4, [r3, #396]	; 0x18c
  40be80:	e7d5      	b.n	40be2e <__register_exitproc+0x4a>
  40be82:	f504 73a6 	add.w	r3, r4, #332	; 0x14c
  40be86:	f8c4 3148 	str.w	r3, [r4, #328]	; 0x148
  40be8a:	e7bb      	b.n	40be04 <__register_exitproc+0x20>
  40be8c:	6828      	ldr	r0, [r5, #0]
  40be8e:	f7ff f8fd 	bl	40b08c <__retarget_lock_release_recursive>
  40be92:	f04f 30ff 	mov.w	r0, #4294967295
  40be96:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
  40be9a:	bf00      	nop
  40be9c:	20400478 	.word	0x20400478
  40bea0:	0040d9c8 	.word	0x0040d9c8
  40bea4:	0040b181 	.word	0x0040b181

0040bea8 <_close_r>:
  40bea8:	b538      	push	{r3, r4, r5, lr}
  40beaa:	4c07      	ldr	r4, [pc, #28]	; (40bec8 <_close_r+0x20>)
  40beac:	2300      	movs	r3, #0
  40beae:	4605      	mov	r5, r0
  40beb0:	4608      	mov	r0, r1
  40beb2:	6023      	str	r3, [r4, #0]
  40beb4:	f7fc fdde 	bl	408a74 <_close>
  40beb8:	1c43      	adds	r3, r0, #1
  40beba:	d000      	beq.n	40bebe <_close_r+0x16>
  40bebc:	bd38      	pop	{r3, r4, r5, pc}
  40bebe:	6823      	ldr	r3, [r4, #0]
  40bec0:	2b00      	cmp	r3, #0
  40bec2:	d0fb      	beq.n	40bebc <_close_r+0x14>
  40bec4:	602b      	str	r3, [r5, #0]
  40bec6:	bd38      	pop	{r3, r4, r5, pc}
  40bec8:	2040cb28 	.word	0x2040cb28

0040becc <_fclose_r>:
  40becc:	b570      	push	{r4, r5, r6, lr}
  40bece:	b159      	cbz	r1, 40bee8 <_fclose_r+0x1c>
  40bed0:	4605      	mov	r5, r0
  40bed2:	460c      	mov	r4, r1
  40bed4:	b110      	cbz	r0, 40bedc <_fclose_r+0x10>
  40bed6:	6b83      	ldr	r3, [r0, #56]	; 0x38
  40bed8:	2b00      	cmp	r3, #0
  40beda:	d03c      	beq.n	40bf56 <_fclose_r+0x8a>
  40bedc:	6e63      	ldr	r3, [r4, #100]	; 0x64
  40bede:	07d8      	lsls	r0, r3, #31
  40bee0:	d505      	bpl.n	40beee <_fclose_r+0x22>
  40bee2:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
  40bee6:	b92b      	cbnz	r3, 40bef4 <_fclose_r+0x28>
  40bee8:	2600      	movs	r6, #0
  40beea:	4630      	mov	r0, r6
  40beec:	bd70      	pop	{r4, r5, r6, pc}
  40beee:	89a3      	ldrh	r3, [r4, #12]
  40bef0:	0599      	lsls	r1, r3, #22
  40bef2:	d53c      	bpl.n	40bf6e <_fclose_r+0xa2>
  40bef4:	4621      	mov	r1, r4
  40bef6:	4628      	mov	r0, r5
  40bef8:	f7fe fc0e 	bl	40a718 <__sflush_r>
  40befc:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
  40befe:	4606      	mov	r6, r0
  40bf00:	b133      	cbz	r3, 40bf10 <_fclose_r+0x44>
  40bf02:	69e1      	ldr	r1, [r4, #28]
  40bf04:	4628      	mov	r0, r5
  40bf06:	4798      	blx	r3
  40bf08:	2800      	cmp	r0, #0
  40bf0a:	bfb8      	it	lt
  40bf0c:	f04f 36ff 	movlt.w	r6, #4294967295
  40bf10:	89a3      	ldrh	r3, [r4, #12]
  40bf12:	061a      	lsls	r2, r3, #24
  40bf14:	d422      	bmi.n	40bf5c <_fclose_r+0x90>
  40bf16:	6b21      	ldr	r1, [r4, #48]	; 0x30
  40bf18:	b141      	cbz	r1, 40bf2c <_fclose_r+0x60>
  40bf1a:	f104 0340 	add.w	r3, r4, #64	; 0x40
  40bf1e:	4299      	cmp	r1, r3
  40bf20:	d002      	beq.n	40bf28 <_fclose_r+0x5c>
  40bf22:	4628      	mov	r0, r5
  40bf24:	f7fe fe16 	bl	40ab54 <_free_r>
  40bf28:	2300      	movs	r3, #0
  40bf2a:	6323      	str	r3, [r4, #48]	; 0x30
  40bf2c:	6c61      	ldr	r1, [r4, #68]	; 0x44
  40bf2e:	b121      	cbz	r1, 40bf3a <_fclose_r+0x6e>
  40bf30:	4628      	mov	r0, r5
  40bf32:	f7fe fe0f 	bl	40ab54 <_free_r>
  40bf36:	2300      	movs	r3, #0
  40bf38:	6463      	str	r3, [r4, #68]	; 0x44
  40bf3a:	f7fe fd11 	bl	40a960 <__sfp_lock_acquire>
  40bf3e:	6e63      	ldr	r3, [r4, #100]	; 0x64
  40bf40:	2200      	movs	r2, #0
  40bf42:	07db      	lsls	r3, r3, #31
  40bf44:	81a2      	strh	r2, [r4, #12]
  40bf46:	d50e      	bpl.n	40bf66 <_fclose_r+0x9a>
  40bf48:	6da0      	ldr	r0, [r4, #88]	; 0x58
  40bf4a:	f7ff f89b 	bl	40b084 <__retarget_lock_close_recursive>
  40bf4e:	f7fe fd0d 	bl	40a96c <__sfp_lock_release>
  40bf52:	4630      	mov	r0, r6
  40bf54:	bd70      	pop	{r4, r5, r6, pc}
  40bf56:	f7fe fcd7 	bl	40a908 <__sinit>
  40bf5a:	e7bf      	b.n	40bedc <_fclose_r+0x10>
  40bf5c:	6921      	ldr	r1, [r4, #16]
  40bf5e:	4628      	mov	r0, r5
  40bf60:	f7fe fdf8 	bl	40ab54 <_free_r>
  40bf64:	e7d7      	b.n	40bf16 <_fclose_r+0x4a>
  40bf66:	6da0      	ldr	r0, [r4, #88]	; 0x58
  40bf68:	f7ff f890 	bl	40b08c <__retarget_lock_release_recursive>
  40bf6c:	e7ec      	b.n	40bf48 <_fclose_r+0x7c>
  40bf6e:	6da0      	ldr	r0, [r4, #88]	; 0x58
  40bf70:	f7ff f88a 	bl	40b088 <__retarget_lock_acquire_recursive>
  40bf74:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
  40bf78:	2b00      	cmp	r3, #0
  40bf7a:	d1bb      	bne.n	40bef4 <_fclose_r+0x28>
  40bf7c:	6e66      	ldr	r6, [r4, #100]	; 0x64
  40bf7e:	f016 0601 	ands.w	r6, r6, #1
  40bf82:	d1b1      	bne.n	40bee8 <_fclose_r+0x1c>
  40bf84:	6da0      	ldr	r0, [r4, #88]	; 0x58
  40bf86:	f7ff f881 	bl	40b08c <__retarget_lock_release_recursive>
  40bf8a:	4630      	mov	r0, r6
  40bf8c:	bd70      	pop	{r4, r5, r6, pc}
  40bf8e:	bf00      	nop

0040bf90 <_fstat_r>:
  40bf90:	b538      	push	{r3, r4, r5, lr}
  40bf92:	460b      	mov	r3, r1
  40bf94:	4c07      	ldr	r4, [pc, #28]	; (40bfb4 <_fstat_r+0x24>)
  40bf96:	4605      	mov	r5, r0
  40bf98:	4611      	mov	r1, r2
  40bf9a:	4618      	mov	r0, r3
  40bf9c:	2300      	movs	r3, #0
  40bf9e:	6023      	str	r3, [r4, #0]
  40bfa0:	f7fc fd6b 	bl	408a7a <_fstat>
  40bfa4:	1c43      	adds	r3, r0, #1
  40bfa6:	d000      	beq.n	40bfaa <_fstat_r+0x1a>
  40bfa8:	bd38      	pop	{r3, r4, r5, pc}
  40bfaa:	6823      	ldr	r3, [r4, #0]
  40bfac:	2b00      	cmp	r3, #0
  40bfae:	d0fb      	beq.n	40bfa8 <_fstat_r+0x18>
  40bfb0:	602b      	str	r3, [r5, #0]
  40bfb2:	bd38      	pop	{r3, r4, r5, pc}
  40bfb4:	2040cb28 	.word	0x2040cb28

0040bfb8 <_isatty_r>:
  40bfb8:	b538      	push	{r3, r4, r5, lr}
  40bfba:	4c07      	ldr	r4, [pc, #28]	; (40bfd8 <_isatty_r+0x20>)
  40bfbc:	2300      	movs	r3, #0
  40bfbe:	4605      	mov	r5, r0
  40bfc0:	4608      	mov	r0, r1
  40bfc2:	6023      	str	r3, [r4, #0]
  40bfc4:	f7fc fd5e 	bl	408a84 <_isatty>
  40bfc8:	1c43      	adds	r3, r0, #1
  40bfca:	d000      	beq.n	40bfce <_isatty_r+0x16>
  40bfcc:	bd38      	pop	{r3, r4, r5, pc}
  40bfce:	6823      	ldr	r3, [r4, #0]
  40bfd0:	2b00      	cmp	r3, #0
  40bfd2:	d0fb      	beq.n	40bfcc <_isatty_r+0x14>
  40bfd4:	602b      	str	r3, [r5, #0]
  40bfd6:	bd38      	pop	{r3, r4, r5, pc}
  40bfd8:	2040cb28 	.word	0x2040cb28

0040bfdc <_lseek_r>:
  40bfdc:	b570      	push	{r4, r5, r6, lr}
  40bfde:	460d      	mov	r5, r1
  40bfe0:	4c08      	ldr	r4, [pc, #32]	; (40c004 <_lseek_r+0x28>)
  40bfe2:	4611      	mov	r1, r2
  40bfe4:	4606      	mov	r6, r0
  40bfe6:	461a      	mov	r2, r3
  40bfe8:	4628      	mov	r0, r5
  40bfea:	2300      	movs	r3, #0
  40bfec:	6023      	str	r3, [r4, #0]
  40bfee:	f7fc fd4b 	bl	408a88 <_lseek>
  40bff2:	1c43      	adds	r3, r0, #1
  40bff4:	d000      	beq.n	40bff8 <_lseek_r+0x1c>
  40bff6:	bd70      	pop	{r4, r5, r6, pc}
  40bff8:	6823      	ldr	r3, [r4, #0]
  40bffa:	2b00      	cmp	r3, #0
  40bffc:	d0fb      	beq.n	40bff6 <_lseek_r+0x1a>
  40bffe:	6033      	str	r3, [r6, #0]
  40c000:	bd70      	pop	{r4, r5, r6, pc}
  40c002:	bf00      	nop
  40c004:	2040cb28 	.word	0x2040cb28

0040c008 <_read_r>:
  40c008:	b570      	push	{r4, r5, r6, lr}
  40c00a:	460d      	mov	r5, r1
  40c00c:	4c08      	ldr	r4, [pc, #32]	; (40c030 <_read_r+0x28>)
  40c00e:	4611      	mov	r1, r2
  40c010:	4606      	mov	r6, r0
  40c012:	461a      	mov	r2, r3
  40c014:	4628      	mov	r0, r5
  40c016:	2300      	movs	r3, #0
  40c018:	6023      	str	r3, [r4, #0]
  40c01a:	f7fb fdb5 	bl	407b88 <_read>
  40c01e:	1c43      	adds	r3, r0, #1
  40c020:	d000      	beq.n	40c024 <_read_r+0x1c>
  40c022:	bd70      	pop	{r4, r5, r6, pc}
  40c024:	6823      	ldr	r3, [r4, #0]
  40c026:	2b00      	cmp	r3, #0
  40c028:	d0fb      	beq.n	40c022 <_read_r+0x1a>
  40c02a:	6033      	str	r3, [r6, #0]
  40c02c:	bd70      	pop	{r4, r5, r6, pc}
  40c02e:	bf00      	nop
  40c030:	2040cb28 	.word	0x2040cb28

0040c034 <__aeabi_uldivmod>:
  40c034:	b953      	cbnz	r3, 40c04c <__aeabi_uldivmod+0x18>
  40c036:	b94a      	cbnz	r2, 40c04c <__aeabi_uldivmod+0x18>
  40c038:	2900      	cmp	r1, #0
  40c03a:	bf08      	it	eq
  40c03c:	2800      	cmpeq	r0, #0
  40c03e:	bf1c      	itt	ne
  40c040:	f04f 31ff 	movne.w	r1, #4294967295
  40c044:	f04f 30ff 	movne.w	r0, #4294967295
  40c048:	f000 b97a 	b.w	40c340 <__aeabi_idiv0>
  40c04c:	f1ad 0c08 	sub.w	ip, sp, #8
  40c050:	e96d ce04 	strd	ip, lr, [sp, #-16]!
  40c054:	f000 f806 	bl	40c064 <__udivmoddi4>
  40c058:	f8dd e004 	ldr.w	lr, [sp, #4]
  40c05c:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
  40c060:	b004      	add	sp, #16
  40c062:	4770      	bx	lr

0040c064 <__udivmoddi4>:
  40c064:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
  40c068:	468c      	mov	ip, r1
  40c06a:	460d      	mov	r5, r1
  40c06c:	4604      	mov	r4, r0
  40c06e:	9e08      	ldr	r6, [sp, #32]
  40c070:	2b00      	cmp	r3, #0
  40c072:	d151      	bne.n	40c118 <__udivmoddi4+0xb4>
  40c074:	428a      	cmp	r2, r1
  40c076:	4617      	mov	r7, r2
  40c078:	d96d      	bls.n	40c156 <__udivmoddi4+0xf2>
  40c07a:	fab2 fe82 	clz	lr, r2
  40c07e:	f1be 0f00 	cmp.w	lr, #0
  40c082:	d00b      	beq.n	40c09c <__udivmoddi4+0x38>
  40c084:	f1ce 0c20 	rsb	ip, lr, #32
  40c088:	fa01 f50e 	lsl.w	r5, r1, lr
  40c08c:	fa20 fc0c 	lsr.w	ip, r0, ip
  40c090:	fa02 f70e 	lsl.w	r7, r2, lr
  40c094:	ea4c 0c05 	orr.w	ip, ip, r5
  40c098:	fa00 f40e 	lsl.w	r4, r0, lr
  40c09c:	ea4f 4a17 	mov.w	sl, r7, lsr #16
  40c0a0:	0c25      	lsrs	r5, r4, #16
  40c0a2:	fbbc f8fa 	udiv	r8, ip, sl
  40c0a6:	fa1f f987 	uxth.w	r9, r7
  40c0aa:	fb0a cc18 	mls	ip, sl, r8, ip
  40c0ae:	ea45 450c 	orr.w	r5, r5, ip, lsl #16
  40c0b2:	fb08 f309 	mul.w	r3, r8, r9
  40c0b6:	42ab      	cmp	r3, r5
  40c0b8:	d90a      	bls.n	40c0d0 <__udivmoddi4+0x6c>
  40c0ba:	19ed      	adds	r5, r5, r7
  40c0bc:	f108 32ff 	add.w	r2, r8, #4294967295
  40c0c0:	f080 8123 	bcs.w	40c30a <__udivmoddi4+0x2a6>
  40c0c4:	42ab      	cmp	r3, r5
  40c0c6:	f240 8120 	bls.w	40c30a <__udivmoddi4+0x2a6>
  40c0ca:	f1a8 0802 	sub.w	r8, r8, #2
  40c0ce:	443d      	add	r5, r7
  40c0d0:	1aed      	subs	r5, r5, r3
  40c0d2:	b2a4      	uxth	r4, r4
  40c0d4:	fbb5 f0fa 	udiv	r0, r5, sl
  40c0d8:	fb0a 5510 	mls	r5, sl, r0, r5
  40c0dc:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
  40c0e0:	fb00 f909 	mul.w	r9, r0, r9
  40c0e4:	45a1      	cmp	r9, r4
  40c0e6:	d909      	bls.n	40c0fc <__udivmoddi4+0x98>
  40c0e8:	19e4      	adds	r4, r4, r7
  40c0ea:	f100 33ff 	add.w	r3, r0, #4294967295
  40c0ee:	f080 810a 	bcs.w	40c306 <__udivmoddi4+0x2a2>
  40c0f2:	45a1      	cmp	r9, r4
  40c0f4:	f240 8107 	bls.w	40c306 <__udivmoddi4+0x2a2>
  40c0f8:	3802      	subs	r0, #2
  40c0fa:	443c      	add	r4, r7
  40c0fc:	eba4 0409 	sub.w	r4, r4, r9
  40c100:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
  40c104:	2100      	movs	r1, #0
  40c106:	2e00      	cmp	r6, #0
  40c108:	d061      	beq.n	40c1ce <__udivmoddi4+0x16a>
  40c10a:	fa24 f40e 	lsr.w	r4, r4, lr
  40c10e:	2300      	movs	r3, #0
  40c110:	6034      	str	r4, [r6, #0]
  40c112:	6073      	str	r3, [r6, #4]
  40c114:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
  40c118:	428b      	cmp	r3, r1
  40c11a:	d907      	bls.n	40c12c <__udivmoddi4+0xc8>
  40c11c:	2e00      	cmp	r6, #0
  40c11e:	d054      	beq.n	40c1ca <__udivmoddi4+0x166>
  40c120:	2100      	movs	r1, #0
  40c122:	e886 0021 	stmia.w	r6, {r0, r5}
  40c126:	4608      	mov	r0, r1
  40c128:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
  40c12c:	fab3 f183 	clz	r1, r3
  40c130:	2900      	cmp	r1, #0
  40c132:	f040 808e 	bne.w	40c252 <__udivmoddi4+0x1ee>
  40c136:	42ab      	cmp	r3, r5
  40c138:	d302      	bcc.n	40c140 <__udivmoddi4+0xdc>
  40c13a:	4282      	cmp	r2, r0
  40c13c:	f200 80fa 	bhi.w	40c334 <__udivmoddi4+0x2d0>
  40c140:	1a84      	subs	r4, r0, r2
  40c142:	eb65 0503 	sbc.w	r5, r5, r3
  40c146:	2001      	movs	r0, #1
  40c148:	46ac      	mov	ip, r5
  40c14a:	2e00      	cmp	r6, #0
  40c14c:	d03f      	beq.n	40c1ce <__udivmoddi4+0x16a>
  40c14e:	e886 1010 	stmia.w	r6, {r4, ip}
  40c152:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
  40c156:	b912      	cbnz	r2, 40c15e <__udivmoddi4+0xfa>
  40c158:	2701      	movs	r7, #1
  40c15a:	fbb7 f7f2 	udiv	r7, r7, r2
  40c15e:	fab7 fe87 	clz	lr, r7
  40c162:	f1be 0f00 	cmp.w	lr, #0
  40c166:	d134      	bne.n	40c1d2 <__udivmoddi4+0x16e>
  40c168:	1beb      	subs	r3, r5, r7
  40c16a:	0c3a      	lsrs	r2, r7, #16
  40c16c:	fa1f fc87 	uxth.w	ip, r7
  40c170:	2101      	movs	r1, #1
  40c172:	fbb3 f8f2 	udiv	r8, r3, r2
  40c176:	0c25      	lsrs	r5, r4, #16
  40c178:	fb02 3318 	mls	r3, r2, r8, r3
  40c17c:	ea45 4503 	orr.w	r5, r5, r3, lsl #16
  40c180:	fb0c f308 	mul.w	r3, ip, r8
  40c184:	42ab      	cmp	r3, r5
  40c186:	d907      	bls.n	40c198 <__udivmoddi4+0x134>
  40c188:	19ed      	adds	r5, r5, r7
  40c18a:	f108 30ff 	add.w	r0, r8, #4294967295
  40c18e:	d202      	bcs.n	40c196 <__udivmoddi4+0x132>
  40c190:	42ab      	cmp	r3, r5
  40c192:	f200 80d1 	bhi.w	40c338 <__udivmoddi4+0x2d4>
  40c196:	4680      	mov	r8, r0
  40c198:	1aed      	subs	r5, r5, r3
  40c19a:	b2a3      	uxth	r3, r4
  40c19c:	fbb5 f0f2 	udiv	r0, r5, r2
  40c1a0:	fb02 5510 	mls	r5, r2, r0, r5
  40c1a4:	ea43 4405 	orr.w	r4, r3, r5, lsl #16
  40c1a8:	fb0c fc00 	mul.w	ip, ip, r0
  40c1ac:	45a4      	cmp	ip, r4
  40c1ae:	d907      	bls.n	40c1c0 <__udivmoddi4+0x15c>
  40c1b0:	19e4      	adds	r4, r4, r7
  40c1b2:	f100 33ff 	add.w	r3, r0, #4294967295
  40c1b6:	d202      	bcs.n	40c1be <__udivmoddi4+0x15a>
  40c1b8:	45a4      	cmp	ip, r4
  40c1ba:	f200 80b8 	bhi.w	40c32e <__udivmoddi4+0x2ca>
  40c1be:	4618      	mov	r0, r3
  40c1c0:	eba4 040c 	sub.w	r4, r4, ip
  40c1c4:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
  40c1c8:	e79d      	b.n	40c106 <__udivmoddi4+0xa2>
  40c1ca:	4631      	mov	r1, r6
  40c1cc:	4630      	mov	r0, r6
  40c1ce:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
  40c1d2:	f1ce 0420 	rsb	r4, lr, #32
  40c1d6:	fa05 f30e 	lsl.w	r3, r5, lr
  40c1da:	fa07 f70e 	lsl.w	r7, r7, lr
  40c1de:	fa20 f804 	lsr.w	r8, r0, r4
  40c1e2:	0c3a      	lsrs	r2, r7, #16
  40c1e4:	fa25 f404 	lsr.w	r4, r5, r4
  40c1e8:	ea48 0803 	orr.w	r8, r8, r3
  40c1ec:	fbb4 f1f2 	udiv	r1, r4, r2
  40c1f0:	ea4f 4518 	mov.w	r5, r8, lsr #16
  40c1f4:	fb02 4411 	mls	r4, r2, r1, r4
  40c1f8:	fa1f fc87 	uxth.w	ip, r7
  40c1fc:	ea45 4504 	orr.w	r5, r5, r4, lsl #16
  40c200:	fb01 f30c 	mul.w	r3, r1, ip
  40c204:	42ab      	cmp	r3, r5
  40c206:	fa00 f40e 	lsl.w	r4, r0, lr
  40c20a:	d909      	bls.n	40c220 <__udivmoddi4+0x1bc>
  40c20c:	19ed      	adds	r5, r5, r7
  40c20e:	f101 30ff 	add.w	r0, r1, #4294967295
  40c212:	f080 808a 	bcs.w	40c32a <__udivmoddi4+0x2c6>
  40c216:	42ab      	cmp	r3, r5
  40c218:	f240 8087 	bls.w	40c32a <__udivmoddi4+0x2c6>
  40c21c:	3902      	subs	r1, #2
  40c21e:	443d      	add	r5, r7
  40c220:	1aeb      	subs	r3, r5, r3
  40c222:	fa1f f588 	uxth.w	r5, r8
  40c226:	fbb3 f0f2 	udiv	r0, r3, r2
  40c22a:	fb02 3310 	mls	r3, r2, r0, r3
  40c22e:	ea45 4503 	orr.w	r5, r5, r3, lsl #16
  40c232:	fb00 f30c 	mul.w	r3, r0, ip
  40c236:	42ab      	cmp	r3, r5
  40c238:	d907      	bls.n	40c24a <__udivmoddi4+0x1e6>
  40c23a:	19ed      	adds	r5, r5, r7
  40c23c:	f100 38ff 	add.w	r8, r0, #4294967295
  40c240:	d26f      	bcs.n	40c322 <__udivmoddi4+0x2be>
  40c242:	42ab      	cmp	r3, r5
  40c244:	d96d      	bls.n	40c322 <__udivmoddi4+0x2be>
  40c246:	3802      	subs	r0, #2
  40c248:	443d      	add	r5, r7
  40c24a:	1aeb      	subs	r3, r5, r3
  40c24c:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
  40c250:	e78f      	b.n	40c172 <__udivmoddi4+0x10e>
  40c252:	f1c1 0720 	rsb	r7, r1, #32
  40c256:	fa22 f807 	lsr.w	r8, r2, r7
  40c25a:	408b      	lsls	r3, r1
  40c25c:	fa05 f401 	lsl.w	r4, r5, r1
  40c260:	ea48 0303 	orr.w	r3, r8, r3
  40c264:	fa20 fe07 	lsr.w	lr, r0, r7
  40c268:	ea4f 4c13 	mov.w	ip, r3, lsr #16
  40c26c:	40fd      	lsrs	r5, r7
  40c26e:	ea4e 0e04 	orr.w	lr, lr, r4
  40c272:	fbb5 f9fc 	udiv	r9, r5, ip
  40c276:	ea4f 441e 	mov.w	r4, lr, lsr #16
  40c27a:	fb0c 5519 	mls	r5, ip, r9, r5
  40c27e:	fa1f f883 	uxth.w	r8, r3
  40c282:	ea44 4505 	orr.w	r5, r4, r5, lsl #16
  40c286:	fb09 f408 	mul.w	r4, r9, r8
  40c28a:	42ac      	cmp	r4, r5
  40c28c:	fa02 f201 	lsl.w	r2, r2, r1
  40c290:	fa00 fa01 	lsl.w	sl, r0, r1
  40c294:	d908      	bls.n	40c2a8 <__udivmoddi4+0x244>
  40c296:	18ed      	adds	r5, r5, r3
  40c298:	f109 30ff 	add.w	r0, r9, #4294967295
  40c29c:	d243      	bcs.n	40c326 <__udivmoddi4+0x2c2>
  40c29e:	42ac      	cmp	r4, r5
  40c2a0:	d941      	bls.n	40c326 <__udivmoddi4+0x2c2>
  40c2a2:	f1a9 0902 	sub.w	r9, r9, #2
  40c2a6:	441d      	add	r5, r3
  40c2a8:	1b2d      	subs	r5, r5, r4
  40c2aa:	fa1f fe8e 	uxth.w	lr, lr
  40c2ae:	fbb5 f0fc 	udiv	r0, r5, ip
  40c2b2:	fb0c 5510 	mls	r5, ip, r0, r5
  40c2b6:	ea4e 4405 	orr.w	r4, lr, r5, lsl #16
  40c2ba:	fb00 f808 	mul.w	r8, r0, r8
  40c2be:	45a0      	cmp	r8, r4
  40c2c0:	d907      	bls.n	40c2d2 <__udivmoddi4+0x26e>
  40c2c2:	18e4      	adds	r4, r4, r3
  40c2c4:	f100 35ff 	add.w	r5, r0, #4294967295
  40c2c8:	d229      	bcs.n	40c31e <__udivmoddi4+0x2ba>
  40c2ca:	45a0      	cmp	r8, r4
  40c2cc:	d927      	bls.n	40c31e <__udivmoddi4+0x2ba>
  40c2ce:	3802      	subs	r0, #2
  40c2d0:	441c      	add	r4, r3
  40c2d2:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
  40c2d6:	eba4 0408 	sub.w	r4, r4, r8
  40c2da:	fba0 8902 	umull	r8, r9, r0, r2
  40c2de:	454c      	cmp	r4, r9
  40c2e0:	46c6      	mov	lr, r8
  40c2e2:	464d      	mov	r5, r9
  40c2e4:	d315      	bcc.n	40c312 <__udivmoddi4+0x2ae>
  40c2e6:	d012      	beq.n	40c30e <__udivmoddi4+0x2aa>
  40c2e8:	b156      	cbz	r6, 40c300 <__udivmoddi4+0x29c>
  40c2ea:	ebba 030e 	subs.w	r3, sl, lr
  40c2ee:	eb64 0405 	sbc.w	r4, r4, r5
  40c2f2:	fa04 f707 	lsl.w	r7, r4, r7
  40c2f6:	40cb      	lsrs	r3, r1
  40c2f8:	431f      	orrs	r7, r3
  40c2fa:	40cc      	lsrs	r4, r1
  40c2fc:	6037      	str	r7, [r6, #0]
  40c2fe:	6074      	str	r4, [r6, #4]
  40c300:	2100      	movs	r1, #0
  40c302:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
  40c306:	4618      	mov	r0, r3
  40c308:	e6f8      	b.n	40c0fc <__udivmoddi4+0x98>
  40c30a:	4690      	mov	r8, r2
  40c30c:	e6e0      	b.n	40c0d0 <__udivmoddi4+0x6c>
  40c30e:	45c2      	cmp	sl, r8
  40c310:	d2ea      	bcs.n	40c2e8 <__udivmoddi4+0x284>
  40c312:	ebb8 0e02 	subs.w	lr, r8, r2
  40c316:	eb69 0503 	sbc.w	r5, r9, r3
  40c31a:	3801      	subs	r0, #1
  40c31c:	e7e4      	b.n	40c2e8 <__udivmoddi4+0x284>
  40c31e:	4628      	mov	r0, r5
  40c320:	e7d7      	b.n	40c2d2 <__udivmoddi4+0x26e>
  40c322:	4640      	mov	r0, r8
  40c324:	e791      	b.n	40c24a <__udivmoddi4+0x1e6>
  40c326:	4681      	mov	r9, r0
  40c328:	e7be      	b.n	40c2a8 <__udivmoddi4+0x244>
  40c32a:	4601      	mov	r1, r0
  40c32c:	e778      	b.n	40c220 <__udivmoddi4+0x1bc>
  40c32e:	3802      	subs	r0, #2
  40c330:	443c      	add	r4, r7
  40c332:	e745      	b.n	40c1c0 <__udivmoddi4+0x15c>
  40c334:	4608      	mov	r0, r1
  40c336:	e708      	b.n	40c14a <__udivmoddi4+0xe6>
  40c338:	f1a8 0802 	sub.w	r8, r8, #2
  40c33c:	443d      	add	r5, r7
  40c33e:	e72b      	b.n	40c198 <__udivmoddi4+0x134>

0040c340 <__aeabi_idiv0>:
  40c340:	4770      	bx	lr
  40c342:	bf00      	nop

0040c344 <mmc_trans_multipliers>:
  40c344:	0000 0000 000a 0000 000c 0000 000d 0000     ................
  40c354:	000f 0000 0014 0000 001a 0000 001e 0000     ................
  40c364:	0023 0000 0028 0000 002d 0000 0034 0000     #...(...-...4...
  40c374:	0037 0000 003c 0000 0046 0000 0050 0000     7...<...F...P...

0040c384 <sd_mmc_trans_units>:
  40c384:	000a 0000 0064 0000 03e8 0000 2710 0000     ....d........'..
	...

0040c3a0 <sd_trans_multipliers>:
  40c3a0:	0000 0000 000a 0000 000c 0000 000d 0000     ................
  40c3b0:	000f 0000 0014 0000 0019 0000 001e 0000     ................
  40c3c0:	0023 0000 0028 0000 002d 0000 0032 0000     #...(...-...2...
  40c3d0:	0037 0000 003c 0000 0046 0000 0050 0000     7...<...F...P...

0040c3e0 <LfnOfs>:
  40c3e0:	0301 0705 0e09 1210 1614 1c18 001e 0000     ................

0040c3f0 <excvt.5681>:
  40c3f0:	9a80 b690 b78e 808f d3d2 d8d4 ded7 8f8e     ................
  40c400:	9290 e292 e399 ebea 9959 9d9a 9d9c 9f9e     ........Y.......
  40c410:	d6b5 e9e0 a5a5 a7a6 a9a8 abaa 21ac afae     .............!..
  40c420:	b1b0 b3b2 b5b4 b7b6 b9b8 bbba bdbc bfbe     ................
  40c430:	c1c0 c3c2 c5c4 c7c7 c9c8 cbca cdcc cfce     ................
  40c440:	d1d0 d3d2 d5d4 d7d6 d9d8 dbda dddc dfde     ................
  40c450:	e1e0 e3e2 e5e5 e7e6 e9e7 ebea eded efee     ................
  40c460:	f1f0 f3f2 f5f4 f7f6 f9f8 fbfa fdfc fffe     ................
  40c470:	2a22 3c3a 3f3e 7f7c 0000 0000 2c2b 3d3b     "*:<>?|.....+,;=
  40c480:	5d5b 0000                                   []..

0040c484 <Tbl>:
  40c484:	00c7 00fc 00e9 00e2 00e4 00e0 00e5 00e7     ................
  40c494:	00ea 00eb 00e8 00ef 00ee 00ec 00c4 00c5     ................
  40c4a4:	00c9 00e6 00c6 00f4 00f6 00f2 00fb 00f9     ................
  40c4b4:	00ff 00d6 00dc 00f8 00a3 00d8 00d7 0192     ................
  40c4c4:	00e1 00ed 00f3 00fa 00f1 00d1 00aa 00ba     ................
  40c4d4:	00bf 00ae 00ac 00bd 00bc 00a1 00ab 00bb     ................
  40c4e4:	2591 2592 2593 2502 2524 00c1 00c2 00c0     .%.%.%.%$%......
  40c4f4:	00a9 2563 2551 2557 255d 00a2 00a5 2510     ..c%Q%W%]%.....%
  40c504:	2514 2534 252c 251c 2500 253c 00e3 00c3     .%4%,%.%.%<%....
  40c514:	255a 2554 2569 2566 2560 2550 256c 00a4     Z%T%i%f%`%P%l%..
  40c524:	00f0 00d0 00ca 00cb 00c8 0131 00cd 00ce     ..........1.....
  40c534:	00cf 2518 250c 2588 2584 00a6 00cc 2580     ...%.%.%.%.....%
  40c544:	00d3 00df 00d4 00d2 00f5 00d5 00b5 00fe     ................
  40c554:	00de 00da 00db 00d9 00fd 00dd 00af 00b4     ................
  40c564:	00ad 00b1 2017 00be 00b6 00a7 00f7 00b8     ..... ..........
  40c574:	00b0 00a8 00b7 00b9 00b3 00b2 25a0 00a0     .............%..

0040c584 <tbl_lower.5431>:
  40c584:	0061 0062 0063 0064 0065 0066 0067 0068     a.b.c.d.e.f.g.h.
  40c594:	0069 006a 006b 006c 006d 006e 006f 0070     i.j.k.l.m.n.o.p.
  40c5a4:	0071 0072 0073 0074 0075 0076 0077 0078     q.r.s.t.u.v.w.x.
  40c5b4:	0079 007a 00a1 00a2 00a3 00a5 00ac 00af     y.z.............
  40c5c4:	00e0 00e1 00e2 00e3 00e4 00e5 00e6 00e7     ................
  40c5d4:	00e8 00e9 00ea 00eb 00ec 00ed 00ee 00ef     ................
  40c5e4:	00f0 00f1 00f2 00f3 00f4 00f5 00f6 00f8     ................
  40c5f4:	00f9 00fa 00fb 00fc 00fd 00fe 00ff 0101     ................
  40c604:	0103 0105 0107 0109 010b 010d 010f 0111     ................
  40c614:	0113 0115 0117 0119 011b 011d 011f 0121     ..............!.
  40c624:	0123 0125 0127 0129 012b 012d 012f 0131     #.%.'.).+.-./.1.
  40c634:	0133 0135 0137 013a 013c 013e 0140 0142     3.5.7.:.<.>.@.B.
  40c644:	0144 0146 0148 014b 014d 014f 0151 0153     D.F.H.K.M.O.Q.S.
  40c654:	0155 0157 0159 015b 015d 015f 0161 0163     U.W.Y.[.]._.a.c.
  40c664:	0165 0167 0169 016b 016d 016f 0171 0173     e.g.i.k.m.o.q.s.
  40c674:	0175 0177 017a 017c 017e 0192 03b1 03b2     u.w.z.|.~.......
  40c684:	03b3 03b4 03b5 03b6 03b7 03b8 03b9 03ba     ................
  40c694:	03bb 03bc 03bd 03be 03bf 03c0 03c1 03c3     ................
  40c6a4:	03c4 03c5 03c6 03c7 03c8 03c9 03ca 0430     ..............0.
  40c6b4:	0431 0432 0433 0434 0435 0436 0437 0438     1.2.3.4.5.6.7.8.
  40c6c4:	0439 043a 043b 043c 043d 043e 043f 0440     9.:.;.<.=.>.?.@.
  40c6d4:	0441 0442 0443 0444 0445 0446 0447 0448     A.B.C.D.E.F.G.H.
  40c6e4:	0449 044a 044b 044c 044d 044e 044f 0451     I.J.K.L.M.N.O.Q.
  40c6f4:	0452 0453 0454 0455 0456 0457 0458 0459     R.S.T.U.V.W.X.Y.
  40c704:	045a 045b 045c 045e 045f 2170 2171 2172     Z.[.\.^._.p!q!r!
  40c714:	2173 2174 2175 2176 2177 2178 2179 217a     s!t!u!v!w!x!y!z!
  40c724:	217b 217c 217d 217e 217f ff41 ff42 ff43     {!|!}!~!.!A.B.C.
  40c734:	ff44 ff45 ff46 ff47 ff48 ff49 ff4a ff4b     D.E.F.G.H.I.J.K.
  40c744:	ff4c ff4d ff4e ff4f ff50 ff51 ff52 ff53     L.M.N.O.P.Q.R.S.
  40c754:	ff54 ff55 ff56 ff57 ff58 ff59 ff5a 0000     T.U.V.W.X.Y.Z...

0040c764 <tbl_upper.5432>:
  40c764:	0041 0042 0043 0044 0045 0046 0047 0048     A.B.C.D.E.F.G.H.
  40c774:	0049 004a 004b 004c 004d 004e 004f 0050     I.J.K.L.M.N.O.P.
  40c784:	0051 0052 0053 0054 0055 0056 0057 0058     Q.R.S.T.U.V.W.X.
  40c794:	0059 005a 0021 ffe0 ffe1 ffe5 ffe2 ffe3     Y.Z.!...........
  40c7a4:	00c0 00c1 00c2 00c3 00c4 00c5 00c6 00c7     ................
  40c7b4:	00c8 00c9 00ca 00cb 00cc 00cd 00ce 00cf     ................
  40c7c4:	00d0 00d1 00d2 00d3 00d4 00d5 00d6 00d8     ................
  40c7d4:	00d9 00da 00db 00dc 00dd 00de 0178 0100     ............x...
  40c7e4:	0102 0104 0106 0108 010a 010c 010e 0110     ................
  40c7f4:	0112 0114 0116 0118 011a 011c 011e 0120     .............. .
  40c804:	0122 0124 0126 0128 012a 012c 012e 0130     ".$.&.(.*.,...0.
  40c814:	0132 0134 0136 0139 013b 013d 013f 0141     2.4.6.9.;.=.?.A.
  40c824:	0143 0145 0147 014a 014c 014e 0150 0152     C.E.G.J.L.N.P.R.
  40c834:	0154 0156 0158 015a 015c 015e 0160 0162     T.V.X.Z.\.^.`.b.
  40c844:	0164 0166 0168 016a 016c 016e 0170 0172     d.f.h.j.l.n.p.r.
  40c854:	0174 0176 0179 017b 017d 0191 0391 0392     t.v.y.{.}.......
  40c864:	0393 0394 0395 0396 0397 0398 0399 039a     ................
  40c874:	039b 039c 039d 039e 039f 03a0 03a1 03a3     ................
  40c884:	03a4 03a5 03a6 03a7 03a8 03a9 03aa 0410     ................
  40c894:	0411 0412 0413 0414 0415 0416 0417 0418     ................
  40c8a4:	0419 041a 041b 041c 041d 041e 041f 0420     .............. .
  40c8b4:	0421 0422 0423 0424 0425 0426 0427 0428     !.".#.$.%.&.'.(.
  40c8c4:	0429 042a 042b 042c 042d 042e 042f 0401     ).*.+.,.-.../...
  40c8d4:	0402 0403 0404 0405 0406 0407 0408 0409     ................
  40c8e4:	040a 040b 040c 040e 040f 2160 2161 2162     ..........`!a!b!
  40c8f4:	2163 2164 2165 2166 2167 2168 2169 216a     c!d!e!f!g!h!i!j!
  40c904:	216b 216c 216d 216e 216f ff21 ff22 ff23     k!l!m!n!o!!.".#.
  40c914:	ff24 ff25 ff26 ff27 ff28 ff29 ff2a ff2b     $.%.&.'.(.).*.+.
  40c924:	ff2c ff2d ff2e ff2f ff30 ff31 ff32 ff33     ,.-.../.0.1.2.3.
  40c934:	ff34 ff35 ff36 ff37 ff38 ff39 ff3a 0000     4.5.6.7.8.9.:...
  40c944:	4449 454c 0000 0000 6d54 5172 0000 0000     IDLE....TmrQ....
  40c954:	6d54 2072 7653 0063                         Tmr Svc.

0040c95c <__FUNCTION__.11949>:
  40c95c:	6d6e 625f 7375 695f 636f 6c74 0000 0000     nm_bus_ioctl....
  40c96c:	4128 5050 2829 5245 2952 255b 5d73 255b     (APP)(ERR)[%s][%
  40c97c:	5d64 0000 6e49 6176 696c 2064 4f49 5443     d]..Invalid IOCT
  40c98c:	204c 6f63 6d6d 6e61 2164 000a               L command!..

0040c998 <__FUNCTION__.9901>:
  40c998:	6968 5f66 6573 646e 0000 0000               hif_send....

0040c9a4 <__FUNCTION__.9911>:
  40c9a4:	6968 5f66 7369 0072                         hif_isr.

0040c9ac <__FUNCTION__.9917>:
  40c9ac:	6968 5f66 6168 646e 656c 695f 7273 0000     hif_handle_isr..

0040c9bc <__FUNCTION__.9932>:
  40c9bc:	6968 5f66 6572 6563 7669 0065               hif_receive.

0040c9c8 <__FUNCTION__.9947>:
  40c9c8:	6968 5f66 6572 6967 7473 7265 635f 0062     hif_register_cb.
  40c9d8:	6828 6669 2029 4957 4946 485f 534f 5f54     (hif) WIFI_HOST_
  40c9e8:	4352 5f56 5443 4c52 315f 6220 7375 6620     RCV_CTRL_1 bus f
  40c9f8:	6961 0a6c 0000 0000 6828 6669 2029 6461     ail.....(hif) ad
  40ca08:	7264 7365 2073 7562 2073 6166 6c69 000a     dress bus fail..
  40ca18:	6828 6669 2029 6f43 7272 7075 6574 2064     (hif) Corrupted 
  40ca28:	6170 6b63 7465 5320 7a69 2065 203d 7525     packet Size = %u
  40ca38:	3c20 204c 203d 7525 202c 2047 203d 7525      <L = %u, G = %u
  40ca48:	202c 504f 3d20 2520 3230 3e58 000a 0000     , OP = %02X>....
  40ca58:	6828 6669 2029 6e69 6176 696c 2064 7267     (hif) invalid gr
  40ca68:	756f 2070 4449 000a 6828 6669 2029 6f68     oup ID..(hif) ho
  40ca78:	7473 6120 7070 6420 6469 276e 2074 6573     st app didn't se
  40ca88:	2074 5852 4420 6e6f 0a65 0000 6828 6669     t RX Done...(hif
  40ca98:	2029 7257 6e6f 2067 6953 657a 000a 0000     ) Wrong Size....
  40caa8:	6828 6669 2029 6146 736c 2065 6e69 6574     (hif) False inte
  40cab8:	7272 7075 2074 6c25 0078 0000 6828 6669     rrupt %lx...(hif
  40cac8:	2029 6146 6c69 7420 206f 6552 6461 6920     ) Fail to Read i
  40cad8:	746e 7265 7572 7470 7220 6765 000a 0000     nterrupt reg....
  40cae8:	6828 6669 2029 4146 4c49 7420 206f 6177     (hif) FAIL to wa
  40caf8:	656b 7075 7420 6568 6320 6968 0a70 0000     keup the chip...
  40cb08:	4828 4649 2029 6146 6c69 7420 206f 6168     (HIF) Fail to ha
  40cb18:	646e 656c 6920 746e 7265 7572 7470 2520     ndle interrupt %
  40cb28:	2064 7274 2079 6741 6961 2e6e 0a2e 0000     d try Again.....
  40cb38:	6820 6669 725f 6365 6965 6576 203a 6e49      hif_receive: In
  40cb48:	6176 696c 2064 7261 7567 656d 746e 000a     valid argument..
  40cb58:	5041 2050 6552 7571 7365 6574 2064 6953     APP Requested Si
  40cb68:	657a 6920 2073 616c 6772 7265 7420 6168     ze is larger tha
  40cb78:	206e 6874 2065 6572 6963 6576 2064 7562     n the recived bu
  40cb88:	6666 7265 7320 7a69 2065 253c 3e64 253c     ffer size <%d><%
  40cb98:	3e64 000a 5041 2050 6552 7571 7365 6574     d>..APP Requeste
  40cba8:	2064 6441 7264 7365 2073 6562 6f79 646e     d Address beyond
  40cbb8:	7420 6568 7220 6365 7669 6465 6220 6675      the recived buf
  40cbc8:	6566 2072 6461 7264 7365 2073 6e61 2064     fer address and 
  40cbd8:	656c 676e 6874 000a 5247 2070 203f 6425     length..GRp ? %d
  40cbe8:	000a 0000 4828 4649 4629 6961 206c 6f74     ....(HIF)Fail to
  40cbf8:	7720 6b61 7075 7420 6568 6320 6968 0a70      wakup the chip.
  40cc08:	0000 0000                                   ....

0040cc0c <__FUNCTION__.9874>:
  40cc0c:	326d 5f6d 6977 6966 635f 0062               m2m_wifi_cb.

0040cc18 <__FUNCTION__.9898>:
  40cc18:	326d 5f6d 6977 6966 695f 696e 0074 0000     m2m_wifi_init...

0040cc28 <__FUNCTION__.9926>:
  40cc28:	326d 5f6d 6977 6966 635f 6e6f 656e 7463     m2m_wifi_connect
  40cc38:	735f 0063 4128 5050 2829 4e49 4f46 0029     _sc.(APP)(INFO).
  40cc48:	6f43 666e 696c 7463 6465 4920 2050 2022     Conflicted IP " 
  40cc58:	7525 252e 2e75 7525 252e 2075 2022 000a     %u.%u.%u.%u " ..
  40cc68:	4552 2051 6f4e 2074 6564 6966 656e 2064     REQ Not defined 
  40cc78:	6425 000a 654b 2079 7369 6e20 746f 7620     %d..Key is not v
  40cc88:	6c61 6469 000a 0000 6e49 6176 696c 2064     alid....Invalid 
  40cc98:	654b 0a79 0000 0000 5353 4449 4c20 4e45     Key.....SSID LEN
  40cca8:	4920 564e 4c41 4449 000a 0000 4843 4920      INVALID....CH I
  40ccb8:	564e 4c41 4449 000a 6e49 6176 696c 2064     NVALID..Invalid 
  40ccc8:	6557 2070 656b 2079 6e69 6564 2078 6425     Wep key index %d
  40ccd8:	000a 0000 6e49 6176 696c 2064 6557 2070     ....Invalid Wep 
  40cce8:	656b 2079 656c 676e 6874 2520 0a64 0000     key length %d...
  40ccf8:	6e49 6f63 7272 6365 2074 5350 204b 656b     Incorrect PSK ke
  40cd08:	2079 656c 676e 6874 000a 0000 6e75 6564     y length....unde
  40cd18:	6966 656e 2064 6573 2063 7974 6570 000a     fined sec type..
  40cd28:	6946 6d72 6177 6572 7620 7265 2020 3a20     Firmware ver   :
  40cd38:	2520 2e75 7525 252e 0a75 0000 694d 206e      %u.%u.%u...Min 
  40cd48:	7264 7669 7265 7620 7265 3a20 2520 2e75     driver ver : %u.
  40cd58:	7525 252e 0a75 0000 7543 7272 6420 6972     %u.%u...Curr dri
  40cd68:	6576 2072 6576 3a72 2520 2e75 7525 252e     ver ver: %u.%u.%
  40cd78:	0a75 0000 694d 6d73 7461 6863 4620 7269     u...Mismatch Fir
  40cd88:	616d 7277 2065 6556 7372 6f69 0a6e 0000     mawre Version...

0040cd98 <__FUNCTION__.9711>:
  40cd98:	6d6e 635f 6b6c 656c 7373 775f 6b61 0065     nm_clkless_wake.

0040cda8 <__FUNCTION__.9805>:
  40cda8:	6863 7069 645f 6965 696e 0074 6166 6c69     chip_deinit.fail
  40cdb8:	6465 7420 206f 6564 692d 696e 6974 6c61     ed to de-initial
  40cdc8:	7a69 0a65 0000 0000 7245 6f72 2072 6877     ize.....Error wh
  40cdd8:	6c69 2065 7277 7469 6e69 2067 6572 0a67     ile writing reg.
  40cde8:	0000 0000 7245 6f72 2072 6877 6c69 2065     ....Error while 
  40cdf8:	6572 6461 6e69 2067 6572 0a67 0000 0000     reading reg.....
  40ce08:	7542 2073 7265 6f72 2072 3128 2e29 5720     Bus error (1). W
  40ce18:	6b61 2065 7075 6620 6961 656c 0a64 0000     ake up failed...
  40ce28:	7542 2073 7265 6f72 2072 3228 2e29 5720     Bus error (2). W
  40ce38:	6b61 2065 7075 6620 6961 656c 0a64 0000     ake up failed...
  40ce48:	6c63 636f 736b 7320 6974 6c6c 4f20 4646     clocks still OFF
  40ce58:	202e 6157 656b 7520 2070 6166 6c69 6465     . Wake up failed
  40ce68:	000a 0000 6572 3a67 7825 2f20 2520 2078     ....reg:%x / %x 
  40ce78:	000a 0000                                   ....

0040ce7c <__FUNCTION__.9792>:
  40ce7c:	6d6e 645f 7672 695f 696e 0074               nm_drv_init.

0040ce88 <__FUNCTION__.9799>:
  40ce88:	6d6e 645f 7672 645f 6965 696e 0074 0000     nm_drv_deinit...
  40ce98:	6e5b 696d 7320 6f74 5d70 203a 6863 7069     [nmi stop]: chip
  40cea8:	645f 6965 696e 2074 6166 6c69 000a 0000     _deinit fail....
  40ceb8:	6e5b 696d 7320 6f74 5d70 203a 5053 2049     [nmi stop]: SPI 
  40cec8:	6c66 7361 2068 6964 6173 6c62 2065 6166     flash disable fa
  40ced8:	6c69 000a 6e5b 696d 7320 6f74 5d70 203a     il..[nmi stop]: 
  40cee8:	6166 6c69 6920 696e 2074 7562 0a73 0000     fail init bus...
  40cef8:	6166 6c69 6465 7420 206f 6e65 6261 656c     failed to enable
  40cf08:	6920 746e 7265 7572 7470 2e73 0a2e 0000      interrupts.....
  40cf18:	6e5b 696d 7320 6174 7472 3a5d 6620 6961     [nmi start]: fai
  40cf28:	206c 6e69 7469 6220 7375 000a 6843 7069     l init bus..Chip
  40cf38:	4920 2044 6c25 0a78 0000 0000                ID %lx.....

0040cf44 <__FUNCTION__.9176>:
  40cf44:	7073 5f69 6d63 0064                         spi_cmd.

0040cf4c <__FUNCTION__.9184>:
  40cf4c:	7073 5f69 6d63 5f64 7372 0070               spi_cmd_rsp.

0040cf58 <__FUNCTION__.9200>:
  40cf58:	7073 5f69 6164 6174 725f 6165 0064 0000     spi_data_read...

0040cf68 <__FUNCTION__.9215>:
  40cf68:	7073 5f69 6164 6174 775f 6972 6574 0000     spi_data_write..

0040cf78 <__FUNCTION__.9225>:
  40cf78:	7073 5f69 7277 7469 5f65 6572 0067 0000     spi_write_reg...

0040cf88 <__FUNCTION__.9233>:
  40cf88:	6d6e 735f 6970 775f 6972 6574 0000 0000     nm_spi_write....

0040cf98 <__FUNCTION__.9242>:
  40cf98:	7073 5f69 6572 6461 725f 6765 0000 0000     spi_read_reg....

0040cfa8 <__FUNCTION__.9250>:
  40cfa8:	6d6e 735f 6970 725f 6165 0064               nm_spi_read.

0040cfb4 <__FUNCTION__.9267>:
  40cfb4:	6d6e 735f 6970 695f 696e 0074               nm_spi_init.

0040cfc0 <crc7_syndrome_table>:
  40cfc0:	0900 1b12 2d24 3f36 4148 535a 656c 777e     ....$-6?HAZSle~w
  40cfd0:	1019 020b 343d 262f 5851 4a43 7c75 6e67     ....=4/&QXCJu|gn
  40cfe0:	3b32 2920 1f16 0d04 737a 6168 575e 454c     2; )....zsha^WLE
  40cff0:	222b 3039 060f 141d 6a63 7871 4e47 5c55     +"90....cjqxGNU\
  40d000:	6d64 7f76 4940 5b52 252c 373e 0108 131a     dmv.@IR[,%>7....
  40d010:	747d 666f 5059 424b 3c35 2e27 1811 0a03     }tofYPKB5<'.....
  40d020:	5f56 4d44 7b72 6960 171e 050c 333a 2128     V_DMr{`i....:3(!
  40d030:	464f 545d 626b 7079 0e07 1c15 2a23 3831     OF]Tkbyp....#*18
  40d040:	4841 5a53 6c65 7e77 0009 121b 242d 363f     AHSZelw~....-$?6
  40d050:	5158 434a 757c 676e 1910 0b02 3d34 2f26     XQJC|ung....4=&/
  40d060:	7a73 6861 5e57 4c45 323b 2029 161f 040d     szahW^EL;2) ....
  40d070:	636a 7178 474e 555c 2b22 3930 0f06 1d14     jcxqNG\U"+09....
  40d080:	2c25 3e37 0801 1a13 646d 767f 4049 525b     %,7>....md.vI@[R
  40d090:	353c 272e 1118 030a 7d74 6f66 5950 4b42     <5.'....t}foPYBK
  40d0a0:	1e17 0c05 3a33 2821 565f 444d 727b 6069     ....3:!(_VMD{ri`
  40d0b0:	070e 151c 232a 3138 4f46 5d54 6b62 7970     ....*#81FOT]bkpy
  40d0c0:	6e5b 696d 7320 6970 3a5d 4620 6961 656c     [nmi spi]: Faile
  40d0d0:	2064 6e69 6574 6e72 6c61 7220 6165 2064     d internal read 
  40d0e0:	7270 746f 636f 6c6f 7720 7469 2068 5243     protocol with CR
  40d0f0:	2043 6e6f 202c 6572 7974 6972 676e 7720     C on, retyring w
  40d100:	7469 2068 5243 2043 666f 2e66 2e2e 000a     ith CRC off.....
  40d110:	6e5b 696d 7320 6970 3a5d 4620 6961 656c     [nmi spi]: Faile
  40d120:	2064 6e69 6574 6e72 6c61 7220 6165 2064     d internal read 
  40d130:	7270 746f 636f 6c6f 2e2e 0a2e 0000 0000     protocol........
  40d140:	6e5b 696d 7320 6970 3a5d 4620 6961 656c     [nmi spi]: Faile
  40d150:	2064 6e69 6574 6e72 6c61 7720 6972 6574     d internal write
  40d160:	7020 6f72 6f74 6f63 206c 6572 2e67 2e2e      protocol reg...
  40d170:	000a 0000 6e5b 696d 7320 6970 3a5d 4620     ....[nmi spi]: F
  40d180:	6961 206c 6d63 2064 6572 6461 6320 6968     ail cmd read chi
  40d190:	2070 6469 2e2e 0a2e 0000 0000 6e5b 696d     p id........[nmi
  40d1a0:	7320 6970 3a5d 4620 6961 656c 2064 6d63      spi]: Failed cm
  40d1b0:	2c64 7220 6165 2064 6c62 636f 206b 2528     d, read block (%
  40d1c0:	3830 2978 2e2e 0a2e 0000 0000 6e5b 696d     08x)........[nmi
  40d1d0:	7320 6970 3a5d 4620 6961 656c 2064 6d63      spi]: Failed cm
  40d1e0:	2064 6572 7073 6e6f 6573 202c 6572 6461     d response, read
  40d1f0:	6220 6f6c 6b63 2820 3025 7838 2e29 2e2e      block (%08x)...
  40d200:	000a 0000 6e5b 696d 7320 6970 3a5d 4620     ....[nmi spi]: F
  40d210:	6961 656c 2064 6c62 636f 206b 6164 6174     ailed block data
  40d220:	7220 6165 2e64 2e2e 000a 0000 6e5b 696d      read.......[nmi
  40d230:	7320 6970 3a5d 4620 6961 656c 2064 6d63      spi]: Failed cm
  40d240:	2c64 7720 6972 6574 6220 6f6c 6b63 2820     d, write block (
  40d250:	3025 7838 2e29 2e2e 000a 0000 6e5b 696d     %08x).......[nmi
  40d260:	7320 6970 5d20 203a 6146 6c69 6465 6320      spi ]: Failed c
  40d270:	646d 7220 7365 6f70 736e 2c65 7720 6972     md response, wri
  40d280:	6574 6220 6f6c 6b63 2820 3025 7838 2e29     te block (%08x).
  40d290:	2e2e 000a 6e5b 696d 7320 6970 3a5d 4620     ....[nmi spi]: F
  40d2a0:	6961 656c 2064 6164 6174 6220 6f6c 6b63     ailed data block
  40d2b0:	6320 646d 7720 6972 6574 202c 7562 2073      cmd write, bus 
  40d2c0:	7265 6f72 2e72 2e2e 000a 0000 6e5b 696d     error.......[nmi
  40d2d0:	7320 6970 3a5d 4620 6961 656c 2064 6164      spi]: Failed da
  40d2e0:	6174 6220 6f6c 6b63 7720 6972 6574 202c     ta block write, 
  40d2f0:	7562 2073 7265 6f72 2e72 2e2e 000a 0000     bus error.......
  40d300:	6e5b 696d 7320 6970 3a5d 4620 6961 656c     [nmi spi]: Faile
  40d310:	2064 6164 6174 6220 6f6c 6b63 6320 6372     d data block crc
  40d320:	7720 6972 6574 202c 7562 2073 7265 6f72      write, bus erro
  40d330:	2e72 2e2e 000a 0000 6e5b 696d 7320 6970     r.......[nmi spi
  40d340:	3a5d 4620 6961 656c 2064 6c62 636f 206b     ]: Failed block 
  40d350:	6164 6174 7720 6972 6574 2e2e 0a2e 0000     data write......
  40d360:	6e5b 696d 7320 6970 3a5d 4620 6961 656c     [nmi spi]: Faile
  40d370:	2064 6d63 2064 7277 7469 2c65 6220 7375     d cmd write, bus
  40d380:	6520 7272 726f 2e2e 0a2e 0000 6e5b 696d      error......[nmi
  40d390:	7320 6970 3a5d 4620 6961 656c 2064 6d63      spi]: Failed cm
  40d3a0:	2064 6572 7073 6e6f 6573 7220 6165 2c64     d response read,
  40d3b0:	6220 7375 6520 7272 726f 2e2e 0a2e 0000      bus error......
  40d3c0:	6e5b 696d 7320 6970 3a5d 4620 6961 656c     [nmi spi]: Faile
  40d3d0:	2064 6164 6174 7220 7365 6f70 736e 2065     d data response 
  40d3e0:	6572 6461 202c 7562 2073 7265 6f72 2e72     read, bus error.
  40d3f0:	2e2e 000a 6e5b 696d 7320 6970 3a5d 4620     ....[nmi spi]: F
  40d400:	6961 656c 2064 6164 6174 7220 7365 6f70     ailed data respo
  40d410:	736e 2065 6572 6461 2e2e 282e 3025 7832     nse read...(%02x
  40d420:	0a29 0000 6e5b 696d 7320 6970 3a5d 4620     )...[nmi spi]: F
  40d430:	6961 656c 2064 6164 6174 6220 6f6c 6b63     ailed data block
  40d440:	7220 6165 2c64 6220 7375 6520 7272 726f      read, bus error
  40d450:	2e2e 0a2e 0000 0000 6e5b 696d 7320 6970     ........[nmi spi
  40d460:	3a5d 4620 6961 656c 2064 6164 6174 6220     ]: Failed data b
  40d470:	6f6c 6b63 6320 6372 7220 6165 2c64 6220     lock crc read, b
  40d480:	7375 6520 7272 726f 2e2e 0a2e 0000 0000     us error........
  40d490:	6e5b 696d 7320 6970 3a5d 4620 6961 656c     [nmi spi]: Faile
  40d4a0:	2064 6d63 2c64 7220 6165 2064 6572 2067     d cmd, read reg 
  40d4b0:	2528 3830 2978 2e2e 0a2e 0000 6e5b 696d     (%08x)......[nmi
  40d4c0:	7320 6970 3a5d 4620 6961 656c 2064 6d63      spi]: Failed cm
  40d4d0:	2064 6572 7073 6e6f 6573 202c 6572 6461     d response, read
  40d4e0:	7220 6765 2820 3025 7838 2e29 2e2e 000a      reg (%08x).....
  40d4f0:	6e5b 696d 7320 6970 3a5d 4620 6961 656c     [nmi spi]: Faile
  40d500:	2064 6164 6174 7220 6165 2e64 2e2e 000a     d data read.....
  40d510:	6e5b 696d 7320 6970 3a5d 4620 6961 656c     [nmi spi]: Faile
  40d520:	2064 6d63 2c64 7720 6972 6574 7220 6765     d cmd, write reg
  40d530:	2820 3025 7838 2e29 2e2e 000a 6e5b 696d      (%08x).....[nmi
  40d540:	7320 6970 3a5d 4620 6961 656c 2064 6d63      spi]: Failed cm
  40d550:	2064 6572 7073 6e6f 6573 202c 7277 7469     d response, writ
  40d560:	2065 6572 2067 2528 3830 2978 2e2e 0a2e     e reg (%08x)....
  40d570:	0000 0000 4528 5252 2952 7543 7272 6e65     ....(ERRR)Curren
  40d580:	2074 253c 3e64 000a 2d2d 5720 4e49 3143     t <%d>..-- WINC1
  40d590:	3035 2030 6577 7461 6568 2072 6c63 6569     500 weather clie
  40d5a0:	746e 6520 6178 706d 656c 2d20 0d2d 2d0a     nt example --..-
  40d5b0:	202d 4153 454d 3037 582d 4c50 2044 2d2d     - SAME70-XPLD --
  40d5c0:	0a0d 2d2d 4320 6d6f 6970 656c 3a64 4a20     ..-- Compiled: J
  40d5d0:	6e75 2020 2036 3032 3931 3120 3a34 3232     un  6 2019 14:22
  40d5e0:	313a 2033 2d2d 0a0d 0000 0000 6957 6966     :13 --......Wifi
  40d5f0:	0000 0000 6146 6c69 6465 7420 206f 7263     ....Failed to cr
  40d600:	6165 6574 5720 6669 2069 6174 6b73 0a0d     eate Wifi task..
  40d610:	0000 0000 6473 0000 2020 2520 0073 0000     ....sd..   %s...
  40d620:	6554 7473 6920 2073 7573 6363 7365 6673     Test is successf
  40d630:	6c75 0a2e 0000 0000 6572 6f73 766c 5f65     ul......resolve_
  40d640:	6263 203a 7325 4920 2050 6461 7264 7365     cb: %s IP addres
  40d650:	2073 7369 2520 2e64 6425 252e 2e64 6425     s is %d.%d.%d.%d
  40d660:	0a0d 0a0d 0000 0000 6f73 6b63 7465 6d5f     ........socket_m
  40d670:	6773 635f 6e6f 656e 7463 000a 4547 2054     sg_connect..GET 
  40d680:	202f 5448 5054 312f 312e 0a0d 4120 6363     / HTTP/1.1.. Acc
  40d690:	7065 3a74 2a20 2a2f 0a0d 0a0d 0000 0000     ept: */*........
  40d6a0:	6573 646e 0a20 0000 6f73 6b63 7465 635f     send ...socket_c
  40d6b0:	3a62 6320 6e6f 656e 7463 6520 7272 726f     b: connect error
  40d6c0:	0d21 000a 6f73 6b63 7465 635f 3a62 7220     !...socket_cb: r
  40d6d0:	6365 2076 7265 6f72 2172 0a0d 0000 0000     ecv error!......
  40d6e0:	0a0c 2d0d 202d 4453 4d2f 434d 532f 4944     ...-- SD/MMC/SDI
  40d6f0:	204f 6143 6472 4520 6178 706d 656c 6f20     O Card Example o
  40d700:	206e 6146 4674 2073 2d2d 0d0a 0000 0000     n FatFs --......
  40d710:	3431 323a 3a32 3331 0000 0000 754a 206e     14:22:13....Jun 
  40d720:	3620 3220 3130 0039 2d2d 4320 6d6f 6970      6 2019.-- Compi
  40d730:	656c 3a64 2520 2073 7325 2d20 0a2d 000d     led: %s %s --...
  40d740:	2d2d 2d2d 2d2d 2d2d 2d2d 2d2d 2d2d 2d2d     ----------------
  40d750:	2d2d 2d2d 2d2d 2d2d 2d2d 2d2d 2d2d 2d2d     ----------------
  40d760:	2d2d 202d 000a 0000 5257 5449 2045 000a     --- ....WRITE ..
  40d770:	4552 4441 0a20 0000 616d 6e69 203a 326d     READ ...main: m2
  40d780:	5f6d 6977 6966 695f 696e 2074 6163 6c6c     m_wifi_init call
  40d790:	6520 7272 726f 2821 6425 0d29 000a 0000      error!(%d).....
  40d7a0:	6152 6166 0000 0000 616d 6e69 203a 6f63     Rafa....main: co
  40d7b0:	6e6e 6365 6974 676e 7420 206f 6957 6946     nnecting to WiFi
  40d7c0:	4120 2050 7325 2e2e 0d2e 000a 6c65 7369      AP %s......elis
  40d7d0:	6561 6f74 616d 0073 3931 2e32 3631 2e38     aetomas.192.168.
  40d7e0:	3035 362e 0033 0000 6e49 7465 6120 6f74     50.63...Inet ato
  40d7f0:	206e 203a 6425 0000 6f73 6b63 7465 6920     n : %d..socket i
  40d800:	696e 2074 000a 0000 616d 6e69 203a 6166     nit ....main: fa
  40d810:	6c69 6465 7420 206f 7263 6165 6574 5420     iled to create T
  40d820:	5043 6320 696c 6e65 2074 6f73 6b63 7465     CP client socket
  40d830:	6520 7272 726f 0d21 000a 0000 6f73 6b63      error!.....sock
  40d840:	7465 6320 6e6f 656e 7463 6e69 0a67 0000     et connecting...
  40d850:	7265 6f72 0a72 0000 7473 6361 206b 766f     error...stack ov
  40d860:	7265 6c66 776f 2520 2078 7325 0a0d 0000     erflow %x %s....
  40d870:	6977 6966 635f 3a62 4d20 4d32 575f 4649     wifi_cb: M2M_WIF
  40d880:	5f49 4f43 4e4e 4345 4554 0d44 000a 0000     I_CONNECTED.....
  40d890:	6977 6966 635f 3a62 4d20 4d32 575f 4649     wifi_cb: M2M_WIF
  40d8a0:	5f49 4944 4353 4e4f 454e 5443 4445 0a0d     I_DISCONNECTED..
  40d8b0:	0000 0000 6977 6966 635f 3a62 4920 2050     ....wifi_cb: IP 
  40d8c0:	6461 7264 7365 2073 7369 2520 2e75 7525     address is %u.%u
  40d8d0:	252e 2e75 7525 0a0d 0000 0000 6c50 6165     .%u.%u......Plea
  40d8e0:	6573 7020 756c 2067 6e61 5320 2c44 4d20     se plug an SD, M
  40d8f0:	434d 6f20 2072 4453 4f49 6320 7261 2064     MC or SDIO card 
  40d900:	6e69 7320 6f6c 2e74 0d0a 0000 6143 6472     in slot.....Card
  40d910:	6920 736e 6174 6c6c 4620 4941 0a4c 000d      install FAIL...
  40d920:	6c50 6165 6573 7520 706e 756c 2067 6e61     Please unplug an
  40d930:	2064 6572 702d 756c 2067 6874 2065 6163     d re-plug the ca
  40d940:	6472 0a2e 000d 0000 6f4d 6e75 2074 6964     rd......Mount di
  40d950:	6b73 2820 5f66 6f6d 6e75 2974 2e2e 0d2e     sk (f_mount)....
  40d960:	000a 0000 465b 4941 5d4c 7220 7365 2520     ....[FAIL] res %
  40d970:	0d64 000a 4c4f 2041 0a0d 2020 494f 0d20     d...OLA ..  OI .
  40d980:	000a 0000 7277 7469 2065 7369 7320 6375     ....write is suc
  40d990:	6563 7373 7566 2e6c 0d0a 0000 6c50 6165     cessful.....Plea
  40d9a0:	6573 7520 706e 756c 2067 6874 2065 6163     se unplug the ca
  40d9b0:	6472 0a2e 000d 0000 3a30 6f63 666e 6769     rd......0:config
  40d9c0:	742e 7478 0000 0000                         .txt....

0040d9c8 <_global_impure_ptr>:
  40d9c8:	0050 2040 3130 3332 3534 3736 3938 4241     P.@ 0123456789AB
  40d9d8:	4443 4645 0000 0000 3130 3332 3534 3736     CDEF....01234567
  40d9e8:	3938 6261 6463 6665 0000 0000 6e28 6c75     89abcdef....(nul
  40d9f8:	296c 0000                                   l)..

0040d9fc <blanks.7217>:
  40d9fc:	2020 2020 2020 2020 2020 2020 2020 2020                     

0040da0c <zeroes.7218>:
  40da0c:	3030 3030 3030 3030 3030 3030 3030 3030     0000000000000000
  40da1c:	0043 0000 4f50 4953 0058 0000 002e 0000     C...POSIX.......

0040da2c <_ctype_>:
  40da2c:	2000 2020 2020 2020 2020 2828 2828 2028     .         ((((( 
  40da3c:	2020 2020 2020 2020 2020 2020 2020 2020                     
  40da4c:	8820 1010 1010 1010 1010 1010 1010 1010      ...............
  40da5c:	0410 0404 0404 0404 0404 1004 1010 1010     ................
  40da6c:	1010 4141 4141 4141 0101 0101 0101 0101     ..AAAAAA........
  40da7c:	0101 0101 0101 0101 0101 0101 1010 1010     ................
  40da8c:	1010 4242 4242 4242 0202 0202 0202 0202     ..BBBBBB........
  40da9c:	0202 0202 0202 0202 0202 0202 1010 1010     ................
  40daac:	0020 0000 0000 0000 0000 0000 0000 0000      ...............
	...

0040db30 <_init>:
  40db30:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  40db32:	bf00      	nop
  40db34:	bcf8      	pop	{r3, r4, r5, r6, r7}
  40db36:	bc08      	pop	{r3}
  40db38:	469e      	mov	lr, r3
  40db3a:	4770      	bx	lr

0040db3c <__init_array_start>:
  40db3c:	0040a6f9 	.word	0x0040a6f9

0040db40 <__frame_dummy_init_array_entry>:
  40db40:	00400165                                e.@.

0040db44 <_fini>:
  40db44:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  40db46:	bf00      	nop
  40db48:	bcf8      	pop	{r3, r4, r5, r6, r7}
  40db4a:	bc08      	pop	{r3}
  40db4c:	469e      	mov	lr, r3
  40db4e:	4770      	bx	lr

0040db50 <__fini_array_start>:
  40db50:	00400141 	.word	0x00400141

Disassembly of section .relocate:

20400000 <portable_delay_cycles>:
RAMFUNC
void portable_delay_cycles(unsigned long n)
{
	UNUSED(n);

	__asm (
20400000:	f3bf 8f5f 	dmb	sy
20400004:	3801      	subs	r0, #1
20400006:	d1fb      	bne.n	20400000 <portable_delay_cycles>
20400008:	4770      	bx	lr
	...

2040000c <sd_mmc_cards>:
	...
20400014:	0050 0000 0000 0000 0000 0000 0000 0000     P...............
	...

20400030 <uxCriticalNesting>:
20400030:	aaaa aaaa                                   ....

20400034 <egstrNmBusCapabilities>:
20400034:	1000 0000                                   ....

20400038 <clk_status_reg_adr>:
20400038:	000f 0000                                   ....

2040003c <g_interrupt_enabled>:
2040003c:	0001 0000                                   ....

20400040 <SystemCoreClock>:
20400040:	0900 003d                                   ..=.

20400044 <tcp_client_socket>:
20400044:	00ff 0000                                   ....

20400048 <_impure_ptr>:
20400048:	0050 2040 0000 0000                         P.@ ....

20400050 <impure_data>:
20400050:	0000 0000 033c 2040 03a4 2040 040c 2040     ....<.@ ..@ ..@ 
	...
204000f8:	0001 0000 0000 0000 330e abcd 1234 e66d     .........3..4.m.
20400108:	deec 0005 000b 0000 0000 0000 0000 0000     ................
	...

20400478 <__atexit_recursive_mutex>:
20400478:	cb04 2040                                   ..@ 

2040047c <__global_locale>:
2040047c:	0043 0000 0000 0000 0000 0000 0000 0000     C...............
	...
2040049c:	0043 0000 0000 0000 0000 0000 0000 0000     C...............
	...
204004bc:	0043 0000 0000 0000 0000 0000 0000 0000     C...............
	...
204004dc:	0043 0000 0000 0000 0000 0000 0000 0000     C...............
	...
204004fc:	0043 0000 0000 0000 0000 0000 0000 0000     C...............
	...
2040051c:	0043 0000 0000 0000 0000 0000 0000 0000     C...............
	...
2040053c:	0043 0000 0000 0000 0000 0000 0000 0000     C...............
	...
2040055c:	bd9d 0040 b6f1 0040 0000 0000 da2c 0040     ..@...@.....,.@.
2040056c:	da28 0040 d69c 0040 d69c 0040 d69c 0040     (.@...@...@...@.
2040057c:	d69c 0040 d69c 0040 d69c 0040 d69c 0040     ..@...@...@...@.
2040058c:	d69c 0040 d69c 0040 ffff ffff ffff ffff     ..@...@.........
2040059c:	ffff ffff ffff 0000 0001 5341 4943 0049     ..........ASCII.
	...
204005c4:	0000 5341 4943 0049 0000 0000 0000 0000     ..ASCII.........
	...

204005e8 <__malloc_av_>:
	...
204005f0:	05e8 2040 05e8 2040 05f0 2040 05f0 2040     ..@ ..@ ..@ ..@ 
20400600:	05f8 2040 05f8 2040 0600 2040 0600 2040     ..@ ..@ ..@ ..@ 
20400610:	0608 2040 0608 2040 0610 2040 0610 2040     ..@ ..@ ..@ ..@ 
20400620:	0618 2040 0618 2040 0620 2040 0620 2040     ..@ ..@  .@  .@ 
20400630:	0628 2040 0628 2040 0630 2040 0630 2040     (.@ (.@ 0.@ 0.@ 
20400640:	0638 2040 0638 2040 0640 2040 0640 2040     8.@ 8.@ @.@ @.@ 
20400650:	0648 2040 0648 2040 0650 2040 0650 2040     H.@ H.@ P.@ P.@ 
20400660:	0658 2040 0658 2040 0660 2040 0660 2040     X.@ X.@ `.@ `.@ 
20400670:	0668 2040 0668 2040 0670 2040 0670 2040     h.@ h.@ p.@ p.@ 
20400680:	0678 2040 0678 2040 0680 2040 0680 2040     x.@ x.@ ..@ ..@ 
20400690:	0688 2040 0688 2040 0690 2040 0690 2040     ..@ ..@ ..@ ..@ 
204006a0:	0698 2040 0698 2040 06a0 2040 06a0 2040     ..@ ..@ ..@ ..@ 
204006b0:	06a8 2040 06a8 2040 06b0 2040 06b0 2040     ..@ ..@ ..@ ..@ 
204006c0:	06b8 2040 06b8 2040 06c0 2040 06c0 2040     ..@ ..@ ..@ ..@ 
204006d0:	06c8 2040 06c8 2040 06d0 2040 06d0 2040     ..@ ..@ ..@ ..@ 
204006e0:	06d8 2040 06d8 2040 06e0 2040 06e0 2040     ..@ ..@ ..@ ..@ 
204006f0:	06e8 2040 06e8 2040 06f0 2040 06f0 2040     ..@ ..@ ..@ ..@ 
20400700:	06f8 2040 06f8 2040 0700 2040 0700 2040     ..@ ..@ ..@ ..@ 
20400710:	0708 2040 0708 2040 0710 2040 0710 2040     ..@ ..@ ..@ ..@ 
20400720:	0718 2040 0718 2040 0720 2040 0720 2040     ..@ ..@  .@  .@ 
20400730:	0728 2040 0728 2040 0730 2040 0730 2040     (.@ (.@ 0.@ 0.@ 
20400740:	0738 2040 0738 2040 0740 2040 0740 2040     8.@ 8.@ @.@ @.@ 
20400750:	0748 2040 0748 2040 0750 2040 0750 2040     H.@ H.@ P.@ P.@ 
20400760:	0758 2040 0758 2040 0760 2040 0760 2040     X.@ X.@ `.@ `.@ 
20400770:	0768 2040 0768 2040 0770 2040 0770 2040     h.@ h.@ p.@ p.@ 
20400780:	0778 2040 0778 2040 0780 2040 0780 2040     x.@ x.@ ..@ ..@ 
20400790:	0788 2040 0788 2040 0790 2040 0790 2040     ..@ ..@ ..@ ..@ 
204007a0:	0798 2040 0798 2040 07a0 2040 07a0 2040     ..@ ..@ ..@ ..@ 
204007b0:	07a8 2040 07a8 2040 07b0 2040 07b0 2040     ..@ ..@ ..@ ..@ 
204007c0:	07b8 2040 07b8 2040 07c0 2040 07c0 2040     ..@ ..@ ..@ ..@ 
204007d0:	07c8 2040 07c8 2040 07d0 2040 07d0 2040     ..@ ..@ ..@ ..@ 
204007e0:	07d8 2040 07d8 2040 07e0 2040 07e0 2040     ..@ ..@ ..@ ..@ 
204007f0:	07e8 2040 07e8 2040 07f0 2040 07f0 2040     ..@ ..@ ..@ ..@ 
20400800:	07f8 2040 07f8 2040 0800 2040 0800 2040     ..@ ..@ ..@ ..@ 
20400810:	0808 2040 0808 2040 0810 2040 0810 2040     ..@ ..@ ..@ ..@ 
20400820:	0818 2040 0818 2040 0820 2040 0820 2040     ..@ ..@  .@  .@ 
20400830:	0828 2040 0828 2040 0830 2040 0830 2040     (.@ (.@ 0.@ 0.@ 
20400840:	0838 2040 0838 2040 0840 2040 0840 2040     8.@ 8.@ @.@ @.@ 
20400850:	0848 2040 0848 2040 0850 2040 0850 2040     H.@ H.@ P.@ P.@ 
20400860:	0858 2040 0858 2040 0860 2040 0860 2040     X.@ X.@ `.@ `.@ 
20400870:	0868 2040 0868 2040 0870 2040 0870 2040     h.@ h.@ p.@ p.@ 
20400880:	0878 2040 0878 2040 0880 2040 0880 2040     x.@ x.@ ..@ ..@ 
20400890:	0888 2040 0888 2040 0890 2040 0890 2040     ..@ ..@ ..@ ..@ 
204008a0:	0898 2040 0898 2040 08a0 2040 08a0 2040     ..@ ..@ ..@ ..@ 
204008b0:	08a8 2040 08a8 2040 08b0 2040 08b0 2040     ..@ ..@ ..@ ..@ 
204008c0:	08b8 2040 08b8 2040 08c0 2040 08c0 2040     ..@ ..@ ..@ ..@ 
204008d0:	08c8 2040 08c8 2040 08d0 2040 08d0 2040     ..@ ..@ ..@ ..@ 
204008e0:	08d8 2040 08d8 2040 08e0 2040 08e0 2040     ..@ ..@ ..@ ..@ 
204008f0:	08e8 2040 08e8 2040 08f0 2040 08f0 2040     ..@ ..@ ..@ ..@ 
20400900:	08f8 2040 08f8 2040 0900 2040 0900 2040     ..@ ..@ ..@ ..@ 
20400910:	0908 2040 0908 2040 0910 2040 0910 2040     ..@ ..@ ..@ ..@ 
20400920:	0918 2040 0918 2040 0920 2040 0920 2040     ..@ ..@  .@  .@ 
20400930:	0928 2040 0928 2040 0930 2040 0930 2040     (.@ (.@ 0.@ 0.@ 
20400940:	0938 2040 0938 2040 0940 2040 0940 2040     8.@ 8.@ @.@ @.@ 
20400950:	0948 2040 0948 2040 0950 2040 0950 2040     H.@ H.@ P.@ P.@ 
20400960:	0958 2040 0958 2040 0960 2040 0960 2040     X.@ X.@ `.@ `.@ 
20400970:	0968 2040 0968 2040 0970 2040 0970 2040     h.@ h.@ p.@ p.@ 
20400980:	0978 2040 0978 2040 0980 2040 0980 2040     x.@ x.@ ..@ ..@ 
20400990:	0988 2040 0988 2040 0990 2040 0990 2040     ..@ ..@ ..@ ..@ 
204009a0:	0998 2040 0998 2040 09a0 2040 09a0 2040     ..@ ..@ ..@ ..@ 
204009b0:	09a8 2040 09a8 2040 09b0 2040 09b0 2040     ..@ ..@ ..@ ..@ 
204009c0:	09b8 2040 09b8 2040 09c0 2040 09c0 2040     ..@ ..@ ..@ ..@ 
204009d0:	09c8 2040 09c8 2040 09d0 2040 09d0 2040     ..@ ..@ ..@ ..@ 
204009e0:	09d8 2040 09d8 2040 09e0 2040 09e0 2040     ..@ ..@ ..@ ..@ 

204009f0 <__malloc_sbrk_base>:
204009f0:	ffff ffff                                   ....

204009f4 <__malloc_trim_threshold>:
204009f4:	0000 0002                                   ....
